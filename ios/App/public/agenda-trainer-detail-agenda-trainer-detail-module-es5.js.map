{"version":3,"sources":["webpack:///src/app/pages/agenda-trainer/agenda-trainer-detail/agenda-trainer-detail-routing.module.ts","webpack:///src/app/pages/agenda-trainer/agenda-trainer-detail/agenda-trainer-detail.page.ts","webpack:///src/app/pages/agenda-trainer/agenda-trainer-detail/agenda-trainer-detail.page.html","webpack:///src/app/pages/agenda-trainer/agenda-trainer-detail/agenda-trainer-detail.module.ts"],"names":["routes","path","component","AgendaTrainerDetailPageRoutingModule","forChild","selectedPianificazione","AgendaTrainerDetailPage","activatedRoute","navController","startService","toastController","loadingController","alertController","listPresenze","listPresenzeConfermate","listPresenzeInProva","TipoSocieta","showTabs","selectedSegment","tipoSocieta","actualStartConfig","gruppo","TIPOGRUPPO","isDesktop","gapAggiornamentoPresenze","areaSelectedValue","APPGAPOREPRESENZE","paramMap","subscribe","params","idPianificazione","getPianificazioneTrainerById","navigateRoot","idCorso","IDCORSO","insertPresenzeIntoPianificazione","then","CORSOPRESENZE","dividiIscrizioni","elem","PRESENTE","undefined","tuttiPresenti","tuttiAssenti","isModified","create","message","spinner","backdropDismiss","elLoading","present","requestUpdatePresenze","response","dismiss","result","showMessage","goBack","console","log","error","presenza","today","Date","color","DATACERTIFICATOMEDICO","scadenza","add","filter","element","STATOISCRIZIONE","confermata","inProva","messaggio","duration","elToast","header","buttons","text","handler","role","elAlert","pop","event","detail","currentY","presente","forEach","setAll","onGoBack","onScroll","onSubmit","AgendaTrainerDetailPageModule"],"mappings":"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","file":"agenda-trainer-detail-agenda-trainer-detail-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AgendaTrainerDetailPage } from './agenda-trainer-detail.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AgendaTrainerDetailPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AgendaTrainerDetailPageRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AlertController, LoadingController, NavController, ToastController } from '@ionic/angular';\r\nimport * as moment from 'moment';\r\nimport { Corso } from 'src/app/models/corso.model';\r\nimport { CorsoPresenze } from 'src/app/models/corsopresenze.model';\r\nimport { PianificazioneCorso } from 'src/app/models/pianificazionecorso.model';\r\nimport { StatoIscrizione, TipoSocieta } from 'src/app/models/valuelist.model';\r\nimport { StartService } from 'src/app/services/start.service';\r\n\r\n@Component({\r\n  selector: 'app-agenda-trainer-detail',\r\n  templateUrl: './agenda-trainer-detail.page.html',\r\n  styleUrls: ['./agenda-trainer-detail.page.scss'],\r\n})\r\nexport class AgendaTrainerDetailPage implements OnInit {\r\n\r\n  listPresenze : CorsoPresenze[] = [];\r\n  listPresenzeConfermate: CorsoPresenze[] = [];\r\n  listPresenzeInProva: CorsoPresenze[] = [];\r\n\r\n  selectedPianificazione: PianificazioneCorso = new PianificazioneCorso();\r\n  selectedCorso: Corso;\r\n\r\n  gapAggiornamentoPresenze: number;\r\n\r\n  idPianificazione: string;\r\n  idCorso: string;\r\n\r\n  //il tipo di società sportiva\r\n  tipoSocieta: TipoSocieta;\r\n\r\n\r\n\r\n  TipoSocieta: typeof TipoSocieta = TipoSocieta;\r\n\r\n  isDesktop: boolean;\r\n\r\n  showTabs = true;\r\n\r\n  selectedSegment= null;\r\n  \r\n\r\n  \r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private navController: NavController,\r\n    private startService: StartService,\r\n    private toastController: ToastController,\r\n    private loadingController: LoadingController,\r\n    private alertController: AlertController\r\n  ) \r\n    {\r\n      //recupero il tipo di società\r\n      this.tipoSocieta = this.startService.actualStartConfig.gruppo.TIPOGRUPPO;\r\n\r\n      //capisco se sono su desktop\r\n      this.isDesktop = startService.isDesktop;\r\n\r\n      this.gapAggiornamentoPresenze = startService.areaSelectedValue.APPGAPOREPRESENZE;\r\n      \r\n    }\r\n\r\n  ngOnInit() {\r\n\r\n    //recupero l'id del corso\r\n    this.activatedRoute.paramMap.subscribe(params => {\r\n\r\n      //recupero id della pianificazione\r\n      this.idPianificazione = params['params']['pianificazioneCorsoId'];\r\n      \r\n\r\n      if(this.startService.getPianificazioneTrainerById(this.idPianificazione)){\r\n        \r\n        //se c'è la pianificazione, la recupero tramite l'id\r\n        this.selectedPianificazione =this.startService.getPianificazioneTrainerById(this.idPianificazione);\r\n      }\r\n      else{\r\n\r\n        this.navController.navigateRoot('/home');\r\n      }\r\n\r\n      //Posso andare avanti\r\n\r\n      //recupero l'id del corso\r\n      this.idCorso = this.selectedPianificazione.IDCORSO;\r\n\r\n      //richiedo la lista degli allievi (inserendola nel documento pianificazione) \r\n      this.startService.insertPresenzeIntoPianificazione(this.selectedPianificazione)\r\n      .then(() => {\r\n\r\n\r\n        //ora ho il documento pianificazione con anche le presenze, posso metterle anche in \"listpresenze\"\r\n        this.listPresenze  = this.selectedPianificazione.CORSOPRESENZE;\r\n        this.dividiIscrizioni();\r\n        \r\n      })\r\n    })\r\n  }\r\n\r\n  onClickElement(elem: CorsoPresenze){\r\n    if (elem.PRESENTE == null || elem.PRESENTE == undefined){\r\n      elem.PRESENTE = true;\r\n    }\r\n    else{\r\n      elem.PRESENTE = !elem.PRESENTE;\r\n    }\r\n\r\n    if (this.tuttiPresenti){\r\n      this.selectedSegment = 'presente';\r\n    }\r\n    else if (this.tuttiAssenti){\r\n      this.selectedSegment = 'assente';\r\n    }\r\n    else{\r\n\r\n      this.selectedSegment = null;\r\n    }\r\n\r\n  }\r\n\r\n  onSubmit(){\r\n\r\n    if(this.selectedPianificazione.isModified(2)){\r\n      \r\n      this.loadingController.create({\r\n        message: 'Caricamento',\r\n        spinner: 'circular',\r\n        backdropDismiss: true\r\n      })\r\n      .then(elLoading => {\r\n  \r\n        elLoading.present();\r\n        this.startService.requestUpdatePresenze(this.selectedPianificazione)\r\n        .then(response => {\r\n  \r\n          elLoading.dismiss();\r\n          if (response.result){\r\n            //è andato tutto bene\r\n            this.showMessage('Presenze aggiornate')\r\n            this.goBack();\r\n\r\n          }\r\n  \r\n          else{\r\n  \r\n            //errore dal server\r\n            console.log(response);\r\n            this.showMessage(response.message);\r\n  \r\n          }\r\n          \r\n        })\r\n        .catch((error) => {\r\n  \r\n          elLoading.dismiss();\r\n          console.log(error)\r\n          this.showMessage('Errore di connessione');\r\n        })\r\n      })\r\n      \r\n    }\r\n    \r\n    else{\r\n      this.goBack();\r\n\r\n    }\r\n\r\n  }\r\n\r\n    getColoreCertificato(presenza: CorsoPresenze): string{\r\n    let today =moment(new Date())\r\n    let color: string;\r\n    if (presenza.DATACERTIFICATOMEDICO){\r\n      \r\n      let scadenza = moment(presenza.DATACERTIFICATOMEDICO);\r\n      if (scadenza < today){\r\n        color = 'danger';\r\n      }\r\n      else if (scadenza < today.add(7, 'days')) {\r\n        color = 'warning';\r\n      }\r\n      else{\r\n        color = 'primary';\r\n      }\r\n    }\r\n    else{\r\n      color = 'danger';\r\n    }\r\n    return color;\r\n  }\r\n\r\n  //separa le iscrizioni in due liste (confermate e in prova)\r\n  dividiIscrizioni(){\r\n    this.listPresenzeConfermate = this.listPresenze.filter(element => {\r\n      return element.STATOISCRIZIONE == StatoIscrizione.confermata;\r\n    });\r\n\r\n    this.listPresenzeInProva = this.listPresenze.filter(element => {\r\n      return element.STATOISCRIZIONE == StatoIscrizione.inProva;\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Visualizza un messaggio\r\n   */\r\n  showMessage(messaggio: string){\r\n    this.toastController.create({\r\n      message: messaggio,\r\n      duration: 3000\r\n    })\r\n    .then(elToast => {\r\n      elToast.present();\r\n    })\r\n  }\r\n\r\n\r\n  onGoBack(){\r\n\r\n    if (this.selectedPianificazione.isModified(2)){\r\n      this.alertController.create({\r\n        header: 'Vuoi davvero uscire?',\r\n        message: 'Se esci senza confermare, le presenze non verranno salvate',\r\n        buttons: [\r\n          {\r\n            text: 'Esci',\r\n            handler: () => {this.goBack()}\r\n          },\r\n          {\r\n            text: 'Rimani',\r\n            role: 'cancel'\r\n          }\r\n        ]\r\n      })\r\n      .then(elAlert => {\r\n        elAlert.present();\r\n      })\r\n    }\r\n    else{\r\n      this.goBack();\r\n    }\r\n  }\r\n\r\n  goBack(){\r\n    this.navController.pop()\r\n    .catch(() => {\r\n      this.navController.navigateRoot('/home');\r\n    })\r\n  }\r\n\r\n  onScroll(event:any){\r\n    if(event.detail.currentY < 5){\r\n      this.showTabs = true;\r\n    }\r\n    else{\r\n      if (event['detail']['deltaY'] > 20){\r\n        this.showTabs = false;\r\n      }\r\n      else if (event['detail']['deltaY'] < -20){\r\n        this.showTabs = true;\r\n      }\r\n    }  \r\n  }\r\n\r\n  setAll(presente: boolean){\r\n    this.listPresenze.forEach(elem => {\r\n      elem.PRESENTE = presente;\r\n    })\r\n  }\r\n\r\n  onChangeSegment(event: any){\r\n    \r\n\r\n\r\n    if(event['detail']['value'] == 'presente'){\r\n      this.setAll(true);\r\n    }\r\n    else if (event['detail']['value'] == 'assente'){\r\n      this.setAll(false);\r\n    }\r\n    \r\n  }\r\n\r\n  get tuttiPresenti(): boolean{\r\n    let tuttiPresenti: boolean = true;\r\n    this.listPresenze.forEach(elem => {\r\n      if (!elem.PRESENTE){\r\n        tuttiPresenti = false;\r\n      }\r\n    })\r\n    return tuttiPresenti;\r\n  }\r\n\r\n\r\n  get tuttiAssenti(): boolean{\r\n    let tuttiAssenti: boolean = true;\r\n    this.listPresenze.forEach(elem => {\r\n      if (elem.PRESENTE){\r\n        tuttiAssenti = false;\r\n      }\r\n    })\r\n    return tuttiAssenti;\r\n  }\r\n\r\n\r\n}\r\n","<ion-header>\r\n  <ion-toolbar color=\"primary\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-button (click)=\"onGoBack()\" fill=\"clear\" >\r\n        <ion-icon name=\"arrow-back\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-title>Presenze</ion-title>\r\n  </ion-toolbar>\r\n  <ion-toolbar *ngIf=\"showTabs\" mode=\"md\">\r\n    <ion-segment [disabled]=\"!selectedPianificazione.canUpdatePresenze(gapAggiornamentoPresenze)\" id=\"segment\" [(ngModel)]=\"selectedSegment\" (ionChange)=\"onChangeSegment($event)\" color=\"primary\"  >\r\n      <ion-segment-button value=\"presente\" fill=\"outline\" layout=\"icon-start\">\r\n        <ion-icon color=\"primary\" name=\"thumbs-up\"></ion-icon>\r\n        <ion-label>Tutti presenti</ion-label>\r\n      </ion-segment-button >\r\n      <ion-segment-button value=\"assente\" layout=\"icon-start\">\r\n        <ion-icon color=\"primary\" name=\"thumbs-down\"></ion-icon>\r\n        <ion-label>Tutti assenti</ion-label>\r\n      </ion-segment-button>\r\n    </ion-segment>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content scrolleEvents (ionScroll)=\"onScroll($event)\">\r\n  <div style=\"height: 1vh\" ></div>\r\n  <div class=\"ion-no-padding div-header\">\r\n    <ion-item lines=\"none\" color=\"light\">\r\n      <ion-icon slot=\"start\" name=\"school-outline\" color=\"primary\">\r\n      </ion-icon>\r\n      <ion-label class=\"ion-text-wrap\">\r\n        <h2>{{selectedPianificazione.DATAORAINIZIO | date: 'EEEE dd/MM/yyyy '}}</h2>\r\n        <h2>{{selectedPianificazione.DATAORAINIZIO | date: 'H.mm'}} - {{selectedPianificazione.DATAORAFINE | date: 'H.mm'}}</h2>\r\n        <h1>{{selectedPianificazione['_DENOMINAZIONE_Corso']}}</h1>\r\n        <p>{{(selectedPianificazione['_DENOMINAZIONE_Location'] | titlecase) + ' - ' + (selectedPianificazione['_DENOMINAZIONE_Campo'] | titlecase)}}</p>\r\n      </ion-label>\r\n    </ion-item>\r\n\r\n  </div>\r\n\r\n  <div class=\"ion-padding-horizontal info\">\r\n    \r\n    <p>\r\n      <ion-icon name=\"information-circle-outline\" color=\"primary\"></ion-icon> \r\n      {{selectedPianificazione.msgCanUpdatePresenze(gapAggiornamentoPresenze)}}\r\n    </p>\r\n\r\n  </div>\r\n\r\n\r\n  <ion-list>\r\n  <!-- Iscritti confermati -->\r\n    <ion-item-group *ngIf=\"listPresenzeConfermate.length > 0\">\r\n      <ion-item-divider color=\"light\">\r\n          <ion-label>\r\n            Partecipanti\r\n          </ion-label>\r\n      </ion-item-divider>\r\n      <ion-item\r\n        *ngFor=\"let presenza of listPresenzeConfermate\" \r\n        [button]=\"selectedPianificazione.canUpdatePresenze(gapAggiornamentoPresenze)\" \r\n        (click)=\"selectedPianificazione.canUpdatePresenze(gapAggiornamentoPresenze)? onClickElement(presenza) : {}\"\r\n      >\r\n        <ion-icon *ngIf=\"presenza.PRESENTE==true\" slot=\"start\" name=\"thumbs-up-outline\" color=\"primary\"></ion-icon>\r\n        <ion-icon *ngIf=\"presenza.PRESENTE==false\" slot=\"start\" name=\"thumbs-down-outline\" color=\"danger\"></ion-icon>\r\n        <ion-icon *ngIf=\"presenza.PRESENTE != true && presenza.PRESENTE != false\" slot=\"start\" color=\"\" name=\"person-circle-outline\"></ion-icon>\r\n        <ion-label>\r\n          <h2>{{presenza.NOMINATIVO}}</h2>\r\n          <h4 *ngIf=\"this.tipoSocieta == TipoSocieta.sportiva\">\r\n            Certificato medico: \r\n            <ion-badge [color]=\"getColoreCertificato(presenza)\" class=\"custom-badge\"> \r\n              {{presenza.DATACERTIFICATOMEDICO? (presenza.DATACERTIFICATOMEDICO | date: 'dd/MM/yyyy') : ('Non consegnato')}}\r\n            </ion-badge> \r\n          </h4>\r\n        </ion-label>\r\n        <ion-badge\r\n          *ngIf=\"presenza.PRESENTE != null && presenza.PRESENTE != undefined && isDesktop\"\r\n          slot=\"end\"\r\n          [color]=\"presenza.PRESENTE? 'primary' : 'danger'\"\r\n        >\r\n        {{presenza.PRESENTE? 'Presente' : 'Assente'}}\r\n        </ion-badge>\r\n      </ion-item>\r\n    </ion-item-group>\r\n\r\n    <!-- Iscritti in prova -->\r\n    <ion-item-group *ngIf=\"listPresenzeInProva.length > 0\">\r\n      <ion-item-divider color=\"light\">\r\n        <ion-label>\r\n          In Prova\r\n        </ion-label>\r\n      </ion-item-divider>\r\n      <ion-item \r\n        *ngFor=\"let presenza of listPresenzeInProva\" \r\n        [button]=\"selectedPianificazione.canUpdatePresenze(gapAggiornamentoPresenze)\" \r\n        (click)=\"selectedPianificazione.canUpdatePresenze(gapAggiornamentoPresenze)? onClickElement(presenza) : {}\">\r\n        <ion-icon *ngIf=\"presenza.PRESENTE==true\" slot=\"start\" name=\"thumbs-up-outline\" color=\"primary\"></ion-icon>\r\n        <ion-icon *ngIf=\"presenza.PRESENTE==false\" slot=\"start\" name=\"thumbs-down-outline\" color=\"danger\"></ion-icon>\r\n        <ion-icon *ngIf=\"presenza.PRESENTE != true && presenza.PRESENTE != false\" slot=\"start\" color=\"\" name=\"person-circle-outline\"></ion-icon>\r\n        <ion-label>\r\n          <h2>{{presenza.NOMINATIVO}}</h2>\r\n          <h4 *ngIf=\"tipoSocieta == TipoSocieta.sportiva\">\r\n            Certificato medico: \r\n            <ion-badge [color]=\"getColoreCertificato(presenza)\" class=\"custom-badge\"> \r\n              {{presenza.DATACERTIFICATOMEDICO? (presenza.DATACERTIFICATOMEDICO | date: 'dd/MM/yyyy') : ('Non consegnato')}}\r\n            </ion-badge> \r\n          </h4>\r\n        </ion-label>\r\n        <ion-badge\r\n          *ngIf=\"presenza.PRESENTE != null && presenza.PRESENTE != undefined && isDesktop\"\r\n          slot=\"end\"\r\n          [color]=\"presenza.PRESENTE? 'primary' : 'danger'\"\r\n        >\r\n        {{presenza.PRESENTE? 'Presente' : 'Assente'}}\r\n        </ion-badge>\r\n      </ion-item>\r\n    </ion-item-group>\r\n\r\n    <!-- Note istruttore -->\r\n    <ion-item-group class=\"notes\" >\r\n      <ion-item-divider color=\"light\">\r\n        <ion-label>\r\n          Note per la segreteria\r\n        </ion-label>\r\n      </ion-item-divider>\r\n      <ion-item>\r\n        <ion-icon slot=\"start\" name=\"pencil-outline\"></ion-icon>\r\n        <ion-textarea [disabled]=\"!selectedPianificazione.canUpdatePresenze(gapAggiornamentoPresenze)\" placeholder=\"Inserisci una nota\"  [(ngModel)]=\"selectedPianificazione.NOTETRAINER\" maxlength=\"200\"></ion-textarea>      \r\n      </ion-item>   \r\n    </ion-item-group>\r\n\r\n    <!-- Note segreteria -->\r\n    <ion-item-group class=\"notes\" *ngIf=\"selectedPianificazione.NOTEADMIN && selectedPianificazione.NOTEADMIN.length > 0\">  \r\n      <ion-item-divider color=\"light\">\r\n        <ion-label>\r\n          Note dalla segreteria\r\n        </ion-label>\r\n      </ion-item-divider>\r\n      <ion-item>\r\n        <ion-icon slot=\"start\" name=\"pencil-outline\"></ion-icon>\r\n        <ion-label class=\"ion-text-wrap\">\r\n          <p>\r\n            {{selectedPianificazione.NOTEADMIN}}\r\n          </p>\r\n        </ion-label>\r\n      </ion-item>   \r\n    </ion-item-group>\r\n  </ion-list>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-button [disabled]=\"!selectedPianificazione.canUpdatePresenze(gapAggiornamentoPresenze)\" color=\"primary\" expand=\"block\" (click)=\"onSubmit()\">\r\n    Conferma\r\n  </ion-button>\r\n</ion-footer>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { AgendaTrainerDetailPageRoutingModule } from './agenda-trainer-detail-routing.module';\r\n\r\nimport { AgendaTrainerDetailPage } from './agenda-trainer-detail.page';\r\nimport { TipoSocieta } from 'src/app/models/valuelist.model';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    AgendaTrainerDetailPageRoutingModule\r\n  ],\r\n  declarations: [AgendaTrainerDetailPage]\r\n})\r\nexport class AgendaTrainerDetailPageModule {}\r\n"]}