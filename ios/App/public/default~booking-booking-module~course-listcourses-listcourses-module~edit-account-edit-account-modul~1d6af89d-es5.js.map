{"version":3,"sources":["webpack:///src/app/pages/auth/verify/verify.page.html","webpack:///src/app/pages/auth/verify/verify.page.ts","webpack:///src/app/pages/auth/verify/verify.module.ts","webpack:///src/app/pages/auth/verify/verify-routing.module.ts"],"names":["Browser","VerifyPage","modalCtrl","startService","loadingController","toastCtrl","alertCtrl","cryptoService","navParams","showInputCapNascita","params","pageState","PageState","tipoVerifica","stepRegistration","indexStepRegistration","docRichiestaCodici","listSesso","emailVerifyNeeded","smsVerifyNeeded","actualStatePage","REGISTRATION","startConfig","actualStartConfig","gruppo","docGruppo","docArea","areaSelectedValue","docUtente","actualUtente","get","undefined","showMessage","closeModal","getArray","today","formatDateISO","Date","createArrayStepRegistration","createRegisterForm","createVerifyForm","createContactForm","isDesktop","verificaemail","verificasms","verificaemailsms","push","CONTACT","VERIFY","updateDocUtente","length","dismiss","onClickAvantiContact","onClickAvantiVerifica","onClickAggiornaDati","formContact","valid","REQUESTEMAILCODE","REQUESTSMSCODE","IDAREA","ID","USE","forValidation","EMAIL","value","email","TELEPHONE","telephone","sendServerRichiestaCodici","onSuccessChangePage","customSuccessMessage","customErrorMessage","create","message","then","element","present","validationSendCodici","responseServer","result","IDREFER","idRefer","clearInputPinCode","nextStepRegistration","err","console","log","tipo","askMessage","askEmail","askTel","header","buttons","text","role","handler","msg","altMessage","docVerify","isEnableAvantiOnVerify","APPTIPOVERIFICA","EMAILPINCODE","getInputVerifyCode","SMSPINCODE","sendServerVerificaCodici","docVerifica","elLoading","validationVerifyCodici","response","VERIFICATAMAIL","VERIFICATAMOBILE","MOBILENUMBER","execAggiornaDati","formRegister","NOMINATIVO","NOME","nome","COGNOME","cognome","SESSO","sesso","CODICEFISCALE","cf","INDIRIZZO","indResidenza","COMUNE","comResidenza","CAP","capResidenza","PROVINCIA","provResidenza","ISOSTATO","statoResidenza","nascita","NATOIL","NATOA","comNascita","NATOCAP","capNascita","NATOPROV","provNascita","NATOISOSTATO","statoNascita","spinner","updateUtente","error","username","password","userLogin","dataResult","saveStorageUtente","evento","id","c2","setFocus","c3","c4","c5","c7","c8","c9","c10","pattTelefono","updateOn","validators","required","nullValidator","pattern","patternCodice","toISOString","codFiscString","checkCodiceFiscale","codFiscObj","comune","provincia","dataNascita","cap","setValue","controls","setErrors","formVerifyMail","c1","maxLength","minLength","formVerifyTel","c6","index","strReturn","enable","noverifica","link","ready","findAreaLinkByPageType","policyPrivacy","REFERURL","openLink","url","open","myMessage","duration","toast","VerifyPageModule","routes","path","component","VerifyPageRoutingModule","forChild"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEM;;AAII;;AAAyB;AAAA;;AAAA;;AAAA;AAAA;;AACrB;;AACJ;;AAEJ;;;;;;AAEA;;AAA2D;;AAAqB;;;;;;AAChF;;AAA2D;;AAAoB;;;;;;AA8BvE;;AACI;;AACA;;AACJ;;;;;;AACA;;AACI;;AACA;;AACJ;;;;;;;;AAIJ;;AAKQ;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;AACJ;;;;;;AAGA;;AACA;;AACI;;AACI;;AACJ;;AACA;;AAEJ;;AAEA;;AACI;;AACJ;;AAEA;;AACI;;AACI;;AAAI;;AAAG;;AAA2F;;AAAI;;AAC1G;;AACJ;;AACJ;;;;;;AAGA;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAGJ;;AAEA;;AACI;;AACI;;AAAI;;AAAG;;AAAgH;;AAAI;;AAC/H;;AACJ;;AACJ;;;;;;AAEA;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAEJ;;AACI;;AACA;;AACA;;AACJ;;AACI;;AACI;;AAAI;;AAAG;;AAAqD;;AAAI;;AACpE;;AACJ;;AACJ;;;;;;AAjFJ;;AAEI;;AAGI;;AACI;;AAIA;;AAKJ;;AAEA;;AAUA;;AAqBJ;;AAiBA;;AAqBA;;AAEJ;;;;;;AAtFU;;AAAA;;AAIa;;AAAA;;AAIA;;AAAA;;AAWN;;AAAA;;AAMiC;;AAAA;;AAqBJ;;AAAA;;AAiBA;;AAAA;;;;;;;;AA6B1C;;AAGI;;AACI;;AAII;AAAA;;AAAA;;AAAA;AAAA;;AACA;;AACJ;;AAEA;;AAA2B;;AAA2C;;AAC1E;;AAEA;;AACI;;AACI;;AACI;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAC/L;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAC/L;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAC/L;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAC/L;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AACnM;;AACJ;;AACJ;;AAEJ;;;;;;AAZU;;AAAA;;AACG;;AAAA;;;;;;;;AAab;;AAEI;;AACI;;AAII;AAAA;;AAAA;;AAAA;AAAA;;AACA;;AACJ;;AACA;;AACI;;AAAyC;;AACjD;;AAEA;;AACQ;;AACI;;AACI;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAC/L;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAC/L;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAC/L;;AAAwJ;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAC/L;;AAA0J;AAAA;;AAAA;;AAAA;AAAA;;AAAwC;;AACtM;;AACJ;;AACR;;AAEJ;;;;;;AAZU;;AAAA;;AACO;;AAAA;;;;;;AA7CrB;;AACI;;AA6BA;;AA4BJ;;;;;;AAzD6C;;AAAA;;AA6BA;;AAAA;;;;;;AAuD/B;;AAGE;;AACF;;;;;;AAFE;;AACA;;AAAA;;;;;;AA4DN;;AACE;;AAA+B;;AAAG;;AAClC;;AACF;;;;;;;;AAzFV;;AAEE;;AACI;;AACE;;AACE;;AACE;;AAIA;;AAAW;;AAAgB;;AAC7B;;AACA;;AACE;;AAA+B;;AAAI;;AACnC;;AACF;;AACA;;AACE;;AAA+B;;AAAO;;AACtC;;AACF;;AACA;;AACE;;AAA+B;;AAAK;;AACpC;;AACE;;AAKF;;AACF;;AACA;;AACE;;AAA+B;;AAAc;;AAC7C;;AAAgC;AAAA;;AAAA;;AAAA;AAAA;;AAAyB;;AAC3D;;AACF;;AAEA;;AACE;;AACE;;AAIA;;AAAW;;AAAW;;AACxB;;AAEA;;AACE;;AAA+B;;AAAS;;AACxC;;AACF;;AAEA;;AACE;;AAA+B;;AAAM;;AACrC;;AACF;;AACA;;AACE;;AAA+B;;AAAG;;AAClC;;AACF;;AACE;;AACA;;AAA+B;;AAAS;;AACxC;;AACF;;AACA;;AACQ;;AAA+B;;AAAK;;AACpC;;AACR;;AAEF;;AACA;;AACE;;AACE;;AAIA;;AAAW;;AAAiB;;AAC9B;;AACA;;AACE;;AAA+B;;AAAI;;AACnC;;AAGF;;AACA;;AACE;;AAA+B;;AAAM;;AACrC;;AACF;;AACA;;AAIA;;AACE;;AAA+B;;AAAS;;AACxC;;AACF;;AACA;;AACE;;AAA+B;;AAAK;;AACpC;;AACF;;AACF;;AACF;;AACF;;AAEA;;AACI;;AACA;;AACI;;AACJ;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AAEA;;AACI;;AACI;;AAAI;;AAAG;;AAAyE;;AAAI;;AACxF;;AACJ;;AACJ;;AACJ;;;;;;AArHQ;;AAAA;;AAsB0B;;AAAA;;AAwDR;;AAAA;;AAML;;AAAA;;;;;;;;AAyCrB;;AACI;;AAKA;AAAA;;AAAA;;AAAA;AAAA;;AAAgC;;AAAM;;AAC1C;;;;;;AAFI;;AAAA;;;;;;;;AAIJ;;AAEI;;AAII;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACJ;;AAGJ;;;;;;AALQ;;AAAA;;;;;;;;AAOR;;AAGQ;;AAII;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACJ;;AAER;;;;;;AAJY;;AAAA;;;;UChVNA,O,GAAY,uD,CAAZA,O;;UAUKC,U;AA8DV;AAGA,4BACUC,SADV,EAEUC,YAFV,EAGUC,iBAHV,EAIUC,SAJV,EAKUC,SALV,EAMUC,aANV,EAOUC,SAPV,EAO8B;AAAA;;AANpB,eAAAN,SAAA,GAAAA,SAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACA,eAAAC,iBAAA,GAAAA,iBAAA;AACA,eAAAC,SAAA,GAAAA,SAAA;AACA,eAAAC,SAAA,GAAAA,SAAA;AACA,eAAAC,aAAA,GAAAA,aAAA;AACA,eAAAC,SAAA,GAAAA,SAAA,CAAoB,CAtE7B;;AACA,eAAAC,mBAAA,GAAsB,KAAtB,CAqE6B,CApE7B;;AACA,eAAAC,MAAA,GAA0B,IAAI,0EAAJ,EAA1B,CAmE6B,CAjE9B;;AACA,eAAAC,SAAA,GAA4BC,SAA5B;AACA,eAAAC,YAAA,GAA2C,kFAA3C,CA+D8B,CAxD9B;;AACA,eAAAC,gBAAA,GAAgC,EAAhC;AACA,eAAAC,qBAAA,GAAgC,CAAhC,CAsD8B,CApD9B;;AACA,eAAAC,kBAAA,GAAyC,IAAI,2FAAJ,EAAzC,CAmD8B,CA3B9B;;AACA,eAAAC,SAAA,GAAwB,EAAxB,CA0B8B,CAG7B;;AACA,eAAKC,iBAAL,GAAyB,KAAzB;AACA,eAAKC,eAAL,GAAuB,KAAvB,CAL6B,CAO5B;;AACA,eAAKJ,qBAAL,GAA6B,CAA7B,CAR4B,CAU5B;;AACA,eAAKK,eAAL,GAAuBR,SAAS,CAACS,YAAjC,CAX4B,CAc5B;;AACC,eAAKC,WAAL,GAAmBnB,YAAY,CAACoB,iBAAhC;;AACA,cAAI,KAAKD,WAAL,IAAoB,KAAKA,WAAL,CAAiBE,MAAzC,EAAiD;AAG/C;AACA,iBAAKC,SAAL,GAAiB,KAAKH,WAAL,CAAiBE,MAAlC;AACD,WArB0B,CAuB5B;;;AACA,eAAKE,OAAL,GAAe,KAAKvB,YAAL,CAAkBwB,iBAAjC,CAxB4B,CA0B5B;;AACA,eAAKC,SAAL,GAAe,KAAKzB,YAAL,CAAkB0B,YAAjC,CA3B4B,CA6B7B;;AAEA,eAAKnB,MAAL,GAAc,KAAKF,SAAL,CAAesB,GAAf,CAAmB,QAAnB,CAAd;;AACA,cAAI,KAAKpB,MAAL,IAAa,IAAb,IAAmB,KAAKA,MAAL,IAAaqB,SAApC,EAA8C;AAC5C;AACA,iBAAKC,WAAL,CAAiB,QAAjB;AACA,iBAAKC,UAAL;AACD,WApC4B,CAyC7B;;;AACA,eAAKhB,SAAL,GAAgB,yEAAUiB,QAAV,CAAmB,oEAAnB,CAAhB,CA1C6B,CA4C7B;;AACA,eAAKC,KAAL,GAAW,KAAKA,KAAL,GAAW,mFAAWC,aAAX,CAAyB,IAAIC,IAAJ,EAAzB,CAAtB;AAED;;;;iBAEA,oBAAW;AACT,iBAAKC,2BAAL,CAAiC,KAAKb,SAAtC;AACA,iBAAKc,kBAAL;AACA,iBAAKC,gBAAL;AACA,iBAAKC,iBAAL;AACA,iBAAKC,SAAL,GAAe,KAAKvC,YAAL,CAAkBuC,SAAjC;AACD;AAKD;;;;;;;;iBAKC,qCAA4BjB,SAA5B,EAA+C;AAC9C,iBAAKX,gBAAL,GAAwB,EAAxB;;AAGC,oBAAQ,KAAKJ,MAAL,CAAYG,YAApB;AAEE;AACA,mBAAK,mFAAoB8B,aAAzB;AACA,qBAAKzB,iBAAL,GAAuB,IAAvB;AACA,qBAAKC,eAAL,GAAqB,KAArB;AACA;AAEA;;AACA,mBAAK,mFAAoByB,WAAzB;AACA,qBAAK1B,iBAAL,GAAuB,KAAvB;AACA,qBAAKC,eAAL,GAAqB,IAArB;AACA;AAEA;;AACA,mBAAK,mFAAoB0B,gBAAzB;AACA,qBAAK3B,iBAAL,GAAuB,IAAvB;AACA,qBAAKC,eAAL,GAAqB,IAArB;AACA;AAEA;;AACA;AACA,qBAAKA,eAAL,GAAqB,KAArB;AACA,qBAAKD,iBAAL,GAAuB,KAAvB;AACA;AAxBF,aAJ6C,CA+B7C;;;AACA,gBAAI,KAAKA,iBAAL,IAAwB,KAAKC,eAAjC,EAAiD;AAE/C,mBAAKL,gBAAL,CAAsBgC,IAAtB,CAA2BlC,SAAS,CAACmC,OAArC;AACA,mBAAKjC,gBAAL,CAAsBgC,IAAtB,CAA2BlC,SAAS,CAACoC,MAArC;AACD,aApC4C,CAsC7C;;;AACA,gBAAI,KAAKtC,MAAL,CAAYuC,eAAhB,EAAgC;AAC9B,mBAAKnC,gBAAL,CAAsBgC,IAAtB,CAA2B,KAAKnC,SAAL,CAAeU,YAA1C;AACD,aAzC4C,CA2C7C;;;AACA,gBAAI,KAAKP,gBAAL,CAAsB,CAAtB,CAAJ,EAA6B;AAC3B,mBAAKM,eAAL,GAAqB,KAAKN,gBAAL,CAAsB,CAAtB,CAArB;AACD;AACH;AAED;;;;;;iBAGA,gCAAuB;AAErB,gBAAI,KAAKC,qBAAL,GAA6B,CAA7B,GAAiC,KAAKD,gBAAL,CAAsBoC,MAA3D,EAAmE;AACjE,mBAAKnC,qBAAL;AACA,mBAAKK,eAAL,GAAqB,KAAKN,gBAAL,CAAsB,KAAKC,qBAA3B,CAArB;AAED,aAJD,MAKI;AACF,mBAAKkB,UAAL;AACD;AACF;AAED;;;;;;iBAGA,gCAAuB;AAErB,gBAAI,KAAKlB,qBAAL,GAA6B,CAA7B,IAAkC,CAAtC,EAAyC;AACvC,mBAAKA,qBAAL;AACA,mBAAKK,eAAL,GAAqB,KAAKN,gBAAL,CAAsB,KAAKC,qBAA3B,CAArB;AAEC;AACF;AAEH;;;;;;iBAGA,sBAAU;AACR,iBAAKb,SAAL,CAAeiD,OAAf;AACD;AAID;;;;;;iBAGA,+BAAsB;AACpB,oBAAO,KAAK/B,eAAZ;AAEE,mBAAKR,SAAS,CAACmC,OAAf;AACI;AACA,qBAAKK,oBAAL;AACF;;AAEF,mBAAKxC,SAAS,CAACoC,MAAf;AACE;AACA,qBAAKK,qBAAL;AACA;;AAEF,mBAAKzC,SAAS,CAACS,YAAf;AACE;AACA;AACA,qBAAKiC,mBAAL;;AAEF;AACE;AAlBJ;AAqBD,W,CAED;;AAEA;;;;;;;AASA;;;;;;iBAGA,gCAAuB;AAEpB,gBAAI,KAAKC,WAAL,CAAiBC,KAArB,EAA2B;AAEzB;AACA,mBAAKxC,kBAAL,GAA0B,IAAI,2FAAJ,EAA1B;AACA,mBAAKA,kBAAL,CAAwByC,gBAAxB,GAAyC,KAAzC;AACA,mBAAKzC,kBAAL,CAAwB0C,cAAxB,GAAuC,KAAvC,CALyB,CAOzB;;AACC,mBAAK1C,kBAAL,CAAwB2C,MAAxB,GAAiC,KAAKjC,OAAL,CAAakC,EAA9C;AACA,mBAAK5C,kBAAL,CAAwB6C,GAAxB,GAA8B,iFAAkBC,aAAhD,CATwB,CAWzB;;AACA,kBAAI,KAAK5C,iBAAT,EAA2B;AACzB,qBAAKF,kBAAL,CAAwByC,gBAAxB,GAAyC,IAAzC;AACA,qBAAKzC,kBAAL,CAAwB+C,KAAxB,GAA8B,KAAKR,WAAL,CAAiBS,KAAjB,CAAuBC,KAArD;AACD,eAfwB,CAiBzB;;;AACA,kBAAI,KAAK9C,eAAT,EAAyB;AACvB,qBAAKH,kBAAL,CAAwB0C,cAAxB,GAAuC,IAAvC;AACA,qBAAK1C,kBAAL,CAAwBkD,SAAxB,GAAkC,KAAKX,WAAL,CAAiBS,KAAjB,CAAuBG,SAAzD;AACD,eArBwB,CAuBzB;;;AACA,mBAAKC,yBAAL,CAA+B,IAA/B;AAED,aA1BD,CA4BA;AA5BA,iBA6BK;AACH;AACD;AACF;AAKF;;;;;;;;;iBAMA,qCAAgL;AAAA;;AAAA,gBAAtJC,mBAAsJ,uEAAxH,IAAwH;AAAA,gBAAlHC,oBAAkH,uEAA7F,8BAA6F;AAAA,gBAA7DC,kBAA6D,uEAA1C,wCAA0C;AAE9K,iBAAKnE,iBAAL,CACGoE,MADH,CACU;AACJC,qBAAO,EAAE;AADL,aADV,EAIGC,IAJH,CAIQ,UAAAC,OAAO,EAAI;AAEf;AACAA,qBAAO,CAACC,OAAR,GAHe,CAKf;AAEA;;AAGA,mBAAI,CAACzE,YAAL,CACO0E,oBADP,CAC4B,KAAI,CAAC7D,kBADjC,EACqD,KAAI,CAACY,SAD1D,EAEO8C,IAFP,CAEY,UAACI,cAAD,EAA6C;AAEjD;AACAH,uBAAO,CAACxB,OAAR;;AAEA,oBAAI2B,cAAc,CAACC,MAAnB,EAA0B;AAEzB;AACA;AACA,uBAAI,CAAC/D,kBAAL,CAAwBgE,OAAxB,GAAkCF,cAAc,CAACG,OAAjD,CAJyB,CAMzB;;AACA,uBAAI,CAACjE,kBAAL,CAAwB0C,cAAxB,GAAyC,KAAzC;AACA,uBAAI,CAAC1C,kBAAL,CAAwByC,gBAAxB,GAA2C,KAA3C;;AAEA,uBAAI,CAACzB,WAAL,CAAiBsC,oBAAjB,EAVyB,CAWzB;;;AACA,sBAAID,mBAAJ,EAAyB;AAEvB;AACA,yBAAI,CAACa,iBAAL,GAHuB,CAKvB;;;AACA,yBAAI,CAACC,oBAAL;AACD;AACF,iBApBA,MAqBG;AACF;AAEA,uBAAI,CAACnD,WAAL,CAAiBuC,kBAAjB;AACD;AACD,eAjCP,WAkCa,UAAAa,GAAG,EAAI;AACV;AACAT,uBAAO,CAACxB,OAAR,GAFU,CAGV;;AACAkC,uBAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,qBAAI,CAACpD,WAAL,CAAiB,uBAAjB;AACH,eAxCP;AA0CH,aAxDD;AA0DD,W,CAGD;AAGA;;AAEA;;;;;;;;iBAKA,8BAAqBuD,IAArB,EAA8C;AAAA;;AAC5C,gBAAIC,UAAU,GAAG,EAAjB;AACA,gBAAIC,QAAQ,GAAG,KAAf;AACA,gBAAIC,MAAM,GAAG,KAAb;;AAEA,gBAAI,KAAK1E,kBAAT,EAA6B;AAE3BwE,wBAAU,GAAG,kCAAb;;AAEA,sBAAQD,IAAR;AACE,qBAAK,mFAAoB5C,aAAzB;AACI6C,4BAAU,IAAI,KAAKxE,kBAAL,CAAwB+C,KAAtC,CADJ,CAEI;;AACA0B,0BAAQ,GAAG,IAAX;AAEF;;AAEF,qBAAK,mFAAoB7C,WAAzB;AACI4C,4BAAU,IAAI,KAAKxE,kBAAL,CAAwBkD,SAAtC,CADJ,CAEI;;AACAwB,wBAAM,GAAE,IAAR;AACF;;AAEF;AACE;AAfJ,eAJ2B,CAsB3B;;;AACA,mBAAKpF,SAAL,CAAekE,MAAf,CAAsB;AACpBmB,sBAAM,EAAE,iBADY;AAEpBlB,uBAAO,EAAEe,UAFW;AAIpBI,uBAAO,EAAE,CACP;AACEC,sBAAI,EAAE,SADR;AAEEC,sBAAI,EAAE;AAFR,iBADO,EAKP;AACED,sBAAI,EAAE,SADR;AAEEE,yBAAO,EAAE,mBAAM;AAEb;AACA,0BAAI,CAAC/E,kBAAL,CAAwByC,gBAAxB,GAA2CgC,QAA3C;AACA,0BAAI,CAACzE,kBAAL,CAAwB0C,cAAxB,GAAyCgC,MAAzC;AAEA,wBAAMM,GAAG,GAAG,+BAAZ,CANa,CAOb;AACA;;AACA,0BAAI,CAAC5B,yBAAL,CAA+B,KAA/B,EAAsC4B,GAAtC;AACD;AAZH,iBALO;AAJW,eAAtB,EAyBCtB,IAzBD,CAyBO,UAAAC,OAAO,EAAI;AAChBA,uBAAO,CAACC,OAAR;AACD,eA3BD;AA8BD;AAEF;AAGD;;;;;;;iBAIA,iCAAqB;AAEnB;AACA,gBAAIqB,UAAU,GAAG,EAAjB;AACA,gBAAIC,SAAJ;;AAEA,gBAAI,CAAC,KAAKC,sBAAL,EAAL,EAAoC;AAClCF,wBAAU,GAAG,6BAAb;AACD,aAFD,MAGK;AACH;AACA,kBAAI,KAAKjF,kBAAL,IAA2B,KAAKA,kBAAL,CAAwBgE,OAAvD,EAAgE;AAE5D,oBAAI,KAAKhE,kBAAL,CAAwBgE,OAAxB,CAAgC9B,MAAhC,KAA2C,CAA/C,EAAkD;AAChD;AACAgD,2BAAS,GAAG,IAAI,0FAAJ,EAAZ;AACAA,2BAAS,CAACvC,MAAV,GAAmB,KAAK3C,kBAAL,CAAwB2C,MAA3C;AACAuC,2BAAS,CAAClB,OAAV,GAAoB,KAAKhE,kBAAL,CAAwBgE,OAA5C,CAJgD,CAMhD;;AACA,sBAAI,KAAKvD,SAAL,CAAe2E,eAAf,IAAkC,mFAAoBzD,aAAtD,IACF,KAAKlB,SAAL,CAAe2E,eAAf,IAAkC,mFAAoBvD,gBADxD,EAGG;AACEqD,6BAAS,CAACG,YAAV,GAAyB,KAAKC,kBAAL,CAAwB,mFAAoB3D,aAA5C,CAAzB;AACD,mBAZ4C,CAehD;;;AACA,sBAAI,KAAKlB,SAAL,CAAe2E,eAAf,IAAkC,mFAAoBxD,WAAtD,IACF,KAAKnB,SAAL,CAAe2E,eAAf,IAAkC,mFAAoBvD,gBADxD,EAGG;AACEqD,6BAAS,CAACK,UAAV,GAAuB,KAAKD,kBAAL,CAAwB,mFAAoB1D,WAA5C,CAAvB;AACD,mBArB4C,CAwBhD;;;AACA,uBAAK4D,wBAAL,CAA8BN,SAA9B;AAGD,iBA5BD,MA6BK;AACHD,4BAAU,GAAG,+BAAb;AACD;AAEJ,eAnCD,MAoCK;AACHA,0BAAU,GAAG,+BAAb;AACD;AACF,aAlDkB,CAqDnB;;;AACA,gBAAIA,UAAU,CAAC/C,MAAX,IAAmB,CAAvB,EAA0B;AACxB,mBAAKlB,WAAL,CAAiBiE,UAAjB;AACD;AACF;AAID;;;;;;;;iBAKA,kCAAyBQ,WAAzB,EAAyD;AAAA;;AAEvD,gBAAIA,WAAJ,EAAiB;AAEf,mBAAKrG,iBAAL,CACCoE,MADD,CACQ;AACJC,uBAAO,EAAE;AADL,eADR,EAICC,IAJD,CAIM,UAAAgC,SAAS,EAAI;AAEjB;AACAA,yBAAS,CAAC9B,OAAV,GAHiB,CAKjB;;AACA,sBAAI,CAACzE,YAAL,CACGwG,sBADH,CAC0BF,WAD1B,EAEG/B,IAFH,CAEQ,UAACkC,QAAD,EAAuC;AAE3C;AACAF,2BAAS,CAACvD,OAAV,GAH2C,CAK3C;;AACA,sBAAIyD,QAAQ,CAAC7B,MAAb,EAAqB;AAEnB;AACA,wBAAI,MAAI,CAAC/D,kBAAL,CAAwByC,gBAA5B,EAA8C;AAC5C,4BAAI,CAAC7B,SAAL,CAAeiF,cAAf,GAA8B,IAA9B;AACA,4BAAI,CAACjF,SAAL,CAAemC,KAAf,GAAuB,MAAI,CAAC/C,kBAAL,CAAwB+C,KAA/C;AACD,qBANkB,CAQnB;;;AACA,wBAAI,MAAI,CAAC/C,kBAAL,CAAwB0C,cAA5B,EAA2C;AAEzC,4BAAI,CAAC9B,SAAL,CAAekF,gBAAf,GAAgC,IAAhC;AACA,4BAAI,CAAClF,SAAL,CAAemF,YAAf,GAA8B,MAAI,CAAC/F,kBAAL,CAAwBkD,SAAtD;AACD;;AAGA,0BAAI,CAAClC,WAAL,CAAiB,kCAAjB,EAhBkB,CAiBlB;;;AACA,0BAAI,CAACmD,oBAAL;AAEF,mBApBD,MAqBK;AAEH;AACA,0BAAI,CAACnD,WAAL,CAAiB4E,QAAQ,CAACnC,OAA1B;AACD;AACF,iBAlCH,WAmCS,UAAAW,GAAG,EAAI;AACZ;AAEA;AACAsB,2BAAS,CAACvD,OAAV,GAJY,CAMZ;;AACA,wBAAI,CAACnB,WAAL,CAAiB,uBAAjB;AACD,iBA3CH;AA4CD,eAtDD;AAuDD,aAzDD,MA0DI;AACF,mBAAKA,WAAL,CAAiB,oCAAjB;AACD;AACF,W,CAGD;;AAQA;;;;;;;iBAIA,+BAAmB;AAEjB,iBAAKgF,gBAAL;AACD;AACD;;;;;;iBAKA,4BAAmB;AAAA;;AAGlB;AACA,gBAAI,KAAKC,YAAL,CAAkBzD,KAAtB,EACA;AAEE,mBAAK5B,SAAL,CAAesF,UAAf,GAA0B,EAA1B;AACA,mBAAKtF,SAAL,CAAeuF,IAAf,GAAoB,KAAKF,YAAL,CAAkBjD,KAAlB,CAAwBoD,IAA5C;AACA,mBAAKxF,SAAL,CAAeyF,OAAf,GAAuB,KAAKJ,YAAL,CAAkBjD,KAAlB,CAAwBsD,OAA/C;AACA,mBAAK1F,SAAL,CAAe2F,KAAf,GAAqB,KAAKN,YAAL,CAAkBjD,KAAlB,CAAwBwD,KAA7C;AACA,mBAAK5F,SAAL,CAAe6F,aAAf,GAA6B,KAAKR,YAAL,CAAkBjD,KAAlB,CAAwB0D,EAArD;AAEA,mBAAK9F,SAAL,CAAe+F,SAAf,GAAyB,KAAKV,YAAL,CAAkBjD,KAAlB,CAAwB4D,YAAjD;AACA,mBAAKhG,SAAL,CAAeiG,MAAf,GAAsB,KAAKZ,YAAL,CAAkBjD,KAAlB,CAAwB8D,YAA9C;AACA,mBAAKlG,SAAL,CAAemG,GAAf,GAAmB,KAAKd,YAAL,CAAkBjD,KAAlB,CAAwBgE,YAA3C;AACA,mBAAKpG,SAAL,CAAeqG,SAAf,GAAyB,KAAKhB,YAAL,CAAkBjD,KAAlB,CAAwBkE,aAAjD;AACA,mBAAKtG,SAAL,CAAeuG,QAAf,GAAwB,KAAKlB,YAAL,CAAkBjD,KAAlB,CAAwBoE,cAAhD;;AAGA,kBAAI,KAAKnB,YAAL,CAAkBjD,KAAlB,CAAwBqE,OAA5B,EAAqC;AACnC,qBAAKzG,SAAL,CAAe0G,MAAf,GAAwB,IAAIjG,IAAJ,CAAS,KAAK4E,YAAL,CAAkBjD,KAAlB,CAAwBqE,OAAjC,CAAxB;AACD;;AAED,mBAAKzG,SAAL,CAAe2G,KAAf,GAAqB,KAAKtB,YAAL,CAAkBjD,KAAlB,CAAwBwE,UAA7C;AACA,mBAAK5G,SAAL,CAAe6G,OAAf,GAAuB,KAAKxB,YAAL,CAAkBjD,KAAlB,CAAwB0E,UAA/C;AACA,mBAAK9G,SAAL,CAAe+G,QAAf,GAAwB,KAAK1B,YAAL,CAAkBjD,KAAlB,CAAwB4E,WAAhD;AACA,mBAAKhH,SAAL,CAAeiH,YAAf,GAA4B,KAAK5B,YAAL,CAAkBjD,KAAlB,CAAwB8E,YAApD,CAtBF,CAwBE;AAEA;;AACA,mBAAK1I,iBAAL,CACOoE,MADP,CACc;AACNC,uBAAO,EAAE,uBADH;AAENsE,uBAAO,EAAE;AAFH,eADd,EAKOrE,IALP,CAKa,UAAAgC,SAAS,EAAI;AAClB;AACAA,yBAAS,CAAC9B,OAAV,GAFkB,CAIlB;;AACA,sBAAI,CAACzE,YAAL,CACK6I,YADL,CACkB,MAAI,CAACpH,SADvB,EAEK8C,IAFL,CAEU,UAAAK,MAAM,EAAI;AAEZ;AACA2B,2BAAS,CAACvD,OAAV;;AACE,wBAAI,CAACnB,WAAL,CAAiB,iBAAjB;;AACA,wBAAI,CAACC,UAAL;AAEL,iBATL,WAUW,UAAAgH,KAAK,EAAI;AACdvC,2BAAS,CAACvD,OAAV;;AACA,wBAAI,CAACnB,WAAL,CAAiBiH,KAAjB;;AACA5D,yBAAO,CAACC,GAAR,CAAY2D,KAAZ;AACD,iBAdL;AAeF,eAzBN;AA2BD;AACF;AAEA;;;;;;iBAGA,4BAAmBC,QAAnB,EAAqCC,QAArC,EAAqD;AAAA;;AAGnD,gBAAID,QAAQ,IAAIC,QAAhB,EAA0B;AAExB;AACA,mBAAKhJ,YAAL,CACCiJ,SADD,CACWF,QADX,EACqBC,QADrB,EAECzE,IAFD,CAEM,UAAC2E,UAAD,EAA6B;AAE/B;AACA,oBAAI,CAACA,UAAU,CAACtE,MAAhB,EAAwB;AAEtB,wBAAI,CAAC/C,WAAL,CAAiBqH,UAAU,CAAC5E,OAA5B;AACD,iBAHD,MAIK;AACH;AAEA;AACA,wBAAI,CAACtE,YAAL,CAAkBmJ,iBAAlB,CAAoCJ,QAApC,EAA6CC,QAA7C;AACD;AACJ,eAfD;AAgBD;AAIF;AAMD;;;;;;;;iBAKA,qBAAYI,MAAZ,EAAkB;AAEhB,gBAAIC,EAAE,GAACD,MAAM,CAAC,QAAD,CAAN,CAAiB,IAAjB,CAAP;;AACI,oBAAQC,EAAR;AACA,mBAAK,GAAL;AACE,qBAAKC,EAAL,CAAQC,QAAR;AACA;;AACF,mBAAK,GAAL;AACE,qBAAKC,EAAL,CAAQD,QAAR;AACA;;AACF,mBAAK,GAAL;AACE,qBAAKE,EAAL,CAAQF,QAAR;AACA;;AACF,mBAAK,GAAL;AACE,qBAAKG,EAAL,CAAQH,QAAR;AACA;;AACF,mBAAK,GAAL;AACE,qBAAKI,EAAL,CAAQJ,QAAR;AACA;;AACF,mBAAK,GAAL;AACE,qBAAKK,EAAL,CAAQL,QAAR;AACA;;AACF,mBAAK,GAAL;AACE,qBAAKM,EAAL,CAAQN,QAAR;AACA;;AACF,mBAAK,GAAL;AACE,qBAAKO,GAAL,CAASP,QAAT;AACA;;AAEF;AACE;AA3BF;AA8BL,W,CAGH;;AAGE;;;;;;;iBAIA,6BAAiB;AACf,gBAAIQ,YAAY,GAAG,aAAnB,CADe,CAEf;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AACA,iBAAK3G,WAAL,GAAiB,IAAI,wDAAJ,CAAc;AAC7BU,mBAAK,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AAC3BkG,wBAAQ,EAAE,QADiB;AAE3BC,0BAAU,EAAE,CAAC,KAAKlJ,iBAAL,GAAwB,0DAAWmJ,QAAnC,GAA8C,0DAAWC,aAA1D,EAAyE,0DAAWrG,KAApF;AAFe,eAAtB,CADsB;AAK7BE,uBAAS,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AAC/BgG,wBAAQ,EAAE,QADqB;AAE/BC,0BAAU,EAAE,CAAC,KAAKjJ,eAAL,GAAsB,0DAAWkJ,QAAjC,GAA4C,0DAAWC,aAAxD,EAAuE,0DAAWC,OAAX,CAAmBL,YAAnB,CAAvE;AAFmB,eAAtB;AALkB,aAAd,CAAjB;AAWD;;;iBAKD,8BAAkB;AAChB,gBAAIM,aAAa,GAAG,uEAApB,CADgB,CAEhB;;AACA,iBAAKvD,YAAL,GAAkB,IAAI,wDAAJ,CAAc;AAC/BG,kBAAI,EAAC,IAAI,0DAAJ,CAAgB,KAAKxF,SAAL,CAAeuF,IAA/B,EAAqC;AACxCgD,wBAAQ,EAAC,QAD+B;AAExCC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAF4B,eAArC,CAD0B;AAK/B/C,qBAAO,EAAC,IAAI,0DAAJ,CAAgB,KAAK1F,SAAL,CAAeyF,OAA/B,EAAwC;AAC9C8C,wBAAQ,EAAC,QADqC;AAE9CC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAFkC,eAAxC,CALuB;AAS/B7C,mBAAK,EAAC,IAAI,0DAAJ,CAAgB,KAAK5F,SAAL,CAAe2F,KAA/B,EAAsC;AAC1C4C,wBAAQ,EAAC,QADiC;AAE1CC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAF8B,eAAtC,CATyB;AAa/BhC,qBAAO,EAAC,IAAI,0DAAJ,CAAiB,KAAKzG,SAAL,CAAe0G,MAAf,GAAwB,KAAK1G,SAAL,CAAe0G,MAAf,CAAsBmC,WAAtB,EAAxB,GAA6D,KAAK7I,SAAL,CAAe0G,MAA7F,EAAsG;AAC5G6B,wBAAQ,EAAC,QADmG;AAE5GC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAFgG,eAAtG,CAbuB;AAiB/BzB,yBAAW,EAAC,IAAI,0DAAJ,CAAgB,KAAKhH,SAAL,CAAe+G,QAA/B,EAAyC;AACnDwB,wBAAQ,EAAC,QAD0C;AAEnDC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAFuC,eAAzC,CAjBmB;AAqB/B7B,wBAAU,EAAC,IAAI,0DAAJ,CAAgB,KAAK5G,SAAL,CAAe2G,KAA/B,EAAsC;AAC/C4B,wBAAQ,EAAC,QADsC;AAE/CC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAFmC,eAAtC,CArBoB;AAyB/BvB,0BAAY,EAAC,IAAI,0DAAJ,CAAgB,KAAKlH,SAAL,CAAeiH,YAA/B,EAA6C;AACxDsB,wBAAQ,EAAC,QAD+C;AAExDC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAF4C,eAA7C,CAzBkB;AA6B/B3B,wBAAU,EAAC,IAAI,0DAAJ,CAAgB,KAAK9G,SAAL,CAAe6G,OAA/B,EAAwC;AACjD0B,wBAAQ,EAAC,QADwC;AAEjDC,0BAAU,EAAE;AAFqC,eAAxC,CA7BoB;AAmC/BlC,2BAAa,EAAC,IAAI,0DAAJ,CAAgB,KAAKtG,SAAL,CAAeqG,SAA/B,EAA0C;AACtDkC,wBAAQ,EAAC,QAD6C;AAEtDC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAF0C,eAA1C,CAnCiB;AAuC/BvC,0BAAY,EAAC,IAAI,0DAAJ,CAAgB,KAAKlG,SAAL,CAAeiG,MAA/B,EAAuC;AAClDsC,wBAAQ,EAAC,QADyC;AAElDC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAFsC,eAAvC,CAvCkB;AA2C/BzC,0BAAY,EAAC,IAAI,0DAAJ,CAAgB,KAAKhG,SAAL,CAAe+F,SAA/B,EAA0C;AACrDwC,wBAAQ,EAAC,QAD4C;AAErDC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAFyC,eAA1C,CA3CkB;AA+C/BrC,0BAAY,EAAC,IAAI,0DAAJ,CAAgB,KAAKpG,SAAL,CAAemG,GAA/B,EAAoC;AAC/CoC,wBAAQ,EAAC,QADsC;AAE/CC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAFmC,eAApC,CA/CkB;AAmD/BjC,4BAAc,EAAC,IAAI,0DAAJ,CAAgB,KAAKxG,SAAL,CAAeuG,QAA/B,EAAyC;AACtDgC,wBAAQ,EAAC,QAD6C;AAEtDC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ;AAF0C,eAAzC,CAnDgB;AAuD/B3C,gBAAE,EAAC,IAAI,0DAAJ,CAAgB,KAAK9F,SAAL,CAAe6F,aAA/B,EAA8C;AAC/C0C,wBAAQ,EAAC,QADsC;AAE/CC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWE,OAAX,CAAmBC,aAAnB,CAAtB;AAFmC,eAA9C;AAvD4B,aAAd,CAAlB;AA4DD;;;iBAGD,sBAAU;AAAA;;AAET;AACA,gBAAIE,aAAa,GAAW,KAAKzD,YAAL,CAAkBjD,KAAlB,CAAwB0D,EAApD;;AAEA,gBAAIgD,aAAa,IAAE,IAAf,IAAqBA,aAAa,IAAE3I,SAAxC,EAAkD;AAEhD,kBAAI2I,aAAa,CAACxH,MAAd,IAAwB,CAA5B,EAA8B;AAE5B;AACA,qBAAK/C,YAAL,CAAkBwK,kBAAlB,CAAqCD,aAArC,EAAoD,IAApD,EAA0DhG,IAA1D,CAA+D,UAAAkG,UAAU,EAAI;AAE3E;AACA,wBAAI,CAAChJ,SAAL,CAAeiH,YAAf,GAA4B,QAA5B;AACA,wBAAI,CAACjH,SAAL,CAAe2G,KAAf,GAAqBqC,UAAU,CAACC,MAAhC;AACA,wBAAI,CAACjJ,SAAL,CAAe+G,QAAf,GAAwBiC,UAAU,CAACE,SAAnC;AACA,wBAAI,CAAClJ,SAAL,CAAe0G,MAAf,GAAsBsC,UAAU,CAACG,WAAjC;AACA,wBAAI,CAACnJ,SAAL,CAAe2F,KAAf,GAAqBqD,UAAU,CAACpD,KAAhC;AACA,wBAAI,CAAC5F,SAAL,CAAe6G,OAAf,GAAuBmC,UAAU,CAACI,GAAlC,CAR2E,CAW3E;;AAEA,wBAAI,CAAC/D,YAAL,CAAkBnF,GAAlB,CAAsB,YAAtB,EAAoCmJ,QAApC,CAA6C,MAAI,CAACrJ,SAAL,CAAe2G,KAA5D;;AACA,wBAAI,CAACtB,YAAL,CAAkBnF,GAAlB,CAAsB,aAAtB,EAAqCmJ,QAArC,CAA8C,MAAI,CAACrJ,SAAL,CAAe+G,QAA7D;;AACA,wBAAI,CAAC1B,YAAL,CAAkBnF,GAAlB,CAAsB,SAAtB,EAAiCmJ,QAAjC,CAA0C,MAAI,CAACrJ,SAAL,CAAe0G,MAAf,CAAsBmC,WAAtB,EAA1C;;AACA,wBAAI,CAACxD,YAAL,CAAkBnF,GAAlB,CAAsB,OAAtB,EAA+BmJ,QAA/B,CAAwC,MAAI,CAACrJ,SAAL,CAAe2F,KAAvD;;AACA,wBAAI,CAACN,YAAL,CAAkBnF,GAAlB,CAAsB,cAAtB,EAAsCmJ,QAAtC,CAA+C,MAAI,CAACrJ,SAAL,CAAeiH,YAA9D;;AACA,wBAAI,CAAC5B,YAAL,CAAkBnF,GAAlB,CAAsB,YAAtB,EAAoCmJ,QAApC,CAA6C,MAAI,CAACrJ,SAAL,CAAe6G,OAA5D,EAlB2E,CAoB3E;;;AACA,wBAAI,CAACxB,YAAL,CAAkBiE,QAAlB,CAA2B,IAA3B,EAAiCC,SAAjC,CAA2C,IAA3C;AAGD,iBAxBD,WAwBS,UAAA/F,GAAG,EAAI;AAEd;AACA,wBAAI,CAAC6B,YAAL,CAAkBiE,QAAlB,CAA2B,IAA3B,EAAiCC,SAAjC,CAA2C;AAAC,iCAAY;AAAb,mBAA3C;;AACA9F,yBAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,iBA7BD;AA8BD;AACF;AACF;AAGA;;;;;;iBAGA,4BAAgB;AACd,iBAAKgG,cAAL,GAAoB,IAAI,wDAAJ,CAAc;AAChCC,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBlB,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB,CAD4B;AAKhC9B,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBU,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB,CAL4B;AAShC5B,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBQ,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB,CAT4B;AAahC3B,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBO,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB,CAb4B;AAiBhC1B,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBM,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB;AAjB4B,aAAd,CAApB;AAuBA,iBAAKC,aAAL,GAAmB,IAAI,wDAAJ,CAAc;AAC/BC,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBtB,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB,CAD2B;AAK/BzB,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBK,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB,CAL2B;AAS/BxB,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBI,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB,CAT2B;AAa/BvB,gBAAE,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACxBG,wBAAQ,EAAE,QADc;AAExBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFY,eAAtB,CAb2B;AAiB/BtB,iBAAG,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AACzBE,wBAAQ,EAAE,QADe;AAEzBC,0BAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWiB,SAAX,CAAqB,CAArB,CAAtB,EAA8C,0DAAWC,SAAX,CAAqB,CAArB,CAA9C;AAFa,eAAtB;AAjB0B,aAAd,CAAnB;AAuBD;AAED;;;;;;;iBAIA,6BAAoB;AAClB,iBAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,CAA7B,EAAgCA,KAAK,EAArC,EAAyC;AAEvC,mBAAKN,cAAL,CAAoBtJ,GAApB,CAAwB,MAAM4J,KAA9B,EAAqCT,QAArC,CAA8C,EAA9C;AAED;;AAED,iBAAK,IAAIS,MAAK,GAAG,CAAjB,EAAoBA,MAAK,IAAI,EAA7B,EAAiCA,MAAK,EAAtC,EAA0C;AAEzC,mBAAKF,aAAL,CAAmB1J,GAAnB,CAAuB,MAAM4J,MAA7B,EAAoCT,QAApC,CAA6C,EAA7C;AAED;AACD;AAGD;;;;;;;iBAIA,4BAAmB1F,IAAnB,EAA4C;AAC1C,gBAAIoG,SAAS,GAAW,EAAxB;;AAEA,gBAAIpG,IAAI,IAAI,mFAAoB5C,aAAhC,EAA+C;AAC7CgJ,uBAAS,GAAG,KAAKP,cAAL,CAAoBpH,KAApB,CAA0BqH,EAA1B,GACA,KAAKD,cAAL,CAAoBpH,KAApB,CAA0ByF,EAD1B,GAEA,KAAK2B,cAAL,CAAoBpH,KAApB,CAA0B2F,EAF1B,GAGA,KAAKyB,cAAL,CAAoBpH,KAApB,CAA0B4F,EAH1B,GAIA,KAAKwB,cAAL,CAAoBpH,KAApB,CAA0B6F,EAJtC;AAKD,aAND,MAOK,IAAItE,IAAI,IAAI,mFAAoB3C,WAAhC,EAA6C;AAChD+I,uBAAS,GAAG,KAAKH,aAAL,CAAmBxH,KAAnB,CAAyByH,EAAzB,GACA,KAAKD,aAAL,CAAmBxH,KAAnB,CAAyB8F,EADzB,GAEA,KAAK0B,aAAL,CAAmBxH,KAAnB,CAAyB+F,EAFzB,GAGA,KAAKyB,aAAL,CAAmBxH,KAAnB,CAAyBgG,EAHzB,GAIA,KAAKwB,aAAL,CAAmBxH,KAAnB,CAAyBiG,GAJrC;AAKD;;AAED,mBAAO0B,SAAP;AACD;AAED;;;;;;;;;iBAMA,kCAAsB;AACpB,gBAAIC,MAAM,GAAG,IAAb;;AAEA,gBAAI,KAAKnK,SAAT,EAAoB;AAClB,kBAAI,KAAKA,SAAL,CAAe2E,eAAf,KAAmC,mFAAoByF,UAA3D,EAAuE;AAErE,wBAAQ,KAAKnL,MAAL,CAAYG,YAApB;AACE,uBAAK,mFAAoB8B,aAAzB;AACIiJ,0BAAM,GAAG,KAAKR,cAAL,CAAoB5H,KAA7B;AACF;;AACF,uBAAK,mFAAoBZ,WAAzB;AACIgJ,0BAAM,GAAG,KAAKJ,aAAL,CAAmBhI,KAA5B;AACF;;AAEF,uBAAK,mFAAoBX,gBAAzB;AACE+I,0BAAM,GAAG,KAAKJ,aAAL,CAAmBhI,KAAnB,IAA4B,KAAK4H,cAAL,CAAoB5H,KAAzD;AACA;;AAEF;AACE;AAbJ;AAgBD;AACF,aApBD,MAqBK;AACHoI,oBAAM,GAAG,KAAT;AACD;;AACD,mBAAOA,MAAP;AACD,W,CAKH;AAGE;;AAEA;;;;;;iBAGA,wBAAY;AACV,gBAAIE,IAAJ;AACA,gBAAIC,KAAK,GAAY,KAArB;;AAEA,gBAAI,KAAKrK,OAAT,EAAkB;AAEhBoK,kBAAI,GAAG,KAAKpK,OAAL,CAAasK,sBAAb,CAAoC,wEAASC,aAA7C,CAAP;;AAEA,kBAAIH,IAAI,IAAIA,IAAI,CAACI,QAAjB,EAA2B;AACzBH,qBAAK,GAAG,IAAR;AACD;AACF;;AAED,mBAAOA,KAAP;AACD,W,CAED;;;;iBACA,0BAAiB;AACf,gBAAID,IAAJ;;AAGA,gBAAI,KAAKpK,OAAT,EAAkB;AAEhBoK,kBAAI,GAAG,KAAKpK,OAAL,CAAasK,sBAAb,CAAoC,wEAASC,aAA7C,CAAP;;AAEA,kBAAIH,IAAI,IAAIA,IAAI,CAACI,QAAjB,EAA2B;AACzB,qBAAKC,QAAL,CAAcL,IAAI,CAACI,QAAnB;AACD;AACF;AAGF,W,CAED;;;;iBACA,kBAASE,GAAT,EAAmB;AAEjBpM,mBAAO,CAACqM,IAAR,CAAa;AAACD,iBAAG,EAACA;AAAL,aAAb;AACD,W,CAED;;AAEE;;;;;;;iBAII,qBAAYE,SAAZ,EAA+B;;;;;;;;AACrB,6BAAM,KAAKjM,SAAL,CACjBmE,MADiB,CACV;AACNC,+BAAO,EAAE6H,SADH;AAENC,gCAAQ,EAAE;AAFJ,uBADU,CAAN;;;AAARC,2B;AAMJA,2BAAK,CAAC5H,OAAN;;;;;;;;;AACH;;;;;;;yBA1jCS3E,U,EAAU,gI,EAAA,6I,EAAA,kI,EAAA,gI,EAAA,gI,EAAA,uJ,EAAA,0H;AAAA,O;;;cAAVA,U;AAAU,mC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADxBvB;;AACE;;AACI;;AAUA;;AACA;;AAKA;;AACI;;AAAyB;AAAA,qBAAS,IAAAgC,UAAA,EAAT;AAAqB,aAArB;;AACrB;;AACJ;;AACJ;;AACJ;;AACF;;AAMA;;AACE;;AACI;;AACJ;;AAIA;;AA6FA;;AA8DA;;AA0HF;;AAGA;;AAEE;;AASA;;AAcA;;AAeF;;;;AAjWe;;AAAA;;AAQG;;AAAA;;AACA;;AAAA;;AAkBX;;AAAA;;AACI;;AAAA;;AAKH;;AAAA;;AA6FC;;AAAA;;AA8DD;;AAAA;;AA+HoB;;AAAA;;AASD;;AAAA;;AAcM;;AAAA;;;;;;ACiwBhC,UAAKrB,SAAL;;AAAA,iBAAKA,SAAL,EAAc;AAEZ;AACA;AACA;AACA;AACD,OAND,EAAKA,SAAS,KAATA,SAAS,MAAd;;;;;;;;;;;;;;;;;ACtlCD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAoBa6L,gB;;;;;yBAAAA,gB;AAAgB,O;;;cAAhBA;;;kBAVF,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,8EAJO,EAKP,kEALO,C;;;;4HAUEA,gB,EAAgB;AAAA,yBAHZ,uDAGY;AAHF,oBANvB,4DAMuB,EALvB,0DAKuB,EAJvB,0DAIuB,EAHvB,8EAGuB,EAFvB,kEAEuB,CAGE;AALN,oBAGX,uDAHW;AAKM,S;AAFP,O;;;;;;;;;;;;;;;;;AClBtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,UAAMC,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,uB;;;;;yBAAAA,uB;AAAuB,O;;;cAAvBA;;;kBAHF,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,C,EACC,4D;;;;4HAECG,uB,EAAuB;AAAA;AAAA,oBAFxB,4DAEwB;AAAA,S;AAFZ,O","file":"default~booking-booking-module~course-listcourses-listcourses-module~edit-account-edit-account-modul~1d6af89d-es5.js","sourcesContent":["<ion-header>\r\n  <ion-toolbar color=\"primary\">\r\n      <ion-buttons \r\n              slot=\"start\" \r\n              *ngIf=\"actualStatePage==pageState.VERIFY\">\r\n\r\n          <ion-button fill=\"clear\" (click)=\"backStepRegistration()\">\r\n              <ion-icon name=\"arrow-back\"></ion-icon>\r\n          </ion-button>\r\n\r\n      </ion-buttons>\r\n\r\n      <ion-title *ngIf=\"actualStatePage!=pageState.REGISTRATION\">Verifica informazioni</ion-title>\r\n      <ion-title *ngIf=\"actualStatePage==pageState.REGISTRATION\">Aggiorna i tuoi dati</ion-title>\r\n\r\n      \r\n\r\n\r\n      <ion-buttons slot=\"end\">\r\n          <ion-button fill=\"clear\" (click)=\"closeModal()\">\r\n              <ion-icon name=\"close\" ></ion-icon>\r\n          </ion-button>\r\n      </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n\r\n\r\n\r\n<!-- CONTENT PAGES -->\r\n<ion-content class=\"ion-padding\">\r\n  <div [ngClass]=\"this.isDesktop?'ion-text-center div-logo desktop':'ion-text-center div-logo'\">\r\n      <img [src]=\"startConfig.getUrlLogo()\">\r\n  </div>\r\n\r\n\r\n  <!-- PARTE CONTATTI -->\r\n  <div *ngIf=\"actualStatePage==pageState.CONTACT\" class=\"ion-padding-horizontal\">\r\n\r\n      <form [formGroup]=\"formContact\">\r\n\r\n\r\n          <ion-list>\r\n              <ion-item *ngIf=\"this.emailVerifyNeeded\">\r\n                  <ion-icon name=\"at-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                  <ion-input type=\"email\" placeholder=\"E-Mail\" formControlName=\"email\"></ion-input>\r\n              </ion-item>\r\n              <ion-item *ngIf=\"this.smsVerifyNeeded\">\r\n                  <ion-icon name=\"call-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                  <ion-input type=\"tel\" inputmode=\"tel\" placeholder=\"+39 Cellulare\" formControlName=\"telephone\" ></ion-input>\r\n              </ion-item>\r\n\r\n          </ion-list>\r\n\r\n          <ion-button \r\n                  fill=\"outline\" \r\n                  size=\"small\" \r\n                  expand=\"block\"\r\n                  *ngIf=\"isPolicyLink()\"\r\n                  (click)=\"openPolicyLink()\">\r\n              condizioni di trattamento dei dati\r\n          </ion-button>\r\n            \r\n\r\n          <div  class=\"ion-no-padding div-message\" *ngIf=\"this.emailVerifyNeeded&&!this.smsVerifyNeeded\">\r\n          <p>\r\n              <ion-text color=\"primary\">\r\n                  <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n              </ion-text>\r\n              Indica una email valida dove sarà possibile inviarti le ricevute di prenotazioni, attestati dei corsi \r\n              ed altri documenti fiscali.                        \r\n          </p>\r\n\r\n          <h6>\r\n              Per effettuare la verifica ti inviamo una email contenente un pincode da inserire nei passaggi succesivi di registrazione\r\n          </h6>\r\n\r\n          <p>\r\n              <ion-text color=\"primary\">\r\n                  <h6><i>(in seguito potrai abilitare l'email anche per la ricezione di altro materiale informativo)</i></h6>\r\n              </ion-text>\r\n          </p>\r\n      </div>         \r\n      \r\n      \r\n      <div  class=\"ion-no-padding div-message\" *ngIf=\"this.emailVerifyNeeded&&this.smsVerifyNeeded\">\r\n          <p>\r\n              <ion-text color=\"primary\">\r\n                  <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n              </ion-text>\r\n              Indica una email valida dove sarà possibile inviarti i documenti fiscali ed un numero di cellulare \r\n              per contattarti in caso di problemi.\r\n\r\n          </p>\r\n\r\n          <p>\r\n              <ion-text color=\"primary\">\r\n                  <h6><i>Per effettuare la verifica ti inviamo 2 pincode (email/SMS)  da inserire nei passaggi succesivi di registrazione</i></h6>\r\n              </ion-text>\r\n          </p>\r\n      </div>                  \r\n\r\n      <div  class=\"ion-no-padding div-message\" *ngIf=\"this.smsVerifyNeeded&&!this.emailVerifyNeeded\">\r\n          <p>\r\n              <ion-text color=\"primary\">\r\n                  <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n              </ion-text>\r\n              Indica un numero di cellulare dove contattarti in caso di problematiche legate alle prenotazioni della struttura.\r\n\r\n          </p>\r\n              <p>\r\n              Per effettuare la verifica ti inviamo un SMS con un pincode da inserire nei passaggi succesivi di registrazione\r\n              </p>\r\n          <p>\r\n              <ion-text color=\"primary\">\r\n                  <h6><i>(non sarai mai contattato per promozioni o marketing)</i></h6>\r\n              </ion-text>\r\n          </p>\r\n      </div>                  \r\n\r\n\r\n              \r\n\r\n      </form>\r\n\r\n  </div>\r\n\r\n\r\n\r\n  <!-- PARTE VERIFICA CONTATTI -->\r\n  <div  *ngIf=\"actualStatePage==pageState.VERIFY\">\r\n      <div class=\"ion-no-padding div-message\" *ngIf=\"this.emailVerifyNeeded\">\r\n\r\n\r\n          <ion-item lines=\"none\">\r\n              <ion-button \r\n                  slot=\"start\" \r\n                  fill=\"clear\" \r\n                  color=\"danger\"\r\n                  (click)=\"onClickReinviaCodice(tipoVerifica.verificaemail)\">\r\n                  <ion-icon name=\"refresh-outline\"></ion-icon>\r\n              </ion-button>\r\n\r\n              <ion-label color=\"default\">Inserisci il pincode ricevuto tramite email</ion-label>\r\n          </ion-item>\r\n\r\n          <form [formGroup]=\"formVerifyMail\">\r\n              <div [ngClass]=\"this.isDesktop?'form-verifica desktop':'form-verifica'\">\r\n                  <ion-segment>\r\n                      <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c1\" #c1 (ionInput)=\"changeFocus($event)\"id=\"1\"></ion-input>\r\n                      <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c2\" #c2 (ionInput)=\"changeFocus($event)\"id=\"2\"></ion-input>\r\n                      <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c3\" #c3 (ionInput)=\"changeFocus($event)\"id=\"3\"></ion-input>\r\n                      <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c4\" #c4 (ionInput)=\"changeFocus($event)\"id=\"4\"></ion-input>\r\n                      <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c5\" #c5 (ionInput)=\"changeFocus($event)\"id=\"5\"></ion-input>\r\n                  </ion-segment>\r\n              </div>\r\n          </form>\r\n\r\n      </div>\r\n\r\n      <div class=\"ion-no-padding div-message\" *ngIf=\"this.smsVerifyNeeded\">\r\n\r\n          <ion-item lines=\"none\">\r\n              <ion-button \r\n                  slot=\"start\" \r\n                  fill=\"clear\" \r\n                  color=\"danger\"\r\n                  (click)=\"onClickReinviaCodice(tipoVerifica.verificasms)\">\r\n                  <ion-icon name=\"refresh-outline\"></ion-icon>\r\n              </ion-button>\r\n              <ion-label color=\"default\" >\r\n                  Inserisci il pincode ricevuto tramite SMS</ion-label>\r\n          </ion-item>            \r\n\r\n          <form [formGroup]=\"formVerifyTel\">\r\n                  <div [ngClass]=\"this.isDesktop?'form-verifica desktop':'form-verifica'\">\r\n                      <ion-segment>\r\n                          <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c6\" #c6 (ionInput)=\"changeFocus($event)\"id=\"6\"></ion-input>\r\n                          <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c7\" #c7 (ionInput)=\"changeFocus($event)\"id=\"7\"></ion-input>\r\n                          <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c8\" #c8 (ionInput)=\"changeFocus($event)\"id=\"8\"></ion-input>\r\n                          <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c9\" #c9 (ionInput)=\"changeFocus($event)\"id=\"9\"></ion-input>\r\n                          <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c10\" #c10 (ionInput)=\"changeFocus($event)\"id=\"10\"></ion-input>\r\n                      </ion-segment>\r\n                  </div>\r\n          </form>\r\n\r\n      </div>\r\n\r\n  </div>\r\n\r\n\r\n  <!-- PARTE AGGIORNAMENTO ANAGRAFICA -->\r\n  <div *ngIf=\"actualStatePage==pageState.REGISTRATION\">\r\n\r\n    <form [formGroup]=\"formRegister\">\r\n        <ion-list>\r\n          <ion-item-group>\r\n            <ion-item-divider color=\"light\">\r\n              <ion-icon \r\n                name=\"person-outline\" \r\n                slot=\"start\"\r\n                color=\"primary\"></ion-icon>\r\n              <ion-label>Come ti chiami ?</ion-label>\r\n            </ion-item-divider>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Nome</ion-label>\r\n              <ion-input formControlName=\"nome\"></ion-input>\r\n            </ion-item>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Cognome</ion-label>\r\n              <ion-input formControlName=\"cognome\"></ion-input>\r\n            </ion-item>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Sesso</ion-label>\r\n              <ion-select formControlName=\"sesso\" interface=\"popover\">\r\n                <ion-select-option \r\n                  *ngFor=\"let sesso of listSesso\"\r\n                  [value]=\"sesso.value\">\r\n                  {{ sesso.description }}\r\n                </ion-select-option>\r\n              </ion-select>\r\n            </ion-item>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Codice fiscale</ion-label>\r\n              <ion-input formControlName=\"cf\" (ionBlur)=\"onCfChange()\"></ion-input>\r\n            </ion-item >\r\n          </ion-item-group>\r\n    \r\n          <ion-item-group>\r\n            <ion-item-divider color=\"light\">\r\n              <ion-icon \r\n                name=\"home-outline\" \r\n                slot=\"start\"\r\n                color=\"primary\"></ion-icon>\r\n              <ion-label>Dove vivi ?</ion-label>\r\n            </ion-item-divider>\r\n\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Indirizzo</ion-label>\r\n              <ion-input formControlName=\"indResidenza\"></ion-input>\r\n            </ion-item>\r\n\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Comune</ion-label>\r\n              <ion-input formControlName=\"comResidenza\"></ion-input>\r\n            </ion-item>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Cap</ion-label>\r\n              <ion-input type=\"tel\" inputmode=\"tel\" maxlength=\"5\" formControlName=\"capResidenza\"></ion-input>\r\n            </ion-item>\r\n              <ion-item>\r\n              <ion-label position=\"floating\">Provincia</ion-label>\r\n              <ion-input formControlName=\"provResidenza\"></ion-input>\r\n            </ion-item>\r\n            <ion-item>\r\n                    <ion-label position=\"floating\">Stato</ion-label>\r\n                    <ion-input formControlName=\"statoResidenza\"></ion-input>\r\n            </ion-item>\r\n            \r\n          </ion-item-group>\r\n          <ion-item-group>\r\n            <ion-item-divider color=\"light\">\r\n              <ion-icon \r\n                name=\"logo-reddit\" \r\n                slot=\"start\"\r\n                color=\"primary\"></ion-icon>\r\n              <ion-label>Quando sei nato ?</ion-label>\r\n            </ion-item-divider>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Data</ion-label>\r\n              <ion-datetime formControlName=\"nascita\" \r\n                            displayFormat=\"DD-MM-YYYY\"\r\n                            [max]=\"today\"></ion-datetime>\r\n            </ion-item>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Comune</ion-label>\r\n              <ion-input formControlName=\"comNascita\"></ion-input>\r\n            </ion-item>\r\n            <ion-item *ngIf=\"showInputCapNascita\">\r\n              <ion-label position=\"floating\">Cap</ion-label>\r\n              <ion-input formControlName=\"capNascita\"></ion-input>\r\n            </ion-item>\r\n            <ion-item> \r\n              <ion-label position=\"floating\">Provincia</ion-label>\r\n              <ion-input formControlName=\"provNascita\"></ion-input>\r\n            </ion-item>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">Stato</ion-label>\r\n              <ion-input formControlName=\"statoNascita\"></ion-input>\r\n            </ion-item>\r\n          </ion-item-group>\r\n        </ion-list>\r\n      </form>\r\n\r\n      <div  class=\"ion-no-padding div-message\">\r\n          <p>\r\n          <ion-text color=\"primary\">\r\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n          </ion-text>\r\n              Dobbiamo richiederti alcune informazioni personali per l'eventuale\r\n          </p>\r\n          <p>\r\n              emissione di documenti fiscali\r\n          </p>\r\n\r\n          <p>\r\n              <ion-text color=\"primary\">\r\n                  <h6><i>(ad esempio in caso di iscrizioni a corsi o prenotazioni della struttura)</i></h6>\r\n              </ion-text>\r\n          </p>\r\n      </div>\r\n  </div>\r\n\r\n\r\n</ion-content>\r\n\r\n<!-- FOOTER PAGES-->\r\n<ion-footer>\r\n\r\n  <div id=\"footer-contact\" *ngIf=\"actualStatePage==pageState.CONTACT\">\r\n      <ion-button \r\n              color=\"primary\"\r\n              class=\"btn-confirm\" \r\n              expand=\"block\"\r\n      [disabled]=\"!this.formContact.valid\"\r\n      (click)=\"onClickFooterAvanti()\">Avanti</ion-button>\r\n  </div>\r\n\r\n  <div id=\"footer-verify\" *ngIf=\"actualStatePage==pageState.VERIFY\">\r\n\r\n      <ion-button \r\n          class=\"btn-confirm\"\r\n          color=\"primary\"\r\n          expand=\"block\"\r\n          (click)=\"onClickFooterAvanti()\"\r\n          [disabled]=\"!isEnableAvantiOnVerify()\">\r\n          Verifica\r\n      </ion-button>\r\n\r\n      \r\n  </div>\r\n\r\n  <div id=\"footer-registration\" *ngIf=\"actualStatePage==pageState.REGISTRATION\">\r\n      \r\n\r\n          <ion-button \r\n              class=\"btn-confirm\" \r\n              color=\"primary\" \r\n              expand=\"block\" \r\n              (click)=\"onClickFooterAvanti()\" \r\n              [disabled]=\"!formRegister.valid\">\r\n              Aggiorna\r\n          </ion-button>\r\n      \r\n  </div>\r\n\r\n\r\n</ion-footer>\r\n\r\n\r\n\r\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { ModalController, LoadingController, ToastController, NavController, AlertController, NavParams } from '@ionic/angular';\r\nimport { StartConfiguration } from 'src/app/models/start-configuration.model';\r\nimport { StartService } from 'src/app/services/start.service';\r\nimport { Utente, ParamsVerifica } from 'src/app/models/utente.model';\r\nimport { Plugins } from '@capacitor/core';\r\nimport { Gruppo } from 'src/app/models/gruppo.model';\r\nimport { TipoVerificaAccount, PageType, RequestPincodeUse, ValueList, Sesso } from 'src/app/models/valuelist.model';\r\nimport { Area } from 'src/app/models/area.model';\r\nimport { AreaLink } from 'src/app/models/arealink.model';\r\nimport { AccountRequestCode, AccountOperationResponse, AccountVerifyCode } from 'src/app/models/accountregistration.model';\r\n\r\nimport { CryptoService } from 'src/app/library/services/crypto.service';\r\nconst { Browser } = Plugins;\r\nimport { MyDateTime } from 'src/app/library/models/mydatetime.model';\r\nimport { PostResponse } from 'src/app/library/models/postResult.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-verify',\r\n  templateUrl: './verify.page.html',\r\n  styleUrls: ['./verify.page.scss'],\r\n})\r\nexport class VerifyPage implements OnInit {\r\n\r\n    //se mostrare l'input cap nascita\r\n    showInputCapNascita = false\r\n    //l'oggetto ricevuto come parametro all'apertura della videata in modale\r\n    params : ParamsVerifica = new ParamsVerifica\r\n\r\n   //per utilizzare l'enum nell'html\r\n   pageState: typeof PageState=PageState;\r\n   tipoVerifica: typeof TipoVerificaAccount = TipoVerificaAccount;\r\n \r\n   //variabile che indica lo stato della pagina\r\n   //Se posizionato su  Register, Verifiy o Welcome\r\n   actualStatePage:PageState;\r\n \r\n \r\n   //Array con gli step possibili in registrazione\r\n   stepRegistration: PageState[] = [];\r\n   indexStepRegistration: number = 0;\r\n \r\n   //Documento per la richiesta invio codici al server\r\n   docRichiestaCodici: AccountRequestCode = new AccountRequestCode();\r\n  \r\n \r\n   //varibili formGroup (per usare i reactive forms)\r\n   formRegister: FormGroup;\r\n   formVerifyTel: FormGroup;\r\n   formVerifyMail: FormGroup;\r\n   formContact: FormGroup;\r\n \r\n   //Dati\r\n   startConfig:StartConfiguration;\r\n   docGruppo: Gruppo;\r\n   docArea: Area;\r\n   \r\n   //Utente\r\n   docUtente: Utente;\r\n   \r\n   //Restituisce true se l'app sta girando su Desktop\r\n   isDesktop:boolean;\r\n   \r\n   //Verifiche\r\n   emailVerifyNeeded: boolean;\r\n   smsVerifyNeeded: boolean;\r\n   \r\n   //lista delle decodifiche del sesso\r\n   listSesso : ValueList[]=[];\r\n   //\r\n   today: string;\r\n \r\n   //#region questi servono per accedere ai corrispettivi elementi in HTML\r\n   @ViewChild('c1') c1;\r\n   @ViewChild('c2') c2;\r\n   @ViewChild('c3') c3;\r\n   @ViewChild('c4') c4;\r\n   @ViewChild('c5') c5;\r\n   @ViewChild('c6') c6;\r\n   @ViewChild('c7') c7;\r\n   @ViewChild('c8') c8;\r\n   @ViewChild('c9') c9;\r\n   @ViewChild('c10') c10;\r\n   \r\n   //#endregion\r\n \r\n \r\n   constructor(\r\n     private modalCtrl:ModalController,\r\n     private startService:StartService,\r\n     private loadingController:LoadingController,\r\n     private toastCtrl:ToastController,\r\n     private alertCtrl: AlertController,\r\n     private cryptoService: CryptoService,\r\n     private navParams: NavParams\r\n   ) {\r\n    \r\n    //per il momento, imposto che non devo verificare niente\r\n    this.emailVerifyNeeded = false;\r\n    this.smsVerifyNeeded = false \r\n\r\n     //Stato Pagina registrazione\r\n     this.indexStepRegistration = 0;\r\n \r\n     //Posizionato sulla pagina di login\r\n     this.actualStatePage = PageState.REGISTRATION;\r\n    \r\n \r\n     //Richiedo lo startConfig\r\n      this.startConfig = startService.actualStartConfig\r\n      if (this.startConfig && this.startConfig.gruppo) {\r\n\r\n\r\n        //Memorizzo il Gruppo con le sue Opzioni\r\n        this.docGruppo = this.startConfig.gruppo;\r\n      }\r\n\r\n     //Prelevo l'area selezionata \r\n     this.docArea = this.startService.areaSelectedValue;\r\n\r\n     //recupero l'utente\r\n     this.docUtente=this.startService.actualUtente;\r\n\r\n    //recupero il parametro\r\n    \r\n    this.params = this.navParams.get('params');\r\n    if (this.params==null||this.params==undefined){\r\n      //se non ho i parametri, esco\r\n      this.showMessage(\"Errore\");\r\n      this.closeModal();\r\n    }\r\n     \r\n    \r\n\r\n\r\n    //recupero le decodifiche della lista sesso\r\n    this.listSesso= ValueList.getArray(Sesso);\r\n\r\n    //il giorno attuale per filtrare la data di nascita in input\r\n    this.today=this.today=MyDateTime.formatDateISO(new Date);\r\n\r\n  }\r\n \r\n   ngOnInit() {\r\n     this.createArrayStepRegistration(this.docGruppo);\r\n     this.createRegisterForm();\r\n     this.createVerifyForm();\r\n     this.createContactForm();\r\n     this.isDesktop=this.startService.isDesktop\r\n   }\r\n \r\n\r\n \r\n \r\n   /**\r\n    * Crea un array con i passaggi disponibili in registrazione\r\n    * a seconda delle richieste del gruppo\r\n    * Se il gruppo non vuole verifiche, si passa subito ai dati\r\n    */\r\n    createArrayStepRegistration(docGruppo: Gruppo) {\r\n     this.stepRegistration = [];\r\n     \r\n      \r\n      switch (this.params.tipoVerifica){\r\n        \r\n        //se mi passano \"verificaemail\", devo verificare solo la mail\r\n        case TipoVerificaAccount.verificaemail:\r\n        this.emailVerifyNeeded=true;\r\n        this.smsVerifyNeeded=false;\r\n        break;\r\n        \r\n        //se mi passano \"verificasms\", devo verificare solo l'sms\r\n        case TipoVerificaAccount.verificasms:\r\n        this.emailVerifyNeeded=false;\r\n        this.smsVerifyNeeded=true;\r\n        break;\r\n        \r\n        //se mi passano verificaemailsms, devo verificare entrambi\r\n        case TipoVerificaAccount.verificaemailsms:\r\n        this.emailVerifyNeeded=true;\r\n        this.smsVerifyNeeded=true;\r\n        break;\r\n        \r\n        //in tutti gli altri casi, non devo verificare niente\r\n        default:\r\n        this.smsVerifyNeeded=false;\r\n        this.emailVerifyNeeded=false;\r\n        break;\r\n      }\r\n\r\n      //se devo verificare email, sms, o entrambi, aggiungo pagina contact e verify all'array di pagine\r\n      if (this.emailVerifyNeeded||this.smsVerifyNeeded){\r\n\r\n        this.stepRegistration.push(PageState.CONTACT);\r\n        this.stepRegistration.push(PageState.VERIFY);\r\n      }\r\n\r\n      //se mi è stato detto di fare anche l'aggiornamento dell'anagrafica, aggiungo lo step necessario\r\n      if (this.params.updateDocUtente){\r\n        this.stepRegistration.push(this.pageState.REGISTRATION);\r\n      }\r\n\r\n      //Mi posiziono sul primo step\r\n      if (this.stepRegistration[0]){\r\n        this.actualStatePage=this.stepRegistration[0];\r\n      }\r\n   }\r\n \r\n   /**\r\n    * Effettua l'avanzamento di pagina nello Step Registrazione\r\n    */\r\n   nextStepRegistration() {\r\n     \r\n     if (this.indexStepRegistration + 1 < this.stepRegistration.length) {\r\n       this.indexStepRegistration++;\r\n       this.actualStatePage=this.stepRegistration[this.indexStepRegistration];\r\n       \r\n     }\r\n     else{\r\n       this.closeModal();\r\n     }\r\n   }\r\n \r\n   /**\r\n    * Torna indietro negli Step di Registrazione\r\n    */\r\n   backStepRegistration() {\r\n \r\n     if (this.indexStepRegistration - 1 >= 0) {\r\n       this.indexStepRegistration--;\r\n       this.actualStatePage=this.stepRegistration[this.indexStepRegistration];\r\n  \r\n       }\r\n     }    \r\n   \r\n   /**\r\n    * Chiusura della videata\r\n    */  \r\n   closeModal(){\r\n     this.modalCtrl.dismiss();\r\n   }\r\n \r\n \r\n \r\n   /**\r\n    * Pulsante Avanti o Acced presente nel footer\r\n    */\r\n   onClickFooterAvanti() {\r\n     switch(this.actualStatePage) {\r\n \r\n       case PageState.CONTACT:\r\n           //Siamo sulla pagina dei Contatti e dobbiamo gestirne la fase\r\n           this.onClickAvantiContact();\r\n         break;\r\n \r\n       case PageState.VERIFY:\r\n         //Siamo sulla pagina di inserimento codici da verificare\r\n         this.onClickAvantiVerifica();\r\n         break;\r\n \r\n       case PageState.REGISTRATION:\r\n         //Siamo nella parte finale della registrazione con i dati \r\n         //e l'invio dei dati al server\r\n         this.onClickAggiornaDati();\r\n       \r\n       default:\r\n         break;\r\n \r\n     }\r\n   }\r\n  \r\n   //#region GESTIONE PAGINA CONTATTI E CODICI\r\n \r\n   /*\r\n   L'intera fase di registrazione è gestita con un array this.stepRegistration\r\n   Dentro ci sono i passaggi richiesti (che sono variabili a seconda delle verifiche richieste)\r\n \r\n   this.indexStepRegistration è l'indice dell'array su cui siamo posizionati\r\n   this.actualStatePage è lo Stato Attuale (recuperato dall'array)\r\n \r\n   */\r\n \r\n   /**\r\n    * Click di Avanti sulla pagina con i contatti\r\n    */\r\n   onClickAvantiContact() {\r\n\r\n      if (this.formContact.valid){\r\n        \r\n        //azzero il documento di richiesta\r\n        this.docRichiestaCodici = new AccountRequestCode();\r\n        this.docRichiestaCodici.REQUESTEMAILCODE=false;\r\n        this.docRichiestaCodici.REQUESTSMSCODE=false;\r\n\r\n        //inserisco i dati generali \r\n         this.docRichiestaCodici.IDAREA = this.docArea.ID;\r\n         this.docRichiestaCodici.USE = RequestPincodeUse.forValidation; \r\n\r\n        //se devo verificare la mail, inserisco i dati nel documento\r\n        if (this.emailVerifyNeeded){\r\n          this.docRichiestaCodici.REQUESTEMAILCODE=true;\r\n          this.docRichiestaCodici.EMAIL=this.formContact.value.email;\r\n        }\r\n\r\n        //se devo verificare il tel, inserisco i dati nel documento\r\n        if (this.smsVerifyNeeded){\r\n          this.docRichiestaCodici.REQUESTSMSCODE=true;\r\n          this.docRichiestaCodici.TELEPHONE=this.formContact.value.telephone;\r\n        }\r\n\r\n        //ora posso fare la richiesta al server\r\n        this.sendServerRichiestaCodici(true);\r\n\r\n      }\r\n\r\n      //se il form non è valido, non faccio niente\r\n      else {\r\n        return;\r\n      }\r\n    }\r\n\r\n\r\n  \r\n \r\n   /**\r\n    * Chiede al server di inviare i codici pin necessari\r\n    * Se tutto va a buon fine si sposta nella pagina di verifica, altrimenti segnala l'errore\r\n    * @param onSuccessChangePage Se l'operazione ha successo passa alla pagina successiva\r\n    * @param customSuccessMessage Se presente viene mostrato in caso di richiesta a buon fine\r\n    */\r\n   sendServerRichiestaCodici(onSuccessChangePage:boolean = true, customSuccessMessage='Codice inviato con successo!', customErrorMessage='Errore nell\\'invio del codice, riprova') {\r\n \r\n     this.loadingController\r\n       .create({\r\n           message: 'Invio Codici in corso...'\r\n       })\r\n       .then(element => {\r\n \r\n         //Creo il loading\r\n         element.present();\r\n \r\n         //Ora chiedo al server di inviare i codici\r\n \r\n         //Chiamo il servizio\r\n\r\n         \r\n         this.startService\r\n               .validationSendCodici(this.docRichiestaCodici, this.docUtente)\r\n               .then((responseServer:AccountOperationResponse) => {\r\n \r\n                 //Chiudo il Loading Controller\r\n                 element.dismiss();\r\n \r\n                 if (responseServer.result){\r\n\r\n                  //Qui in teoria i codici sono stati inviati\r\n                  //Memorizzo IDREFER per le chiamate successive\r\n                  this.docRichiestaCodici.IDREFER = responseServer.idRefer;\r\n  \r\n                  //Azzero i flag che servono a richiedere i codici\r\n                  this.docRichiestaCodici.REQUESTSMSCODE = false;\r\n                  this.docRichiestaCodici.REQUESTEMAILCODE = false;\r\n                  \r\n                  this.showMessage(customSuccessMessage);\r\n                  //Mi sposto alla pagina successiva (di verifica)\r\n                  if (onSuccessChangePage) {\r\n\r\n                    //Cancello gli input code presenti nelle formTel e Mail\r\n                    this.clearInputPinCode();\r\n                    \r\n                    //Devo spostarmi alla pagina di verifica\r\n                    this.nextStepRegistration();\r\n                  }\r\n                }\r\n                else{\r\n                  //se il server ha risposto, ma non è riuscito ad inviare\r\n                  \r\n                  this.showMessage(customErrorMessage);\r\n                }\r\n               })\r\n               .catch(err => {\r\n                   //Chiudo il Loading Controller\r\n                   element.dismiss();\r\n                   //Visualizzo il messaggio\r\n                   console.log(err);\r\n                   this.showMessage(\"Errore di connessione\");\r\n               })\r\n\r\n     });\r\n     \r\n   }\r\n \r\n \r\n   //#endregion\r\n \r\n \r\n   //#region GESTIONE PAGINA VERIFICA\r\n \r\n   /**\r\n    * evento scatenato quando l'utente tappa su \"reinvia codice\"\r\n    * Eì possibile richiedere il reinvio di 1 solo codice alla volta\r\n    * @param tipo Reinvio Codice Email oppure Sms\r\n    */\r\n   onClickReinviaCodice(tipo: TipoVerificaAccount){\r\n     let askMessage = '';\r\n     let askEmail = false;\r\n     let askTel = false;\r\n \r\n     if (this.docRichiestaCodici) {\r\n \r\n       askMessage = 'Verrà inviato un nuovo codice a ';\r\n \r\n       switch (tipo) {\r\n         case TipoVerificaAccount.verificaemail:\r\n             askMessage += this.docRichiestaCodici.EMAIL;\r\n             //Uso le variabili temporanee per indicare che vorrebbe il codice in email\r\n             askEmail = true;\r\n \r\n           break;\r\n \r\n         case TipoVerificaAccount.verificasms:\r\n             askMessage += this.docRichiestaCodici.TELEPHONE;\r\n             //Uso le variabili temporanee per indicare che vorrebbe il codice su telefono\r\n             askTel= true;\r\n           break;\r\n       \r\n         default:\r\n           break;\r\n       }\r\n \r\n       //Faccio la richiesta se desidera un reinvio codici\r\n       this.alertCtrl.create({\r\n         header: 'Reinvio pincode',\r\n         message: askMessage,\r\n\r\n         buttons: [\r\n           {\r\n             text: 'Annulla',\r\n             role: 'cancel',\r\n           },\r\n           {\r\n             text: 'Reinvia',\r\n             handler: () => {\r\n               \r\n               //Reimposto il documenti di Richiesta con quello che vuole\r\n               this.docRichiestaCodici.REQUESTEMAILCODE = askEmail;\r\n               this.docRichiestaCodici.REQUESTSMSCODE = askTel;\r\n \r\n               const msg = 'Codice reinviato con successo';\r\n               //Faccio la richiesta al server e indico di non cambiare\r\n               //pagina al termine della richiesta\r\n               this.sendServerRichiestaCodici(false, msg);\r\n             }\r\n           }\r\n         ]\r\n       })\r\n       .then (element => {\r\n         element.present();\r\n       })\r\n \r\n       \r\n     }\r\n \r\n   }\r\n \r\n   \r\n   /**\r\n   * evento scatenato quando l'utente clicca sul pulsante conferma della videata di verifica\r\n   * dei recapiti\r\n   */\r\n   onClickAvantiVerifica()\r\n   {\r\n     //Devo inviare al server i dati inseriti dall'utente\r\n     let altMessage = '';\r\n     let docVerify: AccountVerifyCode;\r\n \r\n     if (!this.isEnableAvantiOnVerify()) {\r\n       altMessage = 'Controllare i dati inseriti';\r\n     }\r\n     else {\r\n       //I codici sono stati richiesti e dovrei avere l'IDREFER\r\n       if (this.docRichiestaCodici && this.docRichiestaCodici.IDREFER) {\r\n         \r\n           if (this.docRichiestaCodici.IDREFER.length !== 0) {\r\n             //Posso preparare il documento per la verifica\r\n             docVerify = new AccountVerifyCode();\r\n             docVerify.IDAREA = this.docRichiestaCodici.IDAREA;\r\n             docVerify.IDREFER = this.docRichiestaCodici.IDREFER;\r\n             \r\n             //Devo passare il pincode Email\r\n             if (this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemail || \r\n               this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms\r\n                ) \r\n                {\r\n                  docVerify.EMAILPINCODE = this.getInputVerifyCode(TipoVerificaAccount.verificaemail);\r\n                }\r\n \r\n \r\n             //Devo passare il pincode SMS\r\n             if (this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificasms || \r\n               this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms\r\n                ) \r\n                {\r\n                  docVerify.SMSPINCODE = this.getInputVerifyCode(TipoVerificaAccount.verificasms);\r\n                }\r\n \r\n             \r\n             //Tutto pronto per effettuare la richiesta di verifica pincode\r\n             this.sendServerVerificaCodici(docVerify);\r\n \r\n \r\n           }\r\n           else {\r\n             altMessage = 'Errore: Richiedere il reinvio';\r\n           }\r\n \r\n       }\r\n       else {\r\n         altMessage = 'Errore: Richiedere il reinvio';\r\n       }\r\n     }\r\n \r\n \r\n     //Nel caso mostro un messaggio di errore\r\n     if (altMessage.length!=0) {\r\n       this.showMessage(altMessage);\r\n     }\r\n   }\r\n \r\n \r\n \r\n   /**\r\n    * Invio al server i pincode inseriti dall'utente\r\n    * Se tutto va a buon fine, le informazioni saranno rese VERIFICATE\r\n    * @param docVerifica Documento per la verifica dei codici\r\n    */\r\n   sendServerVerificaCodici(docVerifica: AccountVerifyCode) {\r\n \r\n     if (docVerifica) {\r\n \r\n       this.loadingController\r\n       .create({\r\n           message: 'Verifica Codici...'\r\n       })\r\n       .then(elLoading => {\r\n \r\n         //Creo il loading\r\n         elLoading.present();\r\n \r\n         //Faccio la richiesta al server\r\n         this.startService\r\n           .validationVerifyCodici(docVerifica)\r\n           .then((response:AccountOperationResponse) => {\r\n \r\n             //Chiudo il Loading \r\n             elLoading.dismiss();\r\n \r\n             //Verifica codici passata\r\n             if (response.result) {\r\n \r\n               //se nella richiesta (andata a buon fine), ho verificato la mail, lo segno nel docutente\r\n               if (this.docRichiestaCodici.REQUESTEMAILCODE) {\r\n                 this.docUtente.VERIFICATAMAIL=true;\r\n                 this.docUtente.EMAIL = this.docRichiestaCodici.EMAIL;\r\n               }\r\n\r\n               //se nella richiesta (andata a buon fine), ho verificato il cell, lo segno nel docutente\r\n               if (this.docRichiestaCodici.REQUESTSMSCODE){\r\n\r\n                 this.docUtente.VERIFICATAMOBILE=true;\r\n                 this.docUtente.MOBILENUMBER = this.docRichiestaCodici.TELEPHONE;\r\n               }\r\n               \r\n              \r\n                this.showMessage(\"Verifica completata con successo\");\r\n                //Posso spostarmi alla pagina successiva\r\n                this.nextStepRegistration();\r\n \r\n             }\r\n             else {\r\n \r\n               //Il server ha risposto, ma la verifica non è andata a buon fine (presumo codice errato)\r\n               this.showMessage(response.message);\r\n             }\r\n           })\r\n           .catch(err => {\r\n             //Qui qualcosa è andato storto\r\n \r\n             //Chiudo il Loading\r\n             elLoading.dismiss();\r\n \r\n             //Mostro il messaggio\r\n             this.showMessage(\"Errore di connessione\");\r\n           });\r\n       });\r\n     }\r\n     else{\r\n       this.showMessage('Errore, richiedere un nuovo codice');\r\n     }\r\n   }\r\n \r\n \r\n   //#endregion\r\n \r\n \r\n \r\n\r\n\r\n   \r\n \r\n   /**\r\n    * evento scatenato quando l'utente clicca \"aggiorna\" \r\n    * sulla pagina di inserimento dati\r\n    */\r\n   onClickAggiornaDati()\r\n   {\r\n     this.execAggiornaDati();\r\n   }\r\n   /**\r\n    * Invia al server i dati di registrazione\r\n    */\r\n   \r\n\r\n   execAggiornaDati() {\r\n\r\n\r\n    //recupero tutti i dati dal form\r\n    if (this.formRegister.valid)\r\n    {\r\n      \r\n      this.docUtente.NOMINATIVO='';\r\n      this.docUtente.NOME=this.formRegister.value.nome;\r\n      this.docUtente.COGNOME=this.formRegister.value.cognome;\r\n      this.docUtente.SESSO=this.formRegister.value.sesso;\r\n      this.docUtente.CODICEFISCALE=this.formRegister.value.cf;\r\n\r\n      this.docUtente.INDIRIZZO=this.formRegister.value.indResidenza;\r\n      this.docUtente.COMUNE=this.formRegister.value.comResidenza;\r\n      this.docUtente.CAP=this.formRegister.value.capResidenza;\r\n      this.docUtente.PROVINCIA=this.formRegister.value.provResidenza;\r\n      this.docUtente.ISOSTATO=this.formRegister.value.statoResidenza;\r\n\r\n      \r\n      if (this.formRegister.value.nascita) {\r\n        this.docUtente.NATOIL = new Date(this.formRegister.value.nascita);\r\n      }\r\n\r\n      this.docUtente.NATOA=this.formRegister.value.comNascita;\r\n      this.docUtente.NATOCAP=this.formRegister.value.capNascita;\r\n      this.docUtente.NATOPROV=this.formRegister.value.provNascita;\r\n      this.docUtente.NATOISOSTATO=this.formRegister.value.statoNascita;\r\n      \r\n      //EMAIL E NUMERO DI TELEFONO NON LI MODIFICO MAI\r\n\r\n      //USO IL LOADING CONTROLLER \r\n      this.loadingController\r\n            .create({\r\n              message: 'Aggiornamento dati...',\r\n              spinner: 'circular'\r\n            })\r\n            .then (elLoading => {\r\n              // Mostro il loading\r\n              elLoading.present();\r\n\r\n              //richiesta di aggiornamento al server\r\n              this.startService\r\n                  .updateUtente(this.docUtente)\r\n                  .then(result => {\r\n\r\n                      //visto che siamo nel then, l'operazione è sicuramente andata a buon fine\r\n                      elLoading.dismiss();\r\n                        this.showMessage('Info Aggiornate');\r\n                        this.closeModal();\r\n\r\n                  })\r\n                  .catch(error => {\r\n                    elLoading.dismiss();\r\n                    this.showMessage(error);\r\n                    console.log(error);\r\n                  });\r\n           });\r\n\r\n    }\r\n  }\r\n \r\n   /**\r\n    * Al termine della registrazione se tutto va a buon fine, procedo con il login automatico\r\n    */\r\n   loginAfterRegister(username: string, password: string)\r\n   {\r\n \r\n     if (username && password) {\r\n \r\n       // Chiamo il Servizio per eseguire l'autorizzazione\r\n       this.startService\r\n       .userLogin(username, password)\r\n       .then((dataResult:PostResponse) => {\r\n \r\n           // E' Arrivata una risposta NEGATIVA\r\n           if (!dataResult.result) {\r\n \r\n             this.showMessage(dataResult.message);\r\n           }\r\n           else {\r\n             //LOGIN ACCETTATO\r\n             \r\n             // MEMORIZZO LE CREDENZIALI PER UN SUCCESSIVO RECUPERO\r\n             this.startService.saveStorageUtente(username,password);\r\n           }\r\n       });\r\n     }\r\n \r\n \r\n     \r\n   }\r\n \r\n \r\n \r\n \r\n \r\n   /**\r\n    * procedura che sposta il focus sulla casella di input successiva\r\n    * @param evento parametri $event dell'eveno \"ion-input\", necessari a identificare\r\n    * in quale casella c'è stato l'input\r\n    */\r\n   changeFocus(evento)\r\n   {\r\n     let id=evento['target']['id'];\r\n         switch (id) {\r\n         case '1':\r\n           this.c2.setFocus();\r\n           break;\r\n         case '2':\r\n           this.c3.setFocus();\r\n           break;\r\n         case '3':\r\n           this.c4.setFocus();\r\n           break;\r\n         case '4':\r\n           this.c5.setFocus();\r\n           break;\r\n         case '6':\r\n           this.c7.setFocus();\r\n           break;\r\n         case '7':\r\n           this.c8.setFocus();\r\n           break;\r\n         case '8':\r\n           this.c9.setFocus();\r\n           break;\r\n         case '9': \r\n           this.c10.setFocus();\r\n           break;\r\n       \r\n         default:\r\n           break;\r\n       }\r\n     \r\n   }\r\n    \r\n \r\n //#region CREAZIONI FORM\r\n \r\n \r\n   /**\r\n    * Funzione di creazione della Form Contatti, usata come prima pagina \r\n    * nello StepRegistrazione\r\n    */\r\n   createContactForm(){\r\n     let pattTelefono = '^[+]*[0-9]*';\r\n     //Spiegazione pattern \r\n     //Per altre spiegazioni guardare qui https://regexr.com/3c53v\r\n \r\n     // ^ Il match parte dall'inizio della stringa\r\n     // [+] Qualsiasi elemento contenuto nelle quadre (quindi il +)\r\n     // * la regola precedente è opzionale\r\n     // [0-9] Qualsiasi elemento delle quadre\r\n     // * la regola precedente è opzionale\r\n \r\n \r\n     //form dei contatti (mail e telefono)\r\n     this.formContact=new FormGroup({\r\n       email: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [this.emailVerifyNeeded? Validators.required : Validators.nullValidator, Validators.email]\r\n       }),\r\n       telephone: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [this.smsVerifyNeeded? Validators.required : Validators.nullValidator, Validators.pattern(pattTelefono)]\r\n       })\r\n     });\r\n \r\n   }\r\n \r\n \r\n \r\n \r\n   createRegisterForm(){\r\n     let patternCodice = '^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}';\r\n     //form di registrazione\r\n     this.formRegister=new FormGroup({\r\n      nome:new FormControl(this.docUtente.NOME, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      cognome:new FormControl(this.docUtente.COGNOME, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      sesso:new FormControl(this.docUtente.SESSO, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      nascita:new FormControl((this.docUtente.NATOIL ? this.docUtente.NATOIL.toISOString(): this.docUtente.NATOIL), {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      provNascita:new FormControl(this.docUtente.NATOPROV, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      comNascita:new FormControl(this.docUtente.NATOA, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      statoNascita:new FormControl(this.docUtente.NATOISOSTATO, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      capNascita:new FormControl(this.docUtente.NATOCAP, {\r\n        updateOn:'change',\r\n        validators: [\r\n          \r\n        ]\r\n      }),\r\n      provResidenza:new FormControl(this.docUtente.PROVINCIA, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      comResidenza:new FormControl(this.docUtente.COMUNE, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      indResidenza:new FormControl(this.docUtente.INDIRIZZO, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      capResidenza:new FormControl(this.docUtente.CAP, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      statoResidenza:new FormControl(this.docUtente.ISOSTATO, {\r\n        updateOn:'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      cf:new FormControl(this.docUtente.CODICEFISCALE, {\r\n        updateOn:'change',\r\n        validators: [Validators.required, Validators.pattern(patternCodice)]\r\n      })\r\n    })\r\n   }\r\n  \r\n\r\n   onCfChange(){\r\n\r\n    //se il cf cambia, quando l'utente esce dalla casella, provo a validarlo e riempire gli altri campi\r\n    let codFiscString: string = this.formRegister.value.cf;\r\n\r\n    if (codFiscString!=null&&codFiscString!=undefined){\r\n      \r\n      if (codFiscString.length != 0){\r\n  \r\n        //chiamo il servizio per decodificare il codice fiscale\r\n        this.startService.checkCodiceFiscale(codFiscString, true).then(codFiscObj => {\r\n          \r\n          //inserisco tutto quello che ho decodificato nel docutente\r\n          this.docUtente.NATOISOSTATO='Italia';\r\n          this.docUtente.NATOA=codFiscObj.comune;\r\n          this.docUtente.NATOPROV=codFiscObj.provincia;\r\n          this.docUtente.NATOIL=codFiscObj.dataNascita;\r\n          this.docUtente.SESSO=codFiscObj.sesso;\r\n          this.docUtente.NATOCAP=codFiscObj.cap;\r\n          \r\n\r\n          //aggiorno i campi del form\r\n\r\n          this.formRegister.get('comNascita').setValue(this.docUtente.NATOA);\r\n          this.formRegister.get('provNascita').setValue(this.docUtente.NATOPROV);\r\n          this.formRegister.get('nascita').setValue(this.docUtente.NATOIL.toISOString());\r\n          this.formRegister.get('sesso').setValue(this.docUtente.SESSO);\r\n          this.formRegister.get('statoNascita').setValue(this.docUtente.NATOISOSTATO);\r\n          this.formRegister.get('capNascita').setValue(this.docUtente.NATOCAP);\r\n\r\n          //setto il campo cf come valido\r\n          this.formRegister.controls['cf'].setErrors(null);\r\n\r\n  \r\n        }).catch(err => {\r\n\r\n          //qui in teoria il cf non ha passato neppure il check base, segno il campo come non valido\r\n          this.formRegister.controls['cf'].setErrors({'incorrect':true});\r\n          console.log(err);\r\n        })\r\n      }\r\n    }\r\n  }\r\n  \r\n \r\n   /**\r\n    * Funzione per la creazione del FORM relativo alla Verifica Pincode Email e SMS\r\n    */\r\n   createVerifyForm(){\r\n     this.formVerifyMail=new FormGroup({\r\n       c1: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       }),\r\n       c2: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       }),\r\n       c3: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       }),\r\n       c4: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       }),\r\n       c5: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       })\r\n     });\r\n \r\n     this.formVerifyTel=new FormGroup({\r\n       c6: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       }),\r\n       c7: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       }),\r\n       c8: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       }),\r\n       c9: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       }),\r\n       c10: new FormControl(null, {\r\n         updateOn: 'change',\r\n         validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n       })\r\n     });\r\n \r\n   }\r\n\r\n   /**\r\n    * Cancella i valori nelle caselle di input del form\r\n    * formVerifyMail e formVerifyTel\r\n    */\r\n   clearInputPinCode() {\r\n     for (let index = 1; index <= 5; index++) {\r\n       \r\n       this.formVerifyMail.get('c' + index).setValue(\"\");\r\n    \r\n     }\r\n\r\n     for (let index = 6; index <= 10; index++) {\r\n       \r\n      this.formVerifyTel.get('c' + index).setValue(\"\");\r\n   \r\n    }\r\n   }\r\n \r\n \r\n   /**\r\n    * \r\n    * @param tipo Tipo del codice richiesto\r\n    */\r\n   getInputVerifyCode(tipo: TipoVerificaAccount): string {\r\n     let strReturn: string = '';\r\n \r\n     if (tipo == TipoVerificaAccount.verificaemail) {\r\n       strReturn = this.formVerifyMail.value.c1 + \r\n                   this.formVerifyMail.value.c2 + \r\n                   this.formVerifyMail.value.c3 + \r\n                   this.formVerifyMail.value.c4 + \r\n                   this.formVerifyMail.value.c5;\r\n     }\r\n     else if (tipo == TipoVerificaAccount.verificasms) {\r\n       strReturn = this.formVerifyTel.value.c6 + \r\n                   this.formVerifyTel.value.c7 + \r\n                   this.formVerifyTel.value.c8 + \r\n                   this.formVerifyTel.value.c9 + \r\n                   this.formVerifyTel.value.c10;\r\n     }\r\n \r\n     return strReturn;\r\n   }\r\n \r\n   /**\r\n    * Il pulsante Avanti previsto nella form di Verifica\r\n    * deve tenere conto \r\n    * 1) Quanti sono i pincode da inserire \r\n    * 2) Quali ha inserito\r\n    */\r\n   isEnableAvantiOnVerify():boolean {\r\n     let enable = true;\r\n \r\n     if (this.docGruppo) {\r\n       if (this.docGruppo.APPTIPOVERIFICA !== TipoVerificaAccount.noverifica) {\r\n \r\n         switch (this.params.tipoVerifica) {\r\n           case TipoVerificaAccount.verificaemail:\r\n               enable = this.formVerifyMail.valid;\r\n             break;\r\n           case TipoVerificaAccount.verificasms:\r\n               enable = this.formVerifyTel.valid;\r\n             break;\r\n \r\n           case TipoVerificaAccount.verificaemailsms:\r\n             enable = this.formVerifyTel.valid && this.formVerifyMail.valid;\r\n             break;\r\n         \r\n           default:\r\n             break;\r\n         }\r\n \r\n       }\r\n     }\r\n     else {\r\n       enable = false;\r\n     }\r\n     return enable;\r\n   }\r\n \r\n \r\n \r\n \r\n //#endregion\r\n \r\n \r\n   //#region LINK ESTERNI\r\n \r\n   /**\r\n    * Controlla che nell'area ci sia il link della policy\r\n    */\r\n   isPolicyLink(): boolean {\r\n     let link: AreaLink;\r\n     let ready: boolean = false;\r\n \r\n     if (this.docArea) {\r\n \r\n       link = this.docArea.findAreaLinkByPageType(PageType.policyPrivacy);\r\n   \r\n       if (link && link.REFERURL) {\r\n         ready = true;\r\n       }\r\n     }\r\n \r\n     return ready;\r\n   }\r\n \r\n   //Apre il link delle Policy se presente\r\n   openPolicyLink() {\r\n     let link: AreaLink;\r\n     \r\n \r\n     if (this.docArea) {\r\n \r\n       link = this.docArea.findAreaLinkByPageType(PageType.policyPrivacy);\r\n   \r\n       if (link && link.REFERURL) {\r\n         this.openLink(link.REFERURL);\r\n       }\r\n     }\r\n \r\n     \r\n   }\r\n \r\n   //Apre un link in un'altra pagina\r\n   openLink(url:string)\r\n   {\r\n     Browser.open({url:url});\r\n   }\r\n \r\n   //#endregion\r\n \r\n     /**\r\n    * Procedura che visualizza un toast con il messaggio passato\r\n    * @param myMessage Il messaggio da visualizzare\r\n    */\r\n   async showMessage(myMessage: string) {\r\n     const toast = await this.toastCtrl\r\n       .create({\r\n         message: myMessage,\r\n         duration: 3000\r\n       });\r\n \r\n       toast.present();\r\n   }\r\n \r\n }\r\n \r\n \r\n enum PageState\r\n {\r\n   CONTACT = 210,\r\n   REGISTRATION = 220,\r\n   VERIFY = 230,\r\n   WELCOME = 300\r\n }\r\n ","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { VerifyPageRoutingModule } from './verify-routing.module';\r\n\r\nimport { VerifyPage } from './verify.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    VerifyPageRoutingModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [VerifyPage],\r\n  exports: [VerifyPage]\r\n})\r\nexport class VerifyPageModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { VerifyPage } from './verify.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: VerifyPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class VerifyPageRoutingModule {}\r\n"]}