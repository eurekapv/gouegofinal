{"version":3,"sources":["webpack:///src/app/pages/auth/psw-recovery/psw-recovery.module.ts","webpack:///src/app/pages/auth/new-login/new-login.module.ts","webpack:///src/app/pages/auth/psw-recovery/psw-recovery.page.html","webpack:///src/app/pages/auth/psw-recovery/psw-recovery.page.ts","webpack:///src/app/pages/auth/psw-recovery/psw-recovery-routing.module.ts","webpack:///src/app/pages/auth/new-login/new-login.page.html","webpack:///src/app/pages/auth/new-login/new-login.page.ts","webpack:///src/app/pages/auth/new-login/new-login-routing.module.ts"],"names":["PswRecoveryPageModule","NewLoginPageModule","PswRecoveryPage","modalController","startService","loadingController","toastController","cryptoService","canUseMail","canUseMobile","PageState","stato","richiestaCodice","docRichiestaCodici","docVerifica","idUtente","descrUtente","startConfig","actualStartConfig","gruppo","APPTIPOVERIFICA","noverifica","verificaemail","verificaemailsms","verificasms","createVerifyForm","createContactForm","createPswForm","dismiss","isDesktop","placeH","formVerify","c1","updateOn","validators","required","maxLength","minLength","c2","c3","c4","c5","myValidators","push","email","pattern","formContact","contatto","formPsw","psw","confirmPsw","pswValidator","c","get","value","invalid","evento","id","setFocus","sendServerRichiestaCodici","prosegui","message","IDREFER","length","IDAREA","REQUESTEMAILCODE","EMAILPINCODE","getInputPin","REQUESTSMSCODE","SMSPINCODE","sendServerVerificaCodici","showMessage","sendDocRichiestaCodici","sendDocUtente","pwd","pwdToSend","splitPwd","useCrypter","ID","getBCrypt","mySplitPassword","TOKEN","SHAPASSWORD","INPUTPASSWORD","sendServerFinalize","create","spinner","backdropDismiss","then","elLoading","present","includes","EMAIL","TELEPHONE","USE","forRecovery","areaSelectedValue","recoverySendCodici","risposta","result","idRefer","console","log","error","recoveryVerifyCodici","descrRefer","cambioPsw","docUtente","recoveryFinalize","myMessage","duration","toast","close","routes","path","component","PswRecoveryPageRoutingModule","forChild","Browser","NewLoginPage","modalCtrl","loadingCtrl","toastCtrl","alertCtrl","pageState","tipoVerifica","actualStatePage","LOGIN","actualStateSegment","stepRegistration","indexStepRegistration","registrationInApp","emailVerificationYES","smsVerificationYES","emailVerificata","telVerificato","colorButton","startListen","subscribe","data","docGruppo","APPFLAGREGISTRAZIONE","createArrayStepRegistration","docArea","createLoginForm","createRegisterForm","strTitle","ev","detail","CONTACT","VERIFY","REGISTRATION","WELCOME","skipVerifica","index","find","element","onClickLogin","onClickAvantiContact","onClickAvantiVerifica","onClickRegistrati","formLogin","valid","userLogin","username","password","dataResult","saveStorageUtente","reset","closeModal","elModal","inpEmail","inpTel","telephone","needPageVerify","skipPageVerifica","nextStepRegistration","onSuccessChangePage","customMessage","forRegistration","registrationSendCodici","responseServer","err","tipo","askMessage","askEmail","askTel","header","buttons","text","role","handler","msg","enable","isEnableAvantiOnVerify","altMessage","docVerify","getInputVerifyCode","registrationVerifyCodici","response","codfisc","formRegister","codFisc","toUpperCase","checkCodiceFiscale","elCodFisc","checkValidate","msgValidate","execRegistrati","objError","myCodiceFiscale","NOME","name","COGNOME","surname","CODICEFISCALE","codiceFiscale","SESSO","sesso","NATOIL","dataNascita","NATOA","comune","NATOCAP","cap","NATOPROV","provincia","NATOISOSTATO","WEBLOGIN","MOBILENUMBER","chkNewsletter","NEWSLETTER","registrationFinalize","loginAfterRegister","c7","c8","c9","c10","pattTelefono","patternCodice","verifyPsw","chkPrivacy","isPolicyLink","requiredTrue","nullValidator","formVerifyMail","formVerifyTel","c6","strReturn","link","ready","findAreaLinkByPageType","policyPrivacy","REFERURL","openLink","url","open","NewLoginPageRoutingModule"],"mappings":"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","file":"default~booking-booking-module~course-listcourses-listcourses-module~pages-home-home-module~pages-lo~2c13cfd4-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { PswRecoveryPageRoutingModule } from './psw-recovery-routing.module';\r\n\r\nimport { PswRecoveryPage } from './psw-recovery.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    IonicModule,\r\n    PswRecoveryPageRoutingModule,\r\n    \r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  declarations: [PswRecoveryPage],\r\n  exports: [PswRecoveryPage]\r\n})\r\nexport class PswRecoveryPageModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { NewLoginPageRoutingModule } from './new-login-routing.module';\r\n\r\nimport { NewLoginPage } from './new-login.page'\r\nimport { PswRecoveryPage } from '../psw-recovery/psw-recovery.page'\r\nimport { PswRecoveryPageModule } from '../psw-recovery/psw-recovery.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    NewLoginPageRoutingModule,\r\n    \r\n    PswRecoveryPageModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  declarations: [NewLoginPage],\r\n  exports: [NewLoginPage],\r\n  entryComponents: [PswRecoveryPage]\r\n})\r\nexport class NewLoginPageModule {}\r\n","<ion-header>\r\n  <ion-toolbar color=\"primary\">\r\n    <ion-title>Recupero password</ion-title>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"close()\">\r\n        <ion-icon name=\"close\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<!-- CONTENT PAGES -->\r\n<ion-content>\r\n  <div [ngClass]=\"this.isDesktop?'ion-text-center div-logo desktop':'ion-text-center div-logo'\">\r\n    <img [src]=\"startConfig.getUrlLogo()\">\r\n  </div>\r\n\r\n  <!-- PARTE RICHIESTA CODICE -->\r\n  <div *ngIf=\"stato==PageState.richiestaCodice\" \r\n        class=\"ion-padding-horizontal ion-text-center\">\r\n\r\n    <form [formGroup]=\"formContact\">\r\n      <ion-item >\r\n        <ion-icon slot=\"start\" name=\"at-outline\"></ion-icon>\r\n        <ion-input type=\"text\" [placeholder]=\"getPlaceHolder()\" formControlName=\"contatto\"></ion-input>\r\n      </ion-item>\r\n    </form>\r\n    <ion-button  [disabled]=\"!this.formContact.valid\" color=\"primary\" [ngClass]=\"this.isDesktop? 'btn-send-code desktop':'btn-send-code'\" (click)=\"onClickInviaCodice()\">\r\n      Invia Codice\r\n    </ion-button>\r\n\r\n    <div  class=\"ion-no-padding div-message\">\r\n      <p>\r\n          <span><ion-icon name=\"information-circle-outline\"></ion-icon></span>\r\n          <span>&nbsp;</span>\r\n          <span *ngIf=\"canUseMail && canUseMobile\">Indica una email o un numero cellulare utilizzato nella registrazione account, <br/> e ti invieremo un pincode di recovery password</span>\r\n          <span *ngIf=\"canUseMail && !canUseMobile\">Indica una email utilizzata nella registrazione account, <br/> e ti invieremo un pincode di recovery password</span>\r\n          <span *ngIf=\"!canUseMail && canUseMobile\">Indica un numero cellulare utilizzato nella registrazione account, <br/> e ti invieremo un pincode di recovery password</span>\r\n      </p>\r\n\r\n      <p>\r\n          <ion-text color=\"danger\">\r\n              <span><i>(contatta la struttura se non ricordi queste informazioni)</i></span>\r\n          </ion-text>\r\n          \r\n      </p>\r\n    </div>\r\n\r\n    <form [formGroup]=\"formVerify\">\r\n      <div [ngClass]=\"this.isDesktop?'form-verifica desktop':'form-verifica'\">\r\n          <ion-segment>\r\n              <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c1\" #c1 (ionInput)=\"changeFocus($event)\"id=\"1\"></ion-input>\r\n              <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c2\" #c2 (ionInput)=\"changeFocus($event)\"id=\"2\"></ion-input>\r\n              <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c3\" #c3 (ionInput)=\"changeFocus($event)\"id=\"3\"></ion-input>\r\n              <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c4\" #c4 (ionInput)=\"changeFocus($event)\"id=\"4\"></ion-input>\r\n              <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c5\" #c5 (ionInput)=\"changeFocus($event)\"id=\"5\"></ion-input>\r\n          </ion-segment>\r\n      </div>\r\n    </form>\r\n\r\n\r\n\r\n\r\n  </div>\r\n\r\n  <!-- PARTE CAMBIO PSW -->\r\n  <div *ngIf=\"stato==PageState.cambioPsw\" class=\"ion-padding div-psw\">\r\n\r\n    <p>\r\n      <ion-icon color=\"primary\" name=\"information-circle-outline\"></ion-icon>\r\n      Inserisci la nuova password per l'account \r\n    </p>\r\n    <p>\r\n        <ion-text color=\"primary\"> {{this.descrUtente}}</ion-text>\r\n    </p>\r\n    <form [formGroup]=\"formPsw\">\r\n      <ion-list>\r\n        <ion-item>\r\n          <ion-icon slot=\"start\" name=\"lock-closed-outline\"></ion-icon>\r\n          <ion-input placeholder=\"Nuova password\" type=\"password\" inputmode=\"password\" formControlName=\"psw\"></ion-input>\r\n        </ion-item>\r\n        <ion-item>\r\n          <ion-icon slot=\"start\" name=\"lock-closed-outline\"></ion-icon>\r\n          <ion-input placeholder=\"Conferma Password\" type=\"password\" inputmode=\"password\" formControlName=\"confirmPsw\"></ion-input>\r\n        </ion-item>\r\n      </ion-list>\r\n    </form>\r\n\r\n  </div>\r\n</ion-content>\r\n\r\n\r\n<ion-footer>\r\n  <!-- PARTE RICHIESTA CODICE -->\r\n  <div *ngIf=\"stato==PageState.richiestaCodice\">\r\n    <ion-button [disabled]=\"!this.formVerify.valid\" color=\"primary\" expand=\"block\" (click)=\"onClickVerifica()\">Verifica</ion-button>\r\n  </div>\r\n\r\n  <!-- PARTE CAMBIO PSW -->\r\n  <div *ngIf=\"stato==PageState.cambioPsw\">\r\n    <ion-button  [disabled]=\"!this.formPsw.valid\" color=\"primary\" expand = \"block\" (click)=\"onClickCambia()\">Cambia Password</ion-button>\r\n  </div>\r\n</ion-footer>\r\n","import { Component, OnInit, ViewChild} from '@angular/core';\r\nimport { ModalController, LoadingController, ToastController } from '@ionic/angular';\r\nimport { StartService } from 'src/app/services/start.service';\r\nimport { StartConfiguration } from 'src/app/models/start-configuration.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormControl, Validators, FormGroup, AbstractControl } from '@angular/forms';\r\nimport { AccountRequestCode, AccountOperationResponse, AccountVerifyCode } from 'src/app/models/accountregistration.model';\r\nimport { RequestPincodeUse, TipoVerificaAccount } from 'src/app/models/valuelist.model';\r\nimport { Utente } from 'src/app/models/utente.model';\r\nimport { CryptoService } from 'src/app/library/services/crypto.service';\r\n\r\n@Component({\r\n  selector: 'app-psw-recovery',\r\n  templateUrl: './psw-recovery.page.html',\r\n  styleUrls: ['./psw-recovery.page.scss'],\r\n})\r\nexport class PswRecoveryPage implements OnInit {\r\n\r\n\r\n  canUseMail = false;\r\n  canUseMobile = false;\r\n\r\n\r\n  //questo è per usare l'enum PageState nell'html\r\n  PageState : typeof PageState =PageState;\r\n\r\n  //Lo stato della pagina (inizialmente Richiesta codice)\r\n  stato: PageState= PageState.richiestaCodice;\r\n\r\n  //La startConfig\r\n  startConfig : StartConfiguration;\r\n\r\n  //I 3 formGroups (Mail/telefono, codice di verifica, nuova password)\r\n  formContact : FormGroup;\r\n  formVerify : FormGroup;\r\n  formPsw : FormGroup;\r\n\r\n  //oggetti per richiedere e verificare i codici\r\n  docRichiestaCodici : AccountRequestCode= new AccountRequestCode;\r\n  docVerifica: AccountVerifyCode = new AccountVerifyCode;\r\n\r\n  //l'id dell'utente che vuole cambiare la psw\r\n  idUtente: string='';\r\n  //la weblogin dell'utente\r\n  descrUtente: string='';\r\n\r\n\r\n   //#region questi servono per accedere ai corrispettivi elementi in HTML\r\n   @ViewChild('c1') c1;\r\n   @ViewChild('c2') c2;\r\n   @ViewChild('c3') c3;\r\n   @ViewChild('c4') c4;\r\n   @ViewChild('c5') c5; \r\n   //#endregion\r\n\r\n  constructor(\r\n    private modalController:ModalController,\r\n    private startService:StartService,\r\n    private loadingController:LoadingController,\r\n    private toastController:ToastController,\r\n    private cryptoService:CryptoService\r\n  )\r\n   {\r\n     \r\n      \r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n    \r\n    //recupero la startconfig\r\n    this.startConfig=this.startService.actualStartConfig;\r\n\r\n    this.canUseMail = (\r\n      this.startConfig.gruppo.APPTIPOVERIFICA == TipoVerificaAccount.noverifica ||\r\n      this.startConfig.gruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemail ||\r\n      this.startConfig.gruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms\r\n      )\r\n\r\n    this.canUseMobile = (\r\n      this.startConfig.gruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms ||\r\n      this.startConfig.gruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificasms\r\n    )\r\n\r\n     //SETUP INIZIALE      \r\n      //creo i formGroups\r\n      this.createVerifyForm();\r\n      this.createContactForm();\r\n      this.createPswForm();\r\n\r\n  }\r\n\r\n  close(){\r\n    this.modalController.dismiss();\r\n  }\r\n\r\n  //ritorna true se siamo su Browser desktop\r\n  get isDesktop(){\r\n    return this.startService.isDesktop;\r\n  }\r\n\r\n  /**\r\n   * Crea un placeHolder per ion-input\r\n   */\r\n  getPlaceHolder() {\r\n    let placeH = '';\r\n    if (this.canUseMail && this.canUseMobile) {\r\n      placeH = 'Email o Cellulare';\r\n    }\r\n    else if (this.canUseMail && !this.canUseMobile) {\r\n      placeH = 'Email';\r\n    }\r\n    else if (!this.canUseMail && this.canUseMobile) {\r\n      placeH = 'Cellulare';\r\n    }\r\n\r\n    return placeH;\r\n  }\r\n\r\n  //creazione del ReactiveForm di inserimento del codice\r\n  createVerifyForm(){\r\n    this.formVerify=new FormGroup({\r\n      c1: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c2: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c3: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c4: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c5: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      })\r\n    })\r\n  }\r\n  //creazione del ReactiveForm di inserimento del telefono/mail\r\n  createContactForm(){\r\n    let myValidators = [Validators.required];\r\n\r\n    //posso usare sia mail che mobile\r\n    if(this.canUseMail && this.canUseMobile){\r\n      //non serve alcun validator extra\r\n    }\r\n    //posso usare solo mail\r\n    else if(this.canUseMail){\r\n      myValidators.push(Validators.email)\r\n    }\r\n    //posso usare solo mobile\r\n    else if(this.canUseMobile){\r\n      myValidators.push(Validators.pattern(/^(\\+\\d{1,3}[- ]?)?\\d{10}$/))\r\n    }\r\n     \r\n    this.formContact=new FormGroup({\r\n      contatto: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: myValidators\r\n      })\r\n    })\r\n  }\r\n  //creazione del form di inserimento nuova psw\r\n  createPswForm(){\r\n    this.formPsw=new FormGroup({\r\n      psw: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      confirmPsw: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required]\r\n      })\r\n    },this.pswValidator)\r\n  }\r\n  /**\r\n   * funzione di controllo uguaglianza delle psw, per la validazione del PswFormGroup\r\n   * @param c \r\n   */\r\n  pswValidator(c:AbstractControl):{invalid:boolean}\r\n  {\r\n\r\n    if ((c.get('confirmPsw').value==c.get('psw').value))\r\n    {\r\n      return\r\n    }\r\n    else\r\n    {\r\n      return {invalid: true};\r\n    }\r\n\r\n  }\r\n\r\n  \r\n\r\n  \r\n  /**\r\n   * procedura che sposta il focus sulla casella di input successiva\r\n   * @param evento parametri $event dell'eveno \"ion-input\", necessari a identificare\r\n   * in quale casella c'è stato l'input\r\n   */\r\n  changeFocus(evento)\r\n  {\r\n    let id=evento['target']['id'];\r\n        switch (id) {\r\n        case '1':\r\n          this.c2.setFocus();\r\n          break;\r\n        case '2':\r\n          this.c3.setFocus();\r\n          break;\r\n        case '3':\r\n          this.c4.setFocus();\r\n          break;\r\n        case '4':\r\n          this.c5.setFocus();\r\n          break;      \r\n        default:\r\n          break;\r\n      }\r\n    \r\n  }\r\n\r\n  /**\r\n   * Evento click per la richiesta da effettuare al server dei codici\r\n   */\r\n  onClickInviaCodice() {\r\n    this.sendServerRichiestaCodici();\r\n  }\r\n\r\n  /**\r\n   * evento che si attiva quando l'utente clicca \"verifica\" dopo aver inserito il codice\r\n   * Preparo il documento docVerifica che sarà usato nell'invio dei codici\r\n   */\r\n  onClickVerifica(){\r\n\r\n    let prosegui = true;\r\n    let message = \"\";\r\n   \r\n    //Per poter proseguire devo avere il documento di Richiesta codice con IDREFER popolato\r\n    if (this.docRichiestaCodici && this.docRichiestaCodici.IDREFER) {\r\n\r\n      if (this.docRichiestaCodici.IDREFER.length != 0) {\r\n\r\n        //Preparo il documento di Verifica da inviare al server\r\n        this.docVerifica = new AccountVerifyCode();\r\n        this.docVerifica.IDREFER=this.docRichiestaCodici.IDREFER;\r\n        this.docVerifica.IDAREA=this.docRichiestaCodici.IDAREA;\r\n\r\n        //Invio il pincode ricevuto in mail\r\n        if (this.docRichiestaCodici.REQUESTEMAILCODE) {\r\n\r\n            //mi ha richiesto il codice tramite mail\r\n            this.docVerifica.EMAILPINCODE=this.getInputPin();\r\n\r\n\r\n        }\r\n        else if (this.docRichiestaCodici.REQUESTSMSCODE) {\r\n          //mi ha richiesto il codice via sms\r\n          this.docVerifica.SMSPINCODE=this.getInputPin();\r\n          \r\n        }\r\n        else{\r\n          //ci sono stati casini\r\n          prosegui =false;\r\n          message = \"C'è stato un problema, richiedi un nuovo codice\";\r\n        }\r\n      }\r\n      else{\r\n        //ci sono stati casini\r\n        prosegui =false;\r\n        message = \"C'è stato un problema, richiedi un nuovo codice\";\r\n      }\r\n    }\r\n    else{\r\n      //ci sono stati casini\r\n      prosegui =false;\r\n      message = \"C'è stato un problema, richiedi un nuovo codice\";\r\n    }\r\n\r\n    //Sembra corretto, invio il pincode al server\r\n    if (prosegui ) {\r\n      //faccio la richiesta al server\r\n      //il metodo invia il documento docVerifica\r\n      this.sendServerVerificaCodici();\r\n    }\r\n    else {\r\n      //Ci sono errori\r\n      this.showMessage(message);\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * evento attivato quando l'utente conferma il cambiamento della password\r\n   */\r\n  onClickCambia(){\r\n    \r\n    //ora, devo crearmi il documento utente, e inserire il token nel documento docrichiesta\r\n    let sendDocRichiestaCodici = this.docRichiestaCodici;\r\n    let sendDocUtente = new Utente();\r\n    \r\n    //variabili necessarie per il giochino delle psw\r\n    let pwd = '';\r\n    let pwdToSend = '';\r\n    let splitPwd:string[] = [];\r\n    let useCrypter: boolean = false; //per ora, useCrypter non va, quindi è false\r\n\r\n    //Metto nell'ID l'utente\r\n    sendDocUtente.ID = this.idUtente;\r\n    \r\n\r\n    //recupero la psw\r\n    pwd = this.formPsw.value.psw;\r\n    if (useCrypter){\r\n      pwdToSend=this.cryptoService.getBCrypt(pwd);\r\n    }\r\n    else{\r\n      pwdToSend=pwd;\r\n    }\r\n    //ora splitto la psw in due\r\n    splitPwd=this.cryptoService.mySplitPassword(pwdToSend);\r\n    \r\n    if (splitPwd){\r\n      //la prima parte va nel token\r\n      sendDocRichiestaCodici.TOKEN=splitPwd[0];\r\n      if (useCrypter) {\r\n        //La seconda parte dentro a SHAPASSWORD\r\n        //nel caso di criptata\r\n        sendDocUtente.SHAPASSWORD = splitPwd[1];\r\n        sendDocUtente.INPUTPASSWORD = '';\r\n      }\r\n      else {\r\n        sendDocUtente.INPUTPASSWORD = splitPwd[1];\r\n        sendDocUtente.SHAPASSWORD = '';\r\n      }\r\n      //ora che è tutto pronto, posso fare la richiesta di cambio psw al server\r\n      this.sendServerFinalize(sendDocUtente,sendDocRichiestaCodici)\r\n    }\r\n    else{\r\n      this.showMessage('Password non utilizzabile');\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * qui richiedo al server l'invio di un codice di verifica\r\n   */\r\n  sendServerRichiestaCodici(){\r\n    //creo il loading\r\n    this.loadingController.create({\r\n          message:'Invio codice in corso...',\r\n          spinner:'circular',\r\n          backdropDismiss: true,\r\n    }).then(elLoading => {\r\n\r\n        elLoading.present();\r\n        let contatto:string;\r\n        //recupero il contatto inserito dall'utente\r\n        contatto=this.formContact.value.contatto;\r\n\r\n      //devo capire se l'utente ha inserito una mail o un telefono (se è presente @, presumo sia una mail) e valorizzare\r\n      //l'oggetto \"docRichiestaCodici\" di conseguenza\r\n      if (contatto.includes('@')){\r\n        //è una mail\r\n        this.docRichiestaCodici.EMAIL=contatto;\r\n        this.docRichiestaCodici.TELEPHONE = \"\";\r\n        this.docRichiestaCodici.REQUESTEMAILCODE=true;\r\n        this.docRichiestaCodici.REQUESTSMSCODE=false;\r\n      }\r\n      else{\r\n        //è un telefono\r\n        this.docRichiestaCodici.TELEPHONE=contatto;\r\n        this.docRichiestaCodici.EMAIL = \"\";\r\n        this.docRichiestaCodici.REQUESTSMSCODE=true;\r\n        this.docRichiestaCodici.REQUESTEMAILCODE=false;\r\n      }\r\n\r\n      \r\n      //inserisco nell'oggetto le altre info necessarie\r\n      this.docRichiestaCodici.USE=RequestPincodeUse.forRecovery;\r\n      this.docRichiestaCodici.IDAREA=this.startService.areaSelectedValue.ID;\r\n\r\n      //ora che l'oggetto è pronto, faccio la richiesta\r\n      this.startService.recoverySendCodici(this.docRichiestaCodici)\r\n                .then((risposta:AccountOperationResponse)=>{\r\n                          //quando arriva la risposta chiudo il loading\r\n                          elLoading.dismiss();\r\n\r\n                          \r\n\r\n                          if (risposta.result) {\r\n                            //se è andato tutto bene\r\n                            this.showMessage(risposta.message);\r\n\r\n                            //Imposto IDRefer che devo reinviare quando chiedo di verificare il codice\r\n                            this.docRichiestaCodici.IDREFER = risposta.idRefer;\r\n                          }\r\n                          else{\r\n                            //se la richiesta è andata a buon fine, ma il server non è riuscito ad inviare il messaggio, presumo che \r\n                            //l'utente non esista\r\n                            this.showMessage(risposta.message);\r\n                            this.docRichiestaCodici.IDREFER = \"\";\r\n                            console.log(risposta.message);\r\n                          }\r\n                })\r\n                .catch(error => {\r\n                    //Se la richiesta non è andata a buon fine, dismetto il loading, lo stampo in console e scrivo all'utente \"errore di connessione\"\r\n                    elLoading.dismiss();\r\n                    console.log(error);\r\n                    this.showMessage(\"Errore di connessione\");\r\n                    this.docRichiestaCodici.IDREFER = \"\";\r\n                });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * qui richiedo al server la verifica del codice (in risposta, riceverò l'id utente)\r\n   *     //alla fine, se tutto è andato bene, passo alla pagina successiva\r\n    //this.stato=PageState.cambioPsw;\r\n   */\r\n  sendServerVerificaCodici() {\r\n\r\n    if (this.docVerifica) {\r\n      //mostro il loading\r\n      this.loadingController\r\n      .create({\r\n        message:\"Verifica in corso...\",\r\n        spinner:\"circular\",\r\n        backdropDismiss: true\r\n      })\r\n      .then(elLoading=>{\r\n\r\n        //Mostro il loding\r\n        elLoading.present();\r\n        \r\n        //ora faccio la richiesta\r\n        this.startService.recoveryVerifyCodici(this.docVerifica)\r\n            .then(risposta=>{\r\n\r\n                  //Il server ha risposto, nascondo il loading\r\n                  elLoading.dismiss();\r\n\r\n                  if (risposta.result) {\r\n\r\n                    //La verifica è andata a buon fine, recupero l'utente su cui bisogna cambiare la psw, poi posso procedere\r\n                    this.idUtente=risposta.idRefer;\r\n                    this.descrUtente = risposta.descrRefer;\r\n\r\n                    \r\n\r\n                    //Cambio lo stato della pagina\r\n                    this.stato=PageState.cambioPsw;\r\n\r\n                    this.showMessage('Codice di verifica valido');\r\n                  }\r\n                  else {\r\n                    //Nessun utente è stato trovato\r\n                    this.idUtente = '';\r\n                    //Altrimenti, se il server ha risposto, ma ha risposto negativamente, presumo che il codice sia errato\r\n                    this.showMessage('Codice di verifica non valido');\r\n                  }\r\n\r\n            })\r\n            .catch(error => {\r\n                //se la richiesta non è andata a buon fine\r\n                //Nascondo il loading\r\n                elLoading.dismiss();\r\n\r\n                //Nessun utente è stato trovato\r\n                this.idUtente = '';\r\n\r\n                console.log(error);\r\n                this.showMessage('Errore di connessione');\r\n            });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * qui faccio la richiesta effettiva di cambio password\r\n   */\r\n  sendServerFinalize(docUtente: Utente, docRichiestaCodici: AccountRequestCode) {\r\n    \r\n    //creo il loading\r\n    this.loadingController\r\n      .create({\r\n            message:'Cambio password',\r\n            spinner:'circular',\r\n            backdropDismiss: true\r\n      })\r\n      .then(elLoading => {\r\n\r\n          //Mostro il loading\r\n          elLoading.present();\r\n      \r\n          //ora faccio la richiesta\r\n          this.startService.recoveryFinalize(docUtente, docRichiestaCodici)\r\n              .then(risposta => {\r\n\r\n                  //Chiudo il loading\r\n                  elLoading.dismiss();\r\n\r\n\r\n                  if (risposta.result) {\r\n                    //la modifica della psw è andata a buon fine, posso dire ok, e chiudere la videata\r\n                    this.showMessage(\"Modifica della password confermata\");\r\n\r\n                    //Chiudo la videata modale\r\n                    this.modalController.dismiss();\r\n                  }\r\n                  else {\r\n                    \r\n                    //la richiesta non è andata in errore, ma la modifica non è riuscita... stampo un errore generico\r\n                    this.showMessage(risposta.message);\r\n\r\n                    console.log(risposta.message);\r\n                  }\r\n              })\r\n              .catch(error => {\r\n                    //la richiesta è andata in errore\r\n\r\n                    //Chiudo il loading\r\n                    elLoading.dismiss();\r\n\r\n                    console.log (error);\r\n                    this.showMessage('Errore di connessione');\r\n              });\r\n      });\r\n  }\r\n\r\n   /**\r\n   * Procedura che visualizza un toast con il messaggio passato\r\n   * @param myMessage Il messaggio da visualizzare\r\n   */\r\n  async showMessage(myMessage: string) {\r\n    const toast = await this.toastController\r\n      .create({\r\n        message: myMessage,\r\n        duration: 3000\r\n      });\r\n\r\n      toast.present();\r\n  }\r\n\r\n\r\n  /**\r\n   * restituisce il pin inserito nella form\r\n   */\r\n  getInputPin(): string{\r\n    return (\r\n      this.formVerify.value.c1+\r\n      this.formVerify.value.c2+\r\n      this.formVerify.value.c3+\r\n      this.formVerify.value.c4+\r\n      this.formVerify.value.c5\r\n      )\r\n  }\r\n  \r\n}\r\n\r\n\r\nenum PageState{\r\n  richiestaCodice  = 10,\r\n  cambioPsw = 20\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { PswRecoveryPage } from './psw-recovery.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PswRecoveryPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PswRecoveryPageRoutingModule {}\r\n","<ion-header>\r\n    <ion-toolbar color=\"primary\">\r\n        <ion-buttons \r\n                slot=\"start\" \r\n                *ngIf=\"actualStatePage==pageState.REGISTRATION||actualStatePage==pageState.VERIFY\">\r\n\r\n            <ion-button fill=\"clear\" (click)=\"backStepRegistration()\">\r\n                <ion-icon name=\"arrow-back\"></ion-icon>\r\n            </ion-button>\r\n\r\n        </ion-buttons>\r\n\r\n        <ion-title>{{getCaptionTitle()}}</ion-title>\r\n        \r\n\r\n\r\n        <ion-buttons slot=\"end\">\r\n            <ion-button fill=\"clear\" (click)=\"closeModal()\">\r\n                <ion-icon name=\"close\" ></ion-icon>\r\n            </ion-button>\r\n        </ion-buttons>\r\n    </ion-toolbar>\r\n</ion-header>\r\n\r\n\r\n\r\n\r\n<!-- CONTENT PAGES -->\r\n<ion-content >\r\n    <div [ngClass]=\"this.isDesktop?'ion-text-center div-logo desktop':'ion-text-center div-logo'\">\r\n        <img [src]=\"startConfig.getUrlLogo()\">\r\n    </div>\r\n\r\n\r\n    <div class=\"ion-padding\" *ngIf=\"actualStatePage !== pageState.WELCOME\">\r\n        <ion-segment \r\n                [(ngModel)]=\"actualStateSegment\" \r\n                color=\"primary\" \r\n                mode=\"md\"\r\n                (ionChange)=\"onSegmentChanged($event)\">\r\n          <ion-segment-button [value]=\"pageState.LOGIN\">\r\n            Accedi\r\n          </ion-segment-button>\r\n\r\n          <ion-segment-button \r\n                    [value]=\"pageState.REGISTRATION\"\r\n                    *ngIf=\"registrationInApp\">\r\n            Registrati\r\n          </ion-segment-button>\r\n\r\n        </ion-segment>\r\n    </div>\r\n\r\n    <div *ngIf=\"actualStatePage==pageState.LOGIN\" class=\"ion-padding\">\r\n\r\n        <form [formGroup]=\"formLogin\">\r\n            <ion-list>\r\n                <ion-item>\r\n                    <ion-icon slot=\"start\" name=\"person-outline\" color=\"primary\"></ion-icon>\r\n                    <ion-input inputmode=\"email\" type=\"email\" placeholder=\"Email\" formControlName=\"username\" autocomplete=\"on\" ></ion-input>\r\n                  </ion-item>\r\n    \r\n                  <ion-item>\r\n                    <ion-icon slot=\"start\" name=\"key-outline\" color=\"primary\"></ion-icon>\r\n                    <ion-input inputmode=\"text\" type=\"password\" placeholder=\"Password\" formControlName=\"password\" autocomplete=\"current-password\"></ion-input>\r\n                  </ion-item>\r\n            </ion-list>\r\n        </form>\r\n\r\n        <div class=\"ion-text-center ion-padding-vertical\">\r\n            <a (click)=\"onClickReimpostaPsw()\">Aiuto, non ricordo la password </a>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div *ngIf=\"actualStatePage==pageState.CONTACT\" class=\"ion-padding-horizontal\">\r\n\r\n        <form [formGroup]=\"formContact\">\r\n\r\n\r\n            <ion-list>\r\n                <ion-item>\r\n                    <ion-icon name=\"at-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                    <ion-input type=\"email\" placeholder=\"E-Mail\" formControlName=\"email\"></ion-input>\r\n                </ion-item>\r\n                <ion-item>\r\n                    <ion-icon name=\"call-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                    <ion-input type=\"tel\" inputmode=\"tel\" placeholder=\"+39 Cellulare\" formControlName=\"telephone\" ></ion-input>\r\n                </ion-item>\r\n\r\n            </ion-list>\r\n\r\n            <ion-button \r\n                    fill=\"outline\" \r\n                    size=\"small\" \r\n                    expand=\"block\"\r\n                    *ngIf=\"isPolicyLink()\"\r\n                    (click)=\"openPolicyLink()\">\r\n                condizioni di registrazione\r\n            </ion-button>\r\n                \r\n            <div  class=\"ion-no-padding div-message\" *ngIf=\"docGruppo.APPTIPOVERIFICA == tipoVerifica.noverifica\">\r\n                <p>\r\n                <ion-text color=\"primary\">\r\n                    <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n                </ion-text>\r\n                    Indica una email valida dove sarà possibile inviarti le ricevute di prenotazioni, attestati dei corsi \r\n                    ed altri documenti fiscali.\r\n                </p>\r\n                <p>\r\n                    <ion-text color=\"primary\">\r\n                        <h6><i>(in seguito potrai abilitare l'email anche per la ricezione di altro materiale informativo)</i></h6>\r\n                    </ion-text>\r\n                </p>\r\n            </div>\r\n\r\n            <div  class=\"ion-no-padding div-message\" *ngIf=\"docGruppo.APPTIPOVERIFICA == tipoVerifica.verificaemail\">\r\n            <p>\r\n                <ion-text color=\"primary\">\r\n                    <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n                </ion-text>\r\n                Indica una email valida dove sarà possibile inviarti le ricevute di prenotazioni, attestati dei corsi \r\n                ed altri documenti fiscali.                        \r\n            </p>\r\n\r\n            <h6>\r\n                Per effettuare la verifica ti inviamo una email contenente un pincode da inserire nei passaggi succesivi di registrazione\r\n            </h6>\r\n\r\n            <p>\r\n                <ion-text color=\"primary\">\r\n                    <h6><i>(in seguito potrai abilitare l'email anche per la ricezione di altro materiale informativo)</i></h6>\r\n                </ion-text>\r\n            </p>\r\n        </div>         \r\n        \r\n        \r\n        <div  class=\"ion-no-padding div-message\" *ngIf=\"docGruppo.APPTIPOVERIFICA == tipoVerifica.verificaemailsms\">\r\n            <p>\r\n                <ion-text color=\"primary\">\r\n                    <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n                </ion-text>\r\n                Indica una email valida dove sarà possibile inviarti i documenti fiscali ed un numero di cellulare \r\n                per contattarti in caso di problemi.\r\n\r\n            </p>\r\n\r\n            <p>\r\n                <ion-text color=\"primary\">\r\n                    <h6><i>Per effettuare la verifica ti inviamo 2 pincode (email/SMS)  da inserire nei passaggi succesivi di registrazione</i></h6>\r\n                </ion-text>\r\n            </p>\r\n        </div>                  \r\n\r\n        <div  class=\"ion-no-padding div-message\" *ngIf=\"docGruppo.APPTIPOVERIFICA == tipoVerifica.verificasms\">\r\n            <p>\r\n                <ion-text color=\"primary\">\r\n                    <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n                </ion-text>\r\n                Indica un numero di cellulare dove contattarti in caso di problematiche legate alle prenotazioni della struttura.\r\n\r\n            </p>\r\n                <p>\r\n                Per effettuare la verifica ti inviamo un SMS con un pincode da inserire nei passaggi succesivi di registrazione\r\n                </p>\r\n            <p>\r\n                <ion-text color=\"primary\">\r\n                    <h6><i>(non sarai mai contattato per promozioni o marketing)</i></h6>\r\n                </ion-text>\r\n            </p>\r\n        </div>                  \r\n\r\n\r\n                \r\n\r\n        </form>\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n    <div  *ngIf=\"actualStatePage==pageState.VERIFY\">\r\n        <div class=\"ion-no-padding div-message\" *ngIf=\"docGruppo.APPTIPOVERIFICA == tipoVerifica.verificaemail || docGruppo.APPTIPOVERIFICA == tipoVerifica.verificaemailsms\">\r\n\r\n\r\n            <ion-item lines=\"none\">\r\n                <ion-button \r\n                    slot=\"start\" \r\n                    fill=\"clear\" \r\n                    color=\"danger\"\r\n                    (click)=\"onClickReinviaCodice(tipoVerifica.verificaemail)\">\r\n                    <ion-icon name=\"refresh-outline\"></ion-icon>\r\n                </ion-button>\r\n\r\n                <ion-label color=\"default\">Inserisci il pincode ricevuto tramite email</ion-label>\r\n            </ion-item>\r\n\r\n            <form [formGroup]=\"formVerifyMail\">\r\n                <div [ngClass]=\"this.isDesktop?'form-verifica desktop':'form-verifica'\">\r\n                    <ion-segment>\r\n                        <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c1\" #c1 (ionInput)=\"changeFocus($event)\"id=\"1\"></ion-input>\r\n                        <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c2\" #c2 (ionInput)=\"changeFocus($event)\"id=\"2\"></ion-input>\r\n                        <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c3\" #c3 (ionInput)=\"changeFocus($event)\"id=\"3\"></ion-input>\r\n                        <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c4\" #c4 (ionInput)=\"changeFocus($event)\"id=\"4\"></ion-input>\r\n                        <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c5\" #c5 (ionInput)=\"changeFocus($event)\"id=\"5\"></ion-input>\r\n                    </ion-segment>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n\r\n        <div class=\"ion-no-padding div-message\" *ngIf=\"docGruppo.APPTIPOVERIFICA == tipoVerifica.verificasms || docGruppo.APPTIPOVERIFICA == tipoVerifica.verificaemailsms\">\r\n\r\n            <ion-item lines=\"none\">\r\n                <ion-button \r\n                    slot=\"start\" \r\n                    fill=\"clear\" \r\n                    color=\"danger\"\r\n                    (click)=\"onClickReinviaCodice(tipoVerifica.verificasms)\">\r\n                    <ion-icon name=\"refresh-outline\"></ion-icon>\r\n                </ion-button>\r\n                <ion-label color=\"default\" >\r\n                    Inserisci il pincode ricevuto tramite SMS</ion-label>\r\n            </ion-item>            \r\n\r\n            <form [formGroup]=\"formVerifyTel\">\r\n                    <div [ngClass]=\"this.isDesktop?'form-verifica desktop':'form-verifica'\">\r\n                        <ion-segment>\r\n                            <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c6\" #c6 (ionInput)=\"changeFocus($event)\"id=\"6\"></ion-input>\r\n                            <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c7\" #c7 (ionInput)=\"changeFocus($event)\"id=\"7\"></ion-input>\r\n                            <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c8\" #c8 (ionInput)=\"changeFocus($event)\"id=\"8\"></ion-input>\r\n                            <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c9\" #c9 (ionInput)=\"changeFocus($event)\"id=\"9\"></ion-input>\r\n                            <ion-input clearOnEdit type=\"tel\" inputmode=\"numeric\" class=\"ion-no-padding ion-align-self-center\" minlength=\"1\" maxlength=\"1\" formControlName=\"c10\" #c10 (ionInput)=\"changeFocus($event)\"id=\"10\"></ion-input>\r\n                        </ion-segment>\r\n                    </div>\r\n            </form>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div *ngIf=\"actualStatePage==pageState.REGISTRATION\">\r\n\r\n        <form [formGroup]=\"formRegister\">\r\n            <ion-list>\r\n                <ion-item>\r\n                <ion-icon name=\"person-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                <ion-input type=\"text\" placeholder=\"Nome\" formControlName=\"name\"></ion-input>\r\n                </ion-item>\r\n                <ion-item>\r\n                <ion-icon name=\"person-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                <ion-input type=\"text\" placeholder=\"Cognome\" formControlName=\"surname\" ></ion-input>\r\n                </ion-item>\r\n                <ion-item>\r\n                <ion-icon name=\"key-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"psw\"></ion-input>\r\n                </ion-item>\r\n                <ion-item>\r\n                <ion-icon name=\"key-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                <ion-input type=\"password\" placeholder=\"Verifica password\" formControlName=\"verifyPsw\"></ion-input>\r\n                </ion-item>\r\n                \r\n                <ion-item>\r\n                <ion-icon name=\"card-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n                <ion-input type=\"text\" placeholder=\"Codice Fiscale\" formControlName=\"codFisc\" ></ion-input>\r\n                </ion-item>\r\n    \r\n                <ion-item lines=\"none\" *ngIf=\"isPolicyLink()\">\r\n                    <ion-label>Accetto la <a (click)=\"openPolicyLink()\">privacy policy</a></ion-label>\r\n                    <ion-checkbox \r\n                        slot=\"start\" \r\n                        color=\"primary\" \r\n                        formControlName=\"chkPrivacy\">\r\n                    </ion-checkbox>\r\n                </ion-item>\r\n    \r\n                <ion-item lines=\"none\" >\r\n                <ion-label>Voglio ricevere la Newsletter</ion-label>\r\n                <ion-checkbox \r\n                    slot=\"start\" \r\n                    color=\"primary\" \r\n                    formControlName=\"chkNewsletter\"></ion-checkbox>\r\n                </ion-item>\r\n            </ion-list>\r\n        </form>\r\n\r\n        <div  class=\"ion-no-padding div-message\">\r\n            <p>\r\n            <ion-text color=\"primary\">\r\n                <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n            </ion-text>\r\n                Dobbiamo richiederti alcune informazioni personali per l'eventuale\r\n            </p>\r\n            <p>\r\n                emissione di documenti fiscali\r\n            </p>\r\n\r\n            <p>\r\n                <ion-text color=\"primary\">\r\n                    <h6><i>(ad esempio in caso di iscrizioni a corsi o prenotazioni della struttura)</i></h6>\r\n                </ion-text>\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <div *ngIf=\"actualStatePage==pageState.WELCOME\">\r\n        <h1 class=\"ion-text-center\">Benvenuto</h1>\r\n        <h3 class=\"ion-text-center\">sei uno dei nostri!</h3>\r\n             \r\n        <div class=\"ion-text-center\">\r\n            <img src=\"assets/img/handshake_b.gif\">\r\n        </div>\r\n    </div>\r\n\r\n    <div>\r\n\r\n    </div>\r\n\r\n</ion-content>\r\n\r\n<!-- FOOTER PAGES-->\r\n<ion-footer>\r\n\r\n    <div id=\"footer-login\" \r\n         *ngIf=\"actualStatePage==pageState.LOGIN\">\r\n        <ion-button \r\n        class=\"btn-confirm\" \r\n        [color]=\"colorButton\"\r\n        expand=\"block\" \r\n        (click)=\"onClickFooterAvanti()\" \r\n        [disabled]=\"!formLogin.valid\">\r\n            ACCEDI\r\n        </ion-button>\r\n    </div>\r\n\r\n    <div id=\"footer-contact\" *ngIf=\"actualStatePage==pageState.CONTACT\">\r\n        <ion-button \r\n                [color]=\"colorButton\"\r\n                class=\"btn-confirm\" \r\n                expand=\"block\"\r\n        [disabled]=\"!this.formContact.valid\"\r\n        (click)=\"onClickFooterAvanti()\">Avanti</ion-button>\r\n    </div>\r\n\r\n    <div id=\"footer-verify\" *ngIf=\"actualStatePage==pageState.VERIFY\">\r\n\r\n        <ion-button \r\n            class=\"btn-confirm\"\r\n            [color]=\"colorButton\"\r\n            expand=\"block\"\r\n            (click)=\"onClickFooterAvanti()\"\r\n            [disabled]=\"!isEnableAvantiOnVerify()\">\r\n            Verifica\r\n        </ion-button>\r\n\r\n        \r\n    </div>\r\n\r\n    <div id=\"footer-registration\" *ngIf=\"actualStatePage==pageState.REGISTRATION\">\r\n        \r\n\r\n            <ion-button \r\n                class=\"btn-confirm\" \r\n                [color]=\"colorButton\"\r\n                expand=\"block\" \r\n                (click)=\"onClickFooterAvanti()\" \r\n                [disabled]=\"!formRegister.valid\">\r\n                Registrati\r\n            </ion-button>\r\n        \r\n    </div>\r\n\r\n    <div id=\"footer-welcome\" *ngIf=\"actualStatePage==pageState.WELCOME\">\r\n        <ion-button\r\n            class=\"btn-confirm\"\r\n            [color]=\"colorButton\"\r\n            expand=\"block\" \r\n            (click)=\"closeModal()\">\r\n            Inizia\r\n        </ion-button>\r\n    </div>\r\n\r\n</ion-footer>\r\n\r\n\r\n\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { ModalController, LoadingController, ToastController, NavController, AlertController } from '@ionic/angular';\r\nimport { StartConfiguration } from 'src/app/models/start-configuration.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { StartService } from 'src/app/services/start.service';\r\nimport { Utente } from 'src/app/models/utente.model';\r\nimport { Plugins } from '@capacitor/core';\r\nimport { Gruppo } from 'src/app/models/gruppo.model';\r\nimport { TipoVerificaAccount, PageType, RequestPincodeUse } from 'src/app/models/valuelist.model';\r\nimport { Area } from 'src/app/models/area.model';\r\nimport { AreaLink } from 'src/app/models/arealink.model';\r\nimport { AccountRequestCode, AccountOperationResponse, AccountVerifyCode } from 'src/app/models/accountregistration.model';\r\n\r\nimport { CryptoService } from 'src/app/library/services/crypto.service';\r\nimport { CodiceFiscale } from 'src/app/models/codicefiscale.model';\r\nimport { PswRecoveryPage } from '../psw-recovery/psw-recovery.page';\r\nimport { PostResponse } from 'src/app/library/models/postResult.model';\r\nconst { Browser } = Plugins;\r\n\r\n\r\n@Component({\r\n  selector: 'app-new-login',\r\n  templateUrl: './new-login.page.html',\r\n  styleUrls: ['./new-login.page.scss'],\r\n})\r\nexport class NewLoginPage implements OnInit {\r\n\r\n  //per utilizzare l'enum nell'html\r\n  pageState: typeof PageState=PageState;\r\n  tipoVerifica: typeof TipoVerificaAccount = TipoVerificaAccount;\r\n\r\n  //variabile che indica lo stato della pagina\r\n  //Se posizionato su Login, Register, Verifiy o Welcome\r\n  actualStatePage:PageState = PageState.LOGIN;\r\n\r\n  //Situazione del Segment (Login o Register)\r\n  actualStateSegment: PageState = PageState.LOGIN;\r\n\r\n  //Nel caso di registrazione indica a che punto ci si trova\r\n  registrationStep: PageState;\r\n\r\n  //Array con gli step possibili in registrazione\r\n  stepRegistration: PageState[] = [];\r\n  indexStepRegistration: number = 0;\r\n\r\n  //Documento per la richiesta invio codici al server\r\n  docRichiestaCodici: AccountRequestCode = new AccountRequestCode();\r\n\r\n\r\n  //Registrazione possibile in app\r\n  registrationInApp: boolean = false; \r\n\r\n\r\n  //varibili formGroup (per usare i reactive forms)\r\n  formRegister: FormGroup;\r\n  formVerifyTel: FormGroup;\r\n  formVerifyMail: FormGroup;\r\n  formLogin: FormGroup;\r\n  formContact: FormGroup;\r\n\r\n  //Dati\r\n  startConfig:StartConfiguration;\r\n  startListen: Subscription;\r\n  docGruppo: Gruppo;\r\n  docArea: Area;\r\n\r\n  //Utente\r\n  docUtente= new Utente;\r\n\r\n  //Restituisce true se l'app sta girando su Desktop\r\n  isDesktop:boolean;\r\n\r\n  //Verifiche\r\n  emailVerificationYES: boolean = false;\r\n  smsVerificationYES: boolean = false;\r\n  emailVerificata: string = ''; //Email verificata\r\n  telVerificato: string = ''; //Numero telefono Verificato\r\n  colorButton = 'tertiary'; //Colore dei bottoni di login\r\n\r\n  //#region questi servono per accedere ai corrispettivi elementi in HTML\r\n  @ViewChild('c1') c1;\r\n  @ViewChild('c2') c2;\r\n  @ViewChild('c3') c3;\r\n  @ViewChild('c4') c4;\r\n  @ViewChild('c5') c5;\r\n  @ViewChild('c6') c6;\r\n  @ViewChild('c7') c7;\r\n  @ViewChild('c8') c8;\r\n  @ViewChild('c9') c9;\r\n  @ViewChild('c10') c10;\r\n\r\n  //#endregion\r\n\r\n\r\n  constructor(\r\n    private modalCtrl:ModalController,\r\n    private startService:StartService,\r\n    private loadingCtrl:LoadingController,\r\n    private toastCtrl:ToastController,\r\n    private alertCtrl: AlertController,\r\n    private cryptoService: CryptoService\r\n  ) {\r\n\r\n    \r\n    //Stato Pagina registrazione\r\n    this.indexStepRegistration = 0;\r\n\r\n    //Posizionato sulla pagina di login\r\n    this.actualStatePage = PageState.LOGIN;\r\n\r\n    //Segment Option puo' essere solo Login/Registration\r\n    this.actualStateSegment = PageState.LOGIN;\r\n\r\n    \r\n\r\n\r\n    //Richiedo lo startConfig\r\n    this.startListen = startService.startConfig.subscribe(data=>{\r\n                \r\n                //Memorizzo lo StartConfig\r\n                this.startConfig=data;\r\n\r\n                //Nel gruppo è specificato se è possibile effettuare \r\n                //registrazioni con l'app\r\n                if (this.startConfig && this.startConfig.gruppo) {\r\n\r\n                  //Memorizzo il Gruppo con le sue Opzioni\r\n                  this.docGruppo = this.startConfig.gruppo;\r\n\r\n                  //Abilitazione / Disabilitazione registrazione in App\r\n                  this.registrationInApp = this.startConfig.gruppo.APPFLAGREGISTRAZIONE;\r\n\r\n                  //Creo un Array con gli step di registrazione\r\n                  this.createArrayStepRegistration(this.docGruppo);\r\n                }\r\n    });\r\n\r\n    //Prelevo l'area selezionata \r\n    this.docArea = this.startService.areaSelectedValue;\r\n  \r\n\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.createLoginForm();\r\n    this.createRegisterForm();\r\n    this.createVerifyForm();\r\n    this.createContactForm();\r\n    this.isDesktop=this.startService.isDesktop\r\n  }\r\n\r\n  /**\r\n   * Titolo da applicare alla videata\r\n   */\r\n  getCaptionTitle(): string {\r\n    let strTitle: string;\r\n\r\n    if (this.actualStateSegment == PageState.LOGIN) {\r\n      strTitle = 'Login';\r\n    }\r\n    else {\r\n      strTitle = 'Nuovo Account';\r\n    }\r\n\r\n    return strTitle;\r\n  }\r\n\r\n  /**\r\n   * Modifica dello stato del segment\r\n   */\r\n  onSegmentChanged(ev:any) {\r\n    //Vuole tornare al login\r\n    if (ev.detail.value == PageState.LOGIN) {\r\n      this.actualStatePage = PageState.LOGIN;\r\n    }\r\n    else {\r\n      //Lo stato della pagina\r\n      this.actualStatePage = this.stepRegistration[this.indexStepRegistration];\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Crea un array con i passaggi disponibili in registrazione\r\n   * a seconda delle richieste del gruppo\r\n   * Se il gruppo non vuole verifiche, si passa subito ai dati\r\n   */\r\n  createArrayStepRegistration(docGruppo: Gruppo) {\r\n    this.stepRegistration = [];\r\n\r\n    \r\n\r\n    if (docGruppo.APPFLAGREGISTRAZIONE == true) {\r\n\r\n      //Pagina dei contatti Email/SMS\r\n      this.stepRegistration.push(PageState.CONTACT);\r\n\r\n      if (docGruppo.APPTIPOVERIFICA !== TipoVerificaAccount.noverifica) {\r\n        //La pagina di Verifica è necessaria alla registrazione\r\n        this.stepRegistration.push(PageState.VERIFY);\r\n      }\r\n\r\n      //Dati di registrazione\r\n      this.stepRegistration.push(PageState.REGISTRATION);\r\n      //Fase Finale\r\n      this.stepRegistration.push(PageState.WELCOME);\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Effettua l'avanzamento di pagina nello Step Registrazione\r\n   * @param skipVerifica Nel caso fosse la pagina di verifica salta a quella successiva\r\n   */\r\n  nextStepRegistration(skipVerifica: boolean = false) {\r\n    \r\n    \r\n    if (this.indexStepRegistration + 1 < this.stepRegistration.length) {\r\n      \r\n      for (let index = this.indexStepRegistration + 1; index < this.stepRegistration.length; index++) {\r\n        let find = true;\r\n        const element = this.stepRegistration[index];\r\n        \r\n        if (skipVerifica && element == PageState.VERIFY) {\r\n          //Fingo di non aver trovato cosi sto dentro\r\n          find = false;\r\n        }\r\n        \r\n        if (find) {\r\n          this.indexStepRegistration = index;\r\n          this.actualStatePage = element;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Torna indietro negli Step di Registrazione\r\n   */\r\n  backStepRegistration() {\r\n\r\n    if (this.indexStepRegistration - 1 >= 0) {\r\n      \r\n      for (let index = this.indexStepRegistration -1; index >= 0; index--) {\r\n        \r\n        const element = this.stepRegistration[index];\r\n        this.indexStepRegistration = index;\r\n        this.actualStatePage = element;\r\n        break;\r\n        }\r\n      }\r\n    }    \r\n  \r\n\r\n\r\n\r\n\r\n  /**\r\n   * Chiusura della videata\r\n   */  \r\n  closeModal(){\r\n    this.modalCtrl.dismiss();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Pulsante Avanti o Acced presente nel footer\r\n   */\r\n  onClickFooterAvanti() {\r\n    switch(this.actualStatePage) {\r\n      case PageState.LOGIN:\r\n          //Siamo sul Login e quindi gestisco la fase di login\r\n          this.onClickLogin();\r\n        break;\r\n\r\n      case PageState.CONTACT:\r\n          //Siamo sulla pagina dei Contatti e dobbiamo gestirne la fase\r\n          this.onClickAvantiContact();\r\n        break;\r\n\r\n      case PageState.VERIFY:\r\n        //Siamo sulla pagina di inserimento codici da verificare\r\n        this.onClickAvantiVerifica();\r\n        break;\r\n\r\n      case PageState.REGISTRATION:\r\n        //Siamo nella parte finale della registrazione con i dati \r\n        //e l'invio dei dati al server\r\n        this.onClickRegistrati();\r\n      \r\n      default:\r\n        break;\r\n\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Evento scatenato al click del login\r\n   */\r\n  onClickLogin()\r\n  {\r\n    if (!this.formLogin.valid)\r\n    {\r\n      return\r\n    }\r\n    else\r\n    {\r\n      //Apro il loading Controller per verificare\r\n      this.loadingCtrl\r\n        .create({\r\n          message: 'Controllo credenziali'\r\n        })\r\n        .then((element) => {\r\n\r\n          //Creo il loading\r\n          element.present();\r\n\r\n          // Chiamo il Servizio per eseguire l'autorizzazione\r\n          this.startService\r\n            .userLogin(this.formLogin.value.username, this.formLogin.value.password)\r\n            .then((dataResult:PostResponse) => {\r\n\r\n                //Chiudo lo Spinner\r\n                element.dismiss();\r\n\r\n                // E' Arrivata una risposta NEGATIVA\r\n                if (!dataResult.result) {\r\n                  this.showMessage(dataResult.message);\r\n                }\r\n                else {\r\n                  //LOGIN ACCETTATO\r\n                  \r\n                  // MEMORIZZO LE CREDENZIALI PER UN SUCCESSIVO RECUPERO\r\n                  this.startService.saveStorageUtente(this.formLogin.value.username,this.formLogin.value.password);\r\n\r\n                  //Resetto la form\r\n                  this.formLogin.reset();\r\n                  \r\n                  //Chiudo la modale\r\n                  this.closeModal();\r\n                }\r\n            })\r\n            .catch(error => {\r\n              \r\n              //login non andato a buon fine\r\n              element.dismiss();\r\n              console.log(error);\r\n              this.showMessage(error);\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n  }\r\n  \r\n  /**\r\n   * evento scatenato quando l'utente clicca su \"reimposta password\"\r\n   */\r\n  onClickReimpostaPsw(){\r\n    this.modalCtrl.create({\r\n      component:PswRecoveryPage\r\n    }).then(elModal=>{\r\n      elModal.present();\r\n      this.modalCtrl.dismiss();\r\n    })\r\n  }\r\n\r\n  //#region GESTIONE PAGINA CONTATTI E CODICI\r\n\r\n  /*\r\n  L'intera fase di registrazione è gestita con un array this.stepRegistration\r\n  Dentro ci sono i passaggi richiesti (che sono variabili a seconda delle verifiche richieste)\r\n\r\n  this.indexStepRegistration è l'indice dell'array su cui siamo posizionati\r\n  this.actualStatePage è lo Stato Attuale (recuperato dall'array)\r\n\r\n  */\r\n\r\n  /**\r\n   * Click di Avanti sulla pagina con i contatti\r\n   */\r\n  onClickAvantiContact() {\r\n    //Ci sono diversi stati da gestire per andare avanti da questa pagina\r\n    //La variabile docGruppo.APPTIPOVERIFICA indica le verifiche richieste\r\n    let inpEmail = this.formContact.value.email;\r\n    let inpTel = this.formContact.value.telephone;\r\n    let needPageVerify: boolean = true;\r\n    let prosegui: boolean = false;\r\n    let message: string = '';\r\n\r\n\r\n    //Le due variabili\r\n    //this.smsVerificationYES\r\n    //this.emailVerificationYES\r\n    //indicano cosa bisogna ancora verificare\r\n\r\n    //Stato 1: Le verifiche sono già effettuate e \r\n    //nessun campo è stato modificato dopo la verifica\r\n    //Stato 2: Non sono richieste verifiche\r\n\r\n\r\n    //Nessuna verifica da apportare\r\n    if (this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.noverifica) {\r\n      \r\n      //Imposto email e sms verificati\r\n      this.emailVerificationYES = true;\r\n      this.smsVerificationYES = true;\r\n\r\n      //Non serve la pagina di verifica\r\n      needPageVerify = false;\r\n      prosegui = true;\r\n\r\n      //Nessuna richiesta codici da effettuare\r\n      this.docRichiestaCodici.REQUESTSMSCODE = false;\r\n      this.docRichiestaCodici.REQUESTEMAILCODE = false;\r\n\r\n    }\r\n    else {\r\n\r\n      //Bisogna verificare qualcosa\r\n      switch(this.docGruppo.APPTIPOVERIFICA) {\r\n\r\n        case TipoVerificaAccount.verificaemail:\r\n\r\n          if (this.emailVerificationYES && this.emailVerificata == inpEmail) {\r\n            //Tutto rimasto invariato, email è verificata si puo' bypassare la verifica\r\n\r\n            //Non serve la pagina di verifica\r\n            needPageVerify = false;\r\n            prosegui = true;\r\n\r\n            //non serve richiedere ancora il codice email\r\n            this.docRichiestaCodici.REQUESTEMAILCODE = false;\r\n\r\n\r\n          }\r\n          else {\r\n            //Email non verificata, oppure modificata\r\n            //devo verificare\r\n\r\n            //Serve la pagina di verifica\r\n            needPageVerify = true;\r\n            prosegui = true;\r\n\r\n            //Bisogna richiedere ancora il codice email\r\n            this.docRichiestaCodici.REQUESTEMAILCODE = true;\r\n            this.docRichiestaCodici.EMAIL = inpEmail;\r\n\r\n          }\r\n          break;\r\n\r\n        case TipoVerificaAccount.verificaemailsms:\r\n\r\n          if ((this.emailVerificationYES && this.emailVerificata == inpEmail) && \r\n              (this.smsVerificationYES && this.telVerificato == inpTel)) {\r\n            //Tutto rimasto invariato, email e Telefono verificati si puo' bypassare la verifica\r\n\r\n            //Non serve la pagina di verifica\r\n            needPageVerify = false;\r\n            prosegui = true;\r\n\r\n            //Nessuna richiesta ulteriore da effettuare\r\n            this.docRichiestaCodici.REQUESTEMAILCODE = false;\r\n            this.docRichiestaCodici.REQUESTSMSCODE = false;\r\n\r\n          }\r\n          else {\r\n            //Email o Telefono non verificato, oppure modificato\r\n            //devo verificare\r\n\r\n            //Serve la pagina di verifica\r\n            needPageVerify = true;\r\n            prosegui = true;\r\n\r\n            if (this.emailVerificationYES == false || this.emailVerificata !== inpEmail) {\r\n              //Ha cambiato la mail dopo la verifica oppure non l ha mai verificato\r\n\r\n              //Bisogna richiedere ancora il codice email\r\n              this.docRichiestaCodici.REQUESTEMAILCODE = true;\r\n              this.docRichiestaCodici.EMAIL = inpEmail;\r\n            }\r\n\r\n            if (this.smsVerificationYES == false || this.telVerificato !== inpTel) {\r\n              //Ha cambiato il telefono dopo la verifica oppure non l ha mai verificato\r\n\r\n              //Bisogna richiedere ancora il codice SMS\r\n              this.docRichiestaCodici.REQUESTSMSCODE = true;\r\n              this.docRichiestaCodici.TELEPHONE = inpTel;\r\n\r\n            }\r\n\r\n\r\n          }\r\n          break;\r\n\r\n\r\n          \r\n        case TipoVerificaAccount.verificasms:\r\n\r\n          if (this.smsVerificationYES && this.telVerificato == inpTel) {\r\n            //Tutto rimasto invariato, Telefono è verificato si puo' bypassare la verifica\r\n\r\n            //Non serve la pagina di verifica\r\n            needPageVerify = false;\r\n            prosegui = true;\r\n\r\n            //Nessuna richiesta SMS da effettuare\r\n            this.docRichiestaCodici.REQUESTSMSCODE = false;\r\n\r\n          }\r\n          else {\r\n            //Telefono non verificato, oppure modificato\r\n            //devo verificare\r\n\r\n            //Serve la pagina di verifica\r\n            needPageVerify = true;\r\n            prosegui = true;\r\n\r\n            //Bisogna richiedere ancora il codice SMS\r\n            this.docRichiestaCodici.REQUESTSMSCODE = true;\r\n            this.docRichiestaCodici.TELEPHONE = inpTel;\r\n\r\n\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n          prosegui = false;\r\n          message = 'Ops..qualcosa è andato storto';\r\n          break;\r\n      }\r\n\r\n      if (prosegui) {\r\n        //Serve la pagina di verifica\r\n        //Allora devo chiamare il server per inviare i codici\r\n        if (needPageVerify) {\r\n\r\n          //Chiamo il server, e se tutto va a buon fine andro alla verifica\r\n          this.sendServerRichiestaCodici();\r\n          \r\n        }\r\n        else {\r\n          //Devo andare alla pagina successiva alla verifica\r\n          const skipPageVerifica = true;\r\n          this.nextStepRegistration(skipPageVerifica);\r\n        }\r\n      }\r\n      else {\r\n\r\n        //Visualizzo il messaggio\r\n        this.showMessage(message);\r\n\r\n      }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Chiede al server di inviare i codici pin necessari\r\n   * Se tutto va a buon fine si sposta nella pagina di verifica, altrimenti segnala l'errore\r\n   * @param onSuccessChangePage Se l'operazione ha successo passa alla pagina successiva\r\n   * @param customMessage Se presente viene mostrato in caso di richiesta a buon fine\r\n   */\r\n  sendServerRichiestaCodici(onSuccessChangePage:boolean = true, customMessage?: string) {\r\n\r\n    this.loadingCtrl\r\n      .create({\r\n          message: 'Invio Codici in corso...'\r\n      })\r\n      .then(element => {\r\n\r\n        //Creo il loading\r\n        element.present();\r\n\r\n        //Ora chiedo al server di inviare i codici\r\n\r\n        //Il documento contiene le informazioni necessarie\r\n        //Aggiungo l'area nel caso non ci fosse\r\n        this.docRichiestaCodici.IDAREA = this.docArea.ID;\r\n        this.docRichiestaCodici.USE = RequestPincodeUse.forRegistration;\r\n\r\n        //Chiamo il servizio\r\n        this.startService\r\n              .registrationSendCodici(this.docRichiestaCodici)\r\n              .then((responseServer:AccountOperationResponse) => {\r\n\r\n                //Chiudo il Loading Controller\r\n                element.dismiss();\r\n\r\n                //Qui in teoria i codici sono stati inviati\r\n                //Memorizzo IDREFER per le chiamate successive\r\n                this.docRichiestaCodici.IDREFER = responseServer.idRefer;\r\n\r\n                //Azzero i flag che servono a richiedere i codici\r\n                this.docRichiestaCodici.REQUESTSMSCODE = false;\r\n                this.docRichiestaCodici.REQUESTEMAILCODE = false;\r\n\r\n                //Mi sposto alla pagina successiva (di verifica)\r\n                if (onSuccessChangePage) {\r\n                  //Devo spostarmi alla pagina di verifica\r\n                  const skipPageVerifica = false;\r\n                  this.nextStepRegistration(skipPageVerifica);\r\n                }\r\n\r\n                //Se ho un messaggio da visualizzare lo mostro\r\n                if (customMessage && customMessage.length!== 0) {\r\n                  this.showMessage(customMessage);\r\n                }\r\n\r\n              })\r\n              .catch(err => {\r\n                  //Chiudo il Loading Controller\r\n                  element.dismiss();\r\n                  //Visualizzo il messaggio\r\n                  this.showMessage(err);\r\n              })\r\n\r\n      \r\n    });\r\n    \r\n  }\r\n\r\n\r\n  //#endregion\r\n\r\n\r\n  //#region GESTIONE PAGINA VERIFICA\r\n\r\n  /**\r\n   * evento scatenato quando l'utente tappa su \"reinvia codice\"\r\n   * Eì possibile richiedere il reinvio di 1 solo codice alla volta\r\n   * @param tipo Reinvio Codice Email oppure Sms\r\n   */\r\n  onClickReinviaCodice(tipo: TipoVerificaAccount){\r\n    let askMessage = '';\r\n    let askEmail = false;\r\n    let askTel = false;\r\n\r\n    if (this.docRichiestaCodici) {\r\n\r\n      askMessage = 'Verrà inviato un nuovo codice a ';\r\n\r\n      switch (tipo) {\r\n        case TipoVerificaAccount.verificaemail:\r\n            askMessage += this.docRichiestaCodici.EMAIL;\r\n            //Uso le variabili temporanee per indicare che vorrebbe il codice in email\r\n            askEmail = true;\r\n\r\n          break;\r\n\r\n        case TipoVerificaAccount.verificasms:\r\n            askMessage += this.docRichiestaCodici.TELEPHONE;\r\n            //Uso le variabili temporanee per indicare che vorrebbe il codice su telefono\r\n            askTel= true;\r\n          break;\r\n      \r\n        default:\r\n          break;\r\n      }\r\n\r\n      //Faccio la richiesta se desidera un reinvio codici\r\n      this.alertCtrl.create({\r\n        header: 'Reinvio pincode',\r\n        message: askMessage,\r\n        buttons: [\r\n          {\r\n            text: 'Annulla',\r\n            role: 'cancel',\r\n          },\r\n          {\r\n            text: 'Reinvia',\r\n            handler: () => {\r\n              \r\n              //Reimposto il documenti di Richiesta con quello che vuole\r\n              this.docRichiestaCodici.REQUESTEMAILCODE = askEmail;\r\n              this.docRichiestaCodici.REQUESTSMSCODE = askTel;\r\n\r\n              const msg = 'Codice reinviato con successo';\r\n              //Faccio la richiesta al server e indico di non cambiare\r\n              //pagina al termine della richiesta\r\n              this.sendServerRichiestaCodici(false, msg);\r\n            }\r\n          }\r\n        ]\r\n      })\r\n      .then (element => {\r\n        element.present();\r\n      })\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  \r\n  /**\r\n  * evento scatenato quando l'utente clicca sul pulsante conferma della videata di verifica\r\n  * dei recapiti\r\n  */\r\n  onClickAvantiVerifica()\r\n  {\r\n    //Devo inviare al server i dati inseriti dall'utente\r\n    let enable = this.isEnableAvantiOnVerify();\r\n    let altMessage = '';\r\n    let docVerify: AccountVerifyCode;\r\n\r\n    if (!enable) {\r\n      altMessage = 'Controllare i dati inseriti';\r\n    }\r\n    else {\r\n      //I codici sono stati richiesti e dovrei avere l'IDREFER\r\n      if (this.docRichiestaCodici && this.docRichiestaCodici.IDREFER) {\r\n        \r\n          if (this.docRichiestaCodici.IDREFER.length !== 0) {\r\n            //Posso preparare il documento per la verifica\r\n            docVerify = new AccountVerifyCode();\r\n            docVerify.IDAREA = this.docRichiestaCodici.IDAREA;\r\n            docVerify.IDREFER = this.docRichiestaCodici.IDREFER;\r\n            \r\n            //Devo passare il pincode Email\r\n            if (this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemail || \r\n              this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms\r\n               ) \r\n               {\r\n                 docVerify.EMAILPINCODE = this.getInputVerifyCode(TipoVerificaAccount.verificaemail);\r\n               }\r\n\r\n\r\n            //Devo passare il pincode SMS\r\n            if (this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificasms || \r\n              this.docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms\r\n               ) \r\n               {\r\n                 docVerify.SMSPINCODE = this.getInputVerifyCode(TipoVerificaAccount.verificasms);\r\n               }\r\n\r\n            \r\n            //Tutto pronto per effettuare la richiesta di verifica pincode\r\n            this.sendServerVerificaCodici(docVerify);\r\n\r\n\r\n          }\r\n          else {\r\n            enable = false;\r\n            altMessage = 'Errore: Richiedere il reinvio';\r\n          }\r\n\r\n      }\r\n      else {\r\n        enable = false;\r\n        altMessage = 'Errore: Richiedere il reinvio';\r\n      }\r\n\r\n\r\n      \r\n    }\r\n\r\n\r\n    //Nel caso mostro un messaggio di errore\r\n    if (!enable) {\r\n      this.showMessage(altMessage);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Richiedo al server se i dati sono corretti\r\n   * @param docVerifica Documento per la verifica dei codici\r\n   */\r\n  sendServerVerificaCodici(docVerifica: AccountVerifyCode) {\r\n\r\n    if (docVerifica) {\r\n\r\n      this.loadingCtrl\r\n      .create({\r\n          message: 'Verifica Codici'\r\n      })\r\n      .then(elLoading => {\r\n\r\n        //Creo il loading\r\n        elLoading.present();\r\n\r\n        //Faccio la richiesta al server\r\n        this.startService\r\n          .registrationVerifyCodici(docVerifica)\r\n          .then((response:AccountOperationResponse) => {\r\n\r\n            //Chiudo il Loading \r\n            elLoading.dismiss();\r\n\r\n            //Verifica codici passata\r\n            if (response.result) {\r\n\r\n              //Memorizzo nelle variabili che la verifica ha avuto esito positivo\r\n              this.emailVerificationYES = true;\r\n              this.emailVerificata = this.docRichiestaCodici.EMAIL;\r\n\r\n              this.smsVerificationYES = true;\r\n              this.telVerificato = this.docRichiestaCodici.TELEPHONE;\r\n\r\n              //Posso spostarmi alla pagina successiva\r\n              this.nextStepRegistration();\r\n\r\n            }\r\n            else {\r\n\r\n              //Segno che ha fallito tutto \r\n              this.emailVerificationYES = false;\r\n              this.emailVerificata = '';\r\n\r\n              this.smsVerificationYES = false;\r\n              this.telVerificato = '';\r\n            }\r\n          })\r\n          .catch(err => {\r\n            //Qui qualcosa è andato storto\r\n\r\n            //Chiudo il Loading\r\n            elLoading.dismiss();\r\n\r\n            //Mostro il messaggio\r\n            this.showMessage(err);\r\n          });\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n\r\n  //#endregion\r\n\r\n\r\n\r\n  /**\r\n   * evento scatenato quando l'utente clicca \"registrati\" \r\n   * sulla pagina di inserimento dati\r\n   */\r\n  onClickRegistrati()\r\n  {\r\n    \r\n    let codfisc: string;\r\n    \r\n    if (!this.formRegister.valid)\r\n    {\r\n      return;\r\n    }\r\n    else {\r\n\r\n      //Prima vediamo il codice fiscale\r\n      codfisc = this.formRegister.value.codFisc;\r\n      codfisc = codfisc.toUpperCase();\r\n\r\n      this.loadingCtrl.create({\r\n        message: 'Check Codice Fiscale'\r\n      })\r\n      .then(elLoading => {\r\n        elLoading.present();\r\n\r\n        //Chiamo il servizio del codice fiscale\r\n        this.startService\r\n          .checkCodiceFiscale(codfisc, true, true)\r\n          .then(elCodFisc => {\r\n            //Dovrei ottenere il codice fiscale con i dati\r\n            \r\n            elLoading.dismiss();\r\n\r\n            if (!elCodFisc.checkValidate) {\r\n              this.showMessage(elCodFisc.msgValidate);\r\n            }\r\n            else {\r\n\r\n              //Passo alla registrazione reale\r\n              this.execRegistrati(elCodFisc);\r\n            }\r\n\r\n  \r\n          })\r\n          .catch(objError => {\r\n\r\n            elLoading.dismiss();\r\n            this.showMessage(objError.msgValidate);\r\n\r\n          });\r\n\r\n      });\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Invia al server i dati di registrazione\r\n   */\r\n  execRegistrati(myCodiceFiscale: CodiceFiscale) {\r\n    let pwd = '';\r\n    let pwdToSend = '';\r\n    let splitPwd:string[] = [];\r\n    let useCrypter: boolean = false;\r\n\r\n      //Imposto il nome e cognome\r\n      this.docUtente.NOME=this.formRegister.value.name;\r\n      this.docUtente.COGNOME=this.formRegister.value.surname;\r\n\r\n      //Sarebbe meglio criptare la password con BCrypt ma per ora confidiamo nel https\r\n      //e quindi non la cripto\r\n      useCrypter = false;\r\n\r\n      pwd = this.formRegister.value.psw;\r\n\r\n      if (useCrypter) {\r\n        pwdToSend = this.cryptoService.getBCrypt(pwd);\r\n      }\r\n      else {\r\n        pwdToSend = pwd;\r\n      }\r\n\r\n      //Splitto la stringa in 2 stringhe che verrà ricostruita dal server\r\n      splitPwd = this.cryptoService.mySplitPassword(pwdToSend);\r\n\r\n      if (splitPwd) {\r\n        //Metto la prima parte della password dentro al docRichiesta\r\n        this.docRichiestaCodici.TOKEN = splitPwd[0];\r\n\r\n        if (useCrypter) {\r\n          //La seconda parte dentro a SHAPASSWORD\r\n          //nel caso di criptata\r\n          this.docUtente.SHAPASSWORD = splitPwd[1];\r\n          this.docUtente.INPUTPASSWORD = '';\r\n        }\r\n        else {\r\n          this.docUtente.INPUTPASSWORD = splitPwd[1];\r\n          this.docUtente.SHAPASSWORD = '';\r\n        }\r\n\r\n        //Inserisco il codice fiscale\r\n        this.docUtente.CODICEFISCALE = myCodiceFiscale.codiceFiscale;\r\n        this.docUtente.SESSO = myCodiceFiscale.sesso;\r\n        this.docUtente.NATOIL = myCodiceFiscale.dataNascita;\r\n        this.docUtente.NATOA = myCodiceFiscale.comune;\r\n        this.docUtente.NATOCAP = myCodiceFiscale.cap;\r\n        this.docUtente.NATOPROV = myCodiceFiscale.provincia;\r\n        this.docUtente.NATOISOSTATO = myCodiceFiscale.stato;\r\n\r\n\r\n        this.docUtente.WEBLOGIN = this.formContact.value.email;\r\n        this.docUtente.EMAIL = this.formContact.value.email;\r\n        this.docUtente.MOBILENUMBER = this.formContact.value.telephone;\r\n  \r\n        if (this.formRegister.value.chkNewsletter == true) {\r\n          this.docUtente.NEWSLETTER = true;\r\n        }\r\n        else {\r\n          this.docUtente.NEWSLETTER = false;\r\n        }\r\n  \r\n        //Attivo il loading e invio i dati al server\r\n        this.loadingCtrl\r\n          .create({\r\n            message: 'Registrazione'\r\n          })\r\n          .then(elLoading => {\r\n  \r\n            //Creo il loading\r\n            elLoading.present();\r\n  \r\n            this.startService\r\n                .registrationFinalize(this.docUtente, this.docRichiestaCodici)\r\n                .then((response:AccountOperationResponse) => {\r\n  \r\n                    //Chiudo il Loading\r\n                    elLoading.dismiss();\r\n  \r\n                    //Wow registrazione conclusa\r\n  \r\n                    //Posso spostarmi alla pagina successiva\r\n                    this.nextStepRegistration();\r\n  \r\n                    //Dentro a IDREFER c'e' il GUID dell'Utente\r\n\r\n                    //Faccio un accesso automatico dell'utente\r\n                    this.loginAfterRegister(this.docUtente.WEBLOGIN, pwd);\r\n  \r\n                })\r\n                .catch(error => {\r\n                      //Chiudo il Loading\r\n                      elLoading.dismiss();\r\n  \r\n                      //Mostro il messaggio\r\n                      this.showMessage(error);\r\n                });\r\n  \r\n              \r\n          });\r\n\r\n      }\r\n      else {\r\n        this.showMessage('Dati non corretti');\r\n      }\r\n      \r\n\r\n    \r\n\r\n  }\r\n\r\n  /**\r\n   * Al termine della registrazione se tutto va a buon fine, procedo con il login automatico\r\n   */\r\n  loginAfterRegister(username: string, password: string)\r\n  {\r\n\r\n    if (username && password) {\r\n\r\n      // Chiamo il Servizio per eseguire l'autorizzazione\r\n      this.startService\r\n      .userLogin(username, password)\r\n      .then((dataResult:PostResponse) => {\r\n\r\n          // E' Arrivata una risposta NEGATIVA\r\n          if (!dataResult.result) {\r\n            this.showMessage(dataResult.message);\r\n          }\r\n          else {\r\n            //LOGIN ACCETTATO\r\n            \r\n            // MEMORIZZO LE CREDENZIALI PER UN SUCCESSIVO RECUPERO\r\n            this.startService.saveStorageUtente(username,password);\r\n          }\r\n      });\r\n    }\r\n\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * procedura che sposta il focus sulla casella di input successiva\r\n   * @param evento parametri $event dell'eveno \"ion-input\", necessari a identificare\r\n   * in quale casella c'è stato l'input\r\n   */\r\n  changeFocus(evento)\r\n  {\r\n    let id=evento['target']['id'];\r\n        switch (id) {\r\n        case '1':\r\n          this.c2.setFocus();\r\n          break;\r\n        case '2':\r\n          this.c3.setFocus();\r\n          break;\r\n        case '3':\r\n          this.c4.setFocus();\r\n          break;\r\n        case '4':\r\n          this.c5.setFocus();\r\n          break;\r\n        case '6':\r\n          this.c7.setFocus();\r\n          break;\r\n        case '7':\r\n          this.c8.setFocus();\r\n          break;\r\n        case '8':\r\n          this.c9.setFocus();\r\n          break;\r\n        case '9': \r\n          this.c10.setFocus();\r\n          break;\r\n      \r\n        default:\r\n          break;\r\n      }\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n  /**\r\n   * evento scatenato quando l'utente clicca su \"verifica in seguito\"\r\n   */\r\n\r\n  /**\r\n   * evento scatenato quando l'utente clicca su inizia\r\n   */\r\n  onClickInizia(){\r\n    //Chiudo la modale\r\n    this.modalCtrl.dismiss();\r\n  }\r\n  \r\n\r\n//#region CREAZIONI FORM\r\n\r\n  /**\r\n   * Funzione di creazione della Form di Login\r\n   */\r\n  createLoginForm(){\r\n    this.formLogin = new FormGroup({\r\n      username: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      password: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required]\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Funzione di creazione della Form Contatti, usata come prima pagina \r\n   * nello StepRegistrazione\r\n   */\r\n  createContactForm(){\r\n    let pattTelefono = '^[+]*[0-9]*';\r\n    //Spiegazione pattern \r\n    //Per altre spiegazioni guardare qui https://regexr.com/3c53v\r\n\r\n    // ^ Il match parte dall'inizio della stringa\r\n    // [+] Qualsiasi elemento contenuto nelle quadre (quindi il +)\r\n    // * la regola precedente è opzionale\r\n    // [0-9] Qualsiasi elemento delle quadre\r\n    // * la regola precedente è opzionale\r\n\r\n\r\n    //form dei contatti (mail e telefono)\r\n    this.formContact=new FormGroup({\r\n      email: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.email]\r\n      }),\r\n      telephone: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.pattern(pattTelefono)]\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  createRegisterForm(){\r\n    let patternCodice = '^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}';\r\n    //form di registrazione\r\n    this.formRegister=new FormGroup({\r\n      name: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      surname: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      psw: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required]\r\n      }),\r\n      verifyPsw: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required]\r\n      }),      \r\n      codFisc: new FormControl(null,{\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.pattern(patternCodice)]\r\n      }),\r\n      chkPrivacy: new FormControl(false, {\r\n        updateOn: 'change',\r\n        validators: [this.isPolicyLink() ? Validators.requiredTrue: Validators.nullValidator]\r\n      }),\r\n      chkNewsletter: new FormControl(true, {\r\n        updateOn: 'change',\r\n        validators: []\r\n      })      \r\n    }, [this.pswValidator]);\r\n  }\r\n\r\n\r\n  pswValidator(c:AbstractControl):{invalid:boolean}\r\n  {\r\n\r\n    if ((c.get('verifyPsw').value==c.get('psw').value))\r\n    {\r\n      return\r\n    }\r\n    else\r\n    {\r\n      return {invalid: true};\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Funzione per la creazione del FORM relativo alla Verifica Pincode Email e SMS\r\n   */\r\n  createVerifyForm(){\r\n    this.formVerifyMail=new FormGroup({\r\n      c1: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c2: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c3: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c4: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c5: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      })\r\n    });\r\n\r\n    this.formVerifyTel=new FormGroup({\r\n      c6: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c7: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c8: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c9: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      }),\r\n      c10: new FormControl(null, {\r\n        updateOn: 'change',\r\n        validators: [Validators.required, Validators.maxLength(1),Validators.minLength(1)]\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param tipo Tipo del codice richiesto\r\n   */\r\n  getInputVerifyCode(tipo: TipoVerificaAccount): string {\r\n    let strReturn: string = '';\r\n\r\n    if (tipo == TipoVerificaAccount.verificaemail) {\r\n      strReturn = this.formVerifyMail.value.c1 + \r\n                  this.formVerifyMail.value.c2 + \r\n                  this.formVerifyMail.value.c3 + \r\n                  this.formVerifyMail.value.c4 + \r\n                  this.formVerifyMail.value.c5;\r\n    }\r\n    else if (tipo == TipoVerificaAccount.verificasms) {\r\n      strReturn = this.formVerifyTel.value.c6 + \r\n                  this.formVerifyTel.value.c7 + \r\n                  this.formVerifyTel.value.c8 + \r\n                  this.formVerifyTel.value.c9 + \r\n                  this.formVerifyTel.value.c10;\r\n    }\r\n\r\n    return strReturn;\r\n  }\r\n\r\n  /**\r\n   * Il pulsante Avanti previsto nella form di Verifica\r\n   * deve tenere conto \r\n   * 1) Quanti sono i pincode da inserire \r\n   * 2) Quali ha inserito\r\n   */\r\n  isEnableAvantiOnVerify():boolean {\r\n    let enable = true;\r\n\r\n    if (this.docGruppo) {\r\n      if (this.docGruppo.APPTIPOVERIFICA !== TipoVerificaAccount.noverifica) {\r\n\r\n        switch (this.docGruppo.APPTIPOVERIFICA) {\r\n          case TipoVerificaAccount.verificaemail:\r\n              enable = this.formVerifyMail.valid;\r\n            break;\r\n          case TipoVerificaAccount.verificasms:\r\n              enable = this.formVerifyTel.valid;\r\n            break;\r\n\r\n          case TipoVerificaAccount.verificaemailsms:\r\n            enable = this.formVerifyTel.valid && this.formVerifyMail.valid;\r\n            break;\r\n        \r\n          default:\r\n            break;\r\n        }\r\n\r\n      }\r\n    }\r\n    else {\r\n      enable = false;\r\n    }\r\n    return enable;\r\n  }\r\n\r\n\r\n\r\n\r\n//#endregion\r\n\r\n\r\n  //#region LINK ESTERNI\r\n\r\n  /**\r\n   * Controlla che nell'area ci sia il link della policy\r\n   */\r\n  isPolicyLink(): boolean {\r\n    let link: AreaLink;\r\n    let ready: boolean = false;\r\n\r\n    if (this.docArea) {\r\n\r\n      link = this.docArea.findAreaLinkByPageType(PageType.policyPrivacy);\r\n  \r\n      if (link && link.REFERURL) {\r\n        ready = true;\r\n      }\r\n    }\r\n\r\n    return ready;\r\n  }\r\n\r\n  //Apre il link delle Policy se presente\r\n  openPolicyLink() {\r\n    let link: AreaLink;\r\n    \r\n\r\n    if (this.docArea) {\r\n\r\n      link = this.docArea.findAreaLinkByPageType(PageType.policyPrivacy);\r\n  \r\n      if (link && link.REFERURL) {\r\n        this.openLink(link.REFERURL);\r\n      }\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  //Apre un link in un'altra pagina\r\n  openLink(url:string)\r\n  {\r\n    Browser.open({url:url});\r\n  }\r\n\r\n  //#endregion\r\n\r\n    /**\r\n   * Procedura che visualizza un toast con il messaggio passato\r\n   * @param myMessage Il messaggio da visualizzare\r\n   */\r\n  async showMessage(myMessage: string) {\r\n    const toast = await this.toastCtrl\r\n      .create({\r\n        message: myMessage,\r\n        duration: 3000\r\n      });\r\n\r\n      toast.present();\r\n  }\r\n\r\n}\r\n\r\n\r\nenum PageState\r\n{\r\n  LOGIN = 100,\r\n  CONTACT = 210,\r\n  REGISTRATION = 220,\r\n  VERIFY = 230,\r\n  WELCOME = 300\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { NewLoginPage } from './new-login.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: NewLoginPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NewLoginPageRoutingModule {}\r\n"]}