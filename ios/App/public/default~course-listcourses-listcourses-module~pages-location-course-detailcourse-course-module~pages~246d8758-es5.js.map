{"version":3,"sources":["webpack:///src/app/pages/location/course/bookcourse/bookcourse.module.ts","webpack:///src/app/pages/location/course/bookcourse/bookcourse.page.ts","webpack:///src/app/pages/location/course/bookcourse/bookcourse.page.html","webpack:///src/app/pages/location/course/bookcourse/bookcourse-routing.module.ts"],"names":["BookcoursePageModule","$event","stopPropagation","Browser","BookcoursePage","startService","navParams","modalCtrl","docStructureService","loadingController","toastCtrl","alertCtrl","navCtrl","myCorso","myLocation","iconColor","userLogged","enableIscrizioni","disclaimer","onlyDaysCorso","flagPostiDisponibili","txtPostiDisponibili","onListenSelectedArea","onListenSelectedUser","listenSelectedArea","areaSelected","subscribe","elArea","selectedArea","setListPayment","APPISCRIZIONI","error","subUserLogged","utenteLogged","element","subUser","utente","elUser","docUser","isDesktop","get","undefined","showToastMessage","closeModal","getArrayGiorniCorso","requestPostiDisponibili","ID","create","spinner","message","backdropDismiss","then","elLoading","present","requestLocationById","IDLOCATION","dismiss","idCorso","getPostiDisponibiliCorso","elResponse","result","subMyCorso","unsubscribe","idLocation","filterLocation","Promise","resolve","reject","requestNew","elLocation","length","corso","getSportIcon","IDSPORT","link","findAreaLinkByPageType","condizioniVenditaIscrizioni","REFERURL","openLink","flagEnable","isAPagamento","mySelectedPayment","myListPayment","getPaymentFor","settorePagamentoCorso","console","log","value","valPaymentMode","myPaymentMode","onExecPayment","arModes","pagaAdesso","pagaBonifico","pagaStruttura","includes","docPaymentResult","onPaymentSuccess","myCheckoutPayment","amount","PREZZOLORDO","description","DENOMINAZIONE","currency","component","componentProps","paymentData","listAreaPaymentSettings","elModal","onDidDismiss","returnData","myPaymentResult","processResult","onPaymentFailed","messageResult","resultPayment","myDocIscrizione","myDocRata","prepareDocIscrizione","idElectronicResult","IDTRANSACTION","IDORDER","MODALITA","channelPayment","TIPORIGO","scadenza","DATASCADENZA","DATAINIZIO","IMPORTO","onSite","incassato","DATAOPERAZIONE","DATAISCRIZIONE","ISCRIZIONEINCASSO","push","requestSaveIscrizione","response","code","onAfterSaveIscrizione","showAlert","idIscrizione","navigateRoot","title","myDoc","IDCORSO","IDUTENTE","Date","messaggio","duration","titolo","bottoni","header","buttons","elAlert","url","open","onClickButtonHeader","routes","path","BookcoursePageRoutingModule","forChild"],"mappings":"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","file":"default~course-listcourses-listcourses-module~pages-location-course-detailcourse-course-module~pages~246d8758-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { BookcoursePageRoutingModule } from './bookcourse-routing.module';\n\nimport { BookcoursePage } from './bookcourse.page';\nimport { PipesModule } from 'src/app/shared/pipes/pipes.module';\nimport { PaymentPage } from '../../../payment/payment.page';\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\nimport { PaymentChooseComponent } from 'src/app/shared/components/payment-choose/payment-choose.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    BookcoursePageRoutingModule,\n    PipesModule,\n    SharedComponentsModule\n  ],\n  declarations: [BookcoursePage],\n  entryComponents:[PaymentChooseComponent, PaymentPage],\n  exports:[BookcoursePage]\n})\nexport class BookcoursePageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AlertController, LoadingController, ModalController, NavController, NavParams, ToastController } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\nimport { DocstructureService } from 'src/app/library/services/docstructure.service';\nimport { Area } from 'src/app/models/area.model';\nimport { AreaPaymentSetting } from 'src/app/models/areapaymentsetting.model';\nimport { Corso } from 'src/app/models/corso.model';\nimport { Location } from 'src/app/models/location.model';\nimport { PaymentProcess } from 'src/app/models/payment-process.model';\nimport { PageType, PaymentChannel, PaymentMode, SettorePagamentiAttivita, TipoRigoIncasso } from 'src/app/models/valuelist.model';\nimport { PaymentPage } from 'src/app/pages/payment/payment.page';\nimport { StartService } from 'src/app/services/start.service';\nimport { Plugins } from '@capacitor/core';\nimport { AreaLink } from 'src/app/models/arealink.model';\nimport { Settimana } from 'src/app/models/settimana.model';\nimport { UtenteIscrizione } from 'src/app/models/utenteiscrizione.model';\nimport { Utente } from 'src/app/models/utente.model';\nimport { PostResponse } from 'src/app/library/models/postResult.model';\nimport { IscrizioneCorso } from 'src/app/models/iscrizionecorso.model';\nimport { IscrizioneIncasso } from 'src/app/models/iscrizioneincasso.model';\nconst { Browser } = Plugins;\n\n@Component({\n  selector: 'app-bookcourse',\n  templateUrl: './bookcourse.page.html',\n  styleUrls: ['./bookcourse.page.scss'],\n})\nexport class BookcoursePage implements OnInit, OnDestroy {\n\n  myCorso: Corso = new Corso();\n  subMyCorso: Subscription;\n\n  myLocation: Location = new Location(); \n\n  isDesktop: boolean;\n  iconColor = 'primary';\n  \n  userLogged = false;\n  subUserLogged: Subscription;\n  docUser: Utente;\n  subUser: Subscription;\n\n  //Gestione Abilitazione Iscrizioni\n  listenSelectedArea:Subscription;\n  selectedArea: Area;\n  enableIscrizioni:boolean = false;\n\n  //accettazione delle condizioni di vendita\n  disclaimer: boolean =false;\n\n  //Configurazioni di pagamento\n  myListPayment: AreaPaymentSetting[];\n  mySelectedPayment: AreaPaymentSetting;\n  myPaymentMode: PaymentMode;\n\n  subPaymentResult: Subscription;\n  onlyDaysCorso: Settimana[] = []; //Contiene i soli giorni di corso\n\n\n  //Controllo Posti Disponibili\n  flagPostiDisponibili = false;\n  txtPostiDisponibili = '';\n\n  constructor(private startService: StartService,\n              private navParams: NavParams,\n              private modalCtrl: ModalController,\n              private docStructureService : DocstructureService,\n              private loadingController : LoadingController,\n              private toastCtrl : ToastController,\n              private alertCtrl: AlertController,\n              private navCtrl: NavController) {\n\n              //Ascolto cambiamenti dell'Area per l'abilitazione delle iscrizioni\n              this.onListenSelectedArea();\n\n              //Ascolto cambiamento dell'utente\n              this.onListenSelectedUser();\n\n\n\n  }\n\n/**\n * In ascolto dell'area selezionata, per capire se solo abilitate le iscrizioni\n */\n onListenSelectedArea() {\n  this.listenSelectedArea = this.startService.areaSelected\n   .subscribe(elArea => {\n\n    //Imposto l'area di riferimento\n     this.selectedArea = elArea;\n\n    //Impostazione tipologie pagamento\n    this.setListPayment();\n\n     //Controllo se nell'area sono abilitate le iscrizioni\n     if (this.selectedArea.APPISCRIZIONI == true) {\n       this.enableIscrizioni = true;\n\n     }\n     else {\n       this.enableIscrizioni = false;\n     }\n }, error => {\n   this.enableIscrizioni = false;\n })\n}  \n\n/**\n * Ascolto il cambiamento dell'utente\n */\nonListenSelectedUser() {\n  //Controllo se l'utente è loggato\n  this.subUserLogged = this.startService.utenteLogged\n                            .subscribe(element => {\n                                    this.userLogged = element;\n                            });\n\n  //Sottoscrivo al documento Utente\n  this.subUser = this.startService.utente.subscribe(elUser => {\n      this.docUser = elUser;\n  })                            \n}\n\nngOnInit() {\n\n  //this.isDesktop = this.startService.isDesktop;\n  //Sembra che l'istruzione sopra non funzioni correttamente\n  this.isDesktop = false;\n\n  //Recupero i parametri di chiamata\n  this.myCorso = this.navParams.get('params');\n  \n  if (this.myCorso==null||this.myCorso==undefined){\n\n      //se non ho i parametri, esco\n      this.showToastMessage(\"Corso non trovato\");\n\n      //Chiudo la modale\n      this.closeModal();\n  }\n  else {\n    //Recupero le giornate di corso\n    this.onlyDaysCorso = this.myCorso.getArrayGiorniCorso();\n\n    //Richiedo i Posti Disponibili per l'iscrizione\n    this.requestPostiDisponibili(this.myCorso.ID);\n\n    //Richiedo la Location\n\n    //Imposto il loading\n    this.loadingController.create({\n      spinner: \"circular\",\n      message: 'Caricamento',\n      backdropDismiss: true\n    })\n    .then(elLoading => {\n\n      //Mostro il loading\n      elLoading.present();\n\n      //ora richiedo la location\n      this.requestLocationById(this.myCorso.IDLOCATION)\n          .then(() => {\n            //Posso rimanere nella pagina\n            elLoading.dismiss();\n          })\n          .catch(error => {\n\n            elLoading.dismiss();\n\n            this.showToastMessage('Spiacenti, errori nel recupero del corso');\n\n            this.closeModal();                         \n          })      \n\n    })\n  }\n            \n} \n\n/**\n * Contatta il server per sapere se ci sono posti per l'iscrizione\n * Valorizza due proprieta\n * posti Disponibili: Boolean\n * txtPostiDisponibili: Messaggio da visualizzare\n * \n * @param idCorso idCorso richiesto\n */\nrequestPostiDisponibili(idCorso: string) {\n  \n\n  this.startService.getPostiDisponibiliCorso(idCorso)\n      .then((elResponse:PostResponse) => {\n        if (elResponse.result) {\n          this.flagPostiDisponibili = true;\n        }\n        else {\n          this.flagPostiDisponibili = false;\n        }\n\n        this.txtPostiDisponibili = elResponse.message;\n\n      })\n}\n\nngOnDestroy() {\n  if (this.subMyCorso) {\n    this.subMyCorso.unsubscribe();\n  }\n\n  if (this.subUserLogged) {\n    this.subUserLogged.unsubscribe();\n  }\n\n  if (this.listenSelectedArea) {\n    this.listenSelectedArea.unsubscribe();\n  }\n}\n\n\n\n/**\n * Richiedo la location\n * @param idLocation idLocation \n */\nrequestLocationById(idLocation: string): Promise<void>{\n\n  //preparo il filtro\n  let filterLocation: Location = new Location(true);\n  \n  return new Promise<void>((resolve, reject) => {\n    filterLocation.ID = idLocation;\n\n    //faccio la richiesta\n    this.docStructureService.requestNew(filterLocation)\n        .then(elLocation => {\n      \n          if (elLocation && elLocation.length !=0){\n  \n            //Imposto la location\n            this.myLocation = elLocation[0];\n            resolve();\n\n          }\n          else{\n            reject('Location not found');\n          }\n        }).catch(error => {\n            reject('Connection error' + error);\n      \n        })\n    \n    })\n}\n\n  /**\n   * Chiama il servizio passandogli l'id dell'oggetto corso, \n   * e restituisce la stringa dell'icona\n   * @param corso l'oggetto corso per cui si richiede l'icona\n   */\n   getIcon(corso:Corso)\n   {\n     return this.startService.getSportIcon(corso.IDSPORT);\n   }\n\n  /**\n * Recupera il link per le condizioni di vendita Corso e apre il browser\n */\n  onClickCondizioniVendita(): void {\n    let link: AreaLink;\n\n\n    if (this.selectedArea) {\n\n      link = this.selectedArea.findAreaLinkByPageType(PageType.condizioniVenditaIscrizioni);\n  \n      if (link && link.REFERURL) {\n\n        //Apro il link\n        this.openLink(link.REFERURL);\n\n      }\n    }\n\n    \n  }\n\n\n  /**\n   * Click sul bottone di Header\n   */\n  onClickButtonHeader() {\n    if (!this.flagPostiDisponibili) {\n      //Se non ci sono posti, uso il pulsante per chiudere\n      this.closeModal();\n    }\n  }\n\n\n  /**\n   * Ritorna TRUE se il pulsante \n   * Conferma Iscrizione è utilizzabile\n   */\n  enableButtonIscrizione(): boolean {\n    let flagEnable: boolean;\n    if (this.disclaimer && this.flagPostiDisponibili) {\n\n      //Corso a pagamento (Deve scegliere il pagamento)\n      if (this.myCorso.isAPagamento()) {\n\n        if (this.mySelectedPayment) {\n          flagEnable = true;\n        }\n\n      }\n      else {\n        //Non deve pagare niente\n        flagEnable = true;\n      }\n    }\n\n\n    return flagEnable;\n  }\n\n\n   //#region METODI GESTIONE PAGAMENTO\n  /**\n   * Recupera i metodi di pagamento sulla base dell'Area e popola \n   * l'array myListPayment e l'elemento mySelectedPayament\n   */  \n   setListPayment() {\n\n    //Svuota l'array\n    this.myListPayment = [];\n\n\n    //Ho il documento dell'Area\n    if (this.selectedArea) {\n      \n      this.myListPayment = this.selectedArea.getPaymentFor(SettorePagamentiAttivita.settorePagamentoCorso);\n\n      if (this.myListPayment && this.myListPayment.length != 0) {\n\n        this.mySelectedPayment = this.myListPayment[0];\n        console.log(this.myListPayment);\n      }\n      else {\n\n        this.mySelectedPayment = null;\n\n      }\n\n      \n    }\n\n  }   \n\n  /**\n   * Ricezione pagamento da utilizzare\n   * @param value Valore Pagamento\n   */\n   onPaymentSelected(value) {\n    this.mySelectedPayment = value;\n  }\n  \n  /**\n   * Cambiato il modo di pagamento\n   * @param valPaymentMode Modo di pagamento\n   */\n   onPaymentModeSelected(valPaymentMode: PaymentMode) {\n    this.myPaymentMode = valPaymentMode;\n    console.log(this.myPaymentMode);\n  }  \n\n\n  /**\n   * Pressione del pulsante in interfaccia di conferma \n   */\n   onConfirm()\n   {\n     //Vado al pagamento\n      this.onExecPayment();\n   }  \n\n  /**\n   * Richiesta di esecuzione del pagamento di qualsiasi tipologia\n   * 1) Se onSite conclude subito dicendo che va bene\n   * 2) Per altre tipologie viene aperta la pagina del pagamento\n   *\n   */\n   onExecPayment() {\n\n    let arModes:PaymentMode[]=[PaymentMode.pagaAdesso, PaymentMode.pagaBonifico, PaymentMode.pagaStruttura];\n\n    //Presente un totale da pagare\n    if (this.myCorso.isAPagamento()) {\n\n      //L'utente ha selezionato come pagare\n      if (arModes.includes(this.myPaymentMode)) {\n  \n        //Pagamento non dentro all'App\n        if (this.myPaymentMode == PaymentMode.pagaBonifico || this.myPaymentMode == PaymentMode.pagaStruttura) {\n  \n          //Creo il risultato del pagamento, passando la modalità\n          let docPaymentResult = new PaymentProcess(this.myPaymentMode);\n          // Essendo una modalita che non prevede interazioni app\n          // viene impostato automaticamento il channelPayment \n          // e il processResult = TRUE\n          \n          //Passo subito al Success\n          this.onPaymentSuccess(docPaymentResult);\n  \n        }\n        else {\n          \n          //Qui invece bisogna gestire il pagamento\n  \n          //Preparo un oggetto per processare il pagamento\n          let myCheckoutPayment = new PaymentProcess(this.myPaymentMode);\n          \n          myCheckoutPayment.amount = this.myCorso.PREZZOLORDO;\n          myCheckoutPayment.description = 'Pagamento Iscrizione Corso ' + this.myCorso.DENOMINAZIONE;\n          myCheckoutPayment.currency = 'EUR';\n  \n          //il channelPayment viene impostato nel componente\n          //esterno che si preoccupa del pagamento\n          //Passo alla modale in paymentData = myCheckoutPayment\n          this.modalCtrl.create({\n            component: PaymentPage,\n            componentProps: {\n              paymentData: myCheckoutPayment,\n              listAreaPaymentSettings: this.myListPayment\n            }\n          })\n          .then(elModal => {\n            elModal.present();\n  \n            return elModal.onDidDismiss()\n          })\n          .then((returnData) => {\n  \n            //recupero il risultato del pagamento\n            let myPaymentResult: PaymentProcess = returnData['data'];\n\n            if (myPaymentResult) {\n\n              //Il Risultato del processo di pagamento è TRUE, posso proseguire\n              if (myPaymentResult.processResult) {\n                \n                //Pagamento avvenuto correttamente\n                this.onPaymentSuccess(myPaymentResult); \n  \n              }\n              else {\n  \n                //Pagamento Fallito\n                this.onPaymentFailed(myPaymentResult);\n  \n              }\n            }\n            else {\n              \n              //Stranamente non mi ha tornato nulla, quindi il pagamento è fallito\n              myPaymentResult = new PaymentProcess(this.myPaymentMode);\n              myPaymentResult.processResult = false;\n              myPaymentResult.messageResult = 'Pagamento fallito';\n\n              //Pagamento Fallito\n              this.onPaymentFailed(myPaymentResult);\n\n            }\n          })\n  \n  \n        }\n  \n      }\n      else {\n        //Pagamento non selezionato\n        this.showToastMessage('E\\' necessario selezionare un pagamento');\n      }\n      \n    }\n    else {\n      //E' un corso gratuito ?\n\n      //Creo il risultato del pagamento, passando la modalità\n      let docPaymentResult = new PaymentProcess(PaymentMode.pagaStruttura);\n      // Essendo una modalita che non prevede interazioni app\n      // viene impostato automaticamento il channelPayment \n      // e il processResult = TRUE\n      \n      //Passo subito al Success\n      this.onPaymentSuccess(docPaymentResult);\n    }\n\n\n  } \n  \n  /**\n   * Pagamento andato a buon fine\n   * @param resultPayment Risultato del pagamento\n   */\n   onPaymentSuccess(resultPayment?: PaymentProcess) {\n    \n\n    let myDocIscrizione: IscrizioneCorso;\n    let myDocRata: IscrizioneIncasso;\n\n    //Preparo i dati dell'iscrizione\n    myDocIscrizione = this.prepareDocIscrizione();\n\n    //Preparo i dati della Rata di Pagamento\n    myDocRata = new IscrizioneIncasso();\n    \n    //Step del pagamento Effettuato (Potrebbe avere effettivamente pagato, oppure non pagato e rimandato in struttura)\n    if (resultPayment && resultPayment.processResult)  {\n\n      //Se non è avvenuta nessuna transazione Elettronica \n      //vuol dire che ha scelto di pagare successivamente\n      if (resultPayment.idElectronicResult.length == 0) {\n\n        //Se il corso è a pagamento, dovrà effettivamente pagare\n        if (this.myCorso.isAPagamento()) {\n\n          //E' a pagamento, in qualche modo dovrà pagare\n          //Creo una scadenza\n          myDocRata.IDTRANSACTION = '';\n          myDocRata.IDORDER = '';\n          myDocRata.MODALITA = resultPayment.channelPayment;\n          myDocRata.TIPORIGO = TipoRigoIncasso.scadenza;\n          //Data operazione non viene valorizzata ma solo DataScadenza\n          myDocRata.DATASCADENZA = this.myCorso.DATAINIZIO;\n          myDocRata.IMPORTO = this.myCorso.PREZZOLORDO;\n\n        }\n        else {\n\n          //E' un corso gratuito, non c'e' nulla da pagare\n          myDocRata.IDTRANSACTION = '';\n          myDocRata.IDORDER = '';\n          myDocRata.MODALITA = PaymentChannel.onSite;\n          myDocRata.TIPORIGO = TipoRigoIncasso.incassato;\n          myDocRata.DATAOPERAZIONE = myDocIscrizione.DATAISCRIZIONE;\n          //Non c'e' nessuna scadenza\n          myDocRata.IMPORTO = 0;\n        }\n      }\n      else {\n\n        //Transazione avvenuta\n        myDocRata.IDTRANSACTION = '';\n        myDocRata.IDORDER = resultPayment.idElectronicResult;\n        myDocRata.MODALITA = resultPayment.channelPayment;\n        myDocRata.TIPORIGO = TipoRigoIncasso.incassato;\n        myDocRata.DATAOPERAZIONE = myDocIscrizione.DATAISCRIZIONE;\n        //Non c'e' nessuna scadenza      \n        myDocRata.IMPORTO = this.myCorso.PREZZOLORDO;\n\n      }\n\n      //Aggiungo le informaioni del pagamento\n      myDocIscrizione.ISCRIZIONEINCASSO.push(myDocRata);\n\n      console.log(myDocRata);\n\n      //Contatto il server per salvare il tutto\n      this.loadingController.create({\n            message: 'Richiesta Iscrizione',\n            spinner: 'circular'\n          })\n          .then(elLoading => {\n\n            //Creo il loading\n            elLoading.present();\n\n            //Procedo con il salvataggio Iscrizione\n            this.startService.requestSaveIscrizione(myDocIscrizione)\n                            .then((response: PostResponse) => {\n\n                              elLoading.dismiss();\n\n                              //Iscrizione salvata correttamente\n                              if (response.result && response.code && response.code.length != 0) {\n                                //Mi dirigo alla scheda dell'Iscrizione Corso e concludo la modale\n                                this.onAfterSaveIscrizione(response.code);\n                              }\n                              else {\n                                //Si sono verificati problemi\n                                this.showAlert(response.message,'Iscrizione Fallita');\n                              }\n                            })\n                            .catch(error => {\n                              elLoading.dismiss();\n\n                              //Si sono verificati problemi\n                              this.showAlert(error.message,'Iscrizione Fallita');\n                            })\n               \n          });\n\n\n    }\n\n\n    \n    \n\n  }\n\n  /**\n   * Iscrizione salvata nel sistema posso andare via\n   */\n   onAfterSaveIscrizione(idIscrizione: string)\n   {\n     this.showToastMessage('Iscrizione confermata');\n\n     //1) Chiudere la modale\n     this.closeModal();\n\n     //2) Andare alla History sulla scheda\n     this.navCtrl.navigateRoot(['historylist/course', idIscrizione]);\n \n   }  \n\n  /**\n   * Si sono verificati errori nel pagamento\n   * @param resultPayment Risultato Pagamento Fallito\n   */\n  onPaymentFailed(resultPayment?: PaymentProcess) {\n    let message = 'Si sono verificati errori nel pagamento';\n    let title = 'Pagamento Fallito';\n\n    if (resultPayment) {\n      if (resultPayment.messageResult) {\n        message = resultPayment.messageResult;\n      }\n    }\n\n    //Visualizzo il messaggio\n    this.showAlert(message, title);\n    \n  }  \n   //#endregion\n\n\n  //#region PREPARAZIONE DOCUMENTO ISCRIZIONE\n  prepareDocIscrizione(): IscrizioneCorso {\n    let myDoc = new IscrizioneCorso();\n\n    \n\n    if (this.myCorso && this.docUser) {\n\n      myDoc.IDCORSO = this.myCorso.ID;\n      myDoc.IDUTENTE = this.docUser.ID;\n      myDoc.DATAISCRIZIONE = new Date();\n      \n    }\n\n    return myDoc;\n  }\n   //#endregion\n/**\n * Mostra un messaggio a video\n * @param messaggio Messaggio\n */\n  showToastMessage(messaggio:string){\n\n      this.toastCtrl.create({\n        message: messaggio,\n        duration: 3000\n      });\n\n  }\n\n  /**\n   * Visualizza un alert con un pulsante Ok se !buttons, oppure con i bottoni dell'array\n   * @param messaggio Messaggio\n   * @param titolo Titolo\n   */\n   showAlert(messaggio:string, titolo?:string, bottoni?:string[]) {\n\n    if (!bottoni || bottoni.length == 0) {\n      bottoni = [];\n      bottoni.push('Ok');\n    }\n\n    //Mostro l'alert richiesto\n    this.alertCtrl.create({      \n      header: (titolo?titolo:'Attenzione'),      \n      message: messaggio,\n      buttons: bottoni\n    })\n    .then(elAlert => {\n      elAlert.present();\n    })\n  }  \n\n/**\n* Chiusura della videata\n*/  \ncloseModal(){\n  this.modalCtrl.dismiss();\n}\n\n/**\n * Apre una videata con la pagina richiesta\n * @param url Url da visualizzare\n */\nopenLink(url:string)\n{\n  Browser.open({url:url})\n}\n\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"primary\">\n      <ion-button (click)=\"closeModal()\">\n        <ion-icon slot=\"icon-only\" ios=\"close\" md=\"close\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n\n    <ion-title>Iscrizione</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <div style=\"background-color:#EFF1F8\">\n    <ion-grid class=\"griglia-principale\">\n\n      <!-- CONTROLLO PER POSTI DISPONIBILI -->\n      <ion-row>\n        <ion-col>\n          <ion-button \n              [color]=\"flagPostiDisponibili ? 'success':'danger'\" \n              expand=\"block\" \n              class=\"full-buttons\"\n            (click)=\"onClickButtonHeader()\">\n            <ion-icon \n                slot=\"end\" \n                [name]=\"flagPostiDisponibili ? 'thumbs-up-outline':'ban-outline'\">\n            </ion-icon>\n\n\n            <h6 class=\"ion-text-wrap\">{{txtPostiDisponibili}}</h6>\n          </ion-button>\n\n        </ion-col>\n      </ion-row>\n\n      <!-- CARD INFORMAZIONI CORSO -->\n      <ion-row>\n        <ion-col>\n\n          <ion-card>\n\n            <ion-card-header>\n              <ion-card-subtitle>Iscrizione al corso</ion-card-subtitle>\n              <ion-card-title>{{ myCorso.DENOMINAZIONE }}</ion-card-title>\n\n              <ion-item button=\"false\" lines=\"none\" class=\"ion-no-padding\">\n                <i class=\"icon-sport\" slot=\"start\">\n                  <span [innerHTML]=\"getIcon(myCorso)\"></span>\n                </i>\n\n                <ion-label>\n                  <h6 class=\"ion-text-wrap\">\n                    {{ myCorso['_DENOMINAZIONE_Sport'] }}\n                  </h6>\n                </ion-label>\n              </ion-item>\n\n            </ion-card-header>\n\n\n\n            <ion-card-content class=\"ion-no-padding\">\n\n              <ion-item lines=\"none\">\n                <ion-label class=\"ion-text-wrap\">\n\n                  <ion-text>Il corso inizia&nbsp;</ion-text>\n                  <ion-text style=\"font-weight: bold;\">{{myCorso.DATAINIZIO | date: 'EEEE' | titlecase }}&nbsp;\n                  </ion-text>\n                  <ion-text style=\"font-weight: bold;\">{{myCorso.DATAINIZIO | date: 'dd/MM/yyyy' }}</ion-text>\n                  <ion-text>&nbsp;alle ore&nbsp;</ion-text>\n                  <ion-text style=\"font-weight: bold;\">{{myCorso.ORAINIZIO | date:'HH:mm'}}</ion-text>\n                  <ion-text>&nbsp;e si conclude&nbsp;</ion-text>\n                  <ion-text style=\"font-weight: bold;\">{{myCorso.DATAFINE | date: 'EEEE' | titlecase }}&nbsp;</ion-text>\n                  <ion-text style=\"font-weight: bold;\">{{myCorso.DATAFINE | date: 'dd/MM/yyyy' }}</ion-text>\n                  <ion-text *ngIf=\"myCorso.NUMEROLEZIONI\">\n                    &nbsp;per un totale di&nbsp;{{myCorso.NUMEROLEZIONI}}&nbsp;{{myCorso.NUMEROLEZIONI > 1 ?'Incontri\n                    ':'Incontro '}} della durata di&nbsp;{{myCorso.ORELEZIONE}} {{myCorso.ORELEZIONE > 1 ?'Ore':'Ora'}}\n                  </ion-text>\n\n                </ion-label>\n              </ion-item>\n\n              <ion-item lines=\"none\" *ngIf=\"onlyDaysCorso?.length == 1\">\n                <ion-label class=\"ion-text-wrap\">\n                  <ion-text>Il corso è pianificato 1 volta a settimana al &nbsp;</ion-text>\n                  <ion-text color=\"danger\">{{onlyDaysCorso[0].label |titlecase}}</ion-text>\n                </ion-label>\n\n              </ion-item>\n\n              <ion-item lines=\"none\" *ngIf=\"onlyDaysCorso?.length > 1\">\n                <ion-label class=\"ion-text-wrap\">\n                  <ion-text>Il corso è pianificato {{onlyDaysCorso?.length}} volte a settimana</ion-text>\n                  <p *ngFor=\"let giorno of onlyDaysCorso\">\n                    <ion-text color=\"danger\">{{giorno.label |titlecase}}</ion-text>\n                  </p>\n                </ion-label>\n\n              </ion-item>\n\n              <ion-item lines=\"none\">\n                <ion-label class=\"ion-text-wrap\">\n                  <ion-text>\n                    Si consiglia di controllare il calendario dettagliato per conoscere i giorni e gli orari precisi del\n                    corso.\n                  </ion-text>\n                </ion-label>\n              </ion-item>\n\n\n\n\n\n            </ion-card-content>\n          </ion-card>\n        </ion-col>\n      </ion-row>\n\n\n      <!-- CARD A CHI E' RIVOLTO IL CORSO -->\n      <ion-row>\n        <ion-col>\n          <ion-card>\n            <ion-card-header>\n              <ion-card-subtitle>Rivolto a</ion-card-subtitle>\n            </ion-card-header>\n            <ion-card-content>\n\n              <ion-item>\n                <ion-icon name=\"stats-chart-outline\" slot=\"start\" [color]=\"iconColor\"></ion-icon>\n                <ion-label>{{myCorso['_DENOMINAZIONE_Livello']?myCorso['_DENOMINAZIONE_Livello']:'Tutti i Livelli'}}\n                </ion-label>\n              </ion-item>\n\n              <ion-item lines=\"none\">\n                <ion-icon name=\"bookmark-outline\" slot=\"start\" [color]=\"iconColor\"></ion-icon>\n                <ion-label>{{myCorso['_DESCTOOLTIP_CategoriaEta']?myCorso['_DESCTOOLTIP_CategoriaEta']:'Per tutte le\n                  età'}}</ion-label>\n              </ion-item>\n\n              <ion-item lines=\"none\" *ngIf=\"myCorso.TARGETSESSO\">\n                <ion-icon name=\"transgender-outline\" slot=\"start\" [color]=\"iconColor\"></ion-icon>\n                <ion-label>{{myCorso.TARGETSESSO | targetSesso}}</ion-label>\n              </ion-item>\n            </ion-card-content>\n          </ion-card>\n\n          <!-- CARD LOCATION -->\n          <ion-card *ngIf=\"myLocation?.COMUNE || myLocation?.INDIRIZZO || myLocation?.TELEFONO\">\n            <ion-card-header>\n              <ion-card-subtitle>Dove</ion-card-subtitle>\n            </ion-card-header>\n            <ion-card-content>\n              <!-- COMUNE -->\n              <ion-item *ngIf=\"myLocation?.COMUNE\">\n                <ion-icon name=\"home-outline\" slot=\"start\" [color]=\"iconColor\"></ion-icon>\n                <ion-label>{{myLocation?.COMUNE}}</ion-label>\n              </ion-item>\n\n              <!-- INDIRIZZO -->\n              <ion-item *ngIf=\"myLocation?.INDIRIZZO\">\n                <ion-icon name=\"navigate-outline\" slot=\"start\" [color]=\"iconColor\">\n                </ion-icon>\n\n                <ion-label>\n                  {{myLocation?.INDIRIZZO}}\n                </ion-label>\n\n              </ion-item>\n\n              <ion-item *ngIf=\"myLocation?.TELEFONO\">\n                <ion-icon name=\"call-outline\" slot=\"start\" [color]=\"iconColor\"></ion-icon>\n                <ion-label>{{myLocation?.TELEFONO}}</ion-label>\n              </ion-item>\n            </ion-card-content>\n          </ion-card>\n        </ion-col>\n      </ion-row>\n\n\n    </ion-grid>\n\n\n\n  </div>\n\n</ion-content>\n\n<ion-footer>\n\n  <ion-grid>\n    <!-- ISCRIZIONE ABILITATA -->\n    <ion-list *ngIf=\"flagPostiDisponibili\">\n      <ion-item button (click)=\"disclaimer=!disclaimer; \" lines=\"full\">\n        <ion-checkbox [(ngModel)]=\"disclaimer\" slot=\"start\" (click)=\"$event.stopPropagation();\">\n        </ion-checkbox>\n        <ion-label class=\"ion-text-wrap\">\n          <p>Lette e approvate le\n            <a (click)=\"$event.stopPropagation(); onClickCondizioniVendita();\">condizioni di vendita</a>\n          </p>\n        </ion-label>\n      </ion-item>\n\n      <!-- Componente scelta Pagamento -->\n      <app-payment-mode \n          *ngIf=\"myCorso?.isAPagamento()\" \n          [arPayment]=\"myListPayment\"\n          (onPaymentModeChoosed)=\"onPaymentModeSelected($event)\">\n      </app-payment-mode>\n\n      <!-- Se non a pagamento mostro Iscrizione Gratuita -->\n      <ion-item class=\"ion-text-center\" *ngIf=\"!myCorso?.isAPagamento()\">\n        <ion-chip class=\"wide\" color=\"danger\">Iscrizione Gratuita</ion-chip>\n      </ion-item>\n\n      <ion-item lines=\"none\" id=\"item-totale\">\n        <ion-label slot=\"start\">Totale</ion-label>\n        <ion-label style=\"text-align:right;\">\n\n          {{myCorso?.PREZZOLORDO | currency: \"EUR\"}}\n\n        </ion-label>\n      </ion-item>\n\n    </ion-list>\n\n    <!-- POSTI NON DISPONIBILI: Mostro solo il prezzo-->\n    <ion-list *ngIf=\"!flagPostiDisponibili\">\n\n      <ion-item lines=\"none\" id=\"item-totale\">\n        <ion-label slot=\"start\">Prezzo</ion-label>\n        <ion-label style=\"text-align:right;\">\n\n          {{myCorso?.PREZZOLORDO | currency: \"EUR\"}}\n\n        </ion-label>\n      </ion-item>\n\n      <ion-item lines=\"none\">\n        <ion-label class=\"ion-text-wrap ion-text-center\">\n          <ion-text class=\"ion-text-center\">Contatta la struttura per maggiori informazioni</ion-text>\n        </ion-label>\n      </ion-item>\n\n    </ion-list>\n\n    <ion-row *ngIf=\"flagPostiDisponibili\">\n      <ion-col>\n        <ion-button \n            color=\"tertiary\" \n            expand=\"block\" \n            class=\"full-buttons\" \n            [disabled]=\"!enableButtonIscrizione()\"\n          (click)=\"onConfirm()\">\n          Conferma Iscrizione\n        </ion-button>\n      </ion-col>\n    </ion-row>\n\n\n\n\n\n  </ion-grid>\n</ion-footer>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BookcoursePage } from './bookcourse.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BookcoursePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BookcoursePageRoutingModule {}\n"]}