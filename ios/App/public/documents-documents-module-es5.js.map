{"version":3,"sources":["webpack:///src/app/pages/account/documents/documents-routing.module.ts","webpack:///src/app/pages/account/documents/documents.module.ts","webpack:///src/app/services/file.service.ts","webpack:///src/app/pages/account/documents/documents.page.ts","webpack:///src/app/pages/account/documents/documents.page.html"],"names":["routes","path","component","DocumentsPageRoutingModule","forChild","DocumentsPageModule","FileService","file","fileOpener","platform","blob","name","url","window","URL","createObjectURL","link","document","createElement","download","href","body","appendChild","click","removeChild","fileName","filePath","cacheDirectory","console","log","writeFile","replace","then","fileEntry","open","toURL","type","err","error","is","openMobile","openDesktop","Error","DocumentsPage","startService","chooser","toastController","modalController","docStructureService","loadingController","fileService","listDocumenti","inRichiesta","listaTipiDocumento","requestTipiDocumento","requestListaDocumenti","event","reqParams","decode","active","addForeignField","actualUtente","create","message","spinner","backdropDismiss","elLoading","present","loadCollection","objUtente","dismiss","target","complete","showMessage","filter","ZORDER","addFilterCondition","maggiore","requestNew","componentProps","isDesktop","elModal","onWillDismiss","data","docUploadDocumentazione","requestUploadToServer","fakeUtente","TOKENUTENTE","ID","paramExport","clearDOProperty","clearPKProperty","clearPrivateProperty","onlyPropertyModified","onlyDocModified","myJson","exportToJSON","requestForFunction","rawResponse","myResponse","response","result","length","elemento","FILENAMEESTENSIONE","requestDocumento","messaggio","duration","elToast"],"mappings":"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","file":"documents-documents-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DocumentsPage } from './documents.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DocumentsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class DocumentsPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { Chooser } from '@ionic-native/chooser/ngx';\r\n\r\nimport { UploadComponent } from 'src/app/shared/components/upload/upload.component';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\n\r\n\r\n\r\nimport { DocumentsPageRoutingModule } from './documents-routing.module';\r\n\r\nimport { DocumentsPage } from './documents.page';\r\n\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    DocumentsPageRoutingModule,\r\n    \r\n    SharedComponentsModule\r\n  ],\r\n  declarations: [DocumentsPage],\r\n  providers: [Chooser],\r\n  entryComponents: [UploadComponent]\r\n})\r\nexport class DocumentsPageModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileOpener } from '@ionic-native/file-opener/ngx';\r\nimport { File } from '@ionic-native/file/ngx';\r\nimport { Platform } from '@ionic/angular';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FileService {\r\n\r\n  constructor(\r\n    private file: File,\r\n    private fileOpener: FileOpener,\r\n    private platform: Platform\r\n  ) { }\r\n\r\n  openDesktop(blob: Blob){\r\n\r\n\r\n    //per scaricare il file creo via javascript un link fittizio agganciando il percorso del blob, e ne scateno l'evento click\r\n    let name='File'\r\n    let url  = window.URL.createObjectURL(blob);\r\n    let link = document.createElement(\"a\");\r\n    link.download = name;\r\n    link.href = url;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n\r\n\r\n  }\r\n\r\n  openMobile(blob: Blob){\r\n    let fileName='Documento';         \r\n    let filePath= this.file.cacheDirectory;      \r\n    console.log('percorso: '+filePath);  \r\n\r\n        this.file.writeFile(filePath, fileName, blob, { replace:true }).then((fileEntry) => {\r\n\r\n          console.log(\"File created!\");          \r\n          this.fileOpener.open(fileEntry.toURL(), blob.type)\r\n            .then(() => console.log('File is opened'))\r\n            .catch(err => console.error('Error openening file: ' + err));\r\n        })\r\n          .catch((err) => {\r\n            console.error(\"Error creating file: \");\r\n            console.log(err);\r\n            throw err;  \r\n          });\r\n  }\r\n\r\n\r\n  /**\r\n   * scarica e visualizza un blob da mobile o desktop\r\n   */\r\n  open(blob: Blob){\r\n    if (blob){\r\n\r\n      if(this.platform.is(\"hybrid\")){\r\n        this.openMobile(blob);\r\n      }\r\n      else{\r\n        this.openDesktop(blob);\r\n      }\r\n    }\r\n    else{\r\n      console.log('Blob inesistente');\r\n      throw new Error();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { StartService } from 'src/app/services/start.service';\r\nimport { Chooser } from '@ionic-native/chooser/ngx';\r\nimport { ToastController, ModalController, LoadingController, Platform } from '@ionic/angular';\r\nimport { UploadComponent } from 'src/app/shared/components/upload/upload.component';\r\nimport { TipoDocumentazione, ClasseDocumento } from 'src/app/models/tipodocumentazione.model';\r\nimport {  RequestParams } from 'src/app/library/models/requestParams.model';\r\nimport { OperatorCondition, ParamsExport } from 'src/app/library/models/iddocument.model';\r\nimport { DocstructureService } from 'src/app/library/services/docstructure.service';\r\nimport { Utente } from 'src/app/models/utente.model';\r\nimport { Documentazione, InvioDocumentazione } from 'src/app/models/documentazione.model';\r\nimport { PostResponse } from 'src/app/library/models/postResult.model';\r\nimport { File } from '@ionic-native/file/ngx';\r\nimport { FileOpener } from '@ionic-native/file-opener/ngx';\r\nimport { FileService } from 'src/app/services/file.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-documents',\r\n  templateUrl: './documents.page.html',\r\n  styleUrls: ['./documents.page.scss'],\r\n})\r\nexport class DocumentsPage implements OnInit {\r\n\r\n  /* DA IMPLEMENTARE L'OGGETTO, LA SUBSCRIPTION ETC */\r\n  listDocumenti : Documentazione[]= [];\r\n  inRichiesta = true;\r\n\r\n  listaTipiDocumento : TipoDocumentazione[] = [];\r\n\r\n  constructor(private startService: StartService,\r\n              private chooser: Chooser,\r\n              private toastController: ToastController,\r\n              private modalController: ModalController,\r\n              private docStructureService: DocstructureService,\r\n              private loadingController: LoadingController,\r\n              private platform: Platform,\r\n              private file: File,\r\n              private fileOpener: FileOpener,\r\n              private fileService: FileService\r\n              ) { }\r\n\r\n  ngOnInit() {\r\n    this.inRichiesta = false;\r\n    this.requestTipiDocumento();\r\n    this.requestListaDocumenti();\r\n  }\r\n\r\n  /**\r\n   * Richiedo la lista dei documenti relativa all'utente\r\n   * @param event usato per chiudere il refresher (se la funzione è stata chiamata da esso)\r\n   */\r\n  requestListaDocumenti(event?: any) {\r\n\r\n    let reqParams = new RequestParams();\r\n    reqParams.decode.active = true;\r\n    reqParams.decode.addForeignField('IDTIPODOCUMENTAZIONE');\r\n\r\n    if (this.startService.actualUtente) {\r\n\r\n      this.loadingController.create({\r\n        message: 'Caricamento',\r\n        spinner: 'circular',\r\n        backdropDismiss: true\r\n      })\r\n      .then(elLoading => {\r\n        if (!event){\r\n          //se la funzione non è stata chiamata dal refresher, mostro il loading\r\n          elLoading.present();\r\n        }\r\n\r\n        //Chiedo all'utente di caricare la collection dei documenti\r\n        this.docStructureService.loadCollection(this.startService.actualUtente, 'DOCUMENTAZIONI', reqParams)\r\n        .then(objUtente => {\r\n\r\n          if (!event){\r\n            //se la funzione non è stata chiamata dal refresher, chiudo il loadingcontroller\r\n            elLoading.dismiss();\r\n          }\r\n          else{\r\n            //se la funzione è stata chiamata dal refresher, lo chiudo\r\n            event.target.complete();\r\n          }\r\n\r\n          //Recupero la lista dei documenti\r\n          this.listDocumenti = objUtente['DOCUMENTAZIONI'];\r\n          // console.log(this.listDocumenti);\r\n        })\r\n        .catch(error => {\r\n\r\n          if (!event){\r\n            //se la funzione non è stata chiamata dal refresher, chiudo il loadingcontroller\r\n            elLoading.dismiss();\r\n          }\r\n          else{\r\n            //se la funzione è stata chiamata dal refresher, lo chiudo\r\n            event.target.complete();\r\n          }\r\n\r\n          console.log(error);\r\n          this.showMessage('Errore di connessione')\r\n          //Azzero la lista documenti\r\n          this.listDocumenti = [];\r\n        });\r\n      })\r\n    }\r\n    else {\r\n      this.listDocumenti = [];\r\n    }\r\n        \r\n  }\r\n\r\n  /**\r\n   * Richiedo al server quali tipi documenti \r\n   * sono previsti da caricare\r\n   */\r\n  requestTipiDocumento(){\r\n    //creo il documento di filtro\r\n    let filter = new TipoDocumentazione(true);\r\n    filter.ZORDER = 0;\r\n    filter.addFilterCondition(OperatorCondition.maggiore, 'ZORDER');\r\n\r\n    //Faccio la richiesta\r\n    this.docStructureService.requestNew(filter)\r\n    .then(listaTipiDocumento => {\r\n      this.listaTipiDocumento = listaTipiDocumento;\r\n    });\r\n\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Richiesta di aggiungere un nuovo documento\r\n   * Viene aperto in modale il componente, indicando se siamo su desktop o no, e la lista dei tipi documenti accettati\r\n   */\r\n  onAddDocument(){\r\n    \r\n    this.modalController.create({\r\n      component: UploadComponent,\r\n      componentProps: {\r\n        'isDesktop': this.startService.isDesktop,\r\n        'docTypeList': this.listaTipiDocumento\r\n      }\r\n    })\r\n    .then(elModal => {\r\n\r\n      //Mostro la videata per il caricamento\r\n      elModal.present();\r\n\r\n      //#region GESTIONE CHIUSURA MODALE\r\n      elModal.onWillDismiss()\r\n      .then(data => {\r\n              //Controlliamo se l'utente ha inserito dati\r\n            let docUploadDocumentazione : InvioDocumentazione = data['data'];\r\n            \r\n            //Passo il controllo per inviare i dati al server\r\n            this.requestUploadToServer(docUploadDocumentazione);\r\n      });\r\n\r\n      //#endregion\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Invia al server il documento passato nei parametri\r\n   * Se l'invio ha esito positivo, viene eseguito un refresh dati \r\n   */\r\n  requestUploadToServer(docUploadDocumentazione : InvioDocumentazione) {\r\n\r\n    //Informazioni da inviare al server presenti\r\n    if (docUploadDocumentazione){\r\n      \r\n      this.loadingController.create({\r\n        message: 'Caricamento',\r\n        spinner: 'circular',\r\n        backdropDismiss: true\r\n      })\r\n      .then(elLoading => {\r\n\r\n        elLoading.present();\r\n        \r\n        //creo un utente fittizio da passare alla post\r\n        let fakeUtente = new Utente();\r\n  \r\n        //Imposto il token utente\r\n        docUploadDocumentazione.TOKENUTENTE = this.startService.actualUtente.ID;\r\n  \r\n        //creo il body json\r\n        //Questi sono i parametri per l'esportazione\r\n        let paramExport = new ParamsExport();\r\n        paramExport.clearDOProperty = true;\r\n        paramExport.clearPKProperty = true;\r\n        paramExport.clearPrivateProperty = true;\r\n        paramExport.onlyPropertyModified = false;\r\n        paramExport.onlyDocModified = false;\r\n        \r\n        //Qui Creo il JSON\r\n        let myJson: string = docUploadDocumentazione.exportToJSON(paramExport);\r\n        \r\n        //ora che ho tutto, faccio la post\r\n        this.docStructureService.requestForFunction(fakeUtente, 'uploadDocumentazione', myJson)\r\n        .then(rawResponse => {\r\n          \r\n          elLoading.dismiss();\r\n\r\n          //Risposta ricevuta\r\n          let myResponse = new PostResponse();\r\n          myResponse = rawResponse.response;\r\n          \r\n          if (myResponse){\r\n            if (myResponse.result) {\r\n              //sappiamo che tutto è andato bene\r\n              this.showMessage('Caricamento completato');\r\n              \r\n              //Richiedo ancora la lista dei documenti\r\n              this.requestListaDocumenti();\r\n  \r\n            }\r\n            else{\r\n              //qualcosa è andato storto sul server\r\n              if (myResponse.message && myResponse.message.length !== 0) {\r\n                this.showMessage(myResponse.message);\r\n              }\r\n              else {\r\n                this.showMessage('Errore caricamento');\r\n              }\r\n            }\r\n          }\r\n          else{\r\n            //non ho la risposta, c'è stato un errore\r\n            this.showMessage('Errore di connessione');\r\n          }\r\n        })\r\n        .catch(error => {\r\n  \r\n          elLoading.dismiss();\r\n\r\n          //errore di comunicazione col server\r\n          console.log (error);\r\n          this.showMessage('Errore di connnessione');\r\n        });\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Eseguito un click per lo scaricamento\r\n   */\r\n  onClickElement(elemento: Documentazione){\r\n    //creo il loading e lo presento\r\n    if(elemento && elemento.FILENAMEESTENSIONE && elemento.FILENAMEESTENSIONE.length > 0){\r\n\r\n      this.loadingController.create({\r\n        message: 'Caricamento',\r\n        spinner: 'circular',\r\n        backdropDismiss: true\r\n      }).then(elLoading => {\r\n\r\n          elLoading.present();\r\n  \r\n        //ora faccio la get del file\r\n        this.startService.requestDocumento(elemento.FILENAMEESTENSIONE)\r\n        .then(blob => {\r\n          //E' andato tutto bene, ho il blob\r\n          elLoading.dismiss();\r\n          \r\n          if(blob){\r\n            //Effettuo l'apertura del file ricevuto\r\n            this.fileService.open(blob)\r\n          }\r\n          else{\r\n\r\n            this.showMessage('File non visualizzabile');\r\n          }\r\n        })\r\n        .catch(error => {\r\n\r\n          elLoading.dismiss();\r\n          //qualcosa non ha funzionato\r\n          console.log(error);\r\n          this.showMessage('Impossibile scaricare il file');\r\n        })\r\n  \r\n      })\r\n    }\r\n    else{\r\n      this.showMessage('Errore, file non presente in archivio');\r\n    }\r\n  }\r\n\r\n \r\n  /**\r\n   * Visualizza un messaggio\r\n   */\r\n  showMessage(messaggio: string){\r\n    this.toastController.create({\r\n      message: messaggio,\r\n      duration: 3000\r\n    })\r\n    .then(elToast => {\r\n      elToast.present();\r\n    })\r\n  }\r\n\r\n  \r\n}\r\n","<ion-header>\r\n  <ion-toolbar color=\"primary\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/account\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>I tuoi documenti</ion-title>\r\n    <ion-buttons slot=\"end\" *ngIf=\"listaTipiDocumento?.length != 0\">\r\n      <ion-button (click)=\"onAddDocument()\">\r\n        <ion-icon name=\"add\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n\r\n\r\n<ion-content>\r\n\r\n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"requestListaDocumenti($event)\">\r\n    <ion-refresher-content></ion-refresher-content>\r\n  </ion-refresher>\r\n\r\n  <!-- NESSUN DOCUMENTO PRESENTE -->\r\n  <div *ngIf=\"listDocumenti.length === 0\" class=\"nofind-cnt\">\r\n    <ion-label>Nessun documento</ion-label>\r\n    <ion-label>disponibile</ion-label>\r\n  </div>\r\n\r\n  <!-- DOCUMENTI PRESENTI  -->\r\n  <div *ngIf=\"listDocumenti.length > 0\">\r\n    <ion-list>\r\n      <ion-item \r\n              *ngFor=\"let documento of listDocumenti\"\r\n              (click)=\"onClickElement(documento)\">\r\n        <ion-icon slot=\"start\" class=\"icon-left\" color =\"\" name=\"document-text-outline\"></ion-icon>\r\n        <ion-label>\r\n          <h3>{{documento['_DENOMINAZIONE_TipoDocumentazione']}}</h3>\r\n          <p>Ultima modifica: {{documento.DATAORAMODIFICA | date : 'dd/LL/yyyy' }}</p>\r\n        </ion-label>\r\n        <ion-icon slot=\"end\" color=\"primary\" name=\"cloud-download-outline\"></ion-icon>\r\n      </ion-item>\r\n    </ion-list>\r\n  </div>\r\n\r\n  \r\n</ion-content>\r\n"]}