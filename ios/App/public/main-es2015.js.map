{"version":3,"sources":["./src/app/services/apicall.service.ts","./src/app/models/occupazionecampi.model.ts","./src/app/services/livello.service.ts","./src/app/models/articolocolore.model.ts","./src/app/services/area.service.ts","./src/app/library/services/crypto.service.ts","./src/app/services/prenotazione.service.ts","./src/app/services/iscrizionecorso.service.ts","./src/app/library/models/iddocument.model.ts","./src/app/services/photo.service.ts","./src/app/library/models/structure.model.ts","./src/app/models/gruppo.model.ts","./src/app/models/iscrizionecorso.model.ts","./src/app/models/sport.model.ts","./src/app/models/utente.model.ts","./src/app/models/log.model.ts","./src/environments/environment.ts","./src/app/services/corso-valutazione.service.ts","./src/app/models/articolo.model.ts","./src/app/services/invoices.service.ts","./src/app/models/codicefiscale.model.ts","./src/app/services/start.service.ts","./src/app/library/models/cache.model.ts","./src/app/models/corso.model.ts","./src/app/models/prenotazionepianificazione.model.ts","./src/app/library/services/docstructure.service.ts","./src/app/services/custom-encription.service.ts","./src/app/services/categoriaeta.service.ts","./src/app/services/data-chiusura.service.ts","./src/app/services/course.service.ts","./src/app/models/corsovalutazione.model.ts","./src/app/library/models/mydatetime.model.ts","./src/app/services/sport.service.ts","./src/app/models/account.model.ts","./node_modules/@ionic/pwa-elements/dist/esm lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","./src/app/models/imdb/slotweek.model.ts","./src/app/services/occupazioni.service.ts","./src/app/models/locaton-image.model.ts","./src/app/models/impegno.model.ts","./src/app/models/utentelivello.model.ts","./src/app/models/areapaymentsetting.model.ts","./src/app/services/slotoccupazione.service.ts","./src/app/models/filtercorsi.model.ts","./src/app/models/imdb/slotday.model.ts","./src/app/models/start-configuration.model.ts","./src/app/models/privateimage.model.ts","./src/app/models/dateslotlock.model.ts","./src/app/models/documentazione.model.ts","./src/app/library/models/requestParams.model.ts","./src/app/models/campo.model.ts","./node_modules/moment/locale sync ^\\.\\/.*$","./src/app/models/utenteiscrizione.model.ts","./src/app/services/utenteiscrizione.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/models/livello.model.ts","./src/app/models/imdb/slottime.model.ts","./src/app/models/utenteprenotazione.model.ts","./src/app/services/posizione.service.ts","./src/app/models/location.model.ts","./src/app/services/documento.service.ts","./src/app/models/valuelist.model.ts","./src/app/models/valuta.model.ts","./src/app/services/utente.service.ts","./src/app/library/models/descriptor.model.ts","./src/app/models/ricevuta.model.ts","./src/app/services/newseventi.service.ts","./src/app/app.module.ts","./src/app/models/pianificazionecorso.model.ts","./src/app/models/tipodocumentazione.model.ts","./src/app/services/coursescheduler.service.ts","./src/app/models/datachiusura.model.ts","./src/app/models/corsovalutazionelivello.model.ts","./src/app/models/arealink.model.ts","./src/app/models/newsevento.model.ts","./src/app/models/articolotagliemisura.model.ts","./src/app/models/prenotazione.model.ts","./node_modules/@ionic/core/dist/esm lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","./src/app/models/unitamisura.model.ts","./src/app/services/utenteprenotazione.service.ts","./src/app/models/corsoallegato.model.ts","./src/app/library/models/idlibrary.model.ts","./src/app/models/accountregistration.model.ts","./src/app/models/camposport.model.ts","./src/app/models/corsoprogramma.model.ts","./src/app/library/models/postResult.model.ts","./src/app/models/area.model.ts","./src/app/services/corsoallegato.service.ts","./src/app/app-routing.module.ts","./src/app/models/corsopresenze.model.ts","./src/app/services/codicefiscale.service.ts","./src/app/models/settimana.model.ts","./src/app/models/aperturalocation.model.ts","./src/app/models/categoriaeta.model.ts","./src/app/models/iscrizioneincasso.model.ts","./src/app/services/location.service.ts","./src/app/library/models/cachelistelement.model.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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AAK,CAAC,CAAC;YACvD,IAAI,OAAO,CAAC,EAAE,IAAE,EAAE,EAClB;gBACI,OAAO,KAAK,CAAC;aAChB;SACJ;IACH,CAAC;IAED;;OAEG;IACH,IAAI,aAAa;QACf,IAAI,QAAQ,GAAW,CAAC,CAAC;QACzB,IAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE;YAC9B,QAAQ,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;SAC5C;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAGD;;;OAGG;IACH,sBAAsB,CAAC,aAAsB,KAAK;QAChD,IAAI,OAAO,GAAG,EAAE,CAAC;QAEjB,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,EAAE;YACzB,IAAI,UAAU,EAAE;gBACZ,OAAO,GAAG,UAAU,CAAC;aACxB;iBACI;gBACD,OAAO,GAAG,wBAAwB,CAAC;aACtC;SACJ;aACI;YAED,OAAO,GAAG,qBAAqB,CAAC;SACnC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CAKN;;;;;;;;;;;;AC3QD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"main-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { LogApp } from '../models/log.model';\r\n\r\nimport { CustomEncriptionService } from './custom-encription.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApicallService {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private customEncriptionService: CustomEncriptionService\r\n    ) { }\r\n\r\n  \r\n  /**\r\n   * Effettua una chiamata GET verso un server e ritorna un Observable\r\n   * @param url Url da contattare\r\n   * @param header Dati di Testata\r\n   * @param params Parametri di Testata\r\n   */\r\n  httpGet(url: string, header: HttpHeaders, params?: HttpParams) {\r\n    return this._httpGet(url, header, params)\r\n  }\r\n\r\n  /**\r\n   * Effettua una chiamata POST verso un server e ritorna un Observable\r\n   * Utilizzata per Inserimento di Risorse\r\n   * @param url Url da contattare\r\n   * @param header Dati di Testata\r\n   * @param params Parametri\r\n   * @param body Body\r\n   */\r\n  httpPost(url: string, \r\n            header: HttpHeaders, \r\n            params: HttpParams, \r\n            body: any\r\n            ) {\r\n    return this._httpPost(url, header, params, body);\r\n  }\r\n\r\n\r\n  /**\r\n   * Effettua una chiamata PUT verso un server e ritorna un Observable\r\n   * Utilizzata per Modifica di Risorse\r\n   * @param url Url da contattare\r\n   * @param header Dati di Testata\r\n   * @param body Body\r\n   */\r\n  httpPut(url: string, \r\n            header: HttpHeaders,\r\n            params: HttpParams,\r\n            body: any) {\r\n    return this._httpPut(url, header, params,body);\r\n  }\r\n\r\n    /**\r\n   * Esegue una chiamata GET al'Url specificato, controllando l'errore\r\n   * @param url Url da contattare\r\n   * @param reqHeaders Testata\r\n   * @param reqParams  Parametri\r\n   */\r\n  private _httpGet(url: string, reqHeaders: HttpHeaders, reqParams?: HttpParams) {\r\n    LogApp.consoleLog('Chiamata GET a ' + url);\r\n        \r\n    reqHeaders = reqHeaders.append('authsign', this.customEncriptionService.getB64EncryptedSignature());\r\n    //ritorno la get controllando l'errore\r\n    return this.httpClient.get<any>(url, {\r\n      headers: reqHeaders,\r\n      params: reqParams\r\n    })\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Esegue una chiamata POST al'Url specificato, controllando l'errore\r\n   * @param url Url da contattare\r\n   * @param reqHeaders Testata\r\n   * @param reqParams  Parametri\r\n   * @param reqBody    Body\r\n   */\r\n  private _httpPost(url: string, \r\n                    reqHeaders: HttpHeaders, \r\n                    reqParams: HttpParams, \r\n                    reqBody: any\r\n                    ) {\r\n\r\n    reqHeaders = reqHeaders.append('authsign', this.customEncriptionService.getB64EncryptedSignature());\r\n    LogApp.consoleLog('Chiamata POST a ' + url);\r\n\r\n    return this.httpClient.post<any>(url, reqBody, {\r\n                                        headers: reqHeaders,\r\n                                        params: reqParams\r\n                                })\r\n                          .pipe(\r\n                            catchError(this.handleError)\r\n                          );\r\n\r\n  }\r\n\r\n  /**\r\n   * Esegue una chiamata PUT al'Url specificato, controllando l'errore\r\n   * @param url Url da contattare\r\n   * @param reqHeaders Testata\r\n   * @param reqParams  Parametri\r\n   * @param reqBody    Body\r\n   */\r\n  private _httpPut(url: string, \r\n                   reqHeaders: HttpHeaders,\r\n                   reqParams: HttpParams,\r\n                   reqBody: any) {\r\n    \r\n    LogApp.consoleLog('Chiamata PUT a ' + url);\r\n\r\n    reqHeaders = reqHeaders.append('authsign', this.customEncriptionService.getB64EncryptedSignature());\r\n\r\n    return this.httpClient.put(url, reqBody, {\r\n                                        headers: reqHeaders,\r\n                                        params: reqParams,\r\n                                        observe: 'response'\r\n                              })\r\n                              .pipe(\r\n                                catchError(this.handleError)\r\n                              );\r\n  }\r\n\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('Errore di chiamata:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Errore Backend Codice ${error.status}, ` +\r\n        `Body: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError(\r\n      'Si sono verificati errori. Riprovare.');\r\n  };\r\n\r\n\r\n    /**\r\n   * Esegue una chiamata GET al'Url specificato, controllando l'errore\r\n   * @param url Url da contattare\r\n   * @param reqHeaders Testata\r\n   * @param reqParams  Parametri\r\n   */\r\n  httpGetFile(url: string, reqHeaders: HttpHeaders) {\r\n    LogApp.consoleLog('Chiamata GET a ' + url);\r\n    \r\n    \r\n    //ritorno la get controllando l'errore\r\n    return this.httpClient.get(url, {\r\n     headers: reqHeaders,\r\n     responseType: 'blob'\r\n    })\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n}\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { SettoreAttivita } from './valuelist.model';\r\nimport { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { Time } from '@angular/common';\r\n\r\nexport class OccupazioneCampi extends IDDocument {\r\n\r\n    IDREF: string;\r\n    TIPO: SettoreAttivita;\r\n    IDAREA: string;\r\n    IDLOCATION: string;\r\n    IDCAMPO: string;\r\n    DATAORAINIZIO: Date;\r\n    DATAORAFINE: Date;\r\n    DATAINIZIO: Date;\r\n    DATAFINE: Date;\r\n    ORAINIZIO: Date;\r\n    ORAFINE: Date;\r\n\r\n\r\n    //a Seconda di TIPO cambiano le logiche di ID e IDREF\r\n    //Tipo = SettoreAttivita.Corso -> ID = IDPianificazioneCorso IDREF = IDCorso \r\n    //Tipo = SettoreAttivita.Prenotazione -> ID = IDPianificazionePrenotazione e IDREF = IDPrenotazione\r\n    \r\n    constructor(onlyInstance?:boolean) {\r\n      \r\n        super(onlyInstance);\r\n        \r\n    }\r\n  \r\n  \r\n     /**\r\n      * Ritorna il descrittore della Struttura Campi\r\n     */\r\n     getDescriptor(): Descriptor {\r\n      let objDescriptor = new Descriptor();\r\n      let arString = ['IDAREA',\r\n                      'IDREF',\r\n                      'IDLOCATION',\r\n                      'IDCAMPO'\r\n                      ];\r\n      let arNumber = ['TIPO'];\r\n      let arBoolean = [];\r\n      let arDate = ['DATAINIZIO','DATAFINE'];\r\n      let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\r\n      let arTime = ['ORAINIZIO','ORAFINE'];\r\n      let arCollection = [];\r\n  \r\n      objDescriptor.className = 'OccupazioneCampi';\r\n      objDescriptor.doRemote = true;\r\n      objDescriptor.classWebApiName = 'OCCUPAZIONECAMPI';\r\n      objDescriptor.describeField = '';\r\n  \r\n      objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n      objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n      objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n      objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n      objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n      objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n      objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n  \r\n      objDescriptor.setRelation('IDAREA','Area');\r\n      objDescriptor.setRelation('IDLOCATION','Location');\r\n      objDescriptor.setRelation('IDCAMPO','Campo');\r\n\r\n      if(this.TIPO == SettoreAttivita.settorePrenotazione){\r\n          objDescriptor.setRelation('IDREF', 'Prenotazione');\r\n      }\r\n      else if (this.TIPO == SettoreAttivita.settoreCorso){\r\n        objDescriptor.setRelation('IDREF', 'Corso');\r\n      }\r\n      \r\n      return objDescriptor;\r\n  }\r\n\r\n  get iconName(): string{\r\n    let iconName: string = '';\r\n    switch(this.TIPO){\r\n        case SettoreAttivita.settoreCorso:\r\n            iconName = 'school';\r\n            break;\r\n\r\n        case SettoreAttivita.settorePrenotazione:\r\n            iconName = 'calendar-outline';\r\n            break;\r\n    }\r\n\r\n    return iconName;\r\n  }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take, tap} from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { Livello } from '../models/livello.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LivelloService {\r\n\r\n  private _listLivelli = new BehaviorSubject<Livello[]>([]);\r\n  private _loaded: boolean; //Sport sono stati richiesti al server e sono caricati in memoria\r\n\r\n  constructor(private apiService: ApicallService,\r\n              private docService: DocstructureService) { \r\n    this._loaded = false;\r\n  }\r\n\r\n  get listLivelli() {\r\n    return this._listLivelli.asObservable();\r\n  }\r\n  \r\n    /**\r\n   * Ritorna la lista non in modalità Observable\r\n   */\r\n  get actualListLivelli() {\r\n    return this._listLivelli.getValue();\r\n  }  \r\n\r\n\r\n\r\n  /**\r\n   * Richiede al server l'elenco dei Livelli\r\n   * @param config Parametri configurazione chiamata\r\n   */\r\n  request(config: StartConfiguration) {\r\n    return new Promise<Livello[]>((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      \r\n      const doObject = 'LIVELLO';\r\n  \r\n      \r\n      //Nei Parametri imposto il LivelloAutorizzazione\r\n      let myParams = new HttpParams().set('LivelloAutorizzazione','0');\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n          return data.LIVELLO\r\n        }))\r\n        .subscribe(resultData => {\r\n  \r\n          if (resultData) {\r\n\r\n            //Arrivati dal server\r\n            this._loaded = true;\r\n    \r\n            for (let index = 0; index < resultData.length; index++) {\r\n              const element = resultData[index];\r\n              let newLivello = new Livello();\r\n              newLivello.setJSONProperty(element);\r\n              this.addLivello(newLivello);\r\n            }\r\n\r\n            resolve(this.actualListLivelli);\r\n\r\n          }\r\n          else {\r\n            reject('No data Livello retrieved');\r\n          }\r\n  \r\n        }, error=>{\r\n          reject(error);\r\n        });\r\n    })\r\n\r\n  }\r\n\r\n  \r\n\r\n  //Aggiunge un livello\r\n  addLivello(objLivello: Livello) {\r\n\r\n    this.listLivelli\r\n      .pipe(take(1))\r\n      .subscribe( collLivelli => {\r\n        this._listLivelli.next( collLivelli.concat(objLivello))\r\n      });\r\n    \r\n      \r\n  }\r\n\r\n  /**\r\n   * Richiede al server l'elenco dei Livelli per lo Sport\r\n   * @param idSport Sport da utilizzare\r\n   * @returns Promise Array Livelli Ordinati \r\n   * \r\n   */\r\n  requestLivelliForSport(idSport: string):Promise<Livello[]> {\r\n    let collLivelli: Livello[] = [];\r\n\r\n    return new Promise<Livello[]>((resolve) => {\r\n\r\n      if (idSport && idSport.length != 0) {\r\n\r\n        //Devo effettuare la chiamata al server\r\n        let filterLivello: Livello = new Livello(true);\r\n        filterLivello.IDSPORT = idSport;\r\n        \r\n        //Effettuo la richiesta\r\n        this.docService.requestNew(filterLivello)\r\n                       .then((collData:Livello[]) => {\r\n                         collLivelli = collData;\r\n                         resolve(collLivelli);\r\n                       })\r\n                       .catch(error => {\r\n\r\n                        resolve(collLivelli);\r\n                        \r\n                       })\r\n\r\n      }\r\n      else {\r\n        resolve(collLivelli);\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\nexport class ArticoloColore extends IDDocument {\r\n    IDARTICOLO: string;\r\n    DESCRIZIONE: string;\r\n    \r\n       \r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDARTICOLO',\r\n            'DESCRIZIONE',\r\n        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'ArticoloColore';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'ARTICOLOCOLORE';\r\n        objDescriptor.describeField = 'DESCRIZIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n    \r\n        objDescriptor.setRelation('IDARTICOLO','Articolo');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { Area } from '../models/area.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AreaService {\r\n\r\n  //Elenco Aree\r\n  private _listAree = new BehaviorSubject<Area[]>([]);\r\n  private _areaSelected = new BehaviorSubject<Area>(new Area);\r\n\r\n  get listAree() {\r\n    return this._listAree.asObservable();\r\n  }\r\n\r\n  get areaSelected() {\r\n    return this._areaSelected.asObservable();\r\n  }\r\n\r\n  /** Ritorna il valore attuale dell'area selezionata */\r\n  get areaSelectedValue() {\r\n    return this._areaSelected.getValue();\r\n  }\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n\r\n  /**\r\n   * Richiede le Aree legate al Gruppo, ed imposta \r\n   * sia la Lista delle Aree che un Area Selezionata\r\n   * \r\n   * @param config Parametri di configurazione\r\n   */\r\n  request(config: StartConfiguration, _childLevel?:number) {\r\n    return new Promise<void>((resolve, reject)=>{\r\n        let myHeaders = config.getHttpHeaders();\r\n\r\n        const doObject = 'AREAOPERATIVA';\r\n        \r\n        if (!_childLevel){\r\n          _childLevel = 2;\r\n        }\r\n\r\n        myHeaders=myHeaders.set('child-level',_childLevel+'');\r\n\r\n        // Nei parametri imposto il gruppo Sportivo\r\n        let myParams = new HttpParams().set('IDGRUPPOSPORTIVO',config.gruppo.ID);\r\n    \r\n        let myUrl = config.urlBase + '/' + doObject;\r\n    \r\n        this.apiService\r\n          .httpGet(myUrl, myHeaders, myParams)\r\n          .pipe(map(fullData => {\r\n            \r\n            return fullData.AREAOPERATIVA;\r\n          }))\r\n          .subscribe(resultData => {\r\n              \r\n              //Ricreo l'array di Aree\r\n              this._listAree.next([]);\r\n    \r\n              //Aggiungo i valori\r\n              this._addMultipleAree(resultData, true);\r\n\r\n              resolve();\r\n          },\r\n          error=>{\r\n            reject(error);\r\n          });\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Aggiunge un insieme di elementi all'array delle aree\r\n   * @param dataJSON JSON Received\r\n   * @param firstSelect Seleziona il primo elemento e rendilo come Area Selezionata\r\n   */\r\n  private _addMultipleAree(dataJSON: any, firstSelect: boolean) {\r\n    let count = 0;\r\n\r\n    if (dataJSON) {\r\n      dataJSON.forEach(element => {\r\n        let newArea = new Area();\r\n        newArea.setJSONProperty(element);\r\n\r\n        //Primo Giro e mi richiede di selezionare\r\n        if (firstSelect && count == 0) {\r\n          this._areaSelected.next(newArea);\r\n        }\r\n\r\n        this.listAree\r\n          .pipe(take(1))\r\n          .subscribe( collAree => {\r\n            this._listAree.next( collAree.concat(newArea));\r\n          });\r\n\r\n        count++;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Seleziona l'area richiesta per ID\r\n   * @param idArea ID Area da Selezionare\r\n   */\r\n  selectAreaByID(idArea: string) {\r\n    let arElement = this._listAree.getValue();\r\n\r\n    let elSelected = arElement.find(element => {\r\n      return element.ID == idArea;\r\n    });\r\n\r\n    if (elSelected) {\r\n      //Ememtto la modifica\r\n      this._areaSelected.next(elSelected);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\ndeclare var CryptoJS;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CryptoService {\r\n\r\n  constructor() { }\r\n\r\n  //Example here: https://cryptojs.gitbook.io/docs/#hashing\r\n\r\n  //The set method is use for encrypt the value.\r\n  setAES(keys: string, value: string): string\r\n  {\r\n    var key = CryptoJS.enc.Utf8.parse(keys);\r\n    var iv = CryptoJS.enc.Utf8.parse(keys);\r\n    var encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(value.toString()), key,\r\n    {\r\n        keySize: 128 / 8,\r\n        iv: iv,\r\n        mode: CryptoJS.mode.CBC,\r\n        padding: CryptoJS.pad.Pkcs7\r\n    });\r\n\r\n    return encrypted.toString();\r\n  }\r\n\r\n  //The get method is use for decrypt the value.\r\n  getAES(keys: string, value: string): string\r\n  {\r\n    var key = CryptoJS.enc.Utf8.parse(keys);\r\n    var iv = CryptoJS.enc.Utf8.parse(keys);\r\n    var decrypted = CryptoJS.AES.decrypt(value, key, {\r\n        keySize: 128 / 8,\r\n        iv: iv,\r\n        mode: CryptoJS.mode.CBC,\r\n        padding: CryptoJS.pad.Pkcs7\r\n    });\r\n\r\n    return decrypted.toString(CryptoJS.enc.Utf8);\r\n  }\r\n\r\n  setSHA256(keys: string, value: string): string {\r\n    var key = CryptoJS.enc.Utf8.parse(keys);\r\n    var iv = CryptoJS.enc.Utf8.parse(keys);\r\n    var encrypted = CryptoJS.SHA256(CryptoJS.enc.Utf8.parse(value.toString()));\r\n\r\n    return encrypted.toString();\r\n  }\r\n\r\n  \r\n  getBCrypt(value: string):string {\r\n    let encrypted = '';\r\n\r\n    encrypted = value;\r\n\r\n    return encrypted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Prende una stringa che corrisponde a una password e la splitta con questa logica\r\n   * Divide in 2 Array i caratteri in posizione Dispari e in posizione Pari\r\n   * Array Dispari lo ritrasforma in stringa da 0...n \r\n   * Array Pari lo ritrasforma in stringa da n..0\r\n   * Mette le 2 stringhe in elArray per tornarle\r\n   * \r\n   * @param pwd Password da splittare\r\n   * @param elArray Array con le 2 porzioni splittate\r\n   */\r\n  mySplitPassword(pwd:string): string[] {\r\n    let result = false;\r\n    let arFirst: string [] = [];\r\n    let arSecond: string[] = [];\r\n    let strFirst: string;\r\n    let strSecond: string;\r\n    let elArray:string[] = [];\r\n\r\n\r\n    if (pwd && pwd.length !== 0)  {\r\n      result = true;\r\n\r\n      for (let index = 0; index < pwd.length; index++) {\r\n        const token = pwd.substr(index, 1);\r\n\r\n        if ( (index + 1) % 2 == 0) {\r\n          arSecond.push(token);\r\n        }\r\n        else {\r\n          arFirst.push(token);\r\n        }\r\n      }\r\n\r\n      strFirst = arFirst.toString();\r\n      strFirst = strFirst.replace(/,/g,'');\r\n\r\n      strSecond = arSecond.reverse().toString();\r\n      strSecond = strSecond.replace(/,/g,'');\r\n\r\n      elArray = [];\r\n      elArray.push(strFirst);\r\n      elArray.push(strSecond);\r\n    }\r\n\r\n    return elArray;\r\n  }\r\n\r\n}\r\n","import { Injectable, ɵConsole } from '@angular/core';\r\nimport { BehaviorSubject, from, Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { ApicallService } from './apicall.service';\r\nimport { Prenotazione } from '../models/prenotazione.model';\r\nimport { Utente } from '../models/utente.model';\r\nimport { LogApp } from '../models/log.model';\r\nimport { Campo } from '../models/campo.model';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { PrenotazionePianificazione } from '../models/prenotazionepianificazione.model';\r\nimport { SportService } from './sport.service';\r\nimport { ParamsExport } from '../library/models/iddocument.model';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrenotazioneService {\r\n\r\n\r\n  private _listPrenotazioni = new BehaviorSubject<Prenotazione[]>([]);\r\n  private _activePrenotazione = new BehaviorSubject<Prenotazione>(new Prenotazione());\r\n  private _selectedCampo: Campo;\r\n\r\n  constructor(private apiService: ApicallService, private sportService: SportService) { }\r\n\r\n  /** Prenotazione */\r\n  get activePrenotazione() {\r\n    return this._activePrenotazione.asObservable();\r\n  }\r\n\r\n  get listPrenotazioni() {\r\n    return this._listPrenotazioni.asObservable();\r\n  }\r\n\r\n  //Memorizzo il campo selezionato\r\n  set selectedCampo(value: Campo) {\r\n    this._selectedCampo = value;\r\n  }\r\n\r\n  get selectedCampo() {\r\n    return this._selectedCampo;\r\n  }\r\n\r\n  // Imposta come attiva la Prenotazione passata\r\n  setActivePrenotazione(value: Prenotazione) {\r\n    this._activePrenotazione.next(value);\r\n  }\r\n\r\n  \r\n  /**\r\n   * Inizializza la prenotazione con l'AREA\r\n   * @param idArea Area Operativa\r\n   */\r\n  initActivePrenotazione(idArea: string) {\r\n    this.activePrenotazione\r\n      .pipe(take(1))\r\n      .subscribe( elPrenotazione => {\r\n        elPrenotazione = new Prenotazione();\r\n        elPrenotazione.initNewPrenotazione(idArea);\r\n\r\n        this._activePrenotazione.next(elPrenotazione);\r\n      });\r\n      \r\n  }\r\n\r\n  /**\r\n   * Imposta la Pianificazione Singola\r\n   * @param docPianificazione Pianificazione da impostare\r\n   */\r\n  setPianificazioneSingola(docPianificazione: PrenotazionePianificazione) {\r\n    this.activePrenotazione\r\n      .pipe(take(1))\r\n      .subscribe( elPrenotazione => {\r\n          elPrenotazione.setPianificazioneSingola(docPianificazione);\r\n          this._activePrenotazione.next(elPrenotazione);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  setIDUtenteActivePrenotazione(docUtente: Utente) {\r\n    this.activePrenotazione\r\n    .pipe(take(1))\r\n    .subscribe( elPrenotazione => {\r\n        elPrenotazione.setUtente(docUtente.ID, docUtente.NOMINATIVO);\r\n\r\n        this._activePrenotazione.next(elPrenotazione);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Richiesta elenco Prenotazioni\r\n   * @param config Parametri di configurazione\r\n   * @param idUtente idUtente\r\n   */\r\n  request(config: StartConfiguration) {\r\n    return new Promise((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'PRENOTAZIONE';\r\n      \r\n\r\n\r\n      // Nei parametri imposto il gruppo Sportivo\r\n      let myParams = new HttpParams().set('IDGRUPPOSPORTIVO',config.gruppo.ID);\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(fullData => {\r\n          return fullData.PRENOTAZIONE\r\n        }))\r\n        .subscribe( resultData => {\r\n  \r\n          for (let index = 0; index < resultData.length; index++) {\r\n            const element = resultData[index];\r\n\r\n            let docPrenotazione = new Prenotazione();\r\n            docPrenotazione.setJSONProperty(element);\r\n            this.add2ListPrenotazioni(docPrenotazione);\r\n          }\r\n\r\n          resolve(this._listPrenotazioni.getValue());\r\n\r\n        }, error=>{\r\n          reject (error);\r\n        });\r\n    })\r\n  }\r\n\r\n  //Aggiunge una attivita alla lista globale\r\n  add2ListPrenotazioni(objPrenotazione: Prenotazione) {\r\n\r\n    let listSport = this.sportService.actualListSport;\r\n\r\n    this.listPrenotazioni\r\n      .pipe(take(1))\r\n      .subscribe( collLocation => {\r\n        this._listPrenotazioni.next( collLocation.concat(objPrenotazione));\r\n      });\r\n    \r\n  }\r\n\r\n\r\n  /**\r\n   * Richiede una prenotazione al server\r\n   * @param config Dati configurazione\r\n   * @param idPrenotazione IdPrenotazione \r\n   */\r\n  requestById(config: StartConfiguration, idPrenotazione: string, numLivelli: number) {\r\n    //let myHeaders = new HttpHeaders({'Content-type':'text/plain'}).append('child-level', numLivelli + '');\r\n    let myHeaders = config.getHttpHeaders();\r\n    const doObject = 'PRENOTAZIONE';\r\n    \r\n    \r\n    myHeaders = myHeaders.append('child-level', numLivelli + '');\r\n    // Nei parametri imposto idPrenotazion richiesto\r\n    let myParams = new HttpParams().set('ID',idPrenotazione);\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n    return this.apiService\r\n      .httpGet(myUrl, myHeaders, myParams)\r\n      .pipe(map(fullData => {\r\n\r\n        let docPrenotazione: Prenotazione;\r\n\r\n        if (fullData) {\r\n          if (fullData.hasOwnProperty('PRENOTAZIONE')) {\r\n            let collPrenotazioni = fullData.PRENOTAZIONE;\r\n            if (collPrenotazioni.length !== 0) {\r\n\r\n              let listSport = this.sportService.actualListSport;\r\n              docPrenotazione = new Prenotazione();\r\n              docPrenotazione.setJSONProperty(collPrenotazioni[0]);\r\n\r\n              \r\n              docPrenotazione.PRENOTAZIONEPIANIFICAZIONE.forEach(elPianificazione => {\r\n                  elPianificazione.lookup('IDSPORT', listSport, \"DENOMINAZIONE\");\r\n              });\r\n\r\n            }\r\n          }\r\n        }\r\n        return docPrenotazione;\r\n      }));\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Richiesta al Server il calcolo dell'importo\r\n   * Metodo Statico: MOBBOOKINGTOTALE\r\n   * Body contiene il JSON del documento\r\n   * @param config Parametri di Configurazione\r\n   */\r\n  requestImporto(config: StartConfiguration) {\r\n    let docPrenotazione = this._activePrenotazione.getValue();\r\n\r\n    let myParams = new HttpParams();\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override','MOBBOOKINGTOTALE');\r\n    myHeaders = myHeaders.append('child-level','999');\r\n\r\n    const paramName = 'docPrenotazione'; //Nome del parametro in entrata della funzione WebApi\r\n\r\n    const doObject = 'PRENOTAZIONE';\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramExport = new ParamsExport();\r\n    paramExport.clearDOProperty = false;\r\n    paramExport.clearPKProperty = false;\r\n    paramExport.clearPrivateProperty = true;\r\n    \r\n    //Creo il JSON del documento , eliminando le proprietà private (clear = true) ed inviando le proprietà do e le chiavi primarie(clear = false)\r\n    let myBodyJSON = docPrenotazione.exportToJSON(paramExport);\r\n\r\n    //Il parametro inviato nel body deve essere strutturato cosi\r\n    // { \"nomeParametro\" : { oggetto exportato JSON } }\r\n    let myBody = '{' + '\\\"' + paramName + '\\\"' + ':' + myBodyJSON + '}';\r\n\r\n   \r\n\r\n    return this.apiService\r\n          .httpPost(myUrl,myHeaders, myParams, myBody)\r\n          .pipe(map(fullData => {\r\n            //fulldata è già l'oggetto Prenotazione\r\n            return fullData;\r\n          }));\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna una Promise per salvare il documento\r\n     * @param config Configurazione\r\n     */\r\n    requestSave(config: StartConfiguration): Promise<Prenotazione> {\r\n\r\n      return new Promise((resolve, reject)=>{\r\n          let docPrenotazione = this._activePrenotazione.getValue();\r\n\r\n          let myHeaders = config.getHttpHeaders();                                            \r\n          let myParams = new HttpParams(); \r\n          const paramName = 'docPrenotazione'; //Nome del parametro in entrata della funzione WebApi\r\n          //Imposto gli header aggiuntivi\r\n          myHeaders = myHeaders.append('X-HTTP-Method-Override','MOBBOOKINGSAVE');\r\n          myHeaders = myHeaders.append('child-level','999');\r\n          //Quali proprietà non voglio esportare\r\n          const noExportDO = false;\r\n          const noExportPK = true;\r\n          const noExportPrivate = true;\r\n          const doObject = 'PRENOTAZIONE';\r\n          let myUrl = config.urlBase + '/' + doObject;\r\n\r\n          //Questi sono i parametri per l'esportazione\r\n          let paramExport = new ParamsExport();\r\n          paramExport.clearDOProperty = false;\r\n          paramExport.clearPKProperty = true;\r\n          paramExport.clearPrivateProperty = true;\r\n          \r\n          //Creo il JSON del documento , eliminando le proprietà do e private (true) e le chiavi primarie(true)\r\n          \r\n          let myBodyJSON = docPrenotazione.exportToJSON(paramExport);\r\n          //Il parametro inviato nel body deve essere strutturato cosi\r\n          \r\n          let myBody = '{' + '\\\"' + paramName + '\\\"' + ':' + myBodyJSON + '}';\r\n      \r\n          //Chiamo per il salvataggio                      \r\n          this.apiService\r\n                .httpPost(myUrl,myHeaders, myParams, myBody)\r\n                .subscribe(elPrenotazione => {\r\n\r\n                  let receivedPrenotazione = Prenotazione.getPrenotazioneFromJson(elPrenotazione);\r\n                  \r\n                  if (receivedPrenotazione.ISVALID == true) {\r\n                    resolve(receivedPrenotazione);\r\n                  }\r\n                  else {\r\n                    let errMessage = '';\r\n                    if (receivedPrenotazione.MSGINVALID && receivedPrenotazione.MSGINVALID.length != 0) {\r\n                      errMessage = receivedPrenotazione.MSGINVALID;\r\n                    }\r\n                    else {\r\n                      errMessage = 'Salvataggio Fallito';\r\n                    }\r\n\r\n                    reject(errMessage);\r\n                  }\r\n\r\n                }, error => {\r\n                  console.log(error);\r\n                  let errMessage = 'Errore di connessione';\r\n                  reject(errMessage);\r\n                  \r\n                });\r\n\r\n      });\r\n\r\n      }\r\n\r\n    \r\n    /**\r\n     * Richiede al server la cancellazione di una pianificazione\r\n     * @param idPianificazione \r\n     */\r\n    requestDelete(idPianificazione: string, config: StartConfiguration): Promise<PostResponse>{\r\n\r\n      return new Promise<PostResponse>((resolve, reject) => {\r\n        const method: string = 'MOBBOOKINGDELETE';\r\n        const doObject = 'PRENOTAZIONE';\r\n        const myUrl = config.urlBase + '/' + doObject;\r\n\r\n        //headers\r\n        let myHeaders = config.getHttpHeaders();\r\n        myHeaders = myHeaders.append('X-HTTP-Method-Override', method);\r\n\r\n\r\n        //params\r\n        let myParams = new HttpParams().set('idPianificazione', idPianificazione);\r\n      \r\n        //abbiamo tutto, faccio la richiesta\r\n        this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .subscribe(data => {\r\n          //creo l'oggetto con la risposta\r\n          let response = new PostResponse();\r\n          response.setFromResponse(data);\r\n          resolve(response);\r\n\r\n        },\r\n        err => {\r\n          //creo comunque un postResponse fittizio\r\n          let response = new PostResponse();\r\n          response.result = false\r\n          response.message = \"Connessione non riuscita\";\r\n          reject(response);\r\n        })\r\n        \r\n\r\n      })\r\n\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { PostResponse } from '../library/models/postResult.model';\nimport { PostParams } from '../library/models/requestParams.model';\nimport { DocstructureService } from '../library/services/docstructure.service';\nimport { IscrizioneCorso } from '../models/iscrizionecorso.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IscrizionecorsoService {\n\n  constructor(private docStructureService: DocstructureService\n              ) { }\n\n\n  \n\n  /**\n   * Contatta il server per conoscere se sono ancora \n   * disponibili posti per l'iscrizione a un corso\n   * \n   * Ritorna un oggetto di tipo =>  PostResponse\n   * Result = TRUE (Posti diponibili) / FALSE (Posti Esauriti)\n   * @param idCorso idCorso da interrrogare\n   */\n  getPostiDisponibiliCorso(idCorso: string):Promise<PostResponse> {\n\n    return new Promise<PostResponse>((resolve) => {\n      \n      let myPostParams : PostParams = new PostParams();\n      let myReturn: PostResponse;\n      let docToCall: IscrizioneCorso = new IscrizioneCorso();\n\n\n      if (idCorso && idCorso.length != 0) {\n        myPostParams.key = 'idCorso';\n        myPostParams.value = idCorso;\n\n        this.docStructureService.requestForFunction(docToCall,'getPostiDisponibili','',myPostParams)\n                        .then((risposta: PostResponse) => {\n                          resolve(risposta);\n                        })\n                        .catch(error => {\n                          myReturn = new PostResponse();\n                          myReturn.result = false;\n                          myReturn.message = 'Nessun posto disponibile';\n                          resolve(myReturn);                          \n                        })\n\n\n      }\n      else {\n        myReturn = new PostResponse();\n        myReturn.result = false;\n        myReturn.message = 'Nessun posto disponibile';\n        resolve(myReturn);\n      }\n\n      \n            \n    })\n  }\n\n\n  /**\n   * Chiama il server e richiede una nuova iscrizione corso\n   * PostResponse.result => TRUE Salvataggio Corretto\n   * PostResponse.code => Id Iscrizione salvata\n   * \n   * @param docIscrizione Iscrizione Corso\n   * @returns PostResponse \n   */\n  requestSaveIscrizione(docIscrizione: IscrizioneCorso):Promise<PostResponse> {\n    return new Promise<PostResponse>((resolve, reject) => {\n      let myPostParams : PostParams = new PostParams();\n      let myReturn: PostResponse;\n\n\n\n      if (docIscrizione) {\n        myPostParams.key = 'docIscrizione';\n        myPostParams.value = docIscrizione;\n\n        this.docStructureService.requestForFunction(docIscrizione,'mobBookingSave',docIscrizione,myPostParams)\n                        .then((risposta: PostResponse) => {\n                          resolve(risposta);\n                        })\n                        .catch(error => {\n                          myReturn = new PostResponse();\n                          myReturn.result = false;\n                          myReturn.message = error.message;\n                          resolve(myReturn);                          \n                        })\n\n\n      }\n      else {\n        myReturn = new PostResponse();\n        myReturn.result = false;\n        myReturn.message = 'Errore preparazione Iscrizione';\n        resolve(myReturn);\n      }\n\n    })\n  }\n\n}\n","import { TypeDefinition, Descriptor, TypeReflector } from './descriptor.model';\r\nimport { MyDateTime } from './mydatetime.model';\r\n\r\n\r\n \r\n  export class IDDocument {\r\n    ID: string;\r\n    \r\n    do_updated: boolean;\r\n    do_loaded: boolean;\r\n    do_inserted: boolean;\r\n    do_deleted: boolean;\r\n    selected: boolean;\r\n\r\n\r\n    //Condizioni di filtro\r\n    _filterConditions:FilterCondition[];\r\n\r\n    //Valori originali\r\n    _original:IDOriginal;\r\n\r\n    //Repository per aggiungere documenti di riferimento con quello in esame\r\n    _repositoryRelDoc: IDRepository[];\r\n\r\n    //Tag documentali\r\n    _tags: IDTag[];\r\n  \r\n    /**\r\n     * \r\n     * @param onlyInstance Non inizializzare con valori predefiniti il documento, crea solo l'istanza\r\n     */\r\n    constructor(onlyInstance?:boolean) {\r\n\r\n        this._filterConditions = [];\r\n        this._original = new IDOriginal();\r\n        this._repositoryRelDoc = [];\r\n        this._tags = [];\r\n\r\n       if (!onlyInstance) {\r\n          this.ID = this.newID();\r\n          this.do_inserted = true;\r\n          this.selected = false;\r\n       }\r\n    }\r\n\r\n    \r\n\r\n    get inserted(): boolean {\r\n      return this.do_inserted;\r\n    }\r\n\r\n    get deleted(): boolean {\r\n      return this.do_deleted;\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca nel documento la proprietà icone o iconasport e ne calcola \r\n     * la stringa esadecimale\r\n     */\r\n    get htmlIconHex() {\r\n      let value = '';\r\n      let valueIcon = '';\r\n      if (this.hasOwnProperty('IDSPORT')) {\r\n        if (this.hasOwnProperty('ICONASPORT')) {\r\n          value = this['ICONASPORT'];\r\n        }\r\n      }\r\n      else if (this.hasOwnProperty('ICONA')) {\r\n        value = this['ICONA'];\r\n      }\r\n\r\n      if (value.length == 0) {\r\n        value = 'e830'\r\n      }\r\n\r\n      valueIcon = '&#x' + value + ';'\r\n  \r\n      return valueIcon;\r\n    }\r\n\r\n    /**\r\n     * Ritorna un array di Type Reflector dei campi \r\n     * che formano l'insieme delle ForeignKeys\r\n     */\r\n    get ForeignKeys(): TypeReflector[] {\r\n      let objDescriptor = this.getDescriptor();\r\n\r\n      return objDescriptor.foreignKeys;\r\n    }\r\n  \r\n    /**\r\n     * Imposta il valore nella chiave primaria\r\n     * @param value Valore Chiave Primaria\r\n     */\r\n    setPrimaryKey(value:any) {\r\n      this.ID = value;\r\n    }\r\n\r\n    /**\r\n     * Ritorna la PrimaryKey del documento\r\n     * @param type = 'value' Torna il fieldValue\r\n     * @param type = 'name' Torna il fieldName\r\n     */\r\n    getPrimaryKey(type:string = 'value'): any {\r\n      \r\n      let objDescriptor: Descriptor;\r\n      let propName = '';\r\n      let retValue = '';\r\n\r\n      objDescriptor = this.getDescriptor();\r\n        if (objDescriptor) {\r\n          propName = objDescriptor.primaryKeyFieldName;\r\n          if (propName) {\r\n\r\n            if (type == 'value') {\r\n\r\n              try {            \r\n                retValue = this[propName];\r\n              } catch (error) {\r\n                retValue = ''  ;\r\n                console.log(error);\r\n              }\r\n            }\r\n            else if (type == 'name') {\r\n              retValue = propName;\r\n            }\r\n\r\n          }\r\n        }\r\n           \r\n        return retValue;\r\n    \r\n    }\r\n\r\n    \r\n    //Generazione GUID\r\n    newID() {\r\n      let strValue = '10000000-1000-4000-8000-100000000000';\r\n      let guid = strValue.replace(/[018]/g, c =>\r\n        (parseInt(c) ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> parseInt(c) / 4).toString(16));\r\n\r\n      guid = guid.toUpperCase();\r\n\r\n      \r\n      return guid;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Metodo Overrable\r\n     */\r\n    getDescriptor(): Descriptor {\r\n      let objDescriptor = new Descriptor();\r\n      objDescriptor.add('ID',TypeDefinition.char);\r\n      return objDescriptor;\r\n    }\r\n\r\n\r\n    /**\r\n     * Converte e formatta un valore in stringa\r\n     * Usato per scriverlo nei parametri di chiamata\r\n     * @param tipo Tipo del dato\r\n     * @param value Valore\r\n     */\r\n    formatValue(tipo: TypeDefinition, value: any): string {\r\n      let strValue = '';\r\n      switch (tipo) {\r\n        case TypeDefinition.char:\r\n            strValue = value;\r\n        break;\r\n      \r\n        case TypeDefinition.date:\r\n            strValue = MyDateTime.formatDateISO(value);\r\n        break;\r\n\r\n        case TypeDefinition.dateTime:\r\n            strValue = MyDateTime.formatDateTimeISO(value);\r\n        break;\r\n\r\n        case TypeDefinition.time:\r\n            strValue = MyDateTime.formatTime(value);\r\n        break;\r\n\r\n        case TypeDefinition.boolean:\r\n            if (value) {\r\n              strValue = '-1'\r\n            }\r\n            else {\r\n              strValue = '0';\r\n            }\r\n        break;\r\n        \r\n        case TypeDefinition.number:\r\n        case TypeDefinition.numberDecimal:\r\n            strValue = value + '';\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return strValue;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Esporta l'oggetto in JSON\r\n     * @param paramExport Oggetto con le caratteristiche esportazione\r\n     * contiene \r\n     *  clearDOProperty Non esporta le proprietà tipiche del documento (selected, do_insert etc)\r\n     *  clearPKProperty Non esporta la Chiave primaria\r\n     *  clearPrivateProperty Non esporta le proprietà private\r\n     *  onlyModified Esporta solo le proprietà diverse dalle original\r\n     *  numLivelli Numero livelli da esportare\r\n     */\r\n    exportToJSON(paramExport: ParamsExport) {\r\n      let _this = this;\r\n      let arProperty = Object.keys(_this);\r\n      //Chiedo il Descrittore della classe\r\n      let objDescriptor = _this.getDescriptor();\r\n      let strJSON = '';\r\n      let doProperty = ['do_updated',' do_loaded','do_inserted','do_deleted','selected'];\r\n      let propExclud = [];\r\n      let row = '';\r\n      let skipAll = false;\r\n      \r\n      if (!paramExport) {\r\n        paramExport = new ParamsExport();\r\n      }\r\n\r\n      // Vuole eliminare le doProperty, le aggiungo all'Array\r\n      if (paramExport.clearDOProperty) {\r\n        //Popolo l'array propExclud con le doProperty\r\n        doProperty.forEach(element => {\r\n          propExclud.push(element);\r\n        });\r\n      }\r\n\r\n      //Se vuole non esportare la chiave primaria la aggiungo all'Array esclusioni\r\n      if (paramExport.clearPKProperty) {\r\n        propExclud.push(this.getPrimaryKey('name'));\r\n      }\r\n\r\n      //Devo esportare solo i documenti modificati e non ci sono modifiche\r\n      if (paramExport.onlyDocModified && !this.isModified(999)) {\r\n        skipAll = true;\r\n      }\r\n\r\n      if (!skipAll) {\r\n        \r\n        //Ciclo sulle proprietà\r\n        arProperty.forEach(element => {\r\n          \r\n          let useElement = true;\r\n          \r\n          //Se devo togliere le proprietà private le elimino\r\n          if (paramExport.clearPrivateProperty && element.startsWith('_')) {\r\n            \r\n            useElement = false;\r\n          \r\n          }\r\n  \r\n          //Controlliamo se il valore è diverso dal valore original\r\n          if (paramExport.onlyPropertyModified) {\r\n            //Chiave primaria devo passarla anche se non modificata\r\n            if (element != this.getPrimaryKey('name')) {\r\n              //Controllo se la proprietà risulta modificata o no\r\n              if (_this.propertyIsModified(element) == false) {\r\n                useElement = false;\r\n              }\r\n            }\r\n          }\r\n  \r\n          if (useElement) {\r\n  \r\n            //Inizio la riga con l'elemento\r\n            row = '\\\"' + element + '\\\"' + ':';\r\n    \r\n            //Proprietà di tipo Array\r\n            if (Array.isArray(_this[element]) == true) {\r\n              //Qui gestisco l'Array\r\n              let arElements = _this[element];\r\n              let strArray = '';\r\n              let strElArray = '';\r\n              \r\n              //Ciclo sugli elementi\r\n              for (let index = 0; index < arElements.length; index++) {\r\n                let element: IDDocument;\r\n                 element = arElements[index];\r\n                 strElArray = element.exportToJSON(paramExport);\r\n\r\n                 if (strElArray && strElArray.trim().length != 0) {\r\n                   if (strArray.length !== 0) {\r\n                      strArray += ', '\r\n                   }\r\n                   strArray += strElArray;\r\n                 }\r\n              }\r\n    \r\n              row += '[' + strArray + ']';\r\n    \r\n              if (strJSON.length !== 0) {\r\n                strJSON += ', ';\r\n              }\r\n    \r\n              strJSON += row;\r\n            }\r\n            else {\r\n              let skip = false;\r\n              //Vuole eliminare le proprietà DO e private e/o le chiavi primarie\r\n              if (propExclud.length !== 0) {\r\n                if (propExclud.includes(element)) {\r\n                  skip = true;\r\n                }\r\n              }\r\n    \r\n              //Proseguo con l'esportazione\r\n              if (!skip) {\r\n    \r\n                  //Chiedo il Tipo del Campo con il descriptor\r\n                  let tipoCampo = objDescriptor.getType(element);\r\n    \r\n                  if (tipoCampo !== TypeDefinition.undefined && (_this[element]!== undefined)) {\r\n    \r\n                    switch (tipoCampo) {\r\n    \r\n                      case TypeDefinition.boolean:\r\n                        row += _this[element];\r\n                        break;\r\n                    \r\n                      case TypeDefinition.number:\r\n                        row += _this[element]; \r\n                        break;\r\n    \r\n                      case TypeDefinition.numberDecimal:\r\n                        row += _this[element]; \r\n                        break;\r\n    \r\n                      case TypeDefinition.time:\r\n                        //E' un orario\r\n                        row += '\\\"' + this.formatDateTimeISO(_this[element]) + '\\\"';\r\n                        break;\r\n    \r\n                      case TypeDefinition.date:\r\n                        //E' una data\r\n                        row += '\\\"' + this.formatDateISO(_this[element]) + '\\\"';\r\n                        break;\r\n    \r\n                      case TypeDefinition.dateTime:\r\n                        //Campo di tipo DATAORA\r\n                        row += '\\\"' + this.formatDateTimeISO(_this[element]) + '\\\"' ;\r\n                        break;\r\n                      case TypeDefinition.char:\r\n                        let valore = _this[element];\r\n                        //Se la stringa contenesse all'interno simboli di \" devono essere esportati come \\\"\r\n                        //Esempio: \"ciao\";\"tuo\" => \\\"ciao\\\";\\\"tuo\\\"\r\n                        valore = valore.replace(/\"/g, \"\\\\\\\"\");\r\n                        row += '\\\"' + valore + '\\\"';\r\n                        \r\n                        break;\r\n    \r\n                      default:\r\n                        row += _this[element];\r\n                        break;\r\n                    }\r\n    \r\n                  } \r\n                  else {\r\n                    row += 'null';\r\n                  }   \r\n                  \r\n                  \r\n                  if (strJSON.length !== 0) {\r\n                    strJSON += ', ';\r\n                  }\r\n    \r\n                  strJSON += row;\r\n              }\r\n    \r\n            }\r\n  \r\n          }\r\n        });\r\n  \r\n        strJSON = '{' + strJSON + '}';\r\n\r\n      }\r\n\r\n      return strJSON;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Ritorna il documento in Stringa JSON\r\n     */\r\n    toJSON() {\r\n      let strJSON = '';\r\n      let _this = {...this};\r\n      let arKeys = Object.keys(_this);\r\n\r\n      /** Ciclo sulle proprietà */\r\n      /* Ho il problema di formattazione Data/Ora che INDE lo vuole come YYYY-MM-DD hh:nn:ss */\r\n      arKeys.forEach(element => {\r\n        if (_this[element] instanceof Date) {\r\n          //Se è di tipo data lo cambio formattandolo in ISODATETIME\r\n          _this[element] = this.formatDateTimeISO(_this[element]);\r\n        }\r\n      });\r\n\r\n      // Ora eseguo lo stringify\r\n      strJSON = JSON.stringify(_this);\r\n\r\n      return strJSON;\r\n    }\r\n\r\n  \r\n     // Imposta le proprietà basiche dell'oggetto via JSON\r\n     setJSONProperty(dataObject: any) {\r\n      let _this = this;\r\n      let arProperty = Object.keys(dataObject);      \r\n\r\n      //Chiedo il Descrittore della classe\r\n      let objDescriptor = _this.getDescriptor();\r\n  \r\n      // Gli elementi di tipo Array non li copio\r\n      arProperty.forEach(element => {\r\n          if (Array.isArray(dataObject[element]) == false) {\r\n\r\n              //Chiedo il Tipo del Campo con il descriptor\r\n              let tipoCampo = objDescriptor.getType(element);\r\n\r\n              if (tipoCampo !== TypeDefinition.undefined) {\r\n                switch (tipoCampo) {\r\n\r\n                  case TypeDefinition.boolean:\r\n                    let value = parseInt(dataObject[element],10);\r\n                    \r\n                    if (value === -1) {\r\n                      _this[element] = true;  \r\n                    }\r\n                    else {\r\n                      _this[element] = false;\r\n                    }\r\n\r\n                    \r\n                    break;\r\n                \r\n                  case TypeDefinition.number:\r\n                    _this[element] = +dataObject[element]; \r\n                    break;\r\n\r\n                  case TypeDefinition.numberDecimal:\r\n                    _this[element] = +dataObject[element]; \r\n                    break;\r\n\r\n                  case TypeDefinition.time:\r\n                    _this[element] = MyDateTime.stringToDateObject(dataObject[element]);\r\n                    break;\r\n\r\n                  case TypeDefinition.date:\r\n                    //E' una data\r\n                    _this[element] = MyDateTime.stringToDateObject(dataObject[element]);\r\n                    break;\r\n\r\n                  case TypeDefinition.dateTime:\r\n                    _this[element] = MyDateTime.stringToDateObject(dataObject[element]);\r\n                    break;\r\n\r\n                  default:\r\n                    _this[element] = dataObject[element] + '';\r\n                    break;\r\n                }\r\n\r\n              }\r\n              \r\n             \r\n          }\r\n          \r\n\r\n      });\r\n\r\n      //Imposto che il documento è originale\r\n      this.setOriginal();\r\n\r\n    }\r\n\r\n    //Formatta una data passata in ISO (Solo la parte data)\r\n    formatDateISO(data: Date) {\r\n      \r\n      let format = MyDateTime.formatDateISO(data);\r\n\r\n      return format;\r\n    }\r\n\r\n    //Formatta una data passata in ISO (Data e Ora)\r\n    formatDateTimeISO(data: Date) {\r\n      let final = MyDateTime.formatDateTimeISO(data);\r\n      return final;\r\n    }\r\n\r\n    /** Imposta il documento Originale come se fosse sul database */\r\n    setOriginal() {\r\n      \r\n      this.do_updated = false;\r\n      this.do_inserted = false;\r\n      this.do_deleted = false;\r\n      this.do_loaded = true;\r\n\r\n      //Imposta il documento come originale\r\n      this._original.setAsOriginal(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Imposta tutti gli elementi come cancellati\r\n     * @param arElements Array di ELementi IDDOcument o che estendono IDDocument\r\n     */\r\n    static setAllDeleting(arElements: IDDocument[]) {\r\n      if (arElements) {\r\n        arElements.forEach(element => {\r\n          element.do_deleted = true;\r\n        });\r\n      }\r\n    }\r\n\r\n    //#region FUNZIONI STATICHE\r\n    \r\n    /**\r\n     * Ritorna TRUE / FALSE a seconda se un elemento è Numerico o No\r\n     * @param value Valore da controllare\r\n     */\r\n    static isNumber(value: string | number): boolean\r\n    {\r\n      return ((value != null) &&\r\n              (value !== '') &&\r\n              !isNaN(Number(value.toString())));\r\n    }\r\n    \r\n    //#endregion\r\n\r\n    //#region REFLECTOR PROPRIETA'\r\n\r\n    /**\r\n     * Tipo della proprietà\r\n     * @param PropertyName Nome della proprietà\r\n     */\r\n    getPropertyType(PropertyName: string): TypeDefinition {\r\n      \r\n      let objDescriptor = this.getDescriptor();\r\n\r\n      return objDescriptor.getType(PropertyName);\r\n\r\n    }\r\n\r\n    /**\r\n     * Ritorna TypeReflector del campo passato come parametro\r\n     * @param fieldName Nome del campo\r\n     */\r\n    getTypeReflectorByFieldName(fieldName: string): TypeReflector {\r\n      let objDescriptor = this.getDescriptor();\r\n\r\n      return objDescriptor.getByFieldName(fieldName);\r\n\r\n    }\r\n\r\n    /**\r\n     * Controlla se il campo è presente nell'istanza\r\n     * @param fieldName Nome del campo richiesto\r\n     */\r\n    propertyInDoc(fieldName: string): boolean {\r\n      let arProperty = Object.keys(this);\r\n      let contain = false;\r\n      if (fieldName && fieldName.length !== 0) {\r\n        contain = arProperty.includes(fieldName);\r\n      }\r\n\r\n      return contain;\r\n\r\n    }\r\n    //#endregion\r\n\r\n\r\n\r\n    /**\r\n     * Controlla se un campo contiene dei dati oppure è vuoto\r\n     * considerando qualsiasi valore undefined, null, nullstring\r\n     * @param fieldName Nome del campo\r\n     */\r\n    propertyIsEmpty(fieldName:string): boolean {\r\n      let inDoc = this.propertyInDoc(fieldName);\r\n      let empty = false;\r\n\r\n      if (inDoc) {\r\n        if (this[fieldName]==undefined || this[fieldName]== null) {\r\n          empty = true;\r\n        }\r\n        else {\r\n          empty = (this[fieldName] + '').length==0?true:false;\r\n        }\r\n      }\r\n      else {\r\n        empty = true;\r\n      }\r\n\r\n      return empty;\r\n    }\r\n\r\n    //#region CONTROLLO MODIFICHE DOCUMENTO\r\n\r\n    /**\r\n     * Controlla se una proprietà risulta modificata\r\n     * @param propertyName Nome Proprietà\r\n     */\r\n    propertyIsModified(propertyName: string): boolean {\r\n      let modified = false;\r\n      let typeProp = this.getTypeReflectorByFieldName(propertyName);\r\n      //Proprietà presente\r\n      if (this.propertyInDoc(propertyName)&&typeProp) {\r\n        if (typeProp.fieldType != TypeDefinition.collection) {\r\n          modified = this._original.propertyIsModified(this, propertyName);\r\n        }\r\n        else {\r\n          //E' una collection\r\n          let arList:IDDocument[] = this[propertyName];\r\n          for (let index = 0; index < arList.length; index++) {\r\n            const elDoc = arList[index];\r\n            modified = elDoc.isModified(10);\r\n            if (modified) {\r\n              //Se modificato esco\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return modified;\r\n    }\r\n\r\n    /**\r\n     * Controlla se il documento è in stato modificato (il documento o i documenti delle sue collection)\r\n     * @param numLivelli NumLivelli = 0 Controlla solo il documento, 1 il documento e il primo livello etc..\r\n     */ \r\n    isModified(numLivelli = 0): boolean {\r\n      let objDescriptor: Descriptor;\r\n      let retModified = false;\r\n\r\n      //Chiedo il descrittore dei campi\r\n      objDescriptor = this.getDescriptor();\r\n\r\n      if (objDescriptor) {\r\n        //Ciclo su tutte le proprietà non di tipo collection\r\n        for (let index = 0; index < objDescriptor.fields.length; index++) {\r\n          const element = objDescriptor.fields[index];\r\n          if (element.fieldType !== TypeDefinition.collection) {\r\n            //Chiedo alla proprietà se è modificata\r\n            retModified = this.propertyIsModified(element.fieldName);\r\n            if (retModified) {\r\n              //Basta che un valore sia modificato e tutto il documento \r\n              //è modificato\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        //Il documento nelle sue proprietà non è modificato\r\n        if (!retModified) {\r\n          //Devo scendere di livello e controllare se sono \r\n          //modificati i figli\r\n          if (numLivelli > 0) {\r\n            //Ciclo ancora sul descrittore\r\n            for (let index = 0; index < objDescriptor.fields.length; index++) {\r\n              const element = objDescriptor.fields[index];\r\n              //Cerco le collection\r\n              if (element.fieldType == TypeDefinition.collection) {\r\n                //il Documento contiene questa collection ?\r\n                if (this.propertyInDoc(element.fieldName)) {\r\n                  if (Array.isArray(this[element.fieldName])) {\r\n                    //Prendo l'array di elementi e ciclo alla ricerca\r\n                    let arElements:IDDocument[] = this[element.fieldName];\r\n\r\n                    //Ciclo sugli elementi dell'array\r\n                    for (let index = 0; index < arElements.length; index++) {\r\n                      const elDoc = arElements[index];\r\n                      retModified = elDoc.isModified(numLivelli - 1);\r\n                      if (retModified) {\r\n                        //Ne basta uno e il documento è modificato\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              \r\n              if (retModified) {\r\n                //Ne basta uno per renderlo modificato\r\n                break;\r\n              }\r\n\r\n            }\r\n          }\r\n        }\r\n        \r\n      }\r\n\r\n\r\n      return retModified;\r\n      \r\n\r\n    }\r\n    //#endregion\r\n\r\n    //#region REPOSITORY REL DOC\r\n    /*\r\n    *  Con il _repositoryRelDoc si consente di includere nell'oggetto altri documenti che hanno un nesso con l'attuale\r\n    *  Documenti arrivati da una operazione di getRelDoc ad esempio\r\n    *  \r\n    * addToRepositoryRelDoc(document: IDDocument) => Si aggiunge un documento al repository (se il documento per chiave primaria esiste gia aggiorna)\r\n    * findInRepositoryRelDoc(prOrSeq: string || []) => Torna il documento del repository cercandolo per chiave primaria, oppure per sequenza campi\r\n    * getRelDocProperty(prOrSeq: string || [], fieldName: string) => Torna il valore della proprietà richiesta del documento con primaryKey passata o sequenza campi\r\n    */\r\n\r\n    /**\r\n     * Aggiunge, se non presente il documento alla repositoryRelDoc\r\n     * @param document Documento da includere\r\n     * @param seqFields Array con la sequenza dei campi usati per il recupero documentale\r\n     */\r\n    addToRepositoryRelDoc(document: IDDocument, seqFields?:string[]): void {\r\n      let docExist: IDDocument;\r\n      let identity = '';\r\n\r\n      //Documento da aggiungere\r\n      if (document) {\r\n        //Aggiungo con una sequenza \r\n        if (seqFields && seqFields.length != 0) {\r\n          identity = seqFields.toString();\r\n        }\r\n        else {\r\n          //Aggiungo per primaryKey\r\n          //Chiedo la PrimaryKey\r\n          identity = document.getPrimaryKey();  \r\n        }\r\n\r\n        //Cerco se è già nel repository\r\n        if (identity && identity.length != 0) {\r\n          docExist = this.getDocInRepository(identity);\r\n        }\r\n\r\n        //Esiste lo aggiorno\r\n        if (docExist) {\r\n          docExist = document;\r\n        }\r\n        else {\r\n\r\n          let newRep = new IDRepository();\r\n          newRep.relDoc = document;\r\n\r\n          if (seqFields && seqFields.length != 0) {\r\n              newRep.seqFields = seqFields;\r\n          }\r\n\r\n          this._repositoryRelDoc.push(newRep);\r\n        }\r\n        \r\n      }\r\n    }\r\n\r\n    /**\r\n     * Cerca un documento nel repository o per sequenza di campi o per chiave primaria\r\n     * @param pkOrSeq String PrimaryKey oppure Array con la Sequenza\r\n     */\r\n    getDocInRepository(pkOrSeq:any):IDDocument {\r\n\r\n      let docReturn: IDDocument;\r\n      let identity: string;\r\n\r\n      if (pkOrSeq) {\r\n        if (Array.isArray(pkOrSeq)) {\r\n          identity = pkOrSeq.toString();\r\n        }\r\n        else {\r\n          identity = pkOrSeq;\r\n        }\r\n\r\n        if (identity && identity.length != 0) {\r\n          //Ricerchiamo all'interno del repository\r\n          for (let index = 0; index < this._repositoryRelDoc.length; index++) {\r\n            const element = this._repositoryRelDoc[index];\r\n            \r\n            //Documento trovato lo ritorno\r\n            //FIXME aggiunta seconda condizione, da vedere se va tutto bnene\r\n            if (identity == element.identifier || identity == element.relDoc.ID) {\r\n                docReturn = element.relDoc;\r\n                break;\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n      return docReturn;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ricerca tra i documenti nel repository, il documento con la primaryKey passata e ritorna il valore della proprietà indicata\r\n     * @param pkOrSeq  Chiave Primaria documento oppure Array con la SeqFields esempio ['IDLOCATION','IAREA']\r\n     * @param fieldName Nome della proprietà da decodificare\r\n     */\r\n    getDocPropertyInRepository(pkOrSeq: any, fieldName: string): any {\r\n      let relDoc: IDDocument;\r\n      let valRet: any;\r\n      let identity = '';\r\n\r\n      if (pkOrSeq && fieldName && fieldName.length != 0) {\r\n        //Identita di un Documento Correlato è o la chiave primaria o la sequenza dei campi di ricerca\r\n        if (Array.isArray(pkOrSeq)) {\r\n          identity = pkOrSeq.toString();\r\n        }\r\n        else {\r\n          identity = pkOrSeq;\r\n        }\r\n\r\n        //Con una identity cerco il documento\r\n        if (identity) {\r\n          relDoc = this.getDocInRepository(identity);\r\n\r\n        }\r\n\r\n        //Se è presente il documento, ricavo la proprietà\r\n        if (relDoc) {\r\n          let inDoc = relDoc.propertyInDoc(fieldName);\r\n\r\n          if (inDoc) {\r\n            valRet = relDoc[fieldName];\r\n          }\r\n        }\r\n      }\r\n\r\n      return valRet;\r\n    }\r\n\r\n\r\n    //#endregion\r\n\r\n    //#region JSON MODIFICHE\r\n    /**\r\n     * UTILIZZATO PRIMA DELLE CREAZIONE DELLA LOGICA ORIGINAL\r\n     * \r\n     * L'istanza documento viene popolata con la CHIAVE PRIMARIA \r\n     * e tutte le proprietà che risultano presenti in docActual ma con un valore modificato in docModify\r\n     * L'istanza del documento puo' essere usata per costruire un JSON di Aggiornamento verso il server\r\n     * da includere nel body\r\n     * Documento Attuale e Documento Modificato non verranno alterati dall'operazione\r\n     * Ritorna TRUE se ci sono proprietà modificate\r\n     * @param docActual Documento Attuale\r\n     * @param docModify Documento Modificato\r\n     */\r\n    setWithChanges(docActual: IDDocument, docModify: IDDocument): boolean {\r\n      let hasModifiche = false;\r\n      let _this = this;\r\n\r\n      // La chiave primaria viene sempre copiata\r\n      _this.ID = docActual.ID;\r\n\r\n      //Chiedo il Descrittore della classe\r\n      let objDescriptor = _this.getDescriptor();\r\n\r\n      /**\r\n       * Ciclo sui campi del documento\r\n       */\r\n      objDescriptor.fields.forEach(field => {\r\n        \r\n        // Per includere il campo \r\n        // 1) Non deve essere una collection\r\n        // 2) Non deve essere un campo di Servizio documentale ID, do_deleted etc \r\n        // 3) Deve esistere sul server\r\n        if (field.fieldType !== TypeDefinition.collection && !field.serviceField() && field.nativeField()) {\r\n          // Il documento con le modifiche possiede il campo\r\n          if (docModify.hasOwnProperty(field.fieldName)) {\r\n            // Il valore è differente\r\n            if (docActual[field.fieldName] !== docModify[field.fieldName]) {\r\n              //Applico la modifica\r\n              _this[field.fieldName] = docModify[field.fieldName];\r\n              hasModifiche = true;\r\n            }\r\n          }\r\n        }\r\n      })\r\n      \r\n \r\n\r\n      return hasModifiche;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Modificatore dell'esportazione JSON per le Date\r\n     * @param key Chiave\r\n     * @param value Valore\r\n     */\r\n    JSONReplacer(key: any, value: any) {\r\n      if (value instanceof Date ) {\r\n        return this.formatDateTimeISO(value);\r\n      }\r\n\r\n      return value;\r\n    }\r\n    //#endregion\r\n\r\n\r\n    //#region DECODIFICA PROPRIETA\r\n\r\n    //Esegue la decodifica della proprieta\r\n    //Tutte le proprietà hanno la chiave \r\n    //in un campo denominato IDXYZ \r\n    //e decodificate in campi _DESCRXYZ\r\n\r\n    /**\r\n     * \r\n     * @param propertyToDecode Nome della proprietà da decodificare\r\n     * @param listDecode Lista con gli elementi\r\n     * @param propertyLookup Nome della proprieta a cui attingere la decodifica\r\n     */\r\n    lookup(propertyToDecode: string, listDecode: any[], propertyLookup: string) {\r\n      let namePropertyIDX = propertyToDecode;\r\n      let namePropertyDESCR = '_DESCR' +  namePropertyIDX.substring(2, namePropertyIDX.length);\r\n      let _this = this;\r\n      \r\n\r\n      //Proprieta Indice e Descrizione presenti\r\n      if (_this.hasOwnProperty(namePropertyIDX) && _this.hasOwnProperty(namePropertyDESCR)) {\r\n        if (listDecode && propertyLookup) {\r\n\r\n          let element = listDecode.find(value => {\r\n            return value.ID == _this[namePropertyIDX]\r\n          });\r\n\r\n          if (element) {\r\n            if (element.hasOwnProperty(propertyLookup)) {\r\n              _this[namePropertyDESCR] = element[propertyLookup];\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n      \r\n\r\n    }\r\n    //#endregion\r\n\r\n    //#region CONDITION\r\n\r\n    /**\r\n     * Aggiunge una condizione di filtro differente dalla semplice uguaglianza\r\n     * @param operator    Operatore = > <\r\n     * @param fieldName   Nome Campo\r\n     * @param listOrValue Solo per uguaglianza è possibile indicare un array con i valori da mettere in OR\r\n     */\r\n    addFilterCondition(operator: OperatorCondition, fieldName: string, listOrValue?:any[]) {\r\n      if (fieldName) {\r\n\r\n        let objCondition = new FilterCondition(operator, fieldName, listOrValue);\r\n        this._filterConditions.push(objCondition);\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca se nelle Condizioni di Filtro è presente il campo e ne ritorna l'oggetto FilterCondition\r\n     * @param fieldName Nome del campo\r\n     */\r\n    getFilterConditionByFieldName(fieldName: string): FilterCondition {\r\n      let objFilter: FilterCondition;\r\n\r\n      //Cerchiamo nell'array delle condizioni\r\n      objFilter = this._filterConditions.find(element => {\r\n        return element.fieldName == fieldName;\r\n      });\r\n\r\n      return objFilter;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna l'operatore della condizione di Filtro impostata nel campo\r\n     * Di Default viene tornata sempre l'uguaglianza\r\n     * @param fieldName Nome del campo\r\n     */\r\n    getFilterOperatorByFieldName(fieldName: string): OperatorCondition {\r\n      let objFilter: FilterCondition;\r\n      let operator: OperatorCondition = OperatorCondition.uguale;\r\n\r\n\r\n      if (fieldName && fieldName.length !== 0) {\r\n\r\n        //Chiedo la condizione di filtro se presente\r\n        objFilter = this.getFilterConditionByFieldName(fieldName);\r\n        //Se presente recupero l'operatore della condizione\r\n        if (objFilter) {\r\n          operator = objFilter.operator;\r\n        }\r\n      }\r\n      \r\n\r\n      return operator;\r\n    }\r\n    \r\n    //#endregion\r\n\r\n    \r\n    //#region TAG DOCUMENTALI\r\n    public setTagValue(key:string, value:any) {\r\n      let idTag: IDTag;\r\n      if (key && key.length !== 0) {\r\n        idTag = this._findTag(key);\r\n        if (idTag) {\r\n          idTag.value = value;\r\n        }\r\n        else {\r\n          idTag = new IDTag();\r\n          idTag.key = key;\r\n          idTag.value = value;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getTagValue(key:string): any {\r\n      let idTag: IDTag;\r\n      let retValue: any;\r\n\r\n      if (key && key.length !== 0) {\r\n        idTag = this._findTag(key);\r\n        if (idTag) {\r\n          retValue = idTag.value;\r\n        }\r\n      }\r\n\r\n      return retValue;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param key Chiave ricercata\r\n     */\r\n    private _findTag(key:string):IDTag {\r\n      let idTag: IDTag;\r\n      if (this._tags && key && key.length !== 0) {\r\n\r\n        idTag = this._tags.find(element => {\r\n          return element.key == key;\r\n        });\r\n\r\n      }\r\n      return idTag;\r\n    }\r\n    //#endregion\r\n\r\n  }\r\n\r\n  export class ParamsExport {\r\n    clearDOProperty: boolean; //Non esporta le proprietà do_inserted, do_deleted\r\n    clearPKProperty: boolean; //Non esporta la chiave primaria \r\n    clearPrivateProperty: boolean; //Non esporta le proprietà private identificate da _ \r\n    onlyDocModified: boolean; //Esporta solo i documenti modificati\r\n    onlyPropertyModified: boolean;     //Esporta solo le proprietà modificate oppure tutte\r\n    numLivelli: number; //Numero livello di esportazione\r\n\r\n\r\n\r\n    constructor() {\r\n      this.numLivelli = 999;\r\n      this.onlyPropertyModified = false;\r\n      this.onlyDocModified = false;\r\n      this.clearDOProperty = false;\r\n      this.clearPKProperty = false;\r\n      this.clearPrivateProperty = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Classe repository per i documenti correlati\r\n   */\r\n  export class IDRepository {\r\n    \r\n    seqFields: string[];\r\n    relDoc: IDDocument;\r\n\r\n    constructor() {\r\n      this.seqFields = [];\r\n      \r\n    }\r\n\r\n    /**\r\n     * Ritorna la primary Key del documento contenuto\r\n     */\r\n    get primaryKey(): string {\r\n      let propValue = '';\r\n      if (this.relDoc) {\r\n        propValue = this.relDoc.getPrimaryKey()\r\n      }\r\n      \r\n      return propValue;\r\n    }\r\n\r\n    //Ritorna l'identificatore del documento\r\n    get identifier(): string {\r\n      let ident = '';\r\n      //Se è presente una sequenza, l'identificatore è la sequenza\r\n      if (this.seqFields && this.seqFields.length !== 0) {\r\n        ident = this.seqFields.toString();\r\n      }\r\n      else {\r\n        ident = this.primaryKey;\r\n      }\r\n\r\n      return ident;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifica alcune condizioni multiple\r\n   */\r\n  export class FieldOrCondition {\r\n    fieldName: string;\r\n    value: any[];\r\n  }\r\n\r\n  /**\r\n   * Classe di Condizioni di filtro\r\n   */\r\n  export class FilterCondition {\r\n    operator: OperatorCondition;\r\n    fieldName: string;\r\n    //Valori da mettere in OR (viene applicato sempre con operatore di uguaglianza)\r\n    private _listOrValue: any[];\r\n    \r\n    get listOrValue(): any[] {\r\n      return this._listOrValue;\r\n    }\r\n\r\n    set listOrValue(value: any[]) {\r\n      this._listOrValue = value;\r\n    }\r\n\r\n    constructor(operator: OperatorCondition, fieldName: string, listOrValue: any[]) {\r\n      this.fieldName = fieldName;\r\n      this.operator = operator;\r\n      this._listOrValue = [];\r\n\r\n      //Se ho valori li imposto\r\n      if (listOrValue) {\r\n        this._listOrValue = listOrValue;\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Insieme delle Proprietà Originali di un documento\r\n   */\r\n  export class IDOriginal {\r\n    private _propOriginals: IDProperty[];\r\n\r\n    \r\n    public get propOriginals() : IDProperty[] {\r\n      return this._propOriginals\r\n    }\r\n\r\n    constructor () {\r\n      this._propOriginals = [];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param name Nome Proprieta\r\n     * @param value Valore\r\n     */\r\n    private setOriginalProperty(name: string, value: any): void {\r\n      let prop: IDProperty;\r\n      if (name) {\r\n        prop = this.findPropertyByName(name);\r\n\r\n        //Se non lo trovo, creo la proprieta e aggiuno\r\n        if (!prop) {\r\n          prop = new IDProperty();\r\n          prop.name = name;\r\n          this._propOriginals.push(prop);\r\n        }\r\n\r\n        //Modifico il valore\r\n        prop.value = value;\r\n\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Reinizializza l'array originals\r\n     */\r\n    private clearPropOriginal(): void {\r\n      this._propOriginals = [];\r\n    }\r\n\r\n    /**\r\n     * Cerca una proprietà per nome\r\n     */\r\n    private findPropertyByName(name: string): IDProperty {\r\n      let prop: IDProperty;\r\n\r\n      if (name) {\r\n        prop = this._propOriginals.find(element => {\r\n          return element.name == name;\r\n        });\r\n      }\r\n\r\n      return prop;\r\n    }\r\n\r\n    /**\r\n     * Controlla se una proprietà risulta modificata\r\n     * @param propertyName Nome Proprietà\r\n     */\r\n    propertyIsModified(document:IDDocument, propertyName: string): boolean {\r\n      let modified = false;\r\n      let propOriginal: IDProperty;\r\n      if (document && propertyName && propertyName.length != 0) {\r\n        propOriginal = this.findPropertyByName(propertyName);\r\n        //Se ho original posso controllare\r\n        if (propOriginal) {\r\n          try {\r\n            if (document[propertyName] != propOriginal.value) {\r\n              modified = true;\r\n            }\r\n          } catch (error) {\r\n              console.error(error);\r\n          }\r\n        }\r\n      }\r\n\r\n      return modified;\r\n    }\r\n\r\n    /**\r\n     * Richiesta di rendere original un documento\r\n     * @param document Documento\r\n     */\r\n    public setAsOriginal(document: IDDocument): void {\r\n      let objDescriptor: Descriptor;\r\n\r\n      if (document) {\r\n\r\n        this.clearPropOriginal();\r\n\r\n        objDescriptor = document.getDescriptor();\r\n\r\n        if (objDescriptor) {\r\n\r\n          //Ciclo sui campi del documento\r\n          objDescriptor.fields.forEach (elField => {\r\n            //Se non sono collection\r\n            if (elField.fieldType != TypeDefinition.collection) {\r\n              //Controllo che il documento contenga la proprietà\r\n              if (document.propertyInDoc(elField.fieldName)) {\r\n                //Contiene la proprietà me la segno come Original\r\n                this.setOriginalProperty(elField.fieldName, document[elField.fieldName]);\r\n              }\r\n              else {\r\n                //Non la contiene metto null come original\r\n                this.setOriginalProperty(elField.fieldName, null);\r\n              }\r\n            }\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  /**\r\n   * Proprietà di un documento\r\n   */\r\n  export class IDProperty {\r\n    private _name: string;\r\n    private _value: any;\r\n\r\n    \r\n    public get value() : any {\r\n      return this._value;\r\n    }\r\n\r\n    \r\n    public set value(v : any) {\r\n      this._value = v;\r\n    }\r\n    \r\n    \r\n    public get name() : string {\r\n      return this._name;\r\n    }\r\n\r\n    \r\n    public set name(v : string) {\r\n      this._name = v;\r\n    }\r\n    \r\n    \r\n    \r\n  }\r\n\r\n  /**\r\n   * Classe dei tag documentali\r\n   */\r\n  export class IDTag {\r\n    key: string;\r\n    value: any;\r\n  }\r\n\r\n  /**\r\n   * Operatori delle condizioni\r\n   */\r\n  export enum OperatorCondition {\r\n    uguale = '',\r\n    minore = '<',\r\n    maggiore = '>'\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  ","import { Injectable } from '@angular/core';\r\nimport {Plugins, CameraResultType, CameraPhoto, CameraSource } from '@capacitor/core';\r\n\r\n\r\nconst {Camera, Filesystem, Storage} = Plugins;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PhotoService {\r\n\r\n  private PHOTO_STORAGE: string = 'photos';\r\n  \r\n  constructor() { }\r\n\r\n\r\n\r\n   /**\r\n    * \r\n    * @param typePhoto Tipo della foto\r\n    * @param idPhoto Nel caso di foto profilo è IDUtente\r\n    * @return DataUrl memorizzato\r\n    */\r\n   public takePicure(typePhoto: PhotoType, idPhoto: string):Promise<string>{\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n      \r\n      Camera.getPhoto({\r\n        resultType: CameraResultType.DataUrl,\r\n        source: CameraSource.Prompt,\r\n        quality: 100\r\n      })\r\n      .then((data:CameraPhoto) => {\r\n  \r\n        let myImageDataUrl:string  = data.dataUrl;\r\n  \r\n        //Salvo nello Storage\r\n        this.storageSave(myImageDataUrl, typePhoto, idPhoto)\r\n                .then(() => {\r\n                  //Salvataggio corretto, ritorno il dataUrl\r\n                  resolve(myImageDataUrl);\r\n                })\r\n                .catch(error => {\r\n                  reject(error);\r\n                })\r\n      })\r\n    })\r\n    \r\n\r\n   }\r\n\r\n   /**\r\n    * Salvataggio di un DataURL nello storage\r\n    * @param typePhoto Tipo della foto\r\n    * @param idPhoto Identificativo\r\n    */\r\n   storageSave(dataUrlPhoto: string, typePhoto:PhotoType, idPhoto:string):Promise<void> {\r\n    let keyStorage = this.PHOTO_STORAGE + '_' + typePhoto + '_' + idPhoto;\r\n    return new Promise<void>((resolve, reject) => {\r\n      \r\n      let myPhoto: IPhoto = {\r\n        type: typePhoto,\r\n        dataUrl: dataUrlPhoto\r\n      }\r\n\r\n      \r\n      Storage.set({\r\n        key: keyStorage,\r\n        value: JSON.stringify(myPhoto)\r\n      })\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      })\r\n    })\r\n   }\r\n\r\n   /**\r\n    * Recupero di un DATAURL dallo storage\r\n    * @param typePhoto Tipo della foto\r\n    * @param idPhoto Identificativo\r\n    * @returns \r\n    */\r\n   storageLoad(typePhoto:PhotoType, idPhoto:string):Promise<string> {\r\n    let keyStorage = this.PHOTO_STORAGE + '_' + typePhoto + '_' + idPhoto;\r\n\r\n\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n      Storage.get({\r\n        key: keyStorage\r\n      })\r\n      .then(data => {\r\n\r\n        let myPhoto:IPhoto = JSON.parse(data.value)\r\n\r\n        resolve(myPhoto.dataUrl);\r\n\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      })\r\n\r\n    })\r\n   }\r\n\r\n  \r\n}\r\n\r\nexport interface IPhoto {\r\n  type: PhotoType;\r\n  dataUrl: string;\r\n}\r\n\r\nexport enum PhotoType {\r\n  account = 10\r\n}\r\n\r\n\r\n","import {Sport} from '../../models/sport.model';\r\nimport {Corso} from '../../models/corso.model';\r\nimport { Area } from 'src/app/models/area.model';\r\nimport { Gruppo } from 'src/app/models/gruppo.model';\r\nimport { CampoSport } from 'src/app/models/camposport.model';\r\nimport { AperturaLocation } from 'src/app/models/aperturalocation.model';\r\nimport { Account } from 'src/app/models/account.model';\r\nimport { AreaLink } from 'src/app/models/arealink.model';\r\nimport { Campo } from 'src/app/models/campo.model';\r\nimport { CategoriaEta } from 'src/app/models/categoriaeta.model';\r\nimport { CorsoProgramma } from 'src/app/models/corsoprogramma.model';\r\nimport { Livello } from 'src/app/models/livello.model';\r\nimport { Location } from 'src/app/models/location.model';\r\nimport { LocationImage } from 'src/app/models/locaton-image.model';\r\nimport { NewsEvento } from 'src/app/models/newsevento.model';\r\nimport { PianificazioneCorso } from 'src/app/models/pianificazionecorso.model';\r\nimport { Prenotazione } from 'src/app/models/prenotazione.model';\r\nimport { PrenotazionePianificazione } from 'src/app/models/prenotazionepianificazione.model';\r\nimport { Utente } from 'src/app/models/utente.model';\r\nimport { UtenteIscrizione } from 'src/app/models/utenteiscrizione.model';\r\nimport { UtenteLivello } from 'src/app/models/utentelivello.model';\r\nimport { UtentePrenotazione } from 'src/app/models/utenteprenotazione.model';\r\nimport { Impegno } from 'src/app/models/impegno.model';\r\nimport { AreaPaymentSetting } from 'src/app/models/areapaymentsetting.model';\r\nimport { AccountOperationResponse, AccountRequestCode, AccountVerifyCode } from 'src/app/models/accountregistration.model';\r\nimport { OccupazioneCampi } from 'src/app/models/occupazionecampi.model';\r\nimport { TipoDocumentazione } from 'src/app/models/tipodocumentazione.model';\r\nimport { Documentazione } from 'src/app/models/documentazione.model';\r\nimport { CorsoPresenze } from 'src/app/models/corsopresenze.model';\r\nimport { MasterDocumento } from 'src/app/models/ricevuta.model';\r\nimport { Articolo } from 'src/app/models/articolo.model';\r\nimport { ArticoloColore } from 'src/app/models/articolocolore.model';\r\nimport { ArticoloTaglieMisura } from 'src/app/models/articolotagliemisura.model';\r\nimport { UnitaMisura } from 'src/app/models/unitamisura.model';\r\nimport { Valuta } from 'src/app/models/valuta.model';\r\nimport { DataChiusura } from 'src/app/models/datachiusura.model';\r\nimport { CorsoAllegato } from 'src/app/models/corsoallegato.model';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//https://medium.com/@buddhi.amigo/how-to-create-typescript-classes-dynamically-b29ca7767ee5\r\n\r\nexport const Structure: any = {\r\n    Sport,\r\n    Corso,\r\n    Area,\r\n    AreaLink,\r\n    AreaPaymentSetting,\r\n    Gruppo,\r\n    CampoSport,\r\n    AperturaLocation,\r\n    Account,\r\n    Campo,\r\n    CategoriaEta,\r\n    CorsoProgramma,\r\n    Livello,\r\n    Location, \r\n    LocationImage,\r\n    NewsEvento,\r\n    PianificazioneCorso,\r\n    Prenotazione,\r\n    PrenotazionePianificazione,\r\n    Utente,\r\n    UtenteIscrizione,\r\n    UtenteLivello,\r\n    UtentePrenotazione,\r\n    Impegno,\r\n    AccountOperationResponse , \r\n    AccountRequestCode, \r\n    AccountVerifyCode,\r\n    OccupazioneCampi,\r\n    TipoDocumentazione,\r\n    Documentazione,\r\n    CorsoPresenze,\r\n    MasterDocumento,\r\n    Articolo,\r\n    ArticoloColore,\r\n    ArticoloTaglieMisura,\r\n    Valuta,\r\n    UnitaMisura,\r\n    DataChiusura,\r\n    CorsoAllegato\r\n}\r\n\r\nexport class DynamicClass {\r\n\r\n    constructor(className: string, opts?: any) {\r\n        if (Structure[className] === undefined || Structure[className] === null) {\r\n            throw new Error(`Class type of \\'${className}\\' is not in the store`);\r\n        }\r\n        return new Structure[className](opts);\r\n\r\n        \r\n        \r\n    }\r\n\r\n    \r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoSocieta, TipoVerificaAccount } from '../models/valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { PrivateImage } from './privateimage.model';\r\nimport { DataChiusura } from './datachiusura.model';\r\n\r\n\r\n\r\n\r\nexport class Gruppo extends IDDocument {\r\n\r\n    DENOMINAZIONE: string;\r\n    INDIRIZZO: string;\r\n    CAP: string;\r\n    COMUNE: string;\r\n    PROVINCIA: string;\r\n    ISOSTATO: string;\r\n    CODICEFISCALE: string;\r\n    PARTITAIVA: string;\r\n    APPID: string;\r\n    PREFIXDOMAIN: string;\r\n    TIPOGRUPPO: TipoSocieta;\r\n    URLPRIVACY: string;\r\n    PRIVATEIMAGE: PrivateImage[];\r\n    APPFLAGREGISTRAZIONE: boolean;\r\n    APPTIPOVERIFICA: TipoVerificaAccount;\r\n    FLAGAPPSHOPONLINE: boolean;\r\n    DATECHIUSURE: DataChiusura[];\r\n    \r\n  \r\n    constructor(onlyInstance?:boolean) {\r\n      super(onlyInstance);\r\n      \r\n      this.PRIVATEIMAGE = [];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta le proprietà del documento\r\n     * @param data JSON Ricevuto\r\n     */\r\n    setJSONProperty(data: any) {\r\n      super.setJSONProperty(data);\r\n      \r\n      //Imposto le collection\r\n      this.setCollection(data);\r\n\r\n      //Imposto che il documento è originale\r\n      this.setOriginal();\r\n    }\r\n\r\n    /**\r\n     * Imposto le collection del doumento\r\n     * @param data JSON Ricevuto \r\n     */\r\n    setCollection(data: any) {\r\n      this.PRIVATEIMAGE = [];\r\n\r\n      /** Ho delle immagini */\r\n      if (data.PRIVATEIMAGE) {\r\n        this.setCollectionprivateImage(data);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Collection PRIVATEIMAGE\r\n     * @param data JSON Ricevuto\r\n     */\r\n    setCollectionprivateImage(data: any) {\r\n      data.PRIVATEIMAGE.forEach(element => {\r\n\r\n        let newPrivateImage = new PrivateImage();\r\n        newPrivateImage.setJSONProperty(element);\r\n        this.PRIVATEIMAGE.push(newPrivateImage);\r\n      });\r\n\r\n    }\r\n\r\n        /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['DENOMINAZIONE',\r\n                    'INDIRIZZO',\r\n                    'CAP',\r\n                    'COMUNE',\r\n                    'PROVINCIA',\r\n                    'ISOSTATO',\r\n                    'CODICEFISCALE',\r\n                    'PARTITAIVA',\r\n                    'APPID',\r\n                    'PREFIXDOMAIN',\r\n                    'URLPRIVACY'                   \r\n                    ];\r\n    let arNumber = ['TIPOGRUPPO','APPTIPOVERIFICA'];\r\n    let arBoolean = ['APPFLAGREGISTRAZIONE','FLAGAPPSHOPONLINE'];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = ['PRIVATEIMAGE'];\r\n\r\n    objDescriptor.className = 'Gruppo';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'GRUPPOSPORTIVO';\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n    \r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    return objDescriptor;\r\n  }\r\n\r\n  isClosedFromCalendar(){\r\n    \r\n  }\r\n\r\n  get needEmailVerify(){\r\n    if(this.APPTIPOVERIFICA == TipoVerificaAccount.verificaemail || this.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  get needMobileVerify(){\r\n    if(this.APPTIPOVERIFICA == TipoVerificaAccount.verificasms || this.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n","import { Descriptor, TypeDefinition } from \"../library/models/descriptor.model\";\r\nimport { IDDocument } from \"../library/models/iddocument.model\";\r\nimport { IscrizioneIncasso } from \"./iscrizioneincasso.model\";\r\nimport { Sesso, StatoIscrizione, TipoPrezzo } from \"./valuelist.model\";\r\n\r\nexport class IscrizioneCorso extends IDDocument {\r\n\r\n    IDCORSO:               string; //\r\n    IDUTENTE:              string; //\r\n    DATAISCRIZIONE:        Date;\r\n    ANNOISCRIZIONE:        number;\r\n    NOMINATIVO:            string;\r\n    EMAIL:                 string;\r\n    MOBILENUMBER:          string;\r\n    NOTES:                 string;\r\n    IDSPORT:               string;\r\n    IDAREAOPERATIVA:       string; //\r\n    IDLOCATION:            string; //\r\n    IDCAMPO:               string;\r\n    DATAINIZIO:            Date;\r\n    CODICEALFA:            string;\r\n    CODICEINT:             number;\r\n    NATOIL:                Date;\r\n    SESSO:                 Sesso;\r\n    DATAFINEISCRIZIONE:    Date;    \r\n    STATOISCRIZIONE:       StatoIscrizione;\r\n    IDTIPOPAGAMENTO:       string;\r\n    \r\n    TIPOPREZZO:            TipoPrezzo;\r\n    IMPORTO:               number;\r\n    IDCODICEIMPOSTA:       string;\r\n    IDVALUTA:              string;\r\n    IMPOSTA:               number;\r\n    TOTALE:                number;\r\n    RESIDUO:               number;\r\n    INCASSATO:             number;\r\n\r\n\r\n    ISCRIZIONEINCASSO:     IscrizioneIncasso[];\r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n\r\n        this.ISCRIZIONEINCASSO = [];\r\n  \r\n    } \r\n      \r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDCORSO',\r\n                        'IDUTENTE',\r\n                        'NOMINATIVO',\r\n                        'EMAIL',\r\n                        'MOBILENUMBER',\r\n                        'NOTES',\r\n                        'IDSPORT',\r\n                        'IDAREAOPERATIVA',\r\n                        'IDLOCATION',\r\n                        'IDCAMPO',\r\n                        'CODICEALFA',\r\n                        'IDTIPOPAGAMENTO',\r\n                        'IDCODICEIMPOSTA',\r\n                        'IDVALUTA'\r\n                        ];\r\n        let arNumber = ['ANNOISCRIZIONE',\r\n                        'CODICEINT',\r\n                        'SESSO',\r\n                        'STATOISCRIZIONE',\r\n                        'TIPOPREZZO'\r\n                       ];\r\n        let arDecimal = ['IMPORTO',\r\n                        'IMPOSTA',\r\n                        'TOTALE',\r\n                        'RESIDUO',\r\n                        'INCASSATO'];\r\n        let arBoolean = [];\r\n        let arDate = ['DATAISCRIZIONE','DATAFINEISCRIZIONE','DATAINIZIO'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n    \r\n        objDescriptor.className = 'IscrizioneCorso';\r\n        objDescriptor.classWebApiName = 'ISCRIZIONECORSO';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.describeField = 'DENOMINAZIONE';\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    \r\n        objDescriptor.addCollection('ISCRIZIONEINCASSO','IscrizioneIncasso','IDISCRIZIONECORSO');\r\n        \r\n    \r\n    \r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        objDescriptor.setRelation('IDCAMPO','Campo');\r\n   \r\n    \r\n        \r\n    \r\n        return objDescriptor;\r\n    }    \r\n    \r\n    \r\n\r\n/**\r\n * Imposta le proprietà nell'oggetto\r\n * @param data JSON Received\r\n */\r\n    setJSONProperty(data: any) {\r\n        //Chiamo IDDOcument\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n\r\n        this.setOriginal();\r\n\r\n    }  \r\n    \r\n    \r\n    /**\r\n     * Sistema le collection se presenti\r\n     * @param data JSON Ricevuto\r\n     */\r\n     setCollection(data: any) {\r\n        this.ISCRIZIONEINCASSO = [];\r\n  \r\n        if (data.ISCRIZIONIINCASSI) {\r\n          this.setCollectionIscrizioniIncassi(data.ISCRIZIONIINCASSI);\r\n        }\r\n  \r\n\r\n        \r\n      }   \r\n      \r\n    /**\r\n     * Imposta la collection ISCRIZIONIINCASSI\r\n     * @param arIncassi JSON Ricevuti\r\n     */\r\n    setCollectionIscrizioniIncassi(arIncassi: any[]) {\r\n\r\n        this.ISCRIZIONEINCASSO = [];\r\n  \r\n        if (arIncassi) {\r\n\r\n          arIncassi.forEach(element => {\r\n            \r\n            //Ricerco se esiste già\r\n            let newIscrizioneIncasso = this.getIncassoByID(element.ID);\r\n  \r\n            //Non esiste lo creo nuovo\r\n            if (!newIscrizioneIncasso) {\r\n  \r\n              newIscrizioneIncasso = new IscrizioneIncasso();\r\n              newIscrizioneIncasso.setJSONProperty(element);\r\n              this.ISCRIZIONEINCASSO.push(newIscrizioneIncasso);\r\n  \r\n            }\r\n            else {\r\n              //Reimposto i valori\r\n              newIscrizioneIncasso.setJSONProperty(element);\r\n            }\r\n  \r\n  \r\n          })\r\n        }\r\n      }    \r\n      \r\n      \r\n    /**\r\n     * Ritorna l'elemento di IscrizioneIncasso che corrisponde con ID\r\n     */\r\n     getIncassoByID(idIscrizioneIncasso: string): IscrizioneIncasso {\r\n\r\n        //Ricerco l'elemento richiesto\r\n        let existIscrizioneIncasso = this.ISCRIZIONEINCASSO.find(elIscrizioneIncasso => {\r\n          return elIscrizioneIncasso.ID == idIscrizioneIncasso\r\n        });\r\n\r\n\r\n        return existIscrizioneIncasso;\r\n    }      \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoSport} from '../models/valuelist.model';\r\nimport { Livello } from '../models/livello.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\n\r\n\r\nexport class Sport extends IDDocument {\r\n    \r\n    DENOMINAZIONE:  string;\r\n    TIPOLOGIA:      TipoSport;\r\n    PARTECIPANTI:   number;\r\n    ICONA:          string; // Formato Icon-Sport non Ionic Icon\r\n    LIVELLO:        Livello[]; //Livelli dello sport\r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n\r\n        this.LIVELLO = [];\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['DENOMINAZIONE',\r\n                    'ICONA'\r\n                    ];\r\n    let arNumber = ['TIPOLOGIA','PARTECIPANTI'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = ['LIVELLO'];\r\n\r\n    objDescriptor.className = 'Sport';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'SPORT';\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n    \r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    return objDescriptor;\r\n}    \r\n\r\n    \r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n        //Imposto che il documento è originale\r\n        this.setOriginal();\r\n    }\r\n\r\n    /**\r\n     * Imposta le collection\r\n     * @param data JSON Received\r\n     */\r\n    setCollection(data:any) {\r\n\r\n        this.LIVELLO = [];\r\n\r\n        if (data.LIVELLO) {\r\n            this.setCollectionLivello(data.LIVELLO);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta la collection dei Livelli\r\n     * @param data JSON Received\r\n     */\r\n    setCollectionLivello(dataLivello: any) {\r\n\r\n        dataLivello.forEach(elLivello => {\r\n\r\n            let newLivello = new Livello();\r\n            newLivello.setJSONProperty(dataLivello);\r\n\r\n            this.LIVELLO.push(newLivello);\r\n\r\n        });\r\n    };\r\n\r\n}\r\n\r\n/*\r\n    Le icone di tipo Stringa sono icone Sportsfont\r\n\r\n    INSTALLARE IL MODULO CON:\r\n    > npm install sportsfont\r\n    \r\n    UTILIZZO HTML\r\n    per inserire le icone usare il tag i con la classe opportuna tra quelle disponibili.\r\n\r\n    ESEMPI:\r\n    <i class=\"icon-soccer\"></i>\r\n    Usare Style per modificare Colore o Dimensione\r\n    <i class=\"icon-soccer\" style=\"font-size:20pt;color:red;\"></i>\r\n\r\n    Class Possibili:\r\n        icon-cricket\r\n        icon-bicycle\r\n        icon-baseball\r\n        icon-golf\r\n        icon-skiing\r\n        icon-soccer\r\n        icon-swimming\r\n        icon-tennis\r\n        icon-theatre\r\n        icon-football\r\n        icon-basketball-1\r\n        icon-pitch\r\n        icon-badminton\r\n        icon-rowing\r\n        icon-rugby\r\n        icon-archery\r\n        icon-baking\r\n        icon-dance\r\n        icon-bouldering\r\n        icon-canoe\r\n        icon-shooting\r\n        icon-climbing\r\n        icon-bowl\r\n        icon-cycling\r\n        icon-volleyball\r\n        icon-unichallenge\r\n        icon-trampoline\r\n        icon-tabletennis\r\n        icon-squash\r\n        icon-sail\r\n        icon-run\r\n        icon-pool\r\n        icon-goal\r\n        icon-lacrosse\r\n        icon-martial\r\n        icon-hockey\r\n        icon-frisbee\r\n        icon-handball\r\n        icon-fencing\r\n        icon-horse\r\n        icon-netball\r\n        icon-darts\r\n        icon-fulltime\r\n        icon-halftime\r\n        icon-kickoff\r\n        icon-debate\r\n        icon-starttime\r\n        icon-cheerleader\r\n        icon-pokemon\r\n        icon-computer\r\n        icon-boxing\r\n        icon-croquet\r\n        icon-cinema\r\n*/","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Mansione, Sesso, TargetSesso, TipoVerificaAccount } from './valuelist.model';\r\nimport { UtenteLivello } from './utentelivello.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { Gruppo } from './gruppo.model';\r\nimport { Documentazione } from './documentazione.model';\r\nimport { MasterDocumento } from './ricevuta.model';\r\n\r\n\r\nexport class Utente extends IDDocument {\r\n    COGNOME: string;\r\n    NOME: string;\r\n    NOMINATIVO: string;\r\n    EMAIL: string; \r\n    WEBLOGIN: string;\r\n    WEBPASSWORD:string;\r\n    SHAPASSWORD: string;\r\n    INPUTPASSWORD: string;\r\n    MOBILENUMBER: string;\r\n    TELEFONO1: string;\r\n    TELEFONO2: string;\r\n    INDIRIZZO: string;\r\n    CAP: string;\r\n    COMUNE: string;\r\n    PROVINCIA: string;\r\n    ISOSTATO: string;\r\n    NATOIL: Date;\r\n    NATOA: string;\r\n    NATOCAP: string;\r\n    NATOPROV: string;\r\n    NATOISOSTATO: string;\r\n    SESSO: Sesso;\r\n    CODICEFISCALE: string;\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    AVATAR: string;\r\n    NEWSLETTER: boolean;\r\n    PROFILAZIONEINTERNA: boolean;\r\n    PROFILAZIONEESTERNA: boolean;\r\n    VERIFICATAMAIL: boolean;\r\n    VERIFICATAMOBILE: boolean;\r\n    RUOLO: number;\r\n    MANSIONE: number;\r\n    LISTMANSIONI: string;\r\n    UTENTILIVELLI: UtenteLivello[];\r\n    DOCUMENTAZIONI: Documentazione[];\r\n\r\n    /**\r\n     * \r\n     * @param onlyInstance Non inizializzare il documento, ma crea solo istanza\r\n     */\r\n    constructor(onlyInstance?:boolean) {\r\n        \r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n            this.UTENTILIVELLI = [];\r\n            this.DOCUMENTAZIONI = [];\r\n            this.PROFILAZIONEESTERNA = false;\r\n            this.PROFILAZIONEINTERNA = false;\r\n        }\r\n\r\n        this.VERIFICATAMAIL = false;\r\n        this.VERIFICATAMOBILE = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna l'eta del partecipante\r\n     */\r\n    public get eta(): number {\r\n        let num = 0;\r\n        let oggi = new Date();\r\n\r\n        if (this.NATOIL) {\r\n            if (this.NATOIL < oggi) {\r\n                num = MyDateTime.durataAnni(this.NATOIL, oggi);\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['COGNOME',\r\n                    'NOME',\r\n                    'NOMINATIVO',\r\n                    'EMAIL',\r\n                    'WEBLOGIN',\r\n                    'MOBILENUMBER',\r\n                    'INDIRIZZO',\r\n                    'CAP',\r\n                    'COMUNE',\r\n                    'PROVINCIA',\r\n                    'ISOSTATO',\r\n                    'NATOA',\r\n                    'NATOCAP',\r\n                    'NATOPROV',\r\n                    'NATOISOSTATO',\r\n                    'CODICEFISCALE',\r\n                    'IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'AVATAR',\r\n                    'SHAPASSWORD',\r\n                    'INPUTPASSWORD',\r\n                    'TELEFONO1',\r\n                    'TELEFONO2',\r\n                    'LISTMANSIONI'\r\n                    ];\r\n    let arNumber = ['SESSO','RUOLO'];\r\n    let arBoolean = ['NEWSLETTER','PROFILAZIONEINTERNA','PROFILAZIONEESTERNA','VERIFICATAMAIL','VERIFICATAMOBILE'];\r\n    let arDate = ['NATOIL'];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    \r\n\r\n    objDescriptor.className = 'Utente';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'UTENTE';\r\n    objDescriptor.describeField = 'NOMINATIVO';\r\n\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    \r\n                \r\n    //Aggiungo le collection\r\n    objDescriptor.addCollection('UTENTILIVELLI','UtenteLivello','IDUTENTE');\r\n    objDescriptor.addCollection('DOCUMENTAZIONI','Documentazione','IDUTENTE');\r\n\r\n\r\n    \r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n\r\n    \r\n    return objDescriptor;\r\n}\r\n\r\n\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.UTENTILIVELLI = [];\r\n\r\n        //Sistemo le collection\r\n        this.setCollection(data);\r\n        \r\n        //Imposto che il documento è originale\r\n        this.setOriginal();\r\n\r\n    }\r\n\r\n    /**\r\n     * Imposta le collection dell'oggetto\r\n     * @param data JSON Received\r\n     */\r\n    setCollection(data: any) {\r\n\r\n        if (data.hasOwnProperty('UTENTELIVELLO') && data.UTENTELIVELLO !== undefined) {\r\n            this.setCollectionLivelli(data);\r\n        }\r\n\r\n        if (data.hasOwnProperty('DOCUMENTAZIONE') && data.DOCUMENTAZIONE !== undefined) {\r\n            this.setCollectionDocumentazione(data);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * Crea gli oggetti UTENTILIVELLI\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionLivelli(data: any) {\r\n        \r\n\r\n        data.UTENTELIVELLO.forEach(element => {\r\n            let newLevel = new UtenteLivello();\r\n\r\n            newLevel.setJSONProperty(element);\r\n            this.UTENTILIVELLI.push(newLevel);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Crea gli oggetti DOCUMENTAZIONE\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionDocumentazione(data: any) {\r\n        \r\n\r\n        data.DOCUMENTAZIONE.forEach(element => {\r\n            let NewDoc = new Documentazione();\r\n\r\n            NewDoc.setJSONProperty(element);\r\n            this.DOCUMENTAZIONI.push(NewDoc);\r\n        });\r\n    }    \r\n\r\n\r\n    /**\r\n     * Ritorna una label per indicare se la Mail è verificata oppure no\r\n     */\r\n    getLabelVerificaMail() {\r\n        let labelReturn = '';\r\n\r\n        //Mail verificata\r\n        if (this.VERIFICATAMAIL) {\r\n\r\n            //Se c'e' la mail dico che è verificata\r\n            if (this.EMAIL && this.EMAIL.length !== 0) {\r\n                labelReturn = 'VERIFICATA';\r\n            }\r\n            else {\r\n                //Se non c'e' la mail non dico nulla\r\n                labelReturn = '';\r\n            }\r\n        }\r\n        else {\r\n            //Se c'e' la mail dico che non è verificata\r\n            if (this.EMAIL && this.EMAIL.length !== 0) {\r\n                labelReturn = 'NON VERIFICATA';\r\n            }\r\n            else {\r\n                //Se non c'e' la mail non dico nulla\r\n                labelReturn = '';\r\n            }\r\n        }\r\n\r\n        return labelReturn;\r\n    }\r\n\r\n    /**\r\n     * Ritorna una label per indicare se il telefono è verificato oppure no\r\n     */\r\n    getLabelVerificaMobile() {\r\n        let labelReturn = '';\r\n\r\n        //Mobile verificato\r\n        if (this.VERIFICATAMOBILE) {\r\n\r\n            //Se c'e' la mail dico che è verificata\r\n            if (this.MOBILENUMBER && this.MOBILENUMBER.length !== 0) {\r\n                labelReturn = 'VERIFICATO';\r\n            }\r\n            else {\r\n                //Se non c'e' la mail non dico nulla\r\n                labelReturn = '';\r\n            }\r\n        }\r\n        else {\r\n            //Se c'e' la mail dico che non è verificata\r\n            if (this.MOBILENUMBER && this.MOBILENUMBER.length !== 0) {\r\n                labelReturn = 'NON VERIFICATO';\r\n            }\r\n            else {\r\n                //Se non c'e' la mail non dico nulla\r\n                labelReturn = '';\r\n            }\r\n        }\r\n\r\n        return labelReturn;\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca dentro a Utente Livelli se presente uno sport e un determinato livello\r\n     * @param idLivello Livello richiesto\r\n     * @param idSport Sport richiesto\r\n     */\r\n    isForLevelSport(idLivello:string, idSport: string): boolean {\r\n        let isValid = false;\r\n        let index = -1;\r\n\r\n        if (this.UTENTILIVELLI && this.UTENTILIVELLI.length != 0) {\r\n            index = this.UTENTILIVELLI.findIndex (elLivello => {\r\n                return (elLivello.IDLIVELLO == idLivello && elLivello.IDSPORT == idSport)\r\n            });\r\n        }\r\n\r\n        if (index != -1) {\r\n            isValid = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Confronta il target Sesso con il Sesso dell'utente\r\n     * @param target Target di confronto\r\n     */\r\n    isForTargetSesso(target: TargetSesso) {\r\n        let isValid = false;\r\n\r\n        if (target && this.SESSO) {\r\n            if ((target == TargetSesso.maschile || target == TargetSesso.maschileFemminile) && this.SESSO == Sesso.maschio) {\r\n                isValid = true;\r\n            }\r\n            else if ((target == TargetSesso.femminile || target == TargetSesso.maschileFemminile) && this.SESSO == Sesso.femmina) {\r\n                isValid = true;\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n\r\n    get anagraficaOk() {\r\n        let error = false;\r\n        if (!(\r\n            this.COGNOME\r\n            &&this.NOME\r\n            &&this.INDIRIZZO\r\n            &&this.CAP\r\n            &&this.COMUNE\r\n            &&this.PROVINCIA\r\n            &&this.ISOSTATO\r\n            &&this.SESSO\r\n            &&this.NATOIL\r\n            &&this.NATOA\r\n            //&&this.NATOCAP\r\n            &&this.NATOPROV\r\n            &&this.NATOISOSTATO\r\n            &&this.CODICEFISCALE\r\n        )){\r\n            error = true;\r\n        }\r\n        if (\r\n            !error \r\n            &&this.NOME != ''\r\n            &&this.INDIRIZZO!= ''\r\n            &&this.CAP!= ''\r\n            &&this.COMUNE!= ''\r\n            &&this.PROVINCIA!= ''\r\n            &&this.ISOSTATO!= ''\r\n            &&this.NATOA!= ''\r\n            //&&this.NATOCAP!= ''\r\n            &&this.NATOPROV!= ''\r\n            &&this.NATOISOSTATO!= ''\r\n            &&this.CODICEFISCALE!= ''\r\n        )\r\n\r\n        return !error;\r\n    }\r\n\r\n\r\n    /**\r\n     * la funzione restituisce i parametri da passare alla verifyPage, per eseguire tutte le verifiche ancora necessarie\r\n     * secondo quanto richiesto dal docGruppo. se non ci sono verifiche necessarie, restituisce undefined\r\n     * @param docGruppo il gruppo sportivo per il quale eseguire l'operazione\r\n     */\r\n    getParamsVerifica(docGruppo : Gruppo) : ParamsVerifica{\r\n        let needVerifyMail: boolean = false;\r\n        let needVerifyTel: boolean = false;\r\n        let needUpdateProfile: boolean = false;\r\n\r\n        if (docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemail || docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms){\r\n            //il gruppo richiede la verifica della mail\r\n\r\n            if (!this.VERIFICATAMAIL){\r\n                //non ho verificato la mail, devo farlo\r\n                needVerifyMail=true;\r\n            }\r\n            \r\n        }\r\n        if (docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificasms || docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms){\r\n            //il gruppo richiede la verifica del telefono\r\n\r\n            if (!this.VERIFICATAMOBILE){\r\n                //non ho verificato il telefono, devo farlo\r\n                needVerifyTel=true;\r\n            }\r\n            \r\n        }\r\n\r\n        if (!this.anagraficaOk){\r\n\r\n            //devo aggiornare l'anagrafica\r\n            needUpdateProfile = true;\r\n        }\r\n\r\n        //ora creo i parametri\r\n        let params = undefined;\r\n\r\n        if (needVerifyMail || needVerifyTel || needUpdateProfile){\r\n\r\n            //se c'è qualcosa da fare, istanzio params e lo valorizzo\r\n            params = new ParamsVerifica();\r\n            if (needVerifyMail && needVerifyTel){\r\n                //devo verificare sia mail che telefono\r\n                params.tipoVerifica = TipoVerificaAccount.verificaemailsms\r\n            }\r\n            else if (needVerifyMail){\r\n                //devo verificare solo la mail\r\n                params.tipoVerifica = TipoVerificaAccount.verificaemail;\r\n            }\r\n            else if (needVerifyTel){\r\n                //devo verificare solo il tel\r\n                params.tipoVerifica = TipoVerificaAccount.verificasms;\r\n            }\r\n            else{\r\n                //non devo verificare niente\r\n                params.tipoVerifica = TipoVerificaAccount.noverifica\r\n            }\r\n            //segno nei params se aggionare o meno l'anagrafica\r\n            params.updateDocUtente = needUpdateProfile;\r\n        }\r\n        \r\n        //ritorno i parametri. se non c'è nulla da verificare, params sarà UNDEFINED    \r\n        return params;\r\n    }\r\n\r\n    get isTrainer(){\r\n        let isTrainer: boolean =false;\r\n        if(this.LISTMANSIONI && this.LISTMANSIONI.length > 0){\r\n\r\n            if (this.LISTMANSIONI.includes(`\"${Mansione.trainer.toString()}\"`)){\r\n                isTrainer = true;\r\n            }\r\n        }\r\n        return isTrainer;\r\n    }\r\n\r\n    get isAssistenteTrainer(){\r\n        let isTrainer: boolean =false;\r\n        if(this.LISTMANSIONI && this.LISTMANSIONI.length > 0){\r\n\r\n            if (this.LISTMANSIONI.includes(`\"${Mansione.assistenteTrainer.toString()}\"`)){\r\n                isTrainer = true;\r\n            }\r\n        }\r\n        return isTrainer;\r\n    }\r\n\r\n    get isCustode(): boolean{\r\n        let isCustode: boolean =false;\r\n        if(this.LISTMANSIONI && this.LISTMANSIONI.length > 0){\r\n\r\n            if (this.LISTMANSIONI.includes(`\"${Mansione.custode.toString()}\"`)){\r\n                isCustode = true;\r\n            }\r\n        }\r\n        return isCustode;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class storageUtente {\r\n    loginUser: string;\r\n    pwdUser: string;\r\n    cripted: boolean;\r\n\r\n    constructor(user: string, pwd: string) {\r\n        this.loginUser = user;\r\n        this.pwdUser = pwd;\r\n        this.cripted = false;\r\n    }\r\n\r\n    /**\r\n     * Salvo in Stringa JSON l'oggetto\r\n     */\r\n    saveJSON(crypt?: boolean): string {\r\n        let strReturn = '';\r\n        let myObj = new storageUtente(this.loginUser, this.pwdUser);\r\n\r\n        if (crypt) {\r\n            //Qui devo criptare utente e password\r\n            myObj.cripted = true;\r\n\r\n        }\r\n\r\n        strReturn = JSON.stringify(myObj);\r\n\r\n        return strReturn;\r\n    }\r\n\r\n    loadJSON(stringaJSON: string) {\r\n        let myObj = new storageUtente('','');\r\n        myObj = JSON.parse(stringaJSON);\r\n\r\n        if (myObj) {\r\n            if (myObj.cripted) {\r\n                //Devo decriptare username e password\r\n            }\r\n\r\n            this.loginUser = myObj.loginUser;\r\n            this.pwdUser = myObj.pwdUser;\r\n            this.cripted = myObj.cripted;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class ParamsVerifica{\r\n\r\n    tipoVerifica : TipoVerificaAccount;\r\n    updateDocUtente : boolean;\r\n}\r\n","export class LogApp {\r\n\r\n    /**\r\n     * Visualizza in console i dati\r\n     * @param data Dati da stampare in console\r\n     */\r\n    static consoleLog(data: any) {\r\n        let showDebug = false;\r\n\r\n        if (showDebug) {\r\n            console.log(data);\r\n        }\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  version: \"1.4\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\nimport { PostResponse } from '../library/models/postResult.model';\nimport { PostParams } from '../library/models/requestParams.model';\nimport { DocstructureService } from '../library/services/docstructure.service';\nimport { CorsoValutazione } from '../models/corsovalutazione.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CorsoValutazioneService {\n\n  constructor(private docStructureService: DocstructureService) { }\n\n  /**\n   * Il metodo effettua una chiamata al server per recuperare la scheda\n   * \n   * @param idCorso idCorso richiesto\n   * @returns CorsoValutazione \n   * @returns Reject Message\n   */\nrequestSchedaValutazioneCorso(idCorso: string):Promise<CorsoValutazione> {\n      let myPostParams : PostParams = new PostParams();\n      let method = 'getSchedaForTrainer';\n      let docToCall: CorsoValutazione = new CorsoValutazione();\n\n    return new Promise<CorsoValutazione>((resolve, reject) => {\n      if (idCorso && idCorso.length != 0) {\n\n        //Preparo i parametri della chiamata\n        myPostParams.key = 'idCorso';\n        myPostParams.value = idCorso;\n\n        this.docStructureService.requestForFunction(docToCall,method,'',myPostParams)\n                                .then((risposta: PostResponse) => {\n\n                                  //Non si puo' richiedere la scheda\n                                  if (!risposta.result) {\n\n                                    reject(risposta.message);\n\n                                  }\n                                  else if (risposta.document) {\n                                    //Ho un documento e lo trasformo in CorsoValutazione\n                                    let myDocScheda = new CorsoValutazione();\n                                    myDocScheda.setJSONProperty(risposta.document);\n\n                                    resolve(myDocScheda);\n                                  }\n                                  else {\n                                    reject('Scheda non ricevuta');\n                                  }\n                                })\n                                .catch(error => {\n                                  reject(error);\n                                })\n      }\n      else {\n        reject('Nessun corso richiesto');\n      }\n    })\n  }\n\n\n  /**\n   * Richiede al server il salvataggio della scheda\n   * @param docScheda Scheda in salvataggio\n   */\nrequestForSave(docScheda: CorsoValutazione):Promise<PostResponse> {\n\n  let myPostParams : PostParams = new PostParams();\n  let method = 'mobSaveValutazione';\n  let docToCall: CorsoValutazione = new CorsoValutazione();\n\n  return new Promise<PostResponse>((resolve, reject) => {\n    if (docScheda) {\n      myPostParams.key = 'docScheda';\n      myPostParams.value = docScheda;\n\n      this.docStructureService.requestForFunction(docToCall, method,'',myPostParams)\n                              .then((risposta:PostResponse) => {\n                                if (!risposta.result) {\n                                  reject(risposta.message);\n                                }\n                                else {\n                                  resolve(risposta);\n                                }\n                              })\n    }\n    else {\n      reject('Nessuna scheda da memorizzare');\n    }\n  })\n}\n\n}\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { ArticoloColore } from './articolocolore.model';\r\nimport { ArticoloTaglieMisura } from './articolotagliemisura.model';\r\nimport { TipoArticolo, TipoPrezzo } from './valuelist.model';\r\n\r\nexport class Articolo extends IDDocument{\r\n    TIPOARTICOLO: TipoArticolo;\r\n    CODICE: string;\r\n    CODICEBARRE: string;\r\n    DESCR: string;\r\n    IDUNITAMISURA: string;\r\n    VALIDOFINO: Date;\r\n    PREZZONETTO: number;\r\n    PREZZOLORDO: number;\r\n    SCONTOTEXT: string;\r\n    CATEGORIA: string;\r\n    DESCRHTML: string;\r\n    TIPOPREZZO: TipoPrezzo;\r\n    FLAGTAGLIEMISURE: boolean;\r\n    FLAGCOLORI: boolean;\r\n    FLAGSHOPONLINE: boolean;\r\n    IDVALUTA: string;\r\n    ARTICOLITAGLIEMISURE: ArticoloTaglieMisura[];\r\n    ARTICOLICOLORI: ArticoloColore[];\r\n\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'CODICE',\r\n            'CODICEBARRE',\r\n            'DESCR',\r\n            'IDUNTAMISURA',\r\n            'SCONTOTEXT',\r\n            'CATEGORIA',\r\n            'DESCRHTML',\r\n            'IDVALUTA',\r\n        ];\r\n        let arNumber = ['PREZZONETTO', 'PREZZOLORDO', 'TIPOARTICOLO', 'TIPOPREZZO'];\r\n        let arBoolean = ['FLAGTAGLIEMISURE', 'FLAGCOLORI', 'FLAGSHOPONLINE'];\r\n        let arDate = [];\r\n        let arDateTime =['VALIDOFINO'];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'Articolo';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'ARTICOLO';\r\n        objDescriptor.describeField = 'DESCR';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n                    \r\n        //Aggiungo le collection\r\n        objDescriptor.addCollection('ARTICOLITAGLIEMISURE','ArticoloTaglieMisura','IDARTICOLO');\r\n        objDescriptor.addCollection('ARTICOLICOLORI','ArticoloColore','IDARTICOLO');\r\n    \r\n    \r\n        objDescriptor.setRelation('IDUNITAMISURA','UnitaMisura');\r\n        objDescriptor.setRelation('IDVALUTA','Valuta');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\nimport { PostParams, RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { MasterDocumento } from '../models/ricevuta.model';\r\nimport { storageUtente, Utente } from '../models/utente.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InvoicesService {\r\n\r\n  private _listaDocumentiFiscali: MasterDocumento[] = [];\r\n  listaDocumentiFiscali = new BehaviorSubject<MasterDocumento[]>([])\r\n\r\n  constructor(private docStructureService: DocstructureService) { }\r\n\r\n \r\n\r\n  /**\r\n   * la funzione richede al server l'elenco delle ricevute per l'utente passato\r\n   * @param utente l'untete per cui si richiedono le fatture\r\n   */\r\n  requestInvoices(utente: Utente, anno?: number):Promise<MasterDocumento[]>{  \r\n    return new Promise((resolve, reject) => {\r\n\r\n      //creo il filtro\r\n      let filterDocuement: MasterDocumento = new MasterDocumento(true);\r\n      filterDocuement.IDANAGRAFICA = utente.ID;\r\n\r\n      //se c'è l'anno, lo inserisco nel filtro\r\n      if (anno){\r\n        filterDocuement.ANNO = anno;\r\n      }      \r\n\r\n      //faccio la richiesta\r\n      this.docStructureService.requestNew(filterDocuement)\r\n      .then(listDocuments => {\r\n        \r\n        //salvo la lista in memoria e scateno l'bservable\r\n        this._listaDocumentiFiscali = listDocuments;\r\n        this.listaDocumentiFiscali.next(this._listaDocumentiFiscali);\r\n        resolve(this._listaDocumentiFiscali);\r\n\r\n      })\r\n      .catch(error => {\r\n        //errore di connessione\r\n        reject (error);\r\n      })\r\n    })    \r\n  }\r\n\r\n\r\n  /**\r\n   * Dato un elemento MasterDocumento, la funzione lo scarica e restituisce la postResponse contenente il B64\r\n   * @param documento elemento MasterDocumento che si vuole scaricare\r\n   */\r\n  downloadInvoice(documento: MasterDocumento):Promise<PostResponse>{\r\n    return new Promise ((resolve, reject) => {\r\n\r\n      //metodo statico da richiamare\r\n      const method = 'getFile';\r\n\r\n      //creo il mio parametro\r\n      let myParams: PostParams = new PostParams();\r\n      myParams.key = 'primaryKey';\r\n      myParams.value = documento.ID;\r\n\r\n      this.docStructureService.requestForFunction(documento, method, null, myParams)\r\n      .then((response: PostResponse) => {\r\n        resolve (response);\r\n      })\r\n      .catch(error => {\r\n        reject (error);\r\n      })\r\n\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * la funzione, presa una stringa b64 e il content-type, restituisce il blob\r\n   * @param b64Data stringa B64 SENZA tipo di file\r\n   * @param contentType stringa tipo file (default: application/pdf)\r\n   */\r\n  base64toBlob(b64Data, contentType='application/pdf'):Promise<Blob>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n      let fullB64 = 'data:'+contentType + ';base64,'+ b64Data;\r\n    \r\n              fetch(fullB64).then(res => {\r\n                res.blob().then(blob => {\r\n                  resolve(blob);\r\n                })\r\n              })\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          \r\n}\r\n","import { Sesso } from './valuelist.model';\r\n\r\nexport class CodiceFiscale {\r\n\r\n    codiceFiscale: string;\r\n    dataNascita: Date;\r\n    sesso: Sesso;\r\n    codiceControllo: string;\r\n\r\n    codiceCatastale: string;\r\n    comune: string;\r\n    provincia: string;\r\n    regione: string;\r\n    codice: string;\r\n    cap: string;\r\n    checkValidate: boolean;\r\n    msgValidate: string;\r\n    stato: string;\r\n\r\n    constructor(codFisc: string) {\r\n        this.codiceFiscale = codFisc;\r\n        this.checkValidate = false;\r\n        this.msgValidate = '';\r\n    }\r\n\r\n    /**\r\n\t * Normalizes a CF by removing white spaces and converting to upper-case.\r\n\t * @param string cf Raw CF, possibly with spaces.\r\n\t * @return string Normalized CF.\r\n\t */\r\n\tprivate normalize(cf: string): string\r\n\t{\r\n\t\treturn cf.replace(/\\s/g, \"\").toUpperCase();\r\n    }\r\n  \r\n  /**\r\n\t * Returns the formatted CF. Currently does nothing but normalization.\r\n\t * @param string cf Raw CF, possibly with spaces.\r\n\t * @return string Formatted CF.\r\n\t */\r\n\tprivate format(cf: string): string\r\n\t{\r\n\t\treturn this.normalize(cf);\r\n    }\r\n  \r\n  /**\r\n\t * Validates a regular CF.\r\n\t * @param string cf Normalized, 16 characters CF.\r\n\t * @return string Null if valid, or string describing why this CF must be\r\n\t * rejected.\r\n\t */\r\n\tprivate PRIVATE_validate_regular(cf: string): string\r\n\t{\r\n\t\tif( ! /^[0-9A-Z]{16}$/.test(cf) )\r\n\t\t\treturn \"Invalid characters.\";\r\n\t\tvar s = 0;\r\n\t\tvar even_map = \"BAFHJNPRTVCESULDGIMOQKWZYX\";\r\n\t\tfor(var i = 0; i < 15; i++){\r\n\t\t\tvar c = cf[i];\r\n\t\t\tvar n = 0;\r\n\t\t\tif( \"0\" <= c && c <= \"9\" )\r\n\t\t\t\tn = c.charCodeAt(0) - \"0\".charCodeAt(0);\r\n\t\t\telse\r\n\t\t\t\tn = c.charCodeAt(0) - \"A\".charCodeAt(0);\r\n\t\t\tif( (i & 1) === 0 )\r\n\t\t\t\tn = even_map.charCodeAt(n) - \"A\".charCodeAt(0);\r\n\t\t\ts += n;\r\n\t\t}\r\n\t\tif( s%26 + \"A\".charCodeAt(0) !== cf.charCodeAt(15) )\r\n\t\t\treturn \"Invalid checksum.\";\r\n\t\treturn null;\r\n    }\r\n  \r\n  /**\r\n\t * Validates a temporary CF.\r\n\t * @param string cf Normalized, 11 characters CF.\r\n\t * @return string Null if valid, or string describing why this CF must be\r\n\t * rejected.\r\n\t */\r\n\tprivate PRIVATE_validate_temporary(cf: string): string\r\n\t{\r\n\t\tif( ! /^[0-9]{11}$/.test(cf) )\r\n\t\t\treturn \"Invalid characters.\";\r\n\t\tvar s = 0;\r\n\t\tfor(var i = 0; i < 11; i++ ){\r\n\t\t\tvar n = cf.charCodeAt(i) - \"0\".charCodeAt(0);\r\n\t\t\tif( (i & 1) === 1 ){\r\n\t\t\t\tn *= 2;\r\n\t\t\t\tif( n > 9 )\r\n\t\t\t\t\tn -= 9;\r\n\t\t\t}\r\n\t\t\ts += n;\r\n\t\t}\r\n\t\tif( s % 10 !== 0 )\r\n\t\t\treturn \"Invalid checksum.\";\r\n\t\treturn null;\r\n    }\r\n  \r\n  /**\r\n\t * Verifies the basic syntax, length and control code of the given CF.\r\n\t * @param string cf Raw CF, possibly with spaces.\r\n\t * @return string Null if valid, or string describing why this CF must be\r\n\t * rejected.\r\n\t */\r\n\tvalidate(): boolean\t{\r\n        let check = false;\r\n        let msg = '';\r\n\r\n        if (this.codiceFiscale.length !==0) {\r\n            this.codiceFiscale = this.normalize(this.codiceFiscale);\r\n\r\n            if( this.codiceFiscale.length === 0 ) {\r\n                msg = 'Empty'\r\n            }\r\n            else if( this.codiceFiscale.length === 16 ) {\r\n                msg = this.PRIVATE_validate_regular(this.codiceFiscale);\r\n            }\r\n            else if( this.codiceFiscale.length === 11 ) {\r\n    \r\n                msg = this.PRIVATE_validate_temporary(this.codiceFiscale);\r\n            }\r\n            else {\r\n                msg = \"Invalid length.\";\r\n            }\r\n        }\r\n        else {\r\n            msg = \"Invalid length.\";\r\n        }\r\n\r\n        //Se c'e' un messaggio, check non passato\r\n        if (msg) {\r\n            check=false;\r\n        }\r\n        else {\r\n            check = true;\r\n        }\r\n\r\n        this.msgValidate = msg;\r\n        this.checkValidate = check;\r\n        return check;\r\n    }\r\n\r\n    /**\r\n     * Decodifica il codice fiscale nelle sue parti\r\n     */\r\n    basicDecode(): boolean {\r\n        let result = false;\r\n\r\n        if (this.codiceFiscale.length == 16) {\r\n            result = this.basicDecode16();\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * Effettua una prima e semplice decodifica dei dati contenuti nel codice fiscale\r\n     */\r\n    private basicDecode16(): boolean {\r\n        let chDay = '';\r\n        let chMonth = '';\r\n        let chYear = '';\r\n        let day = 0;\r\n        let month = 0;\r\n        let year = 0;\r\n        let secolo = 2000;\r\n        let result = true;\r\n        let adesso = new Date();\r\n\r\n        //0123456789  10 11 12 13 14 15\r\n        //CVLPTR72P0  9  G  3  8  8   D\r\n        \r\n\r\n        //CODICE CONTROLLO\r\n        this.codiceControllo = this.codiceFiscale.substr(15,1);\r\n        \r\n        //CODICE CATASTALE\r\n        this.codiceCatastale = this.codiceFiscale.substr(11,4);\r\n\r\n        chDay = this.codiceFiscale.substr(9,2);\r\n        chMonth = this.codiceFiscale.substr(8,1);\r\n        chYear = this.codiceFiscale.substr(6,2);\r\n\r\n        try {\r\n            day = parseInt(chDay,10);\r\n            year = parseInt(chYear, 10);\r\n\r\n        } catch (error) {\r\n            result = false;\r\n        }\r\n        \r\n        if (result) {\r\n\r\n            //Determino il mese\r\n            month = this.getMonthFromLetter(chMonth);\r\n            if (month == -1) {\r\n                //errore\r\n                result = false;\r\n            }\r\n        }\r\n\r\n        //Sistemazione Year\r\n        if (result) {\r\n            secolo = 2000;\r\n            if ((secolo + year) > adesso.getFullYear() ) {\r\n                //Cambio secolo e metto il 1900\r\n                secolo = 1900;\r\n            }\r\n\r\n            year = secolo + year;\r\n\r\n        }\r\n\r\n        //Sistemazione Day\r\n        if (result) {\r\n            if (day > 40 ) {\r\n                day = day - 40;\r\n\r\n                //SESSO\r\n                this.sesso = Sesso.femmina;\r\n            }\r\n            else {\r\n\r\n                //SESSO\r\n                this.sesso = Sesso.maschio;\r\n            }\r\n\r\n            //DATA NASCITA\r\n            this.dataNascita = new Date(year, month, day);\r\n        }\r\n        \r\n\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n    private getMonthFromLetter(letter: string): number {\r\n        let arMesi = [];\r\n        let index = -1;\r\n        arMesi.push('A');\r\n        arMesi.push('B');\r\n        arMesi.push('C');\r\n        arMesi.push('D');\r\n        arMesi.push('E');\r\n        arMesi.push('H');\r\n        arMesi.push('L');\r\n        arMesi.push('M');\r\n        arMesi.push('P');\r\n        arMesi.push('R');\r\n        arMesi.push('S');\r\n        arMesi.push('T');\r\n\r\n        index = arMesi.findIndex(el => {\r\n            return el == letter;\r\n        });\r\n\r\n        //Questo e' il numero del mese in javascript\r\n        return index;        \r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\nimport { Storage } from '@ionic/storage';\r\n\r\nimport { ApicallService } from './apicall.service';\r\nimport { SportService } from './sport.service';\r\nimport { CategoriaetaService } from './categoriaeta.service';\r\nimport { CourseService } from './course.service';\r\nimport { FilterCorsi } from '../models/filtercorsi.model';\r\nimport { UtenteService } from './utente.service';\r\nimport { LivelloService } from './livello.service';\r\nimport { AreaService } from './area.service';\r\nimport { LocationService } from './location.service';\r\nimport { CourseschedulerService } from './coursescheduler.service';\r\n\r\nimport { PrenotazioneService } from './prenotazione.service';\r\nimport { NewseventiService } from './newseventi.service';\r\nimport { SlotoccupazioneService } from './slotoccupazione.service';\r\n\r\n\r\nimport { StartConfiguration, StartAuthorization } from '../models/start-configuration.model';\r\n\r\nimport { Location } from '../models/location.model';\r\nimport { Utente, storageUtente } from '../models/utente.model';\r\nimport { LogApp } from '../models/log.model';\r\nimport { SlotDay } from '../models/imdb/slotday.model';\r\nimport { Campo } from '../models/campo.model';\r\nimport { PrenotazionePianificazione } from '../models/prenotazionepianificazione.model';\r\nimport { Prenotazione } from '../models/prenotazione.model';\r\nimport { UtenteprenotazioneService } from './utenteprenotazione.service';\r\nimport { UtenteiscrizioneService } from './utenteiscrizione.service';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nimport { CodicefiscaleService } from './codicefiscale.service';\r\nimport { CodiceFiscale } from '../models/codicefiscale.model';\r\nimport { TimeTrainerCourse, TipoPrivateImage } from 'src/app/models/valuelist.model'\r\nimport { AccountRequestCode, AccountOperationResponse, AccountVerifyCode } from '../models/accountregistration.model';\r\nimport { OccupazioniService } from './occupazioni.service';\r\n\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { OccupazioneCampi } from '../models/occupazionecampi.model';\r\nimport { RequestParams } from '../library/models/requestParams.model';\r\nimport { DocumentoService } from './documento.service';\r\nimport { PianificazioneCorso } from '../models/pianificazionecorso.model';\r\nimport { InvoicesService } from './invoices.service';\r\nimport { PosizioneService } from './posizione.service';\r\nimport { Area } from '../models/area.model';\r\nimport { MasterDocumento } from '../models/ricevuta.model';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\nimport { DataChiusuraService } from './data-chiusura.service';\r\nimport { DataChiusura } from '../models/datachiusura.model';\r\n\r\nimport { PlatformLocation } from '@angular/common';\r\nimport { Gruppo } from '../models/gruppo.model';\r\nimport { CorsoallegatoService } from './corsoallegato.service';\r\n\r\nimport { CorsoAllegato } from '../models/corsoallegato.model';\r\nimport { IscrizionecorsoService } from './iscrizionecorso.service';\r\nimport { IscrizioneCorso } from '../models/iscrizionecorso.model';\r\nimport { CorsoValutazioneService } from './corso-valutazione.service';\r\nimport { CorsoValutazione } from '../models/corsovalutazione.model';\r\nimport { Livello } from '../models/livello.model';\r\nimport { PhotoService, PhotoType } from './photo.service';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StartService {\r\n\r\n  //Oggetto contentente la configurazione\r\n  private _startConfig = new BehaviorSubject<StartConfiguration>(new StartConfiguration());\r\n\r\n  /* Valorizzata a TRUE quando l'app è pronta a partire */\r\n  private _appReady = new BehaviorSubject<boolean>(false);\r\n  private listenLocation: Subscription;\r\n  \r\n  //Determina se la connessione sarà a un database locale, o al server\r\n  private _localConnection = false;\r\n\r\n  private _forceIdAreaOnLogin = ''; //Se impostato è l'area da mantenere a seguito del login (Usata quando nella booking non sono loggatto, e al termine devo rimanere sull'area)\r\n  \r\n  get appReady() {\r\n    return this._appReady.asObservable();\r\n  }\r\n\r\n  get startConfig() {\r\n    return this._startConfig.asObservable();\r\n  }\r\n\r\n  get actualStartConfig(){\r\n    return this._startConfig.getValue();\r\n  }\r\n\r\n  //Ritorna se l'applicazione sta girando su desktop\r\n  get isDesktop() {\r\n    return !this.platformService.is('hybrid');\r\n  }\r\n\r\n  //Ritorna se l'applicazione sta girando dentro al web, quindi non in capacitor o cordova\r\n  get isOnWeb() {\r\n    let result = true;\r\n    if (this.platformService.is(\"cordova\") || this.platformService.is(\"capacitor\")) {\r\n      result = false;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Controlla l'esecuzione su IOS\r\n   */\r\n  get isOnAppleSystem() {\r\n    let result = true;\r\n    if (this.platformService.is(\"ios\")) {\r\n      result = false;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Controlla l'esecuzione su IOS\r\n   */\r\n   get isOnAndroidSystem() {\r\n    let result = true;\r\n    if (this.platformService.is(\"android\")) {\r\n      result = false;\r\n    }\r\n\r\n    return result;\r\n  }  \r\n\r\n  /**\r\n   * Prende l'Area Attiva e la imposta nella proprietà\r\n   * _forceIdAreaOnLogin \r\n   * Quando il valore della proprietàè settato, a seguito del Login bisogna rimanere su questa area\r\n   */\r\n  setIdAreaForcedForLogin() {\r\n    if (this.areaService.areaSelectedValue) {\r\n      this._forceIdAreaOnLogin = this.areaService.areaSelectedValue.ID;\r\n    }\r\n    else {\r\n      this._forceIdAreaOnLogin = '';\r\n    }\r\n  }\r\n\r\n\r\n  constructor(private platformService: Platform,\r\n    private apiService: ApicallService,\r\n    private storageAccess: Storage,\r\n    private sportService: SportService,\r\n    private categoriaEtaService: CategoriaetaService,\r\n    private corsoService: CourseService,\r\n    private utenteService: UtenteService,\r\n    private livelloService: LivelloService,\r\n    private areaService: AreaService,\r\n    private locationService: LocationService,\r\n    private corsoCalendarioService: CourseschedulerService,\r\n    private prenotazioniService: PrenotazioneService,\r\n    private newsEventiService: NewseventiService,\r\n    private slotOccupazioneService: SlotoccupazioneService,\r\n    private utentePrenotazioneService: UtenteprenotazioneService,\r\n    private utenteIscrizioneService: UtenteiscrizioneService,\r\n    private codFiscService: CodicefiscaleService,\r\n    private occupazioniService: OccupazioniService,\r\n    private docStructureService: DocstructureService,\r\n    private documentoService: DocumentoService,\r\n    private invoicesService: InvoicesService,\r\n    private posizioneService: PosizioneService,\r\n    private dataChiusuraService: DataChiusuraService,\r\n    private urlLocation: PlatformLocation,\r\n    private corsoAllegatoService: CorsoallegatoService,\r\n    private iscrizioneCorsoService: IscrizionecorsoService,\r\n    private corsoValutazioneService: CorsoValutazioneService,\r\n    private photoService: PhotoService\r\n    ) { \r\n\r\n      //Ogni volta che cambia la configurazione la invio \r\n      //al servizio docStructure\r\n      this.startConfig.subscribe(elConfig => {\r\n        this.docStructureService.setConfig(elConfig);\r\n      });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * PRIMO STEP DI CONFIGURAZIONE\r\n   * \r\n   * //TODO: QUESTO METODO E' IMPORTANTE PERCHE' INSTRADA L'APPLICAZIONE \r\n   * A SECONDA SE SIAMO SU CAPACITOR/CORDOVA AL CORRETTO APP ID\r\n   * In caso di Capacitor/Cordova bisogna impostare il valore myAppId a mano\r\n   * Negli altri casi, l'appid viene recuperato grazie all URL di chiamata\r\n   * \r\n   * Impostazioni iniziali\r\n   * 1) _localConnection -> TRUE per modalità di debug e punta ai database in locale\r\n   * 2) prefixDomain -> prefisso letto sull'url\r\n   * 3) myAppId -> Application id da utilizzare (modo automatico o manuale)\r\n   */\r\n  settingStartStepOne() {\r\n    let myUrl = '';\r\n    let myAppId = '';    \r\n    let arUrl = [];\r\n    let prefixDomain = '';\r\n\r\n    //Recupero lo StartConfig, cosi da modificarlo al termine\r\n    let myConfig = this._startConfig.getValue();\r\n\r\n    //Modalità Web\r\n    if (this.isOnWeb) {\r\n\r\n        //Qui posso cambiare strategia per puntare localmente\r\n        //this._localConnection = true;\r\n        this._localConnection = false;\r\n\r\n        if (this._localConnection) {\r\n          //Modalità di Test metto un AppId di test\r\n          myAppId = '00F15A91-5395-445C-B7F4-5BA594E55D2F';\r\n        }\r\n        else {\r\n\r\n          //Recupero URL del browser\r\n          myUrl = this.urlLocation.hostname;\r\n  \r\n          //Simulazione URL\r\n          //myUrl = 'demo.gouego.com';\r\n  \r\n          //Sto aprendo in localhost ma voglio far puntare al server\r\n          //ancora una volta metto un appId fisso\r\n          if (myUrl == 'localhost') {\r\n\r\n            // myAppId = '00F15A91-5d395-445C-B7F4-5BA594E55D2F'; //Demo AppId\r\n            myAppId ='CCBA34A5-24F5-4C22-8485-D891823E3434'; //OpenBeach AppId\r\n            // myAppId = 'FD291600-D873-49CF-A90C-525926CA2CDC'; //Key Element\r\n\r\n          }\r\n          else {\r\n            //Prendo URL e lo separo\r\n            arUrl = myUrl.split('.');\r\n\r\n            if (arUrl.length != 0) {\r\n\r\n              //Prendo il prefisso e sulla base di questo ricavo l'AppID\r\n              prefixDomain = arUrl[0];\r\n\r\n            }\r\n          }\r\n\r\n        }\r\n    }\r\n    else {\r\n\r\n      //Non è mai in localconnection\r\n      this._localConnection = false;\r\n\r\n      //VALORIZZARE L'APP ID PER CAPACITOR\r\n      //TODO: VALORIZZARE APPID PER INSTALLAZIONE CAPACITOR\r\n      myAppId = 'CCBA34A5-24F5-4C22-8485-D891823E3434';\r\n      \r\n\r\n      //Sono su capacitor o cordova\r\n      prefixDomain = '';\r\n    }\r\n\r\n    //Imposto URL di chiamata\r\n    myConfig.setUrlLocation(this._localConnection);\r\n\r\n    //Reimposto Observable\r\n    this._startConfig.next(myConfig);\r\n\r\n    //Il secondo step si preoccupa di ricavare l'app id se mancante, \r\n    //Impostare i dati nell'oggetti startConfiguration\r\n    //ed iniziare la comunicazione server\r\n    this.settingStartStepTwo(prefixDomain, myAppId);\r\n\r\n  }\r\n\r\n  /**\r\n   * SECONDO STEP DI CONFIGURAZIONE\r\n   * Il metodo tenta il recupero di un appId se non ne possiede già uno, e se prefixdomain vale qualcosa\r\n   */\r\n  settingStartStepTwo(prefixDomain: string, myAppId: string) {\r\n\r\n    let docGruppo = new Gruppo(true);\r\n    let params = new RequestParams();\r\n\r\n    if (myAppId.length == 0) {\r\n\r\n      if (prefixDomain.length != 0) {\r\n        //Chiedo al server \r\n        //Preparo il documento di filtro\r\n        docGruppo.PREFIXDOMAIN = prefixDomain;\r\n\r\n        //Effettuo la chiamata\r\n        this.docStructureService.requestNew(docGruppo)\r\n          .then(collGruppo => {\r\n            //Vediamo appId ricevuto\r\n            let appIdReceived = '';\r\n\r\n            if (collGruppo) {\r\n\r\n              let myList: Gruppo[] = collGruppo;\r\n              let myGruppo: Gruppo; \r\n\r\n              //Se riesco recupero appID\r\n              if (myList && myList.length != 0) {\r\n                myGruppo = myList[0];\r\n                appIdReceived = myGruppo.APPID;\r\n\r\n              }  \r\n            }\r\n\r\n            //Step 3 (Se il valore passato è '' siamo in errore)\r\n            this.settingStartStepThree(appIdReceived);\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n\r\n            //Vado allo Step 3 in errore passando stringa vuota\r\n            this.settingStartStepThree('');\r\n          })\r\n\r\n      }\r\n      else {\r\n        //Non ho AppId e non ho trovato modo di leggere URL\r\n\r\n        //Vado allo Step 3 in errore passando stringa vuota\r\n        this.settingStartStepThree('');\r\n\r\n      }\r\n    }\r\n    else {\r\n      //Sono già in possesso dell'AppId\r\n      this.settingStartStepThree(myAppId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fase finale di Start\r\n   * Se il valore di myAppID = '', siamo in errore\r\n   */\r\n  settingStartStepThree(myAppId: string) {\r\n\r\n    //Recupero lo StartConfig, cosi da modificarlo al termine\r\n    let myConfig = this._startConfig.getValue();\r\n\r\n    myConfig.appId = myAppId;\r\n    \r\n    //Reimposto Observable\r\n    this._startConfig.next(myConfig);\r\n\r\n    this.requestStartAuthorization();\r\n\r\n  }\r\n\r\n\r\n    /** Effettua la chiamata WebAPI al Server per richiedere l'autorizzazione */\r\n  requestStartAuthorization() {\r\n\r\n      const doObject = 'AUTHORIZATION';\r\n      const method = 'requestAuthorization';\r\n\r\n      const actualStartConfig = this._startConfig.getValue();\r\n      //Ricavo gli Header da impostare\r\n      let myHeaders = actualStartConfig.getHttpHeaders();\r\n      myHeaders = myHeaders.append('X-HTTP-Method-Override', method);\r\n\r\n      //Aggiungo i parametri di chiamata\r\n      let myParams = new HttpParams().set('withimages', '1');\r\n      myParams = myParams.append('withoptions','1');\r\n\r\n      //Url da chiamare\r\n      let myUrl = actualStartConfig.urlBase + '/' + doObject;\r\n  \r\n      \r\n      // Effettuo la chiamata per l'autorizzazione\r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .subscribe(resultData => {\r\n\r\n          let objAuth: StartAuthorization = resultData;\r\n\r\n          if (objAuth.result == -1 && objAuth.authcode && objAuth.authcode.length != 0) {\r\n\r\n            // Sistemo l'oggetto di configurazione \r\n            // ed emetto un evento di Cambio\r\n            this.onAuthorizationGrant(objAuth);\r\n\r\n          }\r\n          else {\r\n            console.log('Authorization failed');\r\n          }\r\n        },error => {\r\n          console.log('Comunication Error');\r\n        });\r\n        \r\n  \r\n        \r\n    }\r\n\r\n  //Autorizzazione ricevuta\r\n  onAuthorizationGrant(objAuth: StartAuthorization) {\r\n\r\n    let elStartConfig = this._startConfig.getValue();\r\n\r\n    //Scrivo in console\r\n    LogApp.consoleLog('Autorizzazione ricevuta');\r\n\r\n\r\n    //Sistemazione del Gruppo nell'oggetto di configurazione\r\n    elStartConfig.setGruppoAuthorization(objAuth.GRUPPOSPORTIVO);\r\n    //Sistemazione dell'authorization code da usare\r\n    elStartConfig.authorizationAppCode = objAuth.authcode;\r\n\r\n    //Emetto l'evento di cambio\r\n    this._startConfig.next(elStartConfig);\r\n\r\n    //Passo a richiedere le Aree\r\n    this.requestAree();\r\n\r\n    // Mi iscrivo alle modifiche dell'Area Selezionata\r\n    this.onChangeAreaSelezionata();\r\n\r\n    //Operazioni ulteriori a seguito dell'autorizzazione\r\n    this.onAfterAuthorization();\r\n  }    \r\n\r\n\r\n\r\n  /**\r\n   * Alcune operazioni a seguito dell'autorizzazioni\r\n   */\r\n  onAfterAuthorization() {\r\n\r\n    //0- RECUPERO LE CHIUSURE DEL GRUPPO\r\n    this.dataChiusuraService.request()\r\n                  .then((listChiusure: DataChiusura[]) => {\r\n                  });\r\n\r\n    // 1- CHIEDO ELENCO SPORT, LIVELLI, CATEGORIEETA che mi servono sempre\r\n    let elStartConfig = this._startConfig.getValue();\r\n\r\n    this.sportService\r\n      .request(elStartConfig, false)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    this.livelloService\r\n      .request(elStartConfig)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    this.categoriaEtaService\r\n        .request(elStartConfig)\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n\r\n    // 2 - TENTO L'ACCESSO AUTOMATICO\r\n    this.loadStorageUtente();\r\n\r\n  }\r\n\r\n\r\n\r\n  //#region AREE\r\n    \r\n    /**\r\n     * Area Selezionata, in versione Observable\r\n     */\r\n    get areaSelected() {\r\n      return this.areaService.areaSelected;\r\n    }\r\n\r\n    /** Area Selezionata non Observable */\r\n    get areaSelectedValue() {\r\n      return this.areaService.areaSelectedValue;\r\n    }\r\n\r\n    /**\r\n     * Elenco delle Aree\r\n     */\r\n    get listAree() {\r\n      return this.areaService.listAree;\r\n    }\r\n\r\n    /**\r\n     * Effettua la connessione al server per la richiesta delle Aree\r\n     * e seleziona la prima area disponibile\r\n     */\r\n    requestAree() {\r\n      const actualStartConfig = this._startConfig.getValue();\r\n\r\n      return this.areaService.request(actualStartConfig);\r\n    }\r\n\r\n    /**\r\n     * Effettua la selezione di una Area\r\n     * l'oggetto Observable areaSelected verrà emesso con un nuovo valore\r\n     * @param idArea IDArea da selezionare\r\n     */\r\n    selectAreaByID(idArea: string) {\r\n      this.areaService.selectAreaByID(idArea);\r\n    }\r\n\r\n\r\n    /**\r\n     * Metodo per sottoscriversi al cambiamento dell'area selezionata\r\n     */\r\n    onChangeAreaSelezionata() {\r\n\r\n      this.areaService.areaSelected\r\n          .subscribe(newAreaSelected => {\r\n            //Cambiando Area selezionata\r\n            //Devo necessariamente recuperare le Location\r\n\r\n            //Se il documento è in stato inserted non è ancora arrivato dal server\r\n            if (!newAreaSelected.inserted) {\r\n              \r\n              //Richiedo al server le Location\r\n              this.requestLocation(newAreaSelected.ID);\r\n\r\n              //Chiedo la situazione dell' AppReady\r\n              let actualAppReady = this._appReady.getValue();\r\n              if (!actualAppReady) {\r\n                //Applicazione non ancora pronta\r\n\r\n                //Mi sottoscrivo per capire quando posso partire\r\n                //appena sono arrivate le location\r\n                this.listenLocation = this.locationService.listLocation\r\n                      .subscribe(data => {\r\n                        if (data.length !== 0) {\r\n                          //App entra in stato pronto\r\n                          this._appReady.next(true);\r\n\r\n\r\n                          LogApp.consoleLog('Avvio AppReady');\r\n\r\n                          //Dopo che l'app è partita in questo contento non \r\n                          //mi serve piu sapere lo state Location\r\n                          this.listenLocation.unsubscribe();\r\n                        }\r\n                });\r\n              }\r\n\r\n            }\r\n          })\r\n    }\r\n\r\n\r\n\r\n  //#endregion\r\n\r\n  //#region LOCATIONS\r\n  \r\n\r\n  get listLocation() {\r\n    return this.locationService.listLocation;\r\n  }\r\n\r\n  /**\r\n   * Ritorna la location attiva\r\n   */\r\n  get activeLocation() {\r\n    return this.locationService.activeLocation;\r\n  }\r\n\r\n  /**\r\n   * Richiesta al server di tutte le location dell'area\r\n   * @param idArea Area selezionata\r\n   */\r\n  requestLocation(idArea: string) {\r\n    const actualStartConfig = this._startConfig.getValue();\r\n    \r\n    return this.locationService.requestByIdArea(actualStartConfig, idArea);\r\n  }\r\n\r\n  newRequestLocation(idArea: string){\r\n    return this.locationService.newRequestByIdArea(idArea);\r\n  }\r\n\r\n  /** Effettua la richiesta al server di una Location precisa\r\n   * @param idLocation Location scelta \r\n   * \r\n   */\r\n  requestLocationByID(idLocation: string, _numLivelli?:number):Promise<Location> {\r\n    const actualStartConfig = this._startConfig.getValue();\r\n    \r\n    return this.locationService.requestLocationByID(actualStartConfig, idLocation, _numLivelli);\r\n  }\r\n\r\n  /**\r\n   * Cerca nel servizio la Location desiderata\r\n   * NON OBSERVABLE\r\n   * @param idLocation IDLocation cercata\r\n   */\r\n  findLocationByID(idLocation: string) {\r\n    return this.locationService.findLocationByID(idLocation);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param selectedLocation Location richiesta\r\n   */\r\n  requestLocationCampiSport(selectedLocation: Location) {\r\n    const listSport = this.sportService.actualListSport;\r\n    const actualStartConfig = this._startConfig.getValue();\r\n\r\n    //Inietto nel servizio la decodifica della Lista Sport\r\n    this.locationService.decodeListSport = listSport;\r\n\r\n    return this.locationService\r\n               .syncInfoCampi(actualStartConfig, selectedLocation);\r\n  }\r\n\r\n\r\n  /**\r\n   * Ritorna il template Week con tutti i giorni della settimana e gli SlotTime da applicare\r\n   * in una prenotazione\r\n   * (Schema di Default che andrà successivamente attualizzato con le info di occupazione e\r\n   * chiusura specifica per festività etc)\r\n   * @param docLocation Location richiesta\r\n   */\r\n  getTemplateSlotWeek(docLocation: Location) {\r\n\r\n    return this.locationService.getTemplateSlotWeek(docLocation);\r\n\r\n  }\r\n  \r\n  //#endregion\r\n\r\n\r\n//#region SPORT SERVICE\r\n\r\n/**\r\n * Richiede in modalità Observable l'elenco degli sport\r\n */\r\nget listSport() {\r\n  return this.sportService.listSport;\r\n}\r\n\r\n/**\r\n * Lista degli sport in modalità non observable\r\n */\r\nget actualListSport() {\r\n  return this.sportService.actualListSport;\r\n}\r\n\r\n\r\n/**\r\n * Dato l'id di uno sport, ritorna l'icona\r\n * @param idSport l'id dello sport\r\n */\r\ngetSportIcon(idSport:string){\r\n  return this.sportService.getIconaSport(idSport);\r\n}\r\n\r\n/**\r\n * Richiedo al servizio gli Sport\r\n * @param withLivelli Scaricamento con Livelli \r\n */\r\nrequestSport(withLivelli?:boolean) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  this.sportService\r\n      .request(actualStartConfig, withLivelli);\r\n            \r\n}\r\n\r\n/**\r\n * Proprietà per gli Sport di una Location\r\n */\r\nget listLocationSport() {\r\n  return this.sportService.listLocationSport;\r\n}\r\n\r\n/**\r\n * Richiede al server i dati degli Sport in una location\r\n * @param config Dati configurazione\r\n * @param idLocation idLocation selezionata\r\n */\r\nrequestLocationSport(idLocation: string) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  //Effettuo la chiamata\r\n  return this.sportService.requestLocationSport(actualStartConfig, idLocation);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//#endregion\r\n\r\n//#region LIVELLI\r\nget listLivelli() {\r\n  return this.livelloService.listLivelli;\r\n}\r\n\r\n/**\r\n * Richiedo al servizio i Livelli\r\n */\r\nrequestLivelli() {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  return this.livelloService\r\n    .request(actualStartConfig);\r\n}\r\n\r\n\r\n/**\r\n * Richiede al server l'elenco dei Livelli per lo sport\r\n * @param idSport Sport da analizzare\r\n */\r\nrequestLivelliForSport(idSport: string):Promise<Livello[]> {\r\n  return this.livelloService.requestLivelliForSport(idSport);\r\n}\r\n\r\n//#endregion\r\n\r\n//#region CATEGORIAETA\r\n\r\nget listCategoriaEta() {\r\n  return this.categoriaEtaService.listCategorieEta;\r\n}\r\n\r\n/**\r\n * Richiede al server le Categorie Eta\r\n */\r\nrequestCategorieEta() {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  this.categoriaEtaService\r\n      .request(actualStartConfig);\r\n            \r\n}\r\n\r\nisValidCategorieEta(idCategoria: string, eta: number): boolean {\r\n  return this.categoriaEtaService.isValid(idCategoria, eta);\r\n}\r\n//#endregion\r\n\r\n\r\n//#region CORSO\r\n/**\r\n * Elenco Corsi \r\n */\r\nget listCorsi() {\r\n  return this.corsoService.listCorsi;\r\n}\r\n\r\n/**\r\n * Elenco Corsi richiesti da un trainer\r\n */\r\n get listCorsiTrainer() {\r\n  return this.corsoService.listCorsiTrainer;\r\n}\r\n\r\n/**\r\n * Ritorno il filtro corsi impostato nel servizio\r\n */\r\nget filterCorsi() {\r\n  return this.corsoService.filterCorsi;\r\n}\r\n\r\n/**\r\n * Imposta i filtri corsi nel servizio\r\n */\r\nset filterCorsi(value: FilterCorsi) {\r\n  this.corsoService.filterCorsi = value;\r\n}\r\n\r\n/**\r\n * Inizializza e ritorna nuovi Filtri con l'impostazione della location\r\n * @param idLocation ID Location \r\n */\r\nnewFilterCorsi(idLocation: string) {\r\n  return this.corsoService.newFilterCorsi(idLocation);\r\n}\r\n\r\n\r\n\r\nrequestCorsoById(idCorso: string){\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.corsoService.requestById(actualStartConfig, idCorso);\r\n}\r\n\r\nnewRequestCorsoById(idcorso: string){\r\n  return this.corsoService.newRequestById(idcorso);\r\n}\r\n\r\n/**\r\n * Effettua la chiamata al server per ottenere i corsi riferiti al trainer\r\n * Risultato nell'Observable listCorsiTrainer\r\n * \r\n * @param idTrainer Trainer\r\n * @param timeState Corsi richiesti\r\n */\r\n requestTimeTrainerCourse(idTrainer: string, timeState: TimeTrainerCourse):void {\r\n   this.corsoService.requestTimeTrainerCourse(idTrainer, timeState);\r\n }\r\n\r\n//#region coursescheduler\r\n\r\n  /**\r\n   * Ritorna il calendario di un corso\r\n   */\r\n  get calendarioCorso() {\r\n    return this.corsoCalendarioService.calendarioCorso;\r\n  }\r\n\r\n  /**\r\n   * Richiesto il calendario del corso\r\n   * @param idCorso Corso richiesto\r\n   */\r\n  requestCalendarioCorso(idCorso: string) {\r\n    const actualStartConfig = this._startConfig.getValue();\r\n\r\n    return this.corsoCalendarioService.requestCalendario(actualStartConfig, idCorso);\r\n  }\r\n\r\n  requestImpegniTrainer(idRef: string, dataInizio: Date, dataFine?: Date){\r\n    return this.corsoCalendarioService.requestImpegniTrainer(idRef,dataInizio,dataFine);\r\n  }\r\n\r\n  /**\r\n   * Recupera un elemento \"impegno del trainer\" con l'id specificato. ATTENZIONE: devo prima aver eseguito il metodo requestImpegniTrainer\r\n   * @param idPianificazione l'id della pianificazione da recuperare\r\n  */\r\n  getPianificazioneTrainerById(idPianificazione: string){\r\n    return this.corsoCalendarioService.getPianificazioneTrainerById(idPianificazione);\r\n  }\r\n\r\n  insertPresenzeIntoPianificazione(docPianificazione: PianificazioneCorso){\r\n    return this.corsoCalendarioService.insertPresenze(docPianificazione);\r\n  }\r\n\r\n  requestUpdatePresenze(docPianificazione: PianificazioneCorso){\r\n    return this.corsoCalendarioService.updatePresenze(docPianificazione);\r\n  }\r\n\r\n\r\n//#endregion\r\n\r\n////#region corsi\r\n\r\n\r\n\r\n//Ritorna il corso selezionato nel servizio\r\nget selectedCorso() {\r\n  return this.corsoService.selectedCorso;\r\n}\r\n\r\n\r\n//#endregion\r\n\r\n\r\n//#region ISCRIZIONE CORSO\r\n\r\n/**\r\n* Contatta il server per conoscere se sono ancora \r\n* disponibili posti per l'iscrizione a un corso\r\n* \r\n* Ritorna un oggetto di tipo =>  PostResponse\r\n* Result = TRUE (Posti diponibili) / FALSE (Posti Esauriti)\r\n*  \r\n * @param idCorso \r\n * @returns Promise (Resolve)\r\n */\r\ngetPostiDisponibiliCorso(idCorso: string):Promise<PostResponse> {\r\n  return this.iscrizioneCorsoService.getPostiDisponibiliCorso(idCorso);\r\n}\r\n\r\n/**\r\n * Chiama il server per il salvataggio di una nuova iscrizione\r\n * @param docIscrizione Documento Iscrizione da creare\r\n */\r\nrequestSaveIscrizione(docIscrizione: IscrizioneCorso):Promise<PostResponse> {\r\n  return this.iscrizioneCorsoService.requestSaveIscrizione(docIscrizione);\r\n}\r\n//#endregion\r\n\r\n\r\n//#region CORSO VALUTAZIONE\r\n\r\n/**\r\n * Chiede al server una Scheda di Valutazione finale Corso\r\n * \r\n * @param idCorso idCorso richiesto\r\n * @returns resolve con la Scheda di Valutazione\r\n * @return  reject Messaggio Errore\r\n */\r\nrequestSchedaValutazioneCorso(idCorso: string):Promise<CorsoValutazione> {\r\n  return this.corsoValutazioneService.requestSchedaValutazioneCorso(idCorso);\r\n}\r\n\r\n/**\r\n * Richiede al server il salvataggio della scheda di valutazione\r\n * @param docScheda Scheda in salvataggio\r\n */\r\nrequestForSaveSchedaValutazioneCorso(docScheda: CorsoValutazione):Promise<PostResponse> {\r\n  \r\n  return this.corsoValutazioneService.requestForSave(docScheda);\r\n\r\n}\r\n//#endregion\r\n\r\n//#region UTENTE\r\n\r\n\r\nget utente() {\r\n  return this.utenteService.utente;\r\n}\r\n\r\n// Espone se l'utente è loggato \r\nget utenteLogged() {\r\n  return this.utenteService.utenteLoggato;\r\n}\r\n\r\nget actualUtenteLogged() {\r\n  return this.utenteService.actualLoggato;\r\n}\r\n\r\n/**\r\n * recupera l'utente loggato (non Obs)\r\n */\r\nget actualUtente() {\r\n  return this.utenteService.actualUtente;\r\n}\r\n/**\r\n * Memorizza nello storage username e password\r\n * @param username Username da memorizzare\r\n * @param pwd Password da memorizzare\r\n */\r\nsaveStorageUtente(username: string, passwd: string) {\r\n  let account = new storageUtente(username, passwd);\r\n  \r\n  //salvo le informazioni criptate\r\n  let strAccount = account.saveJSON(true);\r\n\r\n  this.storageAccess.set('gouegoser',strAccount);\r\n  LogApp.consoleLog('Saved credential');\r\n}\r\n\r\nupdateClientUtenteData(){\r\n  return this.utenteService.updateClientData();\r\n}\r\n\r\n/**\r\n * Carica dallo Storage le credenziali utente memorizzate\r\n * Se il recupero è corretto tenta anche il login\r\n */\r\nloadStorageUtente() {\r\n  LogApp.consoleLog('Trying autologin');\r\n\r\n  //Chiedo di caricare l'impostazione\r\n  this.storageAccess\r\n      .get('gouegoser')\r\n      .then ((val) => {\r\n        //Credenziali memorizzate\r\n        if (val) {\r\n          let savedUser = new storageUtente('','');\r\n          savedUser.loadJSON(val);\r\n\r\n          if (savedUser.loginUser && savedUser.pwdUser) {\r\n            //Devo tentare di accedere\r\n            \r\n            //Faccio la richiesta al server\r\n            this.userLogin(savedUser.loginUser, savedUser.pwdUser)\r\n                .then(() => {\r\n                  LogApp.consoleLog('AutoLogin passed: ');\r\n                })\r\n                .catch(error => {\r\n                  LogApp.consoleLog('AutoLogin failed: ' + error);\r\n                });\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        //Failed load Storage\r\n      });\r\n      \r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Disconnessione utente richiesta\r\n */\r\nuserLogoff() {\r\n  let myStartConfig = this._startConfig.getValue();\r\n\r\n  // Avviso del logoff\r\n  this.utenteService.logoff();\r\n\r\n  //Tolgo il codice di autorizzazione utente\r\n  myStartConfig.authorizationUserCode = '';\r\n  //Riemetto l'Observable\r\n  this._startConfig.next(myStartConfig);\r\n\r\n  //Tolgo le credenziali memorizzate dallo storage\r\n  this.saveStorageUtente('','');\r\n  \r\n}\r\n\r\n/**\r\n * Effettua la richiesta \r\n * @param username Username Utente\r\n * @param password Password Utente\r\n */\r\nuserLogin(username: string, \r\n          password: string) {\r\n\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  //Mi metto in ascolto per i cambi di Area Favorite a seguito della login\r\n  this.onChangeAreaFavListener();\r\n\r\n  //Chiamo il servizio Utente passando username, password, la configurazione e\r\n  //l'eventuale area da Impostare come attiva dopo il login\r\n  \r\n  return this.utenteService\r\n            .login( username, \r\n                    password,\r\n                    this._startConfig,\r\n                    this._forceIdAreaOnLogin);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Ascolta il cambio dell'idAreaChange \r\n */\r\nonChangeAreaFavListener() {\r\n  this.utenteService.idAreaFAV.subscribe(value => {\r\n    //Se arriva un'area favorita, procedo con il cambio\r\n    if (value) {\r\n      //Cambio dell'area\r\n      this.selectAreaByID(value);\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n/**\r\n * Richiedere al server l'operazione di Update Utente\r\n * @param docUtenteUpdate Documento Utente con le modifiche da inviare\r\n */\r\nupdateUtente(docUtenteUpdate: Utente) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  return this.utenteService.requestUpdate(actualStartConfig, docUtenteUpdate);\r\n}\r\n\r\n/**\r\n * Effettua la richiesta al server per il cambio della password\r\n * Ritorna un Observable\r\n * con {RESULT: 0/1, MESSAGE:''}\r\n * @param oldPsw Password Attuale\r\n * @param newPsw Nuova Password\r\n */\r\nrequestChangePassword(oldPsw:string, newPsw:string) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  return this.utenteService.requestChangePassword(actualStartConfig, oldPsw, newPsw);\r\n}\r\n\r\n\r\n/**\r\n * Foto utente presente nel servizio utente\r\n */\r\nget userPicture():Observable<string> {\r\n  return this.utenteService.userPicture;\r\n}\r\n/**\r\n * Apre la fotocamera per la foto utente\r\n */\r\ntakePictureUtente():Promise<string> {\r\n\r\n  let photoType: PhotoType = PhotoType.account;\r\n  let idPhoto: string = '';\r\n\r\n  return new Promise<string>((resolve, reject) => {\r\n    \r\n    if (this.utenteLogged) {\r\n  \r\n      //Identificativo della foto\r\n      this.utente.subscribe(elutente => {\r\n\r\n        idPhoto = elutente.ID;\r\n    \r\n        //Apro la fotocamera per il caricamento\r\n        this.photoService.takePicure(photoType, idPhoto)\r\n                        .then(dataUrl => {\r\n\r\n                          //Foto memorizzata, la imposto nel servizio utente\r\n                          this.utenteService.setUserPicture(dataUrl);\r\n                          //Risolvo la Promise\r\n                          resolve(dataUrl);\r\n\r\n                        })\r\n                        .catch(error => {\r\n                          reject(error);\r\n                        })\r\n      }, error => {\r\n        reject(error);\r\n      })\r\n\r\n    }\r\n    else {\r\n      reject('No user logged');\r\n    }\r\n  })\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * \r\n * @returns DataURL con la foto profilo\r\n */\r\nloadPictureUtente():Promise<string> {\r\n  let photoType: PhotoType = PhotoType.account;\r\n  let idPhoto: string = '';\r\n\r\n  return new Promise<string>((resolve) => {\r\n\r\n    if (this.utenteLogged) {\r\n  \r\n      this.utente.subscribe(elutente => {\r\n        //Identificativo della foto\r\n        idPhoto = elutente.ID;\r\n    \r\n\r\n        //Apro la fotocamera per il caricamento\r\n        this.photoService.storageLoad(photoType, idPhoto)\r\n                        .then(dataUrl => {\r\n\r\n                          //Foto memorizzata, la imposto nel servizio utente\r\n                          this.utenteService.setUserPicture(dataUrl);\r\n\r\n                          resolve(dataUrl);\r\n                        })\r\n                        .catch(error => {\r\n                          resolve('');\r\n                        })\r\n      }, error => {\r\n        resolve('');\r\n      })\r\n\r\n    }\r\n    else {\r\n      resolve('');\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//#endregion\r\n\r\n//#region REGISTRAZIONE ACCOUNT\r\n\r\n/**\r\n * Chiama il server e chiede l'invio dei PINCODE di registrazione\r\n * @param docRequestCode Dati per la richiesta da inviare al server\r\n */\r\nregistrationSendCodici(docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\n    const actualStartConfig = this._startConfig.getValue();\r\n    return this.utenteService.registrationSendCodici(actualStartConfig, docRequestCode);\r\n}\r\n\r\n/**\r\n * Chiama il server inviando i codici inseriti dall'utente per chiederne il controllo\r\n * @param docVerifyCode Dati per la verifica dei codici inseriti\r\n */\r\nregistrationVerifyCodici(docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.registrationVerifyCodici(actualStartConfig, docVerifyCode);\r\n}\r\n\r\n/**\r\n * Invia al server la richiesta per la registrazione di un nuovo account\r\n * @param docUtente Nuovo Utente da registrare\r\n * @param docRequestCode Documento richiesta codici presentato in precedenza\r\n */\r\nregistrationFinalize(docUtente: Utente, \r\n                     docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\n    const actualStartConfig = this._startConfig.getValue();\r\n    return this.utenteService.registrationFinalize(actualStartConfig,docUtente, docRequestCode);\r\n  }\r\n\r\n//#endregion\r\n\r\n//#region PSW RECOVERY\r\n\r\nrecoverySendCodici(docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.recoverySendCodici(actualStartConfig, docRequestCode);\r\n}\r\n\r\nrecoveryVerifyCodici(docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.recoveryVerifyCodici(actualStartConfig, docVerifyCode);\r\n}\r\n\r\n\r\n/**\r\n * Invia al server la richiesta per la registrazione di un nuovo account\r\n * @param docUtente Nuovo Utente da registrare\r\n * @param docRequestCode Documento richiesta codici presentato in precedenza\r\n */\r\nrecoveryFinalize(docUtente: Utente, \r\n  docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\nconst actualStartConfig = this._startConfig.getValue();\r\nreturn this.utenteService.recoveryFinalize(actualStartConfig,docUtente, docRequestCode);\r\n}\r\n\r\n\r\n//#endregion\r\n\r\n//#region VALIDATION CONTATTI\r\n\r\nvalidationSendCodici(docRequestCode: AccountRequestCode, docUtente: Utente):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.validationSendCodici(actualStartConfig, docUtente, docRequestCode );\r\n}\r\n\r\nvalidationVerifyCodici(docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.validationVerifyCodici(actualStartConfig, docVerifyCode);\r\n}\r\n\r\n//#region PRENOTAZIONE\r\n\r\n/**\r\n * Prenotazione Attiva\r\n */\r\nget activePrenotazione() {\r\n  return this.prenotazioniService.activePrenotazione;\r\n}\r\n\r\n//Passo al servizio una prenotazione e la imposto nel servizio\r\nsetActivePrenotazione(value: Prenotazione) {\r\n  this.prenotazioniService.setActivePrenotazione(value);\r\n}\r\n\r\n/**\r\n * Chiede al servizio di inizializzare una nuova Prenotazione\r\n * @param idArea IDArea da impostare\r\n */\r\ninitActivePrenotazione(idArea: string) {\r\n  this.prenotazioniService.initActivePrenotazione(idArea);\r\n}\r\n\r\n/**\r\n * Chiede al servizio di impostare la pianificazione\r\n * @param docPianificazione Pianificazione da impostare\r\n */\r\nsetPianificazioneSingola(docPianificazione: PrenotazionePianificazione) {\r\n  this.prenotazioniService.setPianificazioneSingola(docPianificazione);\r\n}\r\n\r\n/**\r\n * Chiede al servizio di impostare l'utente\r\n * @param idUtente Utente da applicare\r\n */\r\nsetIDUtenteActivePrenotazione(docUtente: Utente) {\r\n  this.prenotazioniService.setIDUtenteActivePrenotazione(docUtente);\r\n}\r\n\r\n/**\r\n * Richiede al servizio il calcolo \r\n * della Prenotazione\r\n * \r\n */\r\nrequestImportoPrenotazione() {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.prenotazioniService.requestImporto(actualStartConfig);\r\n}\r\n\r\n/**\r\n * Ritorna Observable da analizzare con subscribe relativo alla richiesta di salvataggio\r\n * della prenotazione\r\n */\r\nrequestSavePrenotazione() {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.prenotazioniService.requestSave(actualStartConfig);\r\n}\r\n\r\n\r\n\r\n//Mantiene nel servizio il campo per una rilettura futura\r\nsetSelectedCampoPrenotazione(value: Campo) {\r\n  this.prenotazioniService.selectedCampo = value;\r\n}\r\n\r\n//Recupera nel servizio Prenotazione il campo salvato in precedenza\r\ngetSelectedCampoPrenotazione() {\r\n  return this.prenotazioniService.selectedCampo;\r\n}\r\n\r\n/**\r\n * Richiede al server una Prenotazione\r\n * @param idPrenotazione idPrenotazione Padre\r\n */\r\nrequestPrenotazioneById(idPrenotazione: string, numLivelli: number) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.prenotazioniService.requestById(actualStartConfig, idPrenotazione, numLivelli);\r\n}\r\n\r\n\r\nrequestDeletePianificazione(idPianificazione){\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.prenotazioniService.requestDelete(idPianificazione, actualStartConfig);\r\n\r\n}\r\n\r\n//#endregion\r\n\r\n\r\n//#region UtentePrenotazione\r\n\r\n\r\n/**\r\n * Richiede al server elenco di prenotazioni di un utente\r\n * @param idUtente IDUtente Prenotazione\r\n */\r\nrequestUtentePrenotazioni(idUtente: string) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  \r\n  //Richiedo i dati al servizio\r\n  return this.utentePrenotazioneService.request(actualStartConfig, idUtente);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Lista Prenotazioni di tipo Observable\r\n */\r\nget listUtentePrenotazioni() {\r\n  return this.utentePrenotazioneService.listUtentePrenotazione;\r\n}\r\n\r\n//#endregion\r\n\r\n\r\n//#region UtenteIscrizione\r\n\r\n\r\n/**\r\n * Richiede al server elenco di Iscrizioni ai corsi di un utente\r\n * @param idUtente IDUtente\r\n */\r\nrequestUtenteIscrizioni(idUtente: string) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  \r\n  //Richiedo i dati al servizio\r\n  return this.utenteIscrizioneService.request(actualStartConfig, idUtente);\r\n}\r\n\r\n\r\n/**\r\n * Lista Iscrizioni Corsi di tipo Observable\r\n */\r\nget listUtenteIscrizioni() {\r\n  return this.utenteIscrizioneService.listUtenteIscrizione;\r\n}\r\n\r\nrequestIscrizioneById(idIscrizione){\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteIscrizioneService.requestById(actualStartConfig, idIscrizione);\r\n}\r\n\r\n//#endregion\r\n\r\n//#region NEWS EVENTI\r\nget listNews() {\r\n  return this.newsEventiService.listNews;\r\n}\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Recupera le news relative ad un'area\r\n   * @param guidArea il guid dell'area \r\n   * @param nElementi il numero di elementi richiesti\r\n   */\r\n  requestNews(guidArea: string, nElementi: number){\r\n    const actualStartConfig= this._startConfig.getValue();\r\n    return this.newsEventiService.request(actualStartConfig,guidArea,nElementi);\r\n  }\r\n\r\n  /** Effettua la richiesta al servizio di una news\r\n   * @param idNews News scelta \r\n   * \r\n   */\r\n  requestNewsByID(idNews: string) {\r\n    \r\n    \r\n    return this.newsEventiService.getNewsById(idNews);\r\n    \r\n  }\r\n//#endregion\r\n\r\n//#region OCCUPAZIONE CAMPI\r\nget docOccupazione() {\r\n  return this.slotOccupazioneService.docOccupazione;\r\n}\r\n\r\n/**\r\n * Il servizio prende il template dello Slot, richiede al server i dati di occupazione, \r\n * corregge il templateSlotDay e lo ripropone come Observable\r\n * @param templateSlotDay Template della Giornata \r\n * @param idLocation Location\r\n * @param idCampo Campo\r\n * @param dataGiorno Giorno richiesto\r\n */\r\nrequestSlotOccupazioni(templateSlotDay: SlotDay,\r\n                       docLocation: Location, \r\n                       docCampo: Campo, \r\n                       dataGiorno: Date) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  //Faccio la richiesta dei dati al servizio\r\n  return this.slotOccupazioneService.request(actualStartConfig, templateSlotDay, docLocation, docCampo, dataGiorno);\r\n\r\n}\r\n\r\n//#endregion\r\n\r\n//#region PAGAMENTI\r\n\r\n\r\n\r\n//#endregion\r\n\r\n\r\n//#region CODICE FISCALE\r\n/**\r\n * Promise per il controllo e la decodifica del codice fiscale\r\n * Puo' essere usata solo per controllare il Codice Controllo con il resto, oppure per decodificare tutti i campi\r\n * @param codiceFiscale Codice Fiscale da anallizare\r\n * @param decode \r\n */\r\ncheckCodiceFiscale(codiceFiscale: string, \r\n                   decode?:boolean,\r\n                   userMsg?:boolean): Promise<CodiceFiscale> {\r\n  return this.codFiscService.checkCodiceFiscale(codiceFiscale, decode, userMsg);\r\n}\r\n\r\n//#endregion\r\n\r\n/**\r\n * dato un tipo di immagine, la funzione restituisce la stringa in B64\r\n * @param tipo il tipo di immagine richiesta \r\n */\r\nrequestBase64Image(tipo: TipoPrivateImage):Promise<string>{\r\n  return new Promise((resolve,reject)=>{\r\n    const doObject='GRUPPOSPORTIVO'\r\n    let config=this._startConfig.getValue();\r\n    \r\n    let myUrl = config.urlBase + '/' + doObject;  \r\n    \r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override','getBase64PrivateImage');\r\n\r\n    // =new HttpHeaders({\r\n    //   'Content-Type': 'text/plain',\r\n    //   'appid': config.appId,\r\n    //   'X-HTTP-Method-Override':'getBase64PrivateImage'\r\n    // });\r\n    \r\n    let myParams= new HttpParams().set('Tipo', tipo+'');\r\n\r\n    this.apiService.httpGet(myUrl,myHeaders, myParams)\r\n    .pipe(map(data=>{\r\n      return data.image;\r\n    }))\r\n    .subscribe(base64=>{\r\n      resolve(base64);\r\n    },error=>{\r\n      reject(error);\r\n    });\r\n  });\r\n  //#region image\r\n}\r\n\r\n\r\n//#endregion\r\n\r\n\r\n//#region OCCUPAZIONICAMPI\r\n\r\n\r\nrequestOccupazioni(idArea: string, idLocation?: string, top?, params?: RequestParams, fromTime?: Date) {\r\n  return this.occupazioniService.request(idArea, idLocation, params, top, fromTime);\r\n}\r\n\r\nrequestOccupazioniByFilter(filter: OccupazioneCampi, params?: RequestParams){\r\n  return this.occupazioniService.requestByFilter(filter, params);\r\n}\r\n\r\nrequestOccupazioneById(idOccupazione: string, getRelReservation = false){\r\n  return this.occupazioniService.requestById(idOccupazione, getRelReservation);\r\n}\r\n//#endregion\r\n\r\n\r\n////#region DOCUMENTO\r\nrequestDocumento(urlDocumento: string){\r\n  return this.documentoService.request(this.actualStartConfig, urlDocumento);\r\n}\r\n\r\n////#endregion\r\n\r\n\r\n//#region INVOICES\r\n\r\n\r\n/**\r\n * Richiede l'elenco delle ricevute per l'utente passato\r\n * @param utente il documento utente\r\n */\r\n  requestInvoices(utente: Utente, anno: number){\r\n    return this.invoicesService.requestInvoices(utente, anno);\r\n}\r\n\r\n /**\r\n   * Dato un elemento MasterDocumento, la funzione lo scarica e restituisce la postResponse contenente il B64\r\n   * @param documento elemento MasterDocumento che si vuole scaricare\r\n   */\r\n  downloadInvoice(documento: MasterDocumento):Promise<PostResponse>{\r\n    return this.invoicesService.downloadInvoice(documento);\r\n  }\r\n\r\n    /**\r\n   * la funzione, presa una stringa b64 e il content-type, restituisce il blob\r\n   * @param b64Data stringa B64 SENZA tipo di file\r\n   * @param contentType stringa tipo file (default: application/pdf)\r\n   */\r\n  base64toBlob(b64Data, contentType='application/pdf'){\r\n    return this.invoicesService.base64toBlob(b64Data, contentType);\r\n  }\r\n\r\n\r\n\r\n//#endregion\r\n\r\n\r\n//#region posizione\r\n\r\n/**\r\n * La funzione restituisce una promise con la posizione attuale\r\n */\r\ngetCurrentPosition(){\r\n  return this.posizioneService.getCurrentPosition();\r\n}\r\n\r\n/**\r\n * data in input una lista di aree, la funzione restituisce l'oggetto area più vicino alla posizione attuale\r\n * @param listAree la lista delle aree tra cui cercare\r\n */\r\ngetNearestArea(listAree: Area[]){\r\n  return this.posizioneService.getNearestArea(listAree);\r\n}\r\n\r\n//#endregion\r\n\r\n//#region DATECHIUSURE\r\nisFestivita(data: Date, idArea: string, idLocation: string, idCampo: string) {\r\n  return this.dataChiusuraService.idFestivita(idArea, idLocation, idCampo, data);\r\n}\r\n//#endregion\r\n\r\n//#region CORSOALLEGATO\r\n\r\n  requestListAllegatiByIdCorso(idCorso: string): Promise<CorsoAllegato[]>{\r\n    return this.corsoAllegatoService.requestByIdCorso(idCorso);\r\n  }\r\n\r\n//#endregion\r\n\r\n\r\n}\r\n\r\n\r\n","import { CacheListElement } from './cachelistelement.model';\r\nimport { IDDocument } from './iddocument.model';\r\nimport { Descriptor } from './descriptor.model';\r\n\r\nexport class Cache {\r\n    list: CacheListElement[]\r\n\r\n    constructor() {\r\n        this.list = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca nell'Array list se è presente un oggetto della stessa className\r\n     * @param className Nome della classe cercato\r\n     */\r\n    findByClassName(className:string): CacheListElement {\r\n\r\n        return this.list.find(el => {\r\n            return el.className == className;\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Aggiunge alla cache un documento\r\n     * @param doc Documento da aggiungere alla cache\r\n     */\r\n    addTo(doc: IDDocument) {\r\n        //Step 1: Cercare nella lista il CacheListElement corretto con il nome classe \r\n        let objDescriptor: Descriptor;\r\n        let elCacheList: CacheListElement;\r\n        let updateIfExist = false;\r\n\r\n        if (doc) {\r\n            objDescriptor = doc.getDescriptor();\r\n\r\n            if (objDescriptor) {\r\n                //Mi son fatto restituire l'elemento cache\r\n                elCacheList = this.findByClassName(objDescriptor.className);\r\n\r\n                //Non ho nessuna cache lista dell'oggetto specificato\r\n                if (!elCacheList) {\r\n                    //Non ce l'abbiamo ancora in cache\r\n                    elCacheList = new CacheListElement(objDescriptor.className);\r\n                    this.list.push(elCacheList);\r\n\r\n                    updateIfExist = false;\r\n                    elCacheList.addElement(doc, updateIfExist);\r\n\r\n                }\r\n                else {\r\n\r\n                    //L'oggetto specificato possiede gia una lista di cache\r\n                    updateIfExist = true;\r\n                    elCacheList.addElement(doc, updateIfExist );\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport {  TipoCorso, StatoCorso, TargetSesso, Language, Giorni, ModalitaFruizione } from '../models/valuelist.model';\r\nimport { Settimana } from './settimana.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { CorsoProgramma } from './corsoprogramma.model';\r\nimport { PianificazioneCorso } from './pianificazionecorso.model';\r\n\r\nexport class Corso extends IDDocument {\r\n\r\n    DENOMINAZIONE: string;\r\n    SIGLACALENDARIO: string;\r\n    TIPO: TipoCorso;\r\n    IDLIVELLOENTRATA: string;\r\n    _DESCRLIVELLOENTRATA: string;\r\n    IDLIVELLOFINALE: string;\r\n    IDSPORT: string;\r\n    _DESCRSPORT: string;\r\n    NUMEROLEZIONI: number;\r\n    NUMPARTECIPANTI: number;\r\n    MAXPARTECIPANTI: number;\r\n    DATAINIZIO: Date;\r\n    DATAFINE: Date;\r\n    ORELEZIONE: number;\r\n    ORAINIZIO: Date;\r\n    STATO: StatoCorso;\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    IDCAMPO: string;\r\n    GIORNIPREVISTI: string; //Stringa separata da ; con indice dei giorni\r\n    ISCRIZIONEDAL: Date;\r\n    ISCRIZIONEAL: Date;\r\n    TARGETSESSO: TargetSesso;\r\n    IDCATEGORIEETA: string;\r\n    _DESCRCATEGORIEETA: string;\r\n    _SETTIMANA: Settimana[]; //Giorni della Settimana del Corso\r\n    DURATA: number;\r\n    CORSOPROGRAMMA: CorsoProgramma[];\r\n    PIANIFICAZIONECORSO: PianificazioneCorso[];\r\n    MODFRUIZIONE: ModalitaFruizione;\r\n    STATODINAMICO: StatoCorso;\r\n    PREZZOLORDO: number;\r\n    \r\n    \r\n\r\n    constructor(onlyInstance?:boolean) {\r\n      super(onlyInstance);\r\n\r\n      if (!onlyInstance) {\r\n\r\n        this._DESCRCATEGORIEETA = ''\r\n        this._DESCRLIVELLOENTRATA = '';\r\n        this._DESCRSPORT = '';\r\n      }\r\n\r\n\r\n      this.CORSOPROGRAMMA = [];\r\n      this.PIANIFICAZIONECORSO = [];\r\n\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['DENOMINAZIONE',\r\n                    'SIGLACALENDARIO',\r\n                    'IDLIVELLOENTRATA',\r\n                    '_DESCRLIVELLOENTRATA',\r\n                    'IDLIVELLOFINALE',\r\n                    'IDSPORT',\r\n                    '_DESCRSPORT',\r\n                    'IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'IDCAMPO',\r\n                    'GIORNIPREVISTI',\r\n                    'IDCATEGORIEETA',\r\n                    '_DESCRCATEGORIEETA'\r\n                    ];\r\n    let arNumber = ['TIPO',\r\n                    'NUMEROLEZIONI',\r\n                    'NUMPARTECIPANTI',\r\n                    'MAXPARTECIPANTI',\r\n                    'STATO',\r\n                    'STATODINAMICO',\r\n                    'TARGETSESSO',\r\n                    'DURATA'\r\n                   ];\r\n    let arDecimal = ['ORELEZIONE','PREZZOLORDO'];\r\n    let arBoolean = [];\r\n    let arDate = ['DATAINIZIO','DATAFINE','ISCRIZIONEDAL','ISCRIZIONEAL'];\r\n    let arDateTime =[];\r\n    let arTime = ['ORAINIZIO'];\r\n\r\n    objDescriptor.className = 'Corso';\r\n    objDescriptor.classWebApiName = 'CORSO';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n    \r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arDecimal, TypeDefinition.numberDecimal);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n    objDescriptor.addCollection('CORSOPROGRAMMA','CorsoProgramma','IDCORSO');\r\n    objDescriptor.addCollection('PIANIFICAZIONECORSO','PianificazioneCorso','IDCORSO');\r\n\r\n\r\n    objDescriptor.setRelation('IDSPORT','Sport');\r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n    objDescriptor.setRelation('IDCAMPO','Campo');\r\n    objDescriptor.setRelation('IDLIVELLOENTRATA','Livello');\r\n    objDescriptor.setRelation('IDLIVELLOFINALE','Livello');\r\n    objDescriptor.setRelation('IDCATEGORIEETA','CategoriaEta');\r\n    \r\n    \r\n\r\n\r\n    \r\n\r\n    return objDescriptor;\r\n}    \r\n\r\n   \r\n\r\n    /**\r\n     * Imposta le proprietà nell'oggetto\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n      //Chiamo IDDOcument\r\n      super.setJSONProperty(data);\r\n\r\n      //Sistemo la Settimana in italiano\r\n      this.setSettimana(Language.italiano);\r\n\r\n      this.setCollection(data);\r\n\r\n      this.setOriginal();\r\n\r\n    }\r\n\r\n    /**\r\n     * Sistema le collection se presenti\r\n     * @param data JSON Ricevuto\r\n     */\r\n    setCollection(data: any) {\r\n      this.CORSOPROGRAMMA = [];\r\n      this.PIANIFICAZIONECORSO = [];\r\n\r\n      if (data.CORSOPROGRAMMA) {\r\n        this.setCollectionCorsoProgramma(data.CORSOPROGRAMMA);\r\n      }\r\n\r\n      if (data.PIANIFICAZIONECORSO) {\r\n        this.setCollectionPianificazioneCorso(data.PIANIFICAZIONECORSO);\r\n      }\r\n      \r\n    }\r\n\r\n    /**\r\n     * Imposta la collection CorsoProgramma\r\n     * @param arPROGRAMMA JSON Ricevuti\r\n     */\r\n    setCollectionCorsoProgramma(arPROGRAMMA: any[]) {\r\n\r\n      this.CORSOPROGRAMMA = [];\r\n\r\n      if (arPROGRAMMA) {\r\n        arPROGRAMMA.forEach(element => {\r\n          \r\n          // Ricerco se esiste già\r\n          let newProgramma = this.getCorsoProgrammaByID(element.ID);\r\n\r\n          //Non esiste lo creo nuovo\r\n          if (!newProgramma) {\r\n\r\n            newProgramma = new CorsoProgramma();\r\n            newProgramma.setJSONProperty(element);\r\n            this.CORSOPROGRAMMA.push(newProgramma);\r\n\r\n          }\r\n          else {\r\n            //Reimposto i valori\r\n            newProgramma.setJSONProperty(element);\r\n          }\r\n\r\n\r\n        })\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Ritorna l'elemento di Corso Programma che corrisponde con ID\r\n     */\r\n    getCorsoProgrammaByID(idCorsoProgramma): CorsoProgramma {\r\n        // Ricerco se esiste già\r\n        let newProgramma = this.CORSOPROGRAMMA.find(elProgramma => {\r\n          return elProgramma.ID == idCorsoProgramma\r\n        });\r\n\r\n        return newProgramma;\r\n    }\r\n\r\n    /**\r\n     * Imposta la collection Pianificazioni Corso\r\n     * @param arPianificazioni JSON Ricevuti\r\n     */\r\n    setCollectionPianificazioneCorso(arPianificazioni: any[]) {\r\n\r\n      this.PIANIFICAZIONECORSO = [];\r\n\r\n      if (arPianificazioni) {\r\n        arPianificazioni.forEach(element => {\r\n          \r\n          // Ricerco se esiste già\r\n          let newPianificazione = this.getPianificazioneCorsoByID(element.ID);\r\n\r\n          //Non esiste lo creo nuovo\r\n          if (!newPianificazione) {\r\n\r\n            newPianificazione = new PianificazioneCorso();\r\n            newPianificazione.setJSONProperty(element);\r\n            this.PIANIFICAZIONECORSO.push(newPianificazione);\r\n\r\n          }\r\n          else {\r\n            //Reimposto i valori\r\n            newPianificazione.setJSONProperty(element);\r\n          }\r\n\r\n\r\n        })\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Ritorna l'elemento di Pianificazione Corso che corrisponde con ID\r\n     */\r\n    getPianificazioneCorsoByID(idPianificazioneCorso): PianificazioneCorso {\r\n        // Ricerco se esiste già\r\n        let findPianificazioneCorso = this.PIANIFICAZIONECORSO.find(elPianificazione => {\r\n          return elPianificazione.ID == idPianificazioneCorso\r\n        });\r\n\r\n        return findPianificazioneCorso;\r\n    }\r\n\r\n    /**\r\n     * Ritorna un'altra Settimana in un'altra lingua\r\n     * @param language Lingua\r\n     */\r\n    getTranslateSettimana(language?: Language): Settimana[] {\r\n      let myWeek = Settimana.getArray(true, language);\r\n      let arGiorni = this.GIORNIPREVISTI.split(';');\r\n\r\n      //GIORNIPREVISTI contiene 1 Dom, 2 Lun, 3 Mart\r\n\r\n      //Ciclo nei giorni\r\n      arGiorni.forEach(charGiorno => {\r\n\r\n        let index = parseInt(charGiorno.trim());\r\n        //Vado indietro \r\n        index = index -1;\r\n        if (index >= Giorni.domenica && index <= Giorni.sabato) {\r\n            Settimana.selectDayArray(index, myWeek);\r\n        }\r\n      });\r\n\r\n\r\n      return myWeek;\r\n    }\r\n\r\n    /**\r\n     * Crea un Array di tipo Settimana con le giornate previste per il corso\r\n     * @param language Lingua\r\n     */\r\n    setSettimana(language?: Language) {\r\n      //Chiedo un Array Settimana con inizio Domenica\r\n      this._SETTIMANA = Settimana.getArray(true, language);\r\n      let arGiorni = this.GIORNIPREVISTI.split(';');\r\n\r\n      //In giorni previsti c'e' Dom 1, Lun 2 etc\r\n\r\n      //Ciclo nei giorni\r\n      arGiorni.forEach(charGiorno => {\r\n\r\n        let index = parseInt(charGiorno.trim());\r\n        //Porto a base 0 cosi' Domenica è 0 Lun 1 etc\r\n        index = index -1;\r\n        if (index >= Giorni.domenica && index <= Giorni.sabato) {\r\n            Settimana.selectDayArray(index, this._SETTIMANA);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Partendo dall'Array _SETTIMANA crea un array solo per le Giornate selezionate\r\n     */\r\n    getArrayGiorniCorso(): Settimana[] {\r\n      let onlyDays:Settimana[] = [];\r\n\r\n      onlyDays = this._SETTIMANA.filter(element => {\r\n        return element.selected == true\r\n      });\r\n\r\n      return onlyDays;\r\n    }\r\n\r\n    /**\r\n     * Serve per capire sulla card cosa scrivere e quale data mettere\r\n     * next -> Inizia il DATAINIZIO\r\n     * during -> Termina il DATAFINE\r\n     * stop -> Concluso il DATAFINE\r\n     */\r\n    tempoCorso() {\r\n      let adesso = new Date();\r\n      let value = \"\";\r\n\r\n      if (this.DATAINIZIO > adesso) {\r\n        value = \"next\";\r\n      }\r\n      else if (this.DATAFINE > adesso) {\r\n        value = \"during\";\r\n      }\r\n      else {\r\n        value = \"stop\";\r\n      }\r\n\r\n      return value;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna TRUE se Oggi è possibile iscriversi al corso\r\n     */\r\n    flagIscrizioniAperte(): boolean {\r\n      let flag: boolean = false;\r\n\r\n      if (this.STATODINAMICO == StatoCorso.iscrizioniAperte) {\r\n        flag = true;\r\n      }\r\n\r\n      return flag;\r\n    }\r\n\r\n    /**\r\n     * Ritorna una icona a seconda del tipo Corso\r\n     */\r\n    getIcon() {\r\n      let nameIcon= 'ribbon';\r\n\r\n      switch (this.TIPO) {\r\n        case TipoCorso.corso:\r\n          nameIcon = 'ribbon';\r\n          break;\r\n        \r\n        case TipoCorso.prova: \r\n          nameIcon = 'trail-sign';\r\n          break;\r\n      \r\n        default:\r\n          nameIcon = 'ribbon';\r\n          break;\r\n      }\r\n\r\n      return nameIcon;\r\n      \r\n    }\r\n\r\n    /**\r\n     * Controllando il valore del PREZZOLORDO indica se il Corso è Gratuito o a Pagamento\r\n     */\r\n    isAPagamento(): boolean {\r\n      let flagPagamento: boolean;\r\n      flagPagamento = false;\r\n      if (this.PREZZOLORDO && this.PREZZOLORDO != 0) {\r\n        flagPagamento = true;\r\n      }\r\n\r\n\r\n      return flagPagamento;\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * Controlla se esiste un programma del corso\r\n     * @returns TRUE se esiste testo come programma del corso\r\n     */\r\n    existProgrammaCorso(): boolean {\r\n      let exist:boolean = false;\r\n      if (this.CORSOPROGRAMMA) {\r\n        if (this.CORSOPROGRAMMA.length != 0) {\r\n          for (let index = 0; index < this.CORSOPROGRAMMA.length; index++) {\r\n            const element = this.CORSOPROGRAMMA[index];\r\n            if (element.TESTOHTML && element.TESTOHTML.length != 0) {\r\n              exist = true;\r\n              break;\r\n            }\r\n            \r\n          }\r\n        }\r\n      }\r\n\r\n      return exist;\r\n    }\r\n\r\n    /**\r\n     * Anche se ci sono piu record li combina con un <BR>\r\n     * @returns Testo HTML Programma corso completo\r\n     */\r\n    getFullProgrammaHTML(): string {\r\n      \r\n      let txtReturn = '';\r\n      if (this.CORSOPROGRAMMA) {\r\n        if (this.CORSOPROGRAMMA.length != 0) {\r\n          for (let index = 0; index < this.CORSOPROGRAMMA.length; index++) {\r\n            const element = this.CORSOPROGRAMMA[index];\r\n            if (element.TESTOHTML && element.TESTOHTML.length != 0) {\r\n              if (txtReturn.length != 0) {\r\n                txtReturn += '<BR>';\r\n              }\r\n              txtReturn += element.TESTOHTML;\r\n            }\r\n            \r\n          }\r\n        }\r\n      }\r\n\r\n      return txtReturn;\r\n    }\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\nimport { PaymentChannel, StatoPrenotazione } from './valuelist.model';\nimport { RequestForeign } from '../library/models/requestParams.model';\n\nexport class PrenotazionePianificazione extends IDDocument {\n    IDPRENOTAZIONE: string;\n    IDAREAOPERATIVA: string;\n    IDLOCATION: string;\n    IDSPORT: string;\n    _DESCRSPORT: string;\n    IDCAMPO: string;\n    _DESCRCAMPO: string;\n    DATAORAINIZIO: Date;\n    ANNO: number;\n    DATAORAFINE: Date;\n    DURATAORE: number; \n    IMPONIBILE: number;\n    IMPOSTA: number;\n    INCASSATO: number;\n    RESIDUO: number;\n    STATO: StatoPrenotazione;\n    NUMPARTECIPANTI: number;\n    TOTALE: number;\n    GUIDSERIE: string;\n    PROGRESSIVO: string;\n    // IDTRANSACTION: string;\n    // CHANNELPAYMENT: PaymentChannel;\n\n    _INCASSOCUSTODE: number;\n\n    constructor(onlyInstance?:boolean) {\n        super(onlyInstance);\n\n        if (!onlyInstance) {\n            this.NUMPARTECIPANTI = 1;\n            this._DESCRCAMPO = '';\n            this._DESCRSPORT = '';\n        }\n    }\n\n    setJSONProperty(data: any) {\n        super.setJSONProperty(data);\n\n        this.setCollection(data);\n\n        //Imposto che il documento è originale\n        this.setOriginal();\n    }\n\n    setCollection(data: any) {\n\n    }\n\n    /**\n     * Ritorna il descrittore della Struttura Campi\n     */\n    getDescriptor(): Descriptor {\n        let objDescriptor = new Descriptor();\n        let arString = ['IDPRENOTAZIONE',\n                        'IDAREAOPERATIVA',\n                        'IDLOCATION',\n                        'IDSPORT',\n                        'IDCAMPO',\n                        'GUIDSERIE',\n                        'PROGRESSIVO'];\n        let arNumber = ['ANNO','NUMPARTECIPANTI'];\n        let arNumberDecimal = ['DURATAORE',\n                               'IMPONIBILE',\n                               'INCASSATO',\n                               'RESIDUO',\n                               'IMPOSTA',\n                               'TOTALE',\n                               'STATO'];\n        let arBoolean = [];\n        let arDate = [];\n        let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\n        let arTime = [];\n\n        objDescriptor.className = 'PrenotazionePianificazione';\n        objDescriptor.doRemote = true;\n        objDescriptor.classWebApiName = 'PRENOTAZIONEPIANIFICAZIONE';\n        objDescriptor.describeField = 'DATAORAINIZIO';\n\n\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\n\n        objDescriptor.setRelation('IDPRENOTAZIONE','Prenotazione');\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\n        objDescriptor.setRelation('IDLOCATION','Location');\n        objDescriptor.setRelation('IDSPORT','Sport');\n        objDescriptor.setRelation('IDCAMPO','Campo');\n        \n        return objDescriptor;\n    }\n\n\n    static getReqForeignKeys(): RequestForeign[] {\n        let arRequest: RequestForeign[] = [];\n        let objForeign: RequestForeign;\n\n        objForeign = new RequestForeign('IDAREAOPERATIVA');\n        arRequest.push(objForeign);\n\n        objForeign = new RequestForeign('IDSPORT');\n        arRequest.push(objForeign);\n\n        objForeign = new RequestForeign('IDCAMPO');\n        arRequest.push(objForeign);\n\n        objForeign = new RequestForeign('IDLOCATION');\n        objForeign.addDescribeField('DENOMINAZIONE');\n        objForeign.addDescribeField('INDIRIZZO');\n        objForeign.addDescribeField('COMUNE');\n        objForeign.addDescribeField('EMAIL');\n\n        arRequest.push(objForeign);\n\n        return arRequest;\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { IDDocument, OperatorCondition, FilterCondition, IDRepository } from '../models/iddocument.model';\r\nimport {RequestParams, RequestDecode, RequestForeign, PostParams } from '../models/requestParams.model';\r\nimport { DynamicClass } from '../models/structure.model';\r\n\r\nimport { ApicallService } from '../../services/apicall.service';\r\nimport { StartConfiguration } from 'src/app/models/start-configuration.model';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Descriptor, TypeReflector } from '../models/descriptor.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { CacheListElement } from '../models/cachelistelement.model';\r\nimport { Cache } from '../models/cache.model';\r\nimport { LogApp } from 'src/app/models/log.model';\r\nimport { ParamsExport } from '../models/iddocument.model';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DocstructureService {\r\n\r\n  //Struttura documentale\r\n  structureDocuments = [];\r\n  myConfig: StartConfiguration;\r\n  \r\n  \r\n  //Oggetto con la cache\r\n  objCache = new Cache();\r\n  \r\n\r\n\r\n  constructor(private apiService: ApicallService) { \r\n\r\n  }\r\n\r\n  /**\r\n   * Partendo dal servizio Start Service c'e' un subscribe nel costruttore\r\n   * che serve a inviarmi la configurazione ad ogni cambiamento\r\n   * Impostare la configurazione prima delle chiamate\r\n   * @param configuration Configurazione di Partenza\r\n   */\r\n  setConfig(elConfig: StartConfiguration) {\r\n    this.myConfig = elConfig;\r\n    LogApp.consoleLog('New Configuration received');\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Decodifica tutte le Foreign Key presenti, eccetto quelle passate nell'array di esclusione\r\n   * @param doc Documento da decodificare\r\n   * @param fieldsExclude Campi di ForeignKeys da non decodificare\r\n   */\r\n  decodeAll(doc:IDDocument, useCache:boolean=true, fieldsExclude?:string[]){\r\n    \r\n    return new Promise<void>((resolve, reject)=>{       \r\n\r\n      let executePromise:Promise<any|void>[] = [];\r\n\r\n      if (doc) {\r\n        //Chiedo le ForeignKeys del documento\r\n        let arForeign = doc.ForeignKeys;\r\n        let _this = this;\r\n\r\n        /**Ciclo sulle foreignkey */\r\n        for (let index = 0; index < arForeign.length; index++) {\r\n          const element = arForeign[index];\r\n          let use = true;\r\n\r\n          if (fieldsExclude && fieldsExclude.length !== 0) {\r\n            //Utilizzo questa foreignkeys solo se non presente tra quelle da\r\n            //escludere\r\n            use = !(fieldsExclude.includes(element.fieldName));\r\n          }\r\n\r\n          if (use) {\r\n            //Richiedo la decodifica del campo\r\n            executePromise.push(_this.decode(doc, element.fieldName, useCache));\r\n          }\r\n          \r\n        }\r\n\r\n        //Ho dei campi che devo decodificare con le Promise\r\n        if (executePromise.length !== 0) {\r\n\r\n          Promise.all(executePromise).then(() => {\r\n            resolve();\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n\r\n        }\r\n        else {\r\n          //Non ho nulla da decodificare e va bene cosi\r\n          resolve();\r\n        }\r\n\r\n      }\r\n      else {\r\n        reject('Document null');\r\n      }\r\n\r\n\r\n\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param doc Documento\r\n   * @param fieldDecode Nome del campo da cui parte la decodifica\r\n   */\r\n  decode(doc:IDDocument, \r\n         fieldDecode: string, \r\n         useCache:boolean=true, \r\n         newDecodeField?:string[]) {\r\n\r\n    return new Promise<void>((resolve, reject)=>{          \r\n          //Step 1: field Decode esiste in doc\r\n          //Step 2: field Decode è in una relazione\r\n          let definition: TypeReflector;\r\n          let queryServer = true;\r\n          let result = false;\r\n          let goToDecode = false;\r\n\r\n          if (doc && fieldDecode) {\r\n            //Chiedo la definizione del campo, e controlla che\r\n            //n\r\n            definition = doc.getTypeReflectorByFieldName(fieldDecode);\r\n\r\n            //Definizione presente\r\n            if (definition) {\r\n              if (definition.isForeignKey) {  //  {relFieldDoc}\r\n\r\n              \r\n                //Decodifica se il campo  contiene un valore\r\n                goToDecode = !(doc.propertyIsEmpty(fieldDecode));\r\n                \r\n                //Il campo da decodificare contiene un valore\r\n                if (goToDecode) {\r\n\r\n                  //Step 3: Cercare nella cache \r\n                  //Se non lo trovo nella cache devo richiederlo al server\r\n                  if (useCache) {\r\n                    //Cerco nella cache se trovo la decodifica\r\n                    result = this._decodeInCache(doc, definition, newDecodeField);\r\n                    \r\n                    //Se non trovo in cache devo eseguire la query al server\r\n                    queryServer = !result;\r\n                  }\r\n  \r\n                  //Chiedo al server\r\n                  if (queryServer) {\r\n  \r\n                    this._decodeWithServer(doc, definition, newDecodeField)\r\n                        .then(() => {\r\n                          resolve();\r\n                        })\r\n                        .catch(errMessage => {\r\n                          reject(errMessage);\r\n                        });\r\n                  }\r\n                  else {\r\n                    //Ho usato la cache\r\n                    resolve();\r\n                  }\r\n\r\n                }\r\n                else {\r\n                  //Il campo non contiene valori e quini non lo decodifico\r\n                  resolve();\r\n                }\r\n\r\n              }\r\n              else {\r\n                reject('Field ' + fieldDecode + ' is not a foreingKey');\r\n              }\r\n            }\r\n            else {\r\n              reject('Field ' + fieldDecode + ' unknown in structure');\r\n            }\r\n          }\r\n          else {\r\n            reject('Field or Document null');\r\n          }\r\n\r\n        });\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Contatta il server per richiedere elementi \r\n   * in Definition come relFieldDoc e relFieldName\r\n   * @param doc \r\n   * @param definition \r\n   * @param newDecodeField \r\n   */\r\n  private _decodeWithServer(doc:IDDocument, \r\n                            definition: TypeReflector, \r\n                            newDecodeField?:string[]) {\r\n    \r\n    return new Promise<void>((resolve, reject)=>{\r\n\r\n          let docFilter: any = new DynamicClass(definition.relFieldDoc,true);\r\n          \r\n          //Valorizzo le proprietà del documento come filtro di caricamento\r\n          docFilter[definition.relFieldName] = doc[definition.fieldName];\r\n\r\n          this.requestNew(docFilter)\r\n              .then(serverElement => {\r\n                  //In teoria dovrei aver ricevuto qualcosa dal server\r\n                  if (serverElement.length !== 0) {\r\n                    //Step 1: Inserirlo in cache\r\n                    this.objCache.addTo(serverElement[0]);\r\n\r\n                    //Step 2: Valorizzare le proprietà\r\n                    this._setNewDecodeField(doc, serverElement[0], newDecodeField);\r\n\r\n                    \r\n                  }\r\n\r\n                  resolve();\r\n\r\n              })\r\n              .catch(errMessage => {\r\n                reject(errMessage);\r\n              });\r\n    });\r\n\r\n\r\n  } \r\n\r\n  /**\r\n   * \r\n   * @param doc Documento da decodificare\r\n   * @param definition Definitione del campo e sua relazione\r\n   * @param newDecodeField Se presenti vengono creati come campi di decodifica al posto del describeRowField\r\n   */\r\n  private _decodeInCache(doc:IDDocument, \r\n                         definition: TypeReflector, \r\n                         newDecodeField?:string[]): boolean {\r\n\r\n    let elementList: CacheListElement;\r\n    let result = false;\r\n    let findElement: IDDocument;\r\n    let nameField: string;\r\n\r\n\r\n    if (doc && definition) {\r\n      if (this.objCache) {\r\n\r\n        elementList = this.objCache.findByClassName(definition.relFieldDoc);\r\n\r\n        //Questa è la lista degli elementi della stessa tipologia del \r\n        //documento di riferimento che contiene le decodifiche\r\n        if (elementList) {\r\n\r\n          nameField = definition.relFieldName;\r\n\r\n          if (elementList.list) {\r\n            //Cerco nella lista della cache il valore presente nel documento e impostato come nameField nel documento correlato\r\n            findElement = elementList.findElementByFieldName(nameField, doc[definition.fieldName]);\r\n\r\n            //Questo e' il documento di Decodifica\r\n            //Devo conoscere il valore della proprietà eletta come describeRowField\r\n            if (findElement) {\r\n\r\n              //Passo il documento che devo modificare e il documento di decodifica\r\n              result = this._setNewDecodeField(doc, findElement, newDecodeField);\r\n              \r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n\r\n    return result;\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param doc Documento a cui applicare nuovi campi\r\n   * @param docRel Documento di riferimento\r\n   * @param useFields Se presente sono i campi usati per la decodifica, altrimenti viene usato il describeRowFields\r\n   */\r\n  private _setNewDecodeField(doc: IDDocument, \r\n                             docRel: IDDocument, \r\n                             useFields?:string[]): boolean {\r\n    let objDescriptor: Descriptor;\r\n    let result = false;\r\n    let nameDescribe = '';\r\n    let nameNewProperty = '';\r\n\r\n    if (doc && docRel) {\r\n      if (!useFields || useFields.length == 0) {\r\n        //doc è il documento a cui aggiungere proprietà\r\n        //in questo caso ne aggiungo 1 sola, che è il describeRowField del docRel\r\n        objDescriptor = docRel.getDescriptor();\r\n\r\n        if (objDescriptor && objDescriptor.describeField && objDescriptor.describeField.length !== 0) {\r\n\r\n          nameDescribe = objDescriptor.describeField;\r\n          nameNewProperty = \"_\" + objDescriptor.describeField + \"_\" + objDescriptor.className;\r\n\r\n          //Creo la nuova proprietà con il valore\r\n          doc[nameNewProperty] = docRel[nameDescribe];\r\n\r\n          result = true;\r\n        }\r\n  \r\n  \r\n      }\r\n      else {\r\n        //Nell'array useFields ho i nomi dei campi che voglio come nuovi campi di decodifica\r\n        objDescriptor = docRel.getDescriptor();\r\n        for (let index = 0; index < useFields.length; index++) {\r\n          const elFieldDecode = useFields[index];\r\n\r\n          nameDescribe = elFieldDecode;\r\n          nameNewProperty = \"_\" + elFieldDecode + \"_\" + objDescriptor.className;\r\n\r\n          //Creo la nuova proprietà con il valore\r\n          doc[nameNewProperty] = docRel[nameDescribe];\r\n\r\n          result = true;          \r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    return result;\r\n  }\r\n\r\n  \r\n\r\n\r\n   /**\r\n    * Carica una collection figlia del documento passato \r\n    * e la imposta nel documento\r\n    * @param document  Documento base da cui caricare\r\n    * @param collectionName Nome collection da caricare\r\n    * @param params parametri aggiuntivi\r\n    */\r\n  public loadCollection(document:IDDocument, collectionName: string, params?:RequestParams) {\r\n    return new Promise<IDDocument>((resolve, reject)=>{\r\n      let prosegui = true;\r\n      let objDescriptor: Descriptor;\r\n      let message: string = '';\r\n      let defCollection: TypeReflector;\r\n      let namePrimaryKey = '';\r\n\r\n      if (!document) {\r\n        message = 'Documento null';\r\n        prosegui = false;\r\n        reject(message);\r\n      }\r\n      else if (!collectionName || collectionName.length == 0) {\r\n        message = 'Collection non specificata';\r\n        prosegui = false;\r\n        reject(message);\r\n      }\r\n\r\n      if (prosegui) {\r\n        //Recupero il descrittore della classe\r\n        objDescriptor = document.getDescriptor();\r\n\r\n        if (!objDescriptor) {\r\n          prosegui = false;\r\n          message = \"Document descriptor not find\";\r\n          reject(message);\r\n        }\r\n      }\r\n\r\n      \r\n\r\n      //Controllo correttezza configurazione collection\r\n      if (prosegui) {\r\n        defCollection = objDescriptor.getByCollectionName(collectionName);\r\n\r\n        if (!defCollection) {\r\n          prosegui = false;\r\n          message = 'Collection ' + collectionName + 'not found';\r\n          reject(message);\r\n        }\r\n        else if (!defCollection.relFieldDoc || defCollection.relFieldDoc.length == 0) {\r\n          prosegui = false;\r\n          message = 'Document in collection ' + collectionName + ' not defined';\r\n          reject(message);\r\n        }\r\n        else if (!defCollection.relFieldName || defCollection.relFieldName.length == 0) {\r\n          prosegui = false;\r\n          message = 'Field in ' + defCollection.relFieldDoc + ' to loading collection ' + collectionName + ' not defined';\r\n          reject(message);\r\n        }\r\n      }\r\n\r\n      if (prosegui) {\r\n        namePrimaryKey = objDescriptor.primaryKeyFieldName;\r\n\r\n        if (namePrimaryKey.length == 0) {\r\n          prosegui = false;\r\n          message = 'Document Descriptor ' + objDescriptor.className + ' without primary key';\r\n          reject(message);\r\n        }\r\n\r\n      }\r\n\r\n      //Preparo il documento di filtro per la chiamata\r\n      if (prosegui) {\r\n\r\n        let filterDocument: any = new DynamicClass(defCollection.relFieldDoc,true);\r\n        filterDocument[defCollection.relFieldName] = document[namePrimaryKey];\r\n\r\n        this.requestNew(filterDocument, params)\r\n          .then(collReceived => {\r\n\r\n            //Devo eliminare i dati precedenti della collection del documento\r\n            //Svuoto la collection attuale\r\n            document[defCollection.fieldName] = [];\r\n\r\n            document[defCollection.fieldName] = collReceived;\r\n            resolve(document);\r\n\r\n\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Per ogni documento contenuto nella collection viene caricata la collection figlia richiesta\r\n   * @param collection Collection di Documenti\r\n   * @param collectionName Collection figlia da caricare\r\n   * @param params parametri aggiuntivi\r\n   */\r\n  public loadCollectionMulti(collection: IDDocument[], collectionName:string, params?:RequestParams) {\r\n    return new Promise<IDDocument[]>((resolve, reject)=>{\r\n      let executePromise:Promise<IDDocument>[] = [];\r\n      if (collection && collection.length !== 0) {\r\n\r\n        for (let index = 0; index < collection.length; index++) {\r\n          const elDocument = collection[index];\r\n\r\n          let exPromise = this.loadCollection(elDocument, collectionName, params);\r\n          executePromise.push(exPromise);\r\n\r\n        }\r\n\r\n        //Esecuzione di tutte le Promise se presenti\r\n        if (executePromise.length !== 0) {\r\n          //Eseguo tutte le Promise\r\n          Promise.all(executePromise)\r\n                  .then(() => {\r\n                    //Ritorno il tutto decodificato\r\n                    resolve(collection);\r\n                  })\r\n                  .catch(err => {\r\n                    reject(err);\r\n                  });\r\n          }\r\n          else {\r\n            //Non ho nulla da decodificare e va bene cosi\r\n            resolve(collection);\r\n          }\r\n      }\r\n      else {\r\n        reject('Collection not defined');\r\n      }\r\n    });\r\n  }  \r\n\r\n  /**\r\n   * Effettua chiamate al server \r\n   * il document dovrà essere istanziato con i parametri che si desiderano diventare filtri di caricamento\r\n   * @param filterDocument Parametri di configurazione\r\n   * @param decode Effettua la decodifica dei dati \r\n   */\r\n  public requestNew(filterDocument: IDDocument, params?:RequestParams) {\r\n\r\n    return new Promise<any[]>((resolve, reject)=>{\r\n      \r\n      \r\n      let myHeaders = this.myConfig.getHttpHeaders();\r\n      let objDescriptor: Descriptor;\r\n      let childLevel = -1;\r\n      let orderBy: string = '';\r\n      let nElem = 0;\r\n      let requestAndDecode = false;\r\n      let foreignFields: RequestForeign[];\r\n      \r\n      if (!filterDocument) {\r\n        reject('Documento filtro non presente');\r\n      }\r\n      else {\r\n        //Recupero il descrittore della classe\r\n        objDescriptor = filterDocument.getDescriptor();\r\n\r\n        if (!objDescriptor) {\r\n          reject('Descrittore Documento filtro non presente');\r\n        }\r\n        else if (objDescriptor.doRemote == false) {\r\n          //Non è gestito esternamente\r\n          reject('Documento non gestito in remoto');\r\n        }\r\n        else {\r\n\r\n          // Controllo i parametri di richiesta\r\n          if (params) {\r\n\r\n            if (params.child_level) {\r\n              childLevel = params.child_level;\r\n            }\r\n\r\n            if (params.top) {\r\n              nElem = params.top;\r\n            }\r\n\r\n            if (params.orderBy) {\r\n              orderBy = params.orderBy;\r\n            }\r\n\r\n            if (params.decode) {\r\n              if (params.decode.active) {\r\n                requestAndDecode = true;\r\n\r\n                if (params.decode.foreignFields) {\r\n                  foreignFields = params.decode.foreignFields;\r\n                }\r\n              }\r\n\r\n            }\r\n\r\n            \r\n\r\n          }\r\n\r\n          // In Testata c'e' sempre l'AppId\r\n          //myHeaders = myHeaders.set('appid',this.myConfig.appId);\r\n\r\n          if (childLevel != -1) {\r\n            myHeaders = myHeaders.append('child-level', childLevel+'');\r\n          }\r\n\r\n          if (orderBy && orderBy.length !== 0) {\r\n            myHeaders = myHeaders.append('order-by', orderBy);\r\n          }\r\n\r\n\r\n          //Preparare i parametri con i filtri arrivati sul documento\r\n          let myParams = this._getHttpParamsFromDoc(filterDocument);\r\n\r\n          if (nElem && nElem > 0){\r\n            myParams=myParams.append('$top',nElem+'');\r\n          }\r\n\r\n\r\n\r\n          let myUrl = this.myConfig.urlBase + '/' + objDescriptor.classWebApiName;\r\n\r\n          if (!myParams) {\r\n            reject('Request Parametri insufficienti');\r\n          }\r\n          else {\r\n\r\n            this.apiService\r\n              .httpGet(myUrl, myHeaders, myParams)\r\n              .pipe(map(fullData => {\r\n                return fullData[objDescriptor.classWebApiName]\r\n              }))\r\n              .subscribe (resultData => {\r\n\r\n                let listElement: IDDocument[] = [];\r\n\r\n                if (resultData){\r\n\r\n                  resultData.forEach(elData => {\r\n                    \r\n                    let newClass: any = new DynamicClass(objDescriptor.className);\r\n                    newClass.setJSONProperty(elData);\r\n                    listElement.push(newClass);\r\n                  });\r\n                  \r\n\r\n                }\r\n\r\n                //Se non devo decodificare posso fare qui il resolve\r\n                if (!requestAndDecode) {\r\n                  resolve(listElement);\r\n                }\r\n                else if (listElement.length !== 0) {\r\n\r\n                  this.decodeCollection(listElement, foreignFields)\r\n                      .then(() => {\r\n                        resolve(listElement);\r\n                      })\r\n                      .catch(errMessage => {\r\n                        reject(errMessage);\r\n                      });\r\n                }\r\n                else {\r\n                  resolve(listElement);\r\n                }\r\n\r\n              }, error => {\r\n                reject(error);\r\n              });\r\n\r\n          }\r\n          \r\n        }\r\n      }\r\n      \r\n    });\r\n\r\n  }\r\n\r\n\r\n  \r\n  public decodeCollection(collection: IDDocument[], foreignFields?:RequestForeign[]) {\r\n    \r\n    //Devo decodificare l'intera collection di dati\r\n    //Versione 1: foreignField non presente\r\n    //        Decodifica di tutte le foreign key presenti con il describeRowField default\r\n    //Versione 2: foreignField presente \r\n    //        Decodifica delle solo foreign key indicate controllando all'interno se ci sono campi di decodifica richiesti\r\n    \r\n\r\n\r\n    return new Promise((resolve, reject)=>{        \r\n\r\n      let executePromise:Promise<any>[] = [];\r\n\r\n      //Dati presenti in collection\r\n      if (collection && collection.length !== 0) {\r\n\r\n        //Versione 2\r\n        if (foreignFields && foreignFields.length !== 0) {\r\n\r\n          for (let index = 0; index < collection.length; index++) {\r\n            const doc = collection[index];\r\n\r\n            //Ciclo i ForeignFields\r\n            for (let iField = 0; iField < foreignFields.length; iField++) {\r\n              const elForeign = foreignFields[iField];\r\n\r\n              let exPromise = this.decode(doc,elForeign.nameField,true,elForeign.describeFields);\r\n              //Aggiunta all'Array\r\n              executePromise.push(exPromise);\r\n            }\r\n\r\n          }\r\n  \r\n        }\r\n        else {\r\n          //Versione 1\r\n          //Decodifica di tutte le foreign key presenti con il describeRowField default\r\n          //Utilizzo il decodeAll\r\n          for (let index = 0; index < collection.length; index++) {\r\n            const doc = collection[index];\r\n\r\n            //Creo la Promise di decodifica\r\n            let exPromise = this.decodeAll(doc);\r\n            \r\n            //Aggiunta all'Array\r\n            executePromise.push(exPromise);\r\n          }\r\n\r\n        }\r\n        \r\n        //Esecuzione di tutte le Promise se presenti\r\n        if (executePromise.length !== 0) {\r\n        //Eseguo tutte le Promise\r\n        Promise.all(executePromise)\r\n                .then(() => {\r\n                  //Ritorno il tutto decodificato\r\n                  resolve(collection);    \r\n                })\r\n                .catch(err => {\r\n                  reject(err);\r\n                });\r\n        }\r\n        else {\r\n          //Non ho nulla da decodificare e va bene cosi\r\n          resolve(collection);          \r\n        }\r\n\r\n      }\r\n      else {\r\n\r\n        //Non ci sono dati ritorno la stessa collection vuota\r\n        resolve(collection);\r\n      }\r\n\r\n    });\r\n\r\n\r\n    \r\n  }\r\n\r\n    \r\n  /**\r\n   * Prepara i parametri per la chiamata controllando i parametri presenti sul documento\r\n   * @param document Documento con i parametri di filtro\r\n   */\r\n  private _getHttpParamsFromDoc(document:IDDocument): HttpParams {\r\n    \r\n    let myParams: HttpParams;\r\n    let arProperty = Object.keys(document); //Prendo tutte le proprietà\r\n    let objDescriptor = document.getDescriptor(); //Descrittore dell'oggetto\r\n\r\n    \r\n    // CIclo le proprieta dell'oggetto filter\r\n    objDescriptor.fields.forEach(element => {\r\n      let nameProperty = element.fieldName;\r\n      let strValue = '';\r\n      let tipo = document.getPropertyType(nameProperty);\r\n      let operatoreSpecial: OperatorCondition; //Condizione speciale sulla proprietà\r\n\r\n      //Se non inizia con _ è una proprieta da includere\r\n      if (!nameProperty.startsWith('_')) {\r\n        let filterCondition: FilterCondition;\r\n        \r\n\r\n        //Recupero della condizione di filtro speciale\r\n        filterCondition = document.getFilterConditionByFieldName(nameProperty);\r\n\r\n        //Recupero la condizione speciale (potrebbe non esserci)\r\n        operatoreSpecial = document.getFilterOperatorByFieldName(nameProperty);\r\n\r\n        //La proprietà non contiene un valore\r\n        if (document[nameProperty] == null || document[nameProperty] == undefined ) {\r\n          //C'e' una condizione di filtro speciale\r\n          if (filterCondition) {\r\n            \r\n            //Gli elementi contenuti vanno in OR e separati dal punto e virgola\r\n            if (filterCondition.listOrValue && filterCondition.listOrValue.length != 0) {\r\n              //Ci sono valori da mettere in OR\r\n\r\n              //Devo inserirli separati da ;\r\n              for (let index = 0; index < filterCondition.listOrValue.length; index++) {\r\n                const valoreProperty = filterCondition.listOrValue[index];\r\n                if (strValue && strValue.length != 0) {\r\n                  strValue += ';';\r\n                }\r\n\r\n                strValue += document.formatValue(tipo,valoreProperty);\r\n              }\r\n\r\n              //Si inseriscono con l'operatore uguaglianza\r\n              operatoreSpecial = OperatorCondition.uguale;\r\n\r\n            }\r\n          }\r\n        }\r\n        else  {\r\n\r\n          //Converto il valore della proprieta\r\n          strValue = document.formatValue(tipo, document[nameProperty]);\r\n\r\n          //Recupero la condizione speciale (potrebbe non esserci)\r\n          operatoreSpecial = document.getFilterOperatorByFieldName(nameProperty);  \r\n          \r\n        }\r\n\r\n        //Posso aggiungerle ai parametri\r\n        if (strValue.length !== 0) {\r\n\r\n          //Tutti i parametri vengono aggiunti per uguaglianza o controllando\r\n          //se presenti con una condizione diversa nel filterCondition\r\n          \r\n          //Viene sempre ritornato l'operatore da impostare\r\n          strValue = operatoreSpecial + strValue;\r\n          \r\n          if (myParams == undefined) {\r\n            myParams = new HttpParams().set(nameProperty, strValue);\r\n          }\r\n          else {\r\n            //Aggiungo il parametro\r\n            myParams = myParams.append(nameProperty, strValue);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return myParams;\r\n  }\r\n\r\n  /**\r\n  * Clona un oggetto \r\n  */\r\n  public cloneObject(document:IDDocument): any {\r\n    let objDescriptor: Descriptor;\r\n    let cloneObj:any;\r\n\r\n    if (document) {\r\n\r\n      objDescriptor = document.getDescriptor();\r\n\r\n      cloneObj = new DynamicClass(objDescriptor.className, true);\r\n\r\n      for (var attribut in document) {\r\n          if (typeof document[attribut] === \"object\") {\r\n              //cloneObj[attribut] = this.cloneObject(document[attribut]);\r\n          } else {\r\n              cloneObj[attribut] = document[attribut];\r\n          }\r\n      }\r\n    }\r\n    \r\n    return cloneObj;\r\n\r\n  }\r\n\r\n  /**\r\n   * Dato un documento di partenza e una sequenza di campi ritorna il documento correlato\r\n   * Esempio Documento Corso contiene IDLOCATION\r\n   * seqField mi da il percorso da seguire per arrivare al documento correlato\r\n   * seqField = ['IDLOCATION'] => Location\r\n   * seqField = ['IDLOCATION', 'IDAREA'] => Area\r\n   * seqField = ['IDLOCATION', 'IDAREA','IDGRUPPO'] => Gruppo\r\n   * @param docStart Documento di partenza\r\n   * @param seqField Percorso da seguire per ottenere il documento correlato\r\n   * @param childLevel Profondita dell'ultima chiamata\r\n   * @param docRepository Aggiunge il documento correlato al documento passato (spesso il docRepository è uguale a docStart)\r\n   */\r\n  public getRelDoc( docStart: IDDocument, \r\n                    seqField: string[], \r\n                    childLevel = 2,\r\n                    docRepository?: IDDocument,\r\n                    indexSeq = -1):Promise<any> {\r\n    return new Promise((resolve, reject)=>{  \r\n\r\n      let nameField = '';\r\n      \r\n      let objFieldType: TypeReflector;\r\n\r\n      if (docStart) {\r\n        if (seqField && seqField.length !== 0) {\r\n\r\n          if (indexSeq == -1) {\r\n            //Inizio il giro impostando posizione 0\r\n            indexSeq = 0;\r\n          }\r\n        }\r\n\r\n        if (seqField && seqField.length !== 0) {\r\n          \r\n          nameField = seqField[indexSeq];\r\n\r\n          //Con il nome del campo, ottengo la definizione del campo\r\n          objFieldType = docStart.getTypeReflectorByFieldName(nameField);\r\n            \r\n          //Il campo esiste e contiene qualcosa\r\n          if (objFieldType && docStart.propertyIsEmpty(nameField)==false) {\r\n\r\n            //E' un campo in foreing Key\r\n            if (objFieldType.isForeignKey) {\r\n              \r\n              //Impostare il documento di filtro\r\n              let filter:any = new DynamicClass(objFieldType.relFieldDoc, true);\r\n              let idDocFilter:IDDocument = filter;\r\n\r\n              idDocFilter.setPrimaryKey(docStart[nameField]);\r\n\r\n              //creo i filtri per il child level\r\n              let params : RequestParams = new RequestParams();\r\n              if (seqField.length == indexSeq + 1) {\r\n                params.child_level = childLevel;\r\n              }\r\n              else {\r\n                params.child_level = 1;\r\n              }\r\n\r\n              this.requestNew(idDocFilter, params)\r\n                  .then(arElement => {\r\n\r\n                    if (arElement && arElement.length !== 0) {\r\n                      let element = arElement[0];\r\n\r\n                      \r\n                      //Ho ancora relazioni da decodificare\r\n                      if (indexSeq + 1 < seqField.length) {\r\n                        //Incremento l'indice sequenza\r\n                        indexSeq++;\r\n                        //Eseguo un nuovo relDoc\r\n                        return this.getRelDoc(element, seqField, childLevel, docRepository, indexSeq);\r\n\r\n                      }\r\n                      else {\r\n\r\n                        //Il giro è finito\r\n\r\n                        //Elemento presente e vuole che venga aggiunto al documento chiamante come relDoc nel Repository\r\n                        if (element && docRepository) {\r\n                          \r\n                          //Aggiungo al repository\r\n                          docRepository.addToRepositoryRelDoc(element, seqField);\r\n                        }\r\n\r\n\r\n                        return resolve(element);\r\n                      }\r\n                    }\r\n                    else {\r\n                      console.log('Document rel not found');\r\n                      return resolve(null);\r\n                    }\r\n\r\n                  })\r\n                  .catch(error => {\r\n                    return reject(error);\r\n                  })\r\n  \r\n            }\r\n            else {\r\n              console.log('Foreign Key not found');\r\n              return resolve(null);\r\n            }\r\n          }\r\n          else {\r\n            console.log('Foreign Key not found');\r\n            return resolve(null);\r\n          }\r\n          \r\n  \r\n        }\r\n        else {\r\n          reject('Sequence Field Link empty');\r\n        }\r\n      }\r\n      else {\r\n        reject('Document null or undefined');\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Richiede per tutti i documenti della collection, un documento relativo \r\n   * basato sulla sequenza seqField\r\n   * Il documento correlato viene aggiunto al repository di ogni documento\r\n   * @param collection Collection di Documenti della stessa tipologia\r\n   * @param seqField Percorso da seguire per ottenere il documento correlato\r\n   */\r\n  public getRelDocCollection( collection: IDDocument[],\r\n                              seqField: string[]\r\n                              ) {\r\n\r\n    return new Promise<void>((resolve, reject)=>{\r\n\r\n      let executePromise:Promise<any>[] = [];\r\n\r\n      if (collection) {\r\n        for (let index = 0; index < collection.length; index++) {\r\n          const elDoc = collection[index];\r\n          let elPromise = this.getRelDoc(elDoc, seqField, 1, elDoc);\r\n          executePromise.push(elPromise);\r\n        }\r\n\r\n        if (executePromise.length != 0) {\r\n          Promise.all(executePromise)\r\n            .then( () => {\r\n              resolve();\r\n            })\r\n            .catch(error => {\r\n              reject(error);\r\n            });\r\n        }\r\n      }\r\n\r\n\r\n    });\r\n            \r\n }\r\n\r\n  // ****************************************************************\r\n  // ***************  REQUEST PER I METODI STATICI    ***************\r\n  // ****************************************************************\r\n\r\n  /**\r\n   * Effettua una chiamata POST al metodo indicato dell'oggetto specificato\r\n   * E' possibile indicare a scelta:\r\n   * 1) un jsonbody stringa o documento (il documento viene convertito in JSON)\r\n   * 2) postParams:unione di chiavi /valore da inviare nei parametri se i valori non sono oggetti, altrimenti essendo oggetti,\r\n   *    viene creato un oggetto e innestato nel body\r\n   * \r\n   * \r\n   * \r\n   * \r\n   * @param documentCall Documento a cui effettuare la chiamata\r\n   * @param method nome del metodo statico da chiamare\r\n   * @param jsonBodyOrDoc body da inviare in formato json o documento\r\n   * @param postParams Array con i parametri da aggiungere nell'url\r\n   */\r\n  public requestForFunction(documentCall: IDDocument, \r\n                     method: string, \r\n                     jsonBodyOrDoc?: string | IDDocument,\r\n                     postParams?: PostParams[] | PostParams\r\n                     ): Promise<any> { \r\n\r\n    return new Promise<any>((resolve,reject) => {\r\n\r\n      let myHeaders = this.myConfig.getHttpHeaders();\r\n      let myParams: HttpParams = new HttpParams();\r\n      let myUrl = '';\r\n      let myJsonBody = '';\r\n      let postBasicType = false;\r\n\r\n      let objDescriptor: Descriptor;\r\n\r\n      if (!this.myConfig) {\r\n        reject('Configuration non presente');\r\n      }\r\n      else if (!documentCall) {\r\n        reject('Documento non presente');\r\n      }\r\n      else if (method.length == 0) {\r\n        reject('Metodo non presente');        \r\n      }\r\n      else {\r\n         //Recupero il descrittore della classe\r\n         objDescriptor = documentCall.getDescriptor();\r\n\r\n\r\n         if (!objDescriptor) {\r\n           reject('Descrittore Documento non presente');\r\n         }\r\n         else if (objDescriptor.doRemote == false) {\r\n           //Non è gestito esternamente\r\n           reject('Documento non gestito in remoto');\r\n         }\r\n         else {\r\n\r\n          //Creo URL di chiamata\r\n          myUrl = this.myConfig.urlBase + '/' + objDescriptor.classWebApiName;\r\n\r\n          //Sistemo l'header\r\n           myHeaders = myHeaders.append('X-HTTP-Method-Override',method);\r\n\r\n           //Controllo dei parametri post\r\n           if (postParams) {\r\n\r\n            //Controllo come sono i parametri di post\r\n            postBasicType = PostParams.getBasicTypeFrom(postParams);\r\n\r\n            if (postBasicType) {\r\n              //Essendo tutti parametri basici li sistemo come parametri\r\n              \r\n              //Se è un Array\r\n              if ( Array.isArray(postParams) ) {\r\n  \r\n                if (postParams.length != 0) {\r\n                  for (let index = 0; index < postParams.length; index++) {\r\n                    const elParam = postParams[index];\r\n                     myParams = myParams.append(elParam.key, elParam.value);\r\n                   }\r\n              }           \r\n             }\r\n             else {\r\n               //Oggetto semplice\r\n               myParams = myParams.append(postParams.key, postParams.value);\r\n             }\r\n\r\n\r\n            }\r\n            else {\r\n              //Costruire un oggetto da sistemare nel body\r\n              jsonBodyOrDoc = PostParams.getJsonFrom(postParams);\r\n\r\n            }\r\n\r\n          } \r\n\r\n          if (jsonBodyOrDoc) {\r\n            if (typeof jsonBodyOrDoc == \"string\") {\r\n              myJsonBody = jsonBodyOrDoc;\r\n            }\r\n            else if (typeof jsonBodyOrDoc == \"object\") {\r\n              //Questi sono i parametri per l'esportazione\r\n              let paramExport = new ParamsExport();\r\n\r\n              paramExport.clearDOProperty = true;\r\n              paramExport.clearPKProperty = false;\r\n              paramExport.clearPrivateProperty = true;\r\n              paramExport.onlyPropertyModified = true;\r\n              paramExport.onlyDocModified = true;\r\n\r\n              paramExport.numLivelli = 999;\r\n              myJsonBody = jsonBodyOrDoc.exportToJSON(paramExport);\r\n            }\r\n          }\r\n\r\n          //Effettuo la chiamata POST\r\n          this.apiService.httpPost(myUrl,myHeaders,myParams, jsonBodyOrDoc)\r\n          .subscribe(response => {\r\n            resolve(response);\r\n          }, error => {\r\n            reject(error);\r\n          });\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n\r\n  }\r\n\r\n  // **********************************************\r\n  // *          REQUEST FOR UPDATE                *\r\n  // **********************************************\r\n\r\n\r\n  /**\r\n   * Richiesta effettuata al server per aggiornare un documento\r\n   * @param document Documento da aggiornare\r\n   * @param onlyPropModified Invia solo le proprietà modificate\r\n   */\r\n  public requestForUpdate(document: IDDocument, onlyPropModified = true, onlyDocModified = false): Promise<any> {\r\n    //Si esegue una PUT con il parametro ID e il body i valori da modificare\r\n    return new Promise<void>((resolve,reject) => {\r\n      let myHeaders = this.myConfig.getHttpHeaders();\r\n      let objDescriptor: Descriptor;\r\n      let fieldNamePK = '';\r\n      let fieldValuePK = '';\r\n      let jsonBody = '';\r\n      let myParams: HttpParams;\r\n      let myUrl = '';\r\n\r\n      if (!document) {\r\n        reject('Document null');\r\n      }\r\n      else {\r\n        //Recupero il descrittore della classe\r\n        objDescriptor = document.getDescriptor();\r\n\r\n        if (!objDescriptor) {\r\n          reject('Descrittore Documento filtro non presente');\r\n        }\r\n        else if (objDescriptor.doRemote == false) {\r\n          //Non è gestito esternamente\r\n          reject('Documento non gestito in remoto');\r\n        }\r\n        else {\r\n          //Recupero nome e valore della primary Key\r\n          fieldNamePK = document.getPrimaryKey('name');\r\n          fieldValuePK = document.getPrimaryKey('value');\r\n\r\n          //Vuole che aggiorni le proprietà modificate ma non ne ho\r\n          //Che facciamo dico che è andata a buon fine\r\n          if (onlyPropModified && document.isModified() == false) {\r\n\r\n          }\r\n          else {\r\n\r\n            //Preparo il body\r\n\r\n            //Questi sono i parametri per l'esportazione\r\n            let paramExport = new ParamsExport();\r\n\r\n            paramExport.clearDOProperty = true;\r\n            paramExport.clearPKProperty = false;\r\n            paramExport.clearPrivateProperty = true;\r\n            paramExport.onlyPropertyModified = onlyPropModified;\r\n            paramExport.onlyDocModified = onlyDocModified;\r\n            \r\n            jsonBody = document.exportToJSON(paramExport);\r\n    \r\n            myUrl = this.myConfig.urlBase + '/' + objDescriptor.classWebApiName;\r\n\r\n            this.apiService\r\n                  .httpPut(myUrl, myHeaders, myParams, jsonBody )\r\n                  .subscribe(() => {\r\n                    resolve();\r\n                  },error => {\r\n                    reject(error);\r\n                  });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LogApp } from '../models/log.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomEncriptionService {\r\n\r\n  private privateKey: string = '5468765198654984964198';\r\n  private table = [];\r\n\r\n\r\n  constructor() {\r\n\r\n    this._initTable();\r\n  }\r\n  \r\n\r\n  private _initTable(){\r\n    this.table = [\r\n      ['D','d','8','Y','R','g','z','9','B','A' ],          \r\n      ['G','p','B','y','f','M','Z','A','Y','a' ],          \r\n      ['b','P','5','0','N','r','8','a','C','G' ],          \r\n      ['a','r','3','F','1','2','n','X','6','R' ],          \r\n      ['C','N','A','l','g','6','B','Y','5','1' ],          \r\n      ['h','A','0','t','2','7','e','1','J','6' ],          \r\n      ['H','O','R','T','3','A','L','6','h','7' ],          \r\n      ['Q','o','l','w','B','c','R','4','q','2' ],          \r\n      ['j','I','J','6','c','1','4','2','D','5' ],          \r\n      ['1','2','I','5','4','B','c','W','w','b' ],          \r\n    ]\r\n  }\r\n\r\n\r\n  private _getUTCTimestamp(){\r\n    let utc: number;\r\n    let now = new Date()\r\n    // utc = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds(), now.getMilliseconds())\r\n\r\n    utc = now.getTime();\r\n    return utc;\r\n  }\r\n\r\n  private _encrypt(str){\r\n    let encryptedStr = '';\r\n    \r\n    let keyPointer = 0;\r\n\r\n\r\n    for(let i = 0; i< str.length; i++){\r\n        //recupero il carattere (numerico) da crittografare\r\n        let initialValue = str[i];\r\n\r\n        //recupero il carattere della chiave da usare per la codifica\r\n        let keyValue = this.privateKey[keyPointer];\r\n\r\n        //recupero dalla matrice il valore codificato\r\n        let finalValue = this.table[keyValue][initialValue];\r\n\r\n        //aggiungo il valore trovato alla stringa finale codificata\r\n        encryptedStr += finalValue\r\n\r\n        //avanzo di una posizione con il puntatore alla chiave\r\n        keyPointer ++;\r\n\r\n        //se il puntatore alla chiave è arrivato alla fine, torno all'inizio\r\n        if(keyPointer == this.privateKey.length){\r\n            keyPointer = 0;\r\n        }\r\n    }\r\n\r\n\r\n    return encryptedStr;\r\n  }\r\n\r\n  private _decrypt(encryptedStr){\r\n\r\n    let decryptedStr = '';\r\n    let keyPointer = 0;\r\n\r\n    for(let i = 0; i< encryptedStr.length; i++){\r\n\r\n        //recupero il carattere giusto della chiave\r\n        let keyValue = this.privateKey[keyPointer];\r\n\r\n        let encryptedChar = encryptedStr[i];\r\n\r\n        //con il carattere della chiave, recupero la riga:\r\n        let myRow = this.table[keyValue];\r\n\r\n        //nella riga, l'indice del carattere crittografato è il carattere non crittografato\r\n        let decryptedChar = myRow.findIndex(value => {\r\n            return value == encryptedChar;\r\n        })\r\n        \r\n        //aggiungo il carattere trovato alla mia stringa finale \r\n        decryptedStr += decryptedChar;\r\n\r\n        //avanzo di una posizione con il puntatore alla chiave\r\n        keyPointer ++;\r\n\r\n        //se il puntatore alla chiave è arrivato alla fine, torno all'inizio\r\n        if(keyPointer == this.privateKey.length){\r\n            keyPointer = 0;\r\n        }\r\n    }\r\n\r\n    return decryptedStr;\r\n\r\n  }\r\n\r\n  private _getSignatureToEncrypt(){\r\n    let str= '';\r\n\r\n    let currentTimestamp = this._getUTCTimestamp();\r\n\r\n    let time1 = currentTimestamp;\r\n    let time2 = currentTimestamp * 2;\r\n    let time3 = currentTimestamp * 3;\r\n\r\n    str = str + time1 + time2 + time3;\r\n\r\n    \r\n    return str;\r\n  }\r\n\r\n  // private _convertToB64(stringToConvert: string){\r\n  //   //@ts-ignore\r\n  //   let buff = Buffer.from(stringToConvert);\r\n\r\n  //   return buff.toString('base64');\r\n  // }\r\n\r\n  // private _convertFromB64(stringToConvert: string){\r\n  //   //@ts-ignore\r\n  //   let buff = Buffer.from(stringToConvert, 'base64');\r\n  //   return buff.toString('ascii');\r\n  // }\r\n\r\n\r\n  /**\r\n   * crittografa una stringa usando la tabella e la chiave\r\n   * @param str stringa da crittografare\r\n   */\r\n  public encrypt(str){\r\n    return this._encrypt(str);\r\n  }\r\n\r\n  /**\r\n   * decrittografa la stringa guardando chiave e tabella\r\n   * @param str stringa da decrittografare\r\n   */\r\n  public decrypt(str){\r\n    \r\n      return this._decrypt(str);\r\n  }\r\n\r\n\r\n  /**\r\n   * restituisce una firma secondo le specifiche. Encodata in B64\r\n   */\r\n  public getB64EncryptedSignature(){\r\n    let signature = this._getSignatureToEncrypt();\r\n    signature = this.encrypt(signature);\r\n    LogApp.consoleLog('Signature: ' + signature);\r\n    //@ts-ignore\r\n    signature = window.btoa(signature);\r\n    LogApp.consoleLog('Signature Base64: ' + signature);\r\n    return signature;\r\n  }\r\n\r\n\r\n\r\n  // public decodeB64Signature(b64EncryptedSignature){\r\n  //   let encryptedSignature = this._convertFromB64(b64EncryptedSignature);\r\n  //   let decryptedSignature = this.decrypt(encryptedSignature);\r\n\r\n  //   let tok1 = decryptedSignature.substring(0, 13);\r\n  //   let tok2 = decryptedSignature.substring(13, 26);\r\n  //   let tok3 = decryptedSignature.substring(26, 39);\r\n\r\n  //   let tok1n = parseInt(tok1, 10);\r\n  //   let tok2n = parseInt(tok2, 10) / 2;\r\n  //   let tok3n = parseInt(tok3, 10) / 3;\r\n\r\n  //   let myDate = new Date(100);\r\n  //   if(tok1n == tok2n && tok1n == tok3n){\r\n\r\n  //     myDate.setTime(tok1n);\r\n      \r\n  //   }\r\n  //   return  myDate;\r\n   \r\n  // }\r\n   \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { CategoriaEta } from '../models/categoriaeta.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { resolve } from 'url';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoriaetaService {\r\n\r\n  private _listCategorieEta = new BehaviorSubject<CategoriaEta[]>([]);\r\n\r\n  get listCategorieEta() {\r\n    return this._listCategorieEta.asObservable();\r\n  }\r\n\r\n    /**\r\n   * Ritorna la lista non in modalità Observable\r\n   */\r\n  get actualListCategorieEta() {\r\n    return this._listCategorieEta.getValue();\r\n  }\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n  /**\r\n   * Richiede al server l'elenco delle Categorie Eta\r\n   * @param config Parametri configurazione chiamata\r\n   */\r\n  request(config: StartConfiguration) {\r\n    return new Promise<void>((resolve,reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n\r\n      const doObject = 'CATEGORIEETA';\r\n  \r\n      \r\n      //Nei Parametri imposto il LivelloAutorizzazione\r\n      //TODO: Fatta cosi non mi piace\r\n      let myParams = new HttpParams().set('LivelloAutorizzazione','0');\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n          return data.CATEGORIEETA\r\n        }))\r\n        .subscribe(resultData => {\r\n  \r\n          if (resultData) {\r\n            \r\n            resultData.forEach(element => {\r\n              let newCategoria = new CategoriaEta();\r\n              newCategoria.setJSONProperty(element);\r\n              this.addCategoriaEta(newCategoria);\r\n              resolve();\r\n            });\r\n          }\r\n          else {\r\n            reject('no data Categoria Eta retrieved');\r\n          }\r\n\r\n           },\r\n           error=>{\r\n             reject(error);\r\n           }\r\n        )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge un oggetto Categorie Eta all'Observable\r\n   * @param objCategoriaEta Oggetto Categoria Eta da aggiungere\r\n   */\r\n  addCategoriaEta(objCategoriaEta: CategoriaEta) {\r\n    this.listCategorieEta\r\n      .pipe(take(1))\r\n      .subscribe( collEta => {\r\n        this._listCategorieEta.next( collEta.concat(objCategoriaEta));\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Cerca e ritorna un record della categoria eta\r\n   * @param idCategoriaEta idCategoria Scelta\r\n   */\r\n  findCategoriaEtaById(idCategoriaEta: string): CategoriaEta {\r\n    let objCategoria: CategoriaEta;\r\n    let listaCat = this._listCategorieEta.getValue();\r\n\r\n    if (idCategoriaEta && listaCat && listaCat.length != 0 ) {\r\n        objCategoria = listaCat.find(elCat => {\r\n          return (elCat.ID == idCategoriaEta);\r\n        })\r\n    }\r\n\r\n    return objCategoria;\r\n  }\r\n\r\n\r\n  /**\r\n   * IDCategoria da controllare se l'età risulta valida\r\n   * @param idCategoria idCategoria scelta\r\n   * @param eta Età\r\n   */\r\n  isValid(idCategoria: string, eta: number): boolean {\r\n    let isValid = false;\r\n    let objCategoria: CategoriaEta;\r\n\r\n    objCategoria = this.findCategoriaEtaById(idCategoria);\r\n\r\n    if (objCategoria) {\r\n        isValid = objCategoria.isValid(eta);\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Data } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { resolve } from 'url';\r\nimport { OperatorCondition } from '../library/models/iddocument.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { Area } from '../models/area.model';\r\nimport { Campo } from '../models/campo.model';\r\nimport { DataChiusura } from '../models/datachiusura.model';\r\nimport { Gruppo } from '../models/gruppo.model';\r\nimport { Location } from '../models/location.model';\r\nimport { AttivitaChiusura, TipoChiusura } from '../models/valuelist.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataChiusuraService {\r\n\r\n  private _listChiusure: DataChiusura[] = [];\r\n\r\n  listChiusure: BehaviorSubject<DataChiusura[]> = new BehaviorSubject<DataChiusura[]>([]);\r\n\r\n  constructor(\r\n    private docStructureService: DocstructureService,\r\n  ) { }\r\n\r\n  /**\r\n   * aggiuge un elemento alla lista\r\n   * @param element l'elemento da aggiungere\r\n   */\r\n  private addElementToList(element: DataChiusura){\r\n    this._listChiusure.push(element);\r\n    this.listChiusure.next(this._listChiusure);\r\n\r\n  }\r\n\r\n  /**\r\n   * Richiede l'elenco completo di tutte le chiusure del gruppo sportivo SOLO PER GLI AFFITTI\r\n   */\r\n  request(){\r\n\r\n    return new Promise ((resolve, reject) => {\r\n\r\n      \r\n      //creo il filtro\r\n      let filterDocument = new DataChiusura(true);\r\n\r\n  \r\n      //aggiungo le due condizioni in or (chiusure per affitti e per affitti/corsi)\r\n      filterDocument.addFilterCondition(OperatorCondition.uguale, 'ATTIVITACHIUSURA', [AttivitaChiusura.affittoStrutture, AttivitaChiusura.tutte]);\r\n  \r\n      //ora faccio la richiesta\r\n      this.docStructureService.requestNew(filterDocument)\r\n      .then(rawListChiusure => {\r\n  \r\n        //salvo la lista ed emetto l'observable\r\n        this._listChiusure = rawListChiusure;\r\n        this.listChiusure.next(this._listChiusure);\r\n  \r\n        //risolvo la lista\r\n        // console.log('LISTA CHIUSURE');\r\n        // console.log(this._listChiusure);\r\n        resolve(this._listChiusure);\r\n      })\r\n    })\r\n\r\n    \r\n    \r\n  }\r\n\r\n  /**\r\n   * Ritorna se la Data passata è una festività di chiusura\r\n   * @param idArea L'area\r\n   * @param idLocation la location\r\n   * @param idCampo il campo\r\n   * @param data la data da controllare\r\n   */\r\n  idFestivita(idArea: string, idLocation: string, idCampo: string, data: Date): boolean{\r\n    let aperto = true;\r\n\r\n    if (this._listChiusure){\r\n      \r\n\r\n      for (let index = 0; index < this._listChiusure.length; index++) {\r\n        const elemChiusura = this._listChiusure[index];\r\n\r\n        if( elemChiusura.IDAREA == idArea && \r\n            (elemChiusura.IDLOCATION == undefined || elemChiusura.IDLOCATION == idLocation) && \r\n            (elemChiusura.IDCAMPO == undefined || elemChiusura.IDCAMPO == idCampo )) {\r\n        \r\n              //REGOLA VALIDA DA CONTROLLARE - IN QUESTO GIORNO SIAMO CHIUSI\r\n              if (elemChiusura.TIPOCHIUSURA == TipoChiusura.rangeDate && elemChiusura.DATADAL <= data && data <= elemChiusura.DATAAL){\r\n        \r\n                //il giorno  ricade in un range di date di chiusura\r\n                aperto = false;\r\n                break;\r\n              }\r\n              else if (elemChiusura.TIPOCHIUSURA == MyDateTime.getFesta(data)){\r\n                    //nel giorno  c'è una festa in cui il centro chiude\r\n                    aperto = false;\r\n                    break;\r\n              }\r\n              \r\n        }\r\n        \r\n      }\r\n                \r\n\r\n    }\r\n        \r\n    return (!aperto);\r\n  }\r\n\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\nimport { Corso } from '../models/corso.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { FilterCorsi } from '../models/filtercorsi.model';\r\nimport { Sport } from '../models/sport.model';\r\nimport { Livello } from '../models/livello.model';\r\nimport { CategoriaEta } from '../models/categoriaeta.model';\r\n\r\nimport { PostParams, RequestDecode, RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { TimeTrainerCourse } from '../models/valuelist.model';\r\nimport { DynamicClass } from '../library/models/structure.model';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CourseService {\r\n\r\n  private _listCorsi = new BehaviorSubject<Corso[]>([]);\r\n  private _filterCorsi: FilterCorsi;\r\n  private _decodeListSport: Sport[];\r\n  private _decodeListLivelli: Livello[];\r\n  private _decodeListEta: CategoriaEta[];\r\n  private _selectedCorso = new BehaviorSubject<Corso>(new Corso());\r\n\r\n  private _listCorsiTrainer = new BehaviorSubject<Corso[]>([]);\r\n\r\n  \r\n  constructor(\r\n    private docStructureService: DocstructureService,\r\n    private apiService: ApicallService\r\n  ){\r\n\r\n  }\r\n\r\n\r\n\r\n  get listCorsi() {\r\n    return this._listCorsi.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Sono i corsi che il trainer richiede nella pagina Trainer\r\n   */\r\n  get listCorsiTrainer() {\r\n    return this._listCorsiTrainer.asObservable();\r\n  }  \r\n\r\n  get selectedCorso() {\r\n    return this._selectedCorso.asObservable();\r\n  }\r\n\r\n  get filterCorsi() {\r\n    return this.filterCorsi;\r\n  }\r\n\r\n  set filterCorsi(value: FilterCorsi) {\r\n    this._filterCorsi = value;\r\n  }\r\n\r\n  set decodeListSport(value: Sport[]) {\r\n    this._decodeListSport = value;\r\n  }\r\n\r\n  set decodeListLivelli(value: Livello[]) {\r\n    this._decodeListLivelli = value;\r\n  }\r\n\r\n  set decodeListEta(value: CategoriaEta[]) {\r\n    this._decodeListEta = value;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Inizializza e ritorna una copia del filtro dei corsi\r\n   * @param idLocation Location da utilizzare\r\n   */\r\n  newFilterCorsi(idLocation: string) {\r\n    this._filterCorsi = new FilterCorsi(idLocation);\r\n\r\n    return this._filterCorsi;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Effettua una chiamata al server per il recupero dei corsi\r\n   * Utilizzare il documento di Filtro per richiedere dati filtrati\r\n   * @param config Parametri di configurazione\r\n   * @param docUser Documento Utente loggato. Se presente i corsi vengono proposti solo quelli validi all'utente\r\n   */\r\n  requestById (config: StartConfiguration, idCorso: string, numLivelli?:string) {\r\n    return new Promise<Corso>((resolve, reject)=>{\r\n\r\n      if (!numLivelli){\r\n        numLivelli='3';\r\n      }\r\n\r\n      let myHeaders = config.getHttpHeaders();\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'CORSO';\r\n      \r\n  \r\n\r\n      myHeaders = myHeaders.set('child-level', numLivelli);\r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      let myParams = new HttpParams().set('ID',idCorso)\r\n      \r\n      //Effettuo la chiamata\r\n      this.apiService\r\n          .httpGet(myUrl, myHeaders, myParams)\r\n          .pipe(map(data => {\r\n            return data.CORSO;\r\n          }))\r\n          .subscribe( resultData => {\r\n\r\n            if (resultData[0] && resultData[0]!={}){\r\n              let objCorso = new Corso();\r\n              objCorso.setJSONProperty(resultData[0]);\r\n              \r\n              //Decodifico i campi chiave\r\n              objCorso.lookup('IDSPORT', this._decodeListSport, 'DENOMINAZIONE');\r\n              \r\n              //Decodifico i campi chiave\r\n              objCorso.lookup('IDCATEGORIEETA', this._decodeListEta, 'DESCTOOLTIP');\r\n              \r\n              //Decodifico i campi chiave\r\n              objCorso.lookup('IDLIVELLOENTRATA', this._decodeListLivelli, 'DENOMINAZIONE');\r\n              \r\n              resolve(objCorso);     \r\n            }\r\n            else\r\n            {\r\n              reject('corso non trovato');\r\n            }\r\n\r\n          }, error=>{\r\n            reject(error);\r\n          })\r\n    })\r\n  }\r\n\r\n  newRequestById(idCorso: string){\r\n    return new Promise<any>((resolve, reject) => {\r\n      //preparo il filtro\r\n      let filtroCorso = new Corso(true);\r\n      filtroCorso.ID=idCorso;\r\n\r\n      //preparo i parametri per decodificare\r\n      let params = new RequestParams();\r\n      params.decode = new RequestDecode();\r\n      params.decode.active = true;\r\n      \r\n\r\n\r\n       //faccio la richiesta\r\n       this.docStructureService.requestNew(filtroCorso, params)\r\n       .then((listCorsi : Corso[]) => {\r\n\r\n          let myCorso: Corso;\r\n          if (listCorsi && listCorsi.length != 0) {\r\n            //Prendo il primo corso (in teoria anche l'unico)\r\n            myCorso = listCorsi[0];\r\n          }\r\n\r\n          if (myCorso) {\r\n            //ora richiedo anche il programma\r\n            this.docStructureService.loadCollection(myCorso, 'CORSOPROGRAMMA')\r\n            .then(() => {\r\n              resolve(myCorso);\r\n\r\n            })\r\n            .catch(error => {\r\n              reject(error);\r\n            });\r\n          }\r\n          else {\r\n            reject('Errore recupero corso');\r\n          }\r\n          \r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      })\r\n  })\r\n}\r\n\r\n/**\r\n * Effettua la chiamata al server per ottenere i corsi riferiti al trainer\r\n * Risultato nell'Observable listCorsiTrainer\r\n * \r\n * @param idTrainer Trainer\r\n * @param timeState Corsi richiesti\r\n */\r\n requestTimeTrainerCourse(idTrainer: string, timeState: TimeTrainerCourse):void {\r\n  let myPostParams : PostParams;\r\n  let arPostParams: PostParams[] = [];\r\n  let method: string = 'getCorsitrainer';\r\n  let docCall: Corso = new Corso();\r\n\r\n  if (idTrainer && idTrainer.length != 0) {\r\n\r\n    if ([-1,0,1].includes(timeState)) {\r\n      \r\n      //Procedo con la chiamata\r\n      myPostParams = new PostParams();\r\n      myPostParams.key = 'idTrainer';\r\n      myPostParams.value = idTrainer;\r\n      arPostParams.push(myPostParams);\r\n\r\n      myPostParams = new PostParams();\r\n      myPostParams.key = 'stateTime';\r\n      myPostParams.value = timeState;\r\n      arPostParams.push(myPostParams);\r\n\r\n      this.docStructureService.requestForFunction(docCall,method,'',arPostParams)\r\n                              .then((collData:Object) => {\r\n\r\n                                let listElement: Corso[] = [];\r\n                                let collDataCorso: any[];\r\n\r\n                                \r\n                                if (collData) {\r\n\r\n                                  if (collData.hasOwnProperty('CORSO')) {\r\n                                    collDataCorso = collData['CORSO'];\r\n\r\n                                    if (collDataCorso.length != 0) {\r\n  \r\n                                      //Creo la lista\r\n                                      collDataCorso.forEach(elData => {\r\n                                        let newElement: Corso = new Corso;\r\n                                        newElement.setJSONProperty(elData);\r\n                                        listElement.push(newElement);\r\n  \r\n                                        //Ogni volta riemetto la lista\r\n                                        this._listCorsiTrainer.next(listElement);\r\n                                      })\r\n  \r\n                                      //Adesso voglio anche decodificare i dati contenuti\r\n                                      this.docStructureService.decodeCollection(listElement)\r\n                                                              .then(() => {\r\n                                                                //Riemetto la lista aggiornata\r\n                                                                this._listCorsiTrainer.next(listElement);\r\n                                                              })\r\n                                                              .catch(error => {\r\n                                                                //Anche in errore riemetto la lista\r\n                                                                this._listCorsiTrainer.next(listElement);\r\n  \r\n                                                              })\r\n  \r\n                                    }\r\n                                    else {\r\n                                      //Nessun dato\r\n                                      this._listCorsiTrainer.next([]);\r\n  \r\n                                    }\r\n                                  }\r\n                                  else {\r\n                                      //Nessun dato\r\n                                      this._listCorsiTrainer.next([]);                                    \r\n                                  }\r\n\r\n                                }\r\n                                else {\r\n                                  //Nessun dato\r\n                                  this._listCorsiTrainer.next([]);\r\n                                }\r\n                              })\r\n\r\n\r\n    }\r\n  }\r\n  \r\n }\r\n\r\n\r\n  /**\r\n   * Ritorna un oggetto HttpParams con i parametri impostati\r\n   * @param filter Oggetto co i filtri da applicare e passare come HttpParams\r\n   */\r\n  getHttpParamsFilter(filter: FilterCorsi): HttpParams {\r\n    let myParams = new HttpParams().set('IDLOCATION', filter.IDLOCATION);\r\n    let arProperty = Object.keys(filter); //Prendo tutte le proprieta\r\n\r\n    // CIclo le proprieta dell'oggetto filter\r\n    arProperty.forEach(element => {\r\n      let nameProperty = element;\r\n\r\n      //Se non inizia con _ è una proprieta da includere\r\n      if (!nameProperty.startsWith('_')) {\r\n        //Se c'è un valore\r\n        if (filter[nameProperty]) {\r\n          let value = filter[nameProperty];\r\n\r\n          /* Per la DATAFINE applico la condizione se è presente*/\r\n          if (value == 'DATAFINE') {\r\n\r\n            if (filter._CONDITIONDATAFINE) {\r\n              value = filter._CONDITIONDATAFINE + value;\r\n            }\r\n            \r\n          }\r\n\r\n          //Aggiungo il parametro\r\n          myParams = myParams.append(nameProperty, value);\r\n        }\r\n      }\r\n      else if (nameProperty = '_CHECKISCRIZIONEAPERTA') {\r\n        if (filter[nameProperty]) {\r\n          //devo includere la ricerca \r\n          //per avere solo i corsi con iscrizione aperta\r\n          \r\n        }\r\n      }\r\n    });\r\n\r\n\r\n    return myParams;\r\n  }\r\n\r\n  /**\r\n   * Aggiunge un corso all'elenco dei corsi\r\n   * @param objCorso Corso da Aggiungere\r\n   */\r\n  addCorso(objCorso: Corso) {\r\n    this.listCorsi\r\n      .pipe(take(1))\r\n      .subscribe( collCorsi => {\r\n        this._listCorsi.next( collCorsi.concat(objCorso));\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Elimina tutti i corsi presenti\r\n   */\r\n  emptyCorsi() {\r\n    this._listCorsi.next([]);\r\n  }\r\n\r\n\r\n}\r\n","import { Descriptor, TypeDefinition } from \"../library/models/descriptor.model\";\r\nimport { IDDocument } from \"../library/models/iddocument.model\";\r\nimport { CorsoValutazioneLivello } from \"./corsovalutazionelivello.model\";\r\n\r\nexport class CorsoValutazione extends IDDocument {\r\n    IDCORSO:                string;\r\n    FLAGBOZZA:              boolean;\r\n    DATAORAVALUTAZIONE:     Date;\r\n    TESTOVALUTAZIONE:       string;\r\n    VOTAZIONEFINALE:        number;\r\n    IDUTENTE:               string;\r\n    NOMINATIVO:             string;\r\n\r\n    CORSOVALUTAZIONELIVELLO: CorsoValutazioneLivello[];\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDCORSO',\r\n            'TESTOVALUTAZIONE',\r\n            'IDUTENTE',\r\n            'NOMINATIVO'\r\n        ];\r\n        let arNumber = ['VOTAZIONEFINALE'];\r\n        let arBoolean = ['FLAGBOZZA'];\r\n        let arDate = ['DATAORAVALUTAZIONE'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'CorsoValutazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CORSOVALUTAZIONE';\r\n        objDescriptor.describeField  = 'NOMINATIVO';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDCORSO', 'Corso');\r\n        objDescriptor.setRelation('IDUTENTE', 'Utente');\r\n       \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n    constructor(onlyInstance?: boolean){\r\n        super(onlyInstance);\r\n\r\n        this.DATAORAVALUTAZIONE = new Date();\r\n        this.TESTOVALUTAZIONE = '';\r\n        this.CORSOVALUTAZIONELIVELLO = [];\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * Imposta le proprietà nell'oggetto\r\n     * @param data JSON Received\r\n     */\r\n     setJSONProperty(data: any) {\r\n        //Chiamo IDDOcument\r\n        super.setJSONProperty(data);\r\n    \r\n        this.setCollection(data);\r\n  \r\n        this.setOriginal();\r\n  \r\n      }\r\n  \r\n      /**\r\n       * Sistema le collection se presenti\r\n       * @param data JSON Ricevuto\r\n       */\r\n      setCollection(data: any) {\r\n\r\n        this.CORSOVALUTAZIONELIVELLO = [];\r\n        \r\n        if (data.CORSOVALUTAZIONELIVELLO) {\r\n\r\n          this.setCollectionCorsoValutazioneLivello(data.CORSOVALUTAZIONELIVELLO);\r\n        }\r\n  \r\n        \r\n      }\r\n  \r\n      /**\r\n       * Imposta la collection CORSOVALUTAZIONELIVELLO coni dati ricevuti\r\n       * @param arValutazioni JSON Ricevuti\r\n       */\r\n       setCollectionCorsoValutazioneLivello(arValutazioni: any[]) {\r\n  \r\n        this.CORSOVALUTAZIONELIVELLO = [];\r\n  \r\n        if (arValutazioni) {\r\n\r\n          arValutazioni.forEach(element => {\r\n            \r\n            // Ricerco se esiste già\r\n            let newValutazione = this.getCorsoValutazioneLivelloByID(element.ID);\r\n  \r\n            //Non esiste lo creo nuovo\r\n            if (!newValutazione) {\r\n  \r\n              newValutazione = new CorsoValutazioneLivello();\r\n              //Imposto i dati\r\n              newValutazione.setJSONProperty(element);\r\n              //Aggiungo alla collection\r\n              this.CORSOVALUTAZIONELIVELLO.push(newValutazione);\r\n  \r\n            }\r\n            else {\r\n              //Reimposto i valori\r\n              newValutazione.setJSONProperty(element);\r\n            }\r\n  \r\n  \r\n          })\r\n        }\r\n      }   \r\n    \r\n/**\r\n * Ritorna l'elemento di Corso Valutazione Livello che corrisponde con ID\r\n */\r\ngetCorsoValutazioneLivelloByID(idCorsoValutazioneLivello): CorsoValutazioneLivello {\r\n\r\n    // Ricerco se esiste già\r\n    let findRecord = this.CORSOVALUTAZIONELIVELLO.find(elvalutazioneLivello => {\r\n            return elvalutazioneLivello.ID == idCorsoValutazioneLivello\r\n    });\r\n\r\n    return findRecord;\r\n}      \r\n}","import * as moment from \"moment\";\r\nimport { TipoChiusura } from 'src/app/models/valuelist.model';\r\nimport { TypeDefinition } from './descriptor.model';\r\n\r\nexport class MyDateTime {\r\n\r\n//Formatta una data passata in ISO (Solo la parte data)\r\nstatic formatDateISO(data: Date): string {\r\n    let intMese = data.getMonth() + 1;\r\n    let intGiorno = data.getDate();\r\n    let mese = (intMese > 9) ? (intMese + '') : ('0' + intMese);\r\n    let giorno = (intGiorno > 9) ? (intGiorno + '') : ('0' + intGiorno);\r\n    let format = [data.getFullYear(), mese, giorno].join('-');\r\n\r\n    return format;\r\n    }\r\n\r\n//Formatta una data passata in ISO (Data e Ora)\r\nstatic formatDateTimeISO(data: Date): string {\r\n    let prefixDate = MyDateTime.formatDateISO(data);\r\n    let ore = (data.getHours() > 9) ? (data.getHours() + '') : ('0' + data.getHours());\r\n    let minuti = (data.getMinutes() > 9) ? (data.getMinutes() + '') : ('0' + data.getMinutes());\r\n    let secondi = (data.getSeconds() > 9) ? (data.getSeconds() + '') : ('0' + data.getSeconds());\r\n    let final = prefixDate + ' ' + ore + ':' + minuti + ':' + secondi;\r\n\r\n    return final;\r\n}\r\n\r\n//Formatta un orario passata  (Data e Ora)\r\nstatic formatTime(data: Date, withSeconds:boolean =false): string {\r\n\r\n    \r\n    let ore = (data.getHours() > 9) ? (data.getHours() + '') : ('0' + data.getHours());\r\n    let minuti = (data.getMinutes() > 9) ? (data.getMinutes() + '') : ('0' + data.getMinutes());\r\n    let secondi = (data.getSeconds() > 9) ? (data.getSeconds() + '') : ('0' + data.getSeconds());\r\n\r\n    let final =  ore + ':' + minuti;\r\n    \r\n    if (withSeconds) {\r\n        final = final + ':' + secondi;\r\n    }\r\n\r\n    return final;\r\n}\r\n\r\n/**\r\n * \r\n * @param data Data\r\n * @param format Formattazione di moment.js da applicare\r\n */\r\nstatic formatDate(data: Date, maskFormat: string): string {\r\n    //https://momentjs.com/docs/#/displaying/\r\n    return moment(data).format(maskFormat);\r\n}\r\n\r\n\r\n/**\r\n* Trasforma la stringa in un oggetto di tipo Data\r\n* @param strInput data / dataOra / Ora in formato stringa\r\n*/\r\nstatic stringToDateObject(strInput: string): Date {\r\n //1 - Devo capire cos'è\r\n let strDate = moment().format('YYYY-MM-DD');\r\n let strTime = '00:00:00'\r\n let timeZone = '+01:00';\r\n let strComplete = '';\r\n let dataReturn: Date;\r\n let arElement: string[];\r\n\r\n arElement = [];\r\n \r\n\r\n if (strInput && strInput.length !== 0) {\r\n\r\n    //Splitto Data, Ora, TimeZone\r\n    arElement = MyDateTime.splitDateTime(strInput);\r\n\r\n    if (arElement[0].length !== 0) {\r\n        strDate = arElement[0];\r\n    }\r\n\r\n    if (arElement[1].length !== 0) {\r\n        strTime = arElement[1];\r\n    }   \r\n    \r\n    if (arElement[2].length !== 0) {\r\n        timeZone = arElement[2];\r\n    }\r\n        \r\n    //Non aggiungere il TimeZone perchè non da errori ma l'uso della proprietà data da problemi\r\n    strComplete = `${strDate}T${strTime}`;\r\n    dataReturn = moment(strComplete).toDate();\r\n\r\n\r\n    return dataReturn;\r\n }\r\n\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param strDateTime Stringa di data e ora\r\n * @param arReturn Separa gli elementi in posizione 0 la data e 1 l'ora\r\n */\r\nstatic splitDateTime(strDateTime:string):string[] {\r\n    let tipo: TypeDefinition;\r\n    let strDate = '';\r\n    let strTime = '';\r\n    let strTimeZone = '';\r\n    let arReturn:string[];\r\n\r\n    arReturn = [];\r\n\r\n    if (strDateTime.length !== 0) {\r\n        if (strDateTime.includes('-') || strDateTime.includes('/')) {\r\n\r\n            if (strDateTime.includes(':')) {\r\n                tipo = TypeDefinition.dateTime;\r\n\r\n                //Cerchiamo il simbolo T oppure uno spazio\r\n                strDateTime = strDateTime.replace(' ','T');\r\n                strDateTime = strDateTime.replace('+','T');\r\n                let el = strDateTime.split('T');\r\n\r\n                for (let index = 0; index < el.length; index++) {\r\n                    const element = el[index];\r\n                    switch (index) {\r\n                        case 0:\r\n                            strDate = element;\r\n                        break;\r\n\r\n                        case 1:\r\n                            strTime = element;\r\n                        break;\r\n\r\n                        case 2:\r\n                            strTimeZone = element;\r\n                        break;                        \r\n                    \r\n                        default:\r\n                            break;\r\n                    }\r\n                    \r\n                }\r\n\r\n            }\r\n            else {\r\n                //Solo una data\r\n                tipo = TypeDefinition.date;\r\n                strDate = strDateTime;\r\n            }\r\n        }\r\n        else if (strDateTime.includes(':')) {\r\n            //Solo un orario\r\n            tipo = TypeDefinition.time;\r\n            strTime = strDateTime;\r\n        }\r\n\r\n    }\r\n\r\n    arReturn.push(strDate);\r\n    arReturn.push(strTime);\r\n    arReturn.push(strTimeZone);\r\n    \r\n    return arReturn;\r\n}\r\n\r\n/**\r\n * Applica una nuova data all'oggetto applyDataOra mantenendo l'orario\r\n * @param nuovaData Nuova Data da applicare\r\n * @param applyDataOra DataOra a cui modificare la data\r\n */\r\nstatic changeDateInTime(nuovaData: Date, applyDataOra: Date) {\r\n    let strDataOra = '';\r\n    let newReturn: Date;\r\n\r\n    if (nuovaData && applyDataOra) {\r\n        strDataOra = MyDateTime.formatDateISO(nuovaData);\r\n\r\n        let ore = (applyDataOra.getHours() > 9) ? (applyDataOra.getHours() + '') : ('0' + applyDataOra.getHours());\r\n        let minuti = (applyDataOra.getMinutes() > 9) ? (applyDataOra.getMinutes() + '') : ('0' + applyDataOra.getMinutes());\r\n        let secondi = (applyDataOra.getSeconds() > 9) ? (applyDataOra.getSeconds() + '') : ('0' + applyDataOra.getSeconds());\r\n\r\n        strDataOra = `${strDataOra}T${ore}:${minuti}:${secondi}`;\r\n\r\n        \r\n        newReturn = moment(strDataOra).toDate();\r\n    }\r\n\r\n    return newReturn;\r\n}\r\n\r\n/**\r\n * Controlla se il Range Check cade dentro a min max DateTime\r\n * Usato per capire le occupazioni\r\n * @param startCheck Range da controllare (Start Date)\r\n * @param endCheck Range da controllare (End Date)\r\n * @param minDateTime \r\n * @param maxDateTime \r\n */\r\nstatic dateTimeInside(startCheck: Date, endCheck: Date, minDateTime:Date, maxDateTime:Date): boolean { \r\n// CONTROLLO EFFETTUATO RITORNO TRUE SE:\r\n// A) FINE IN MEZZO SENZA INIZIO            --> end > min && end <= max\r\n// oppure B) INIZIO IN MEZZO SENZA FINE     --> start >= min && start < max\r\n// oppure C) FUORI                          --> start <= min && end >= max\r\n\r\n    let result = false;\r\n\r\n    //Moment consente di decidere [ uguaglianza o ( esclusione di una data\r\n    if (moment(endCheck).isBetween(minDateTime, maxDateTime,'minute','(]') || \r\n        moment(startCheck).isBetween(minDateTime, maxDateTime,'minute','[)') || \r\n        ( \r\n            moment(startCheck).isSameOrBefore(minDateTime,'minute') && moment(endCheck).isSameOrAfter(maxDateTime,'minute') \r\n        )) {\r\n\r\n            result = true;\r\n        }\r\n\r\n    return result;\r\n\r\n}\r\n\r\n/**\r\n * Calcola il numero di Ore intercorse tra le due date ore\r\n * @param startDate Data Ora Iniziale (Inferiore)\r\n * @param endDate Data Ora Finale (Superiore)\r\n */\r\nstatic durataOre(startDate: Date, endDate: Date): number {\r\n    let ore = 0;\r\n    if (startDate && endDate) {\r\n        let mStart = moment(startDate);\r\n        let mEnd = moment(endDate);\r\n        ore = mEnd.diff(mStart, 'hours', true);\r\n    }\r\n\r\n    return ore;\r\n}\r\n\r\n\r\n/**\r\n * Calcola il numero di Ore intercorse tra le due date ore\r\n * @param inferiorDate Data Ora Iniziale (Inferiore)\r\n * @param superiorDate Data Ora Finale (Superiore)\r\n */\r\nstatic durataAnni(inferiorDate: Date, superiorDate: Date): number {\r\n    let anni = 0;\r\n    if (inferiorDate && superiorDate) {\r\n        let mStart = moment(inferiorDate);\r\n        let mEnd = moment(superiorDate);\r\n        anni = mEnd.diff(mStart, 'years', true);\r\n    }\r\n\r\n    return anni;\r\n}\r\n\r\n/**\r\n * Aggiungo o sottrae da una data il periodo passato nei parametri\r\n * @param dateTime Data Ora di partenza\r\n * @param addOrSub Valore numerico positivo per aggiungere, neghativo per sottrarre\r\n * @param period Periodo da aggiungere o sottrarre\r\n */\r\nstatic calcola(dateTime: Date, addOrSub: number, period:TypePeriod): Date {\r\n    let value: number;\r\n    let dReturn: Date;\r\n\r\n    if (dateTime && period) {\r\n        let mDate = moment(dateTime); //Oggetto di tipo moment\r\n        if (addOrSub < 0) {\r\n            value = addOrSub * -1;\r\n            mDate.subtract(value, period);\r\n        }\r\n        else if (addOrSub > 0) {\r\n            value = addOrSub;\r\n            mDate.add(value, period);\r\n        }\r\n\r\n        dReturn = mDate.toDate();\r\n    }\r\n\r\n    return dReturn;\r\n}\r\n\r\n\r\n/**\r\n * Torna un valore della Value List TipoChiusura per indicare la festività\r\n * @param data Data da controllare\r\n */\r\nstatic getFesta(data: Date): TipoChiusura{\r\n\r\n    let tipoChiusura: TipoChiusura;\r\n\r\n    let meseGiorno: string = moment(data).format('MMDD');\r\n\r\n    let dataAngelo: Date;\r\n    let maskAngelo: string = '';\r\n\r\n    let dataPasqua: Date; \r\n    let maskPasqua: string =  '';\r\n\r\n    dataPasqua = MyDateTime.calcolaPasqua(data.getFullYear());\r\n    maskPasqua = moment(dataPasqua).format('MMDD');\r\n    dataAngelo = MyDateTime.calcola(dataPasqua, 1, TypePeriod.days);\r\n    maskAngelo = moment(dataAngelo).format('MMDD');\r\n\r\n    switch (meseGiorno){\r\n        case '0325':\r\n          tipoChiusura = TipoChiusura.aprile25\r\n          break;\r\n  \r\n        case '1208':\r\n            tipoChiusura = TipoChiusura.dicembre8\r\n            break;\r\n  \r\n        case '0815':\r\n          tipoChiusura = TipoChiusura.ferragosto;\r\n          break;\r\n  \r\n        case '0602':\r\n          tipoChiusura = TipoChiusura.giugno2;\r\n          break;\r\n  \r\n        case '0501':\r\n            tipoChiusura = TipoChiusura.maggio1;\r\n        break;\r\n        \r\n        case '1225':\r\n            tipoChiusura = TipoChiusura.natale;\r\n        break;\r\n            \r\n        case '1226':\r\n            tipoChiusura = TipoChiusura.santoStefano;\r\n        break;\r\n            \r\n        case maskPasqua:\r\n            tipoChiusura = TipoChiusura.pasquaCattolica;\r\n        break;\r\n                  \r\n        case maskAngelo:\r\n            tipoChiusura = TipoChiusura.pasquaCattolica;\r\n        break;\r\n\r\n        default:\r\n            tipoChiusura = 0;\r\n        break;\r\n      }\r\n    return tipoChiusura;\r\n\r\n\r\n}\r\n\r\n/**\r\n * Calcola la data di Pasqua per l'anno\r\n * @param anno Anno\r\n */\r\nstatic calcolaPasqua(anno: number): Date {\r\n\r\n    let a=0, b=0, c=0, d=0, e=0, m=0, n=0, giorno=0, mese=0;\r\n\r\n    \r\n    if(anno <= 2099){\r\n        m = 24;\r\n        n = 5;\r\n    }\r\n    else if(anno <= 2199){\r\n        m = 24;\r\n        n = 6;\r\n    }\r\n    else if(anno <= 2299){\r\n        m = 25;\r\n        n = 0;\r\n    }\r\n    else if(anno <= 2399){\r\n        m = 26;\r\n        n = 1;\r\n    }\r\n    else if(anno <= 2499){\r\n        m = 25;\r\n        n = 1;\r\n    }\r\n\r\n    a = anno% 19;\r\n    b = anno% 4;\r\n    c = anno% 7;\r\n\r\n    d = ((19 * a) + m) % 30;\r\n    e = ((2*b) + (4*c) + (6*d) + n) % 7;\r\n\r\n\r\n\r\n    if ((d + e) < 10){\r\n        giorno = d + e + 22;\r\n        mese = 3;\r\n    }\r\n    else {\r\n        giorno = d + e - 9;\r\n        mese = 4;\r\n    }\r\n\r\n    if (Math.floor(giorno) == 26 && Math.floor(mese) == 4){\r\n        giorno = 19;\r\n        mese = 4;\r\n    }\r\n\r\n    if (Math.floor(giorno) == 25 && Math.floor(mese) == 4 && d == 20 && e == 6 && a > 10){\r\n        giorno = 10;\r\n        mese = 4;\r\n    }\r\n    \r\n    \r\n    let dataReturn = new Date(anno, Math.floor(mese-1), Math.floor(giorno));\r\n    return dataReturn;\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Con la data passata calcola una data di inizio/fine della settimana \r\n * o del mese in cui myDate è contenuta\r\n * @param myDate Data da utilizzare\r\n * @param based Il calcolo è effettuata per la settimana o il mese\r\n * @param where Si vuole la data di inizio o fine\r\n */\r\nstatic getStartEndDate(myDate: Date, based:'week'|'month', where:'start'|'end'): Date {\r\n    let resultDate: Date;\r\n\r\n    if (myDate) {\r\n        if (where == 'start') {\r\n\r\n            resultDate = moment(myDate).startOf(based).toDate();\r\n        }\r\n        else if (where == 'end') {\r\n            resultDate = moment(myDate).endOf(based).toDate();\r\n        }\r\n    }\r\n\r\n    return resultDate;\r\n}\r\n\r\n\r\n/**\r\n * Crea una Data senza l'orario\r\n * @param myDateTime \r\n */\r\nstatic getOnlyDate(myDateTime: Date): Date {\r\n    let dateResult:Date;\r\n\r\n    dateResult = new Date(moment(myDateTime).format('YYYY-MM-DD'));\r\n\r\n    return dateResult;\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nexport enum TypePeriod {\r\n    years           = 'y',\r\n    quarters        = 'Q',\r\n    months          = 'M',\r\n    weeks           = 'w',\r\n    days\t        ='d',\r\n    hours\t        ='h',\r\n    minutes\t        ='m',\r\n    seconds\t        ='s',\r\n    milliseconds\t='ms'\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { Sport } from '../models/sport.model';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SportService {\r\n\r\n  private _listSport = new BehaviorSubject<Sport[]>([]);\r\n  private _loaded: boolean; //Sport sono stati richiesti al server e sono caricati in memoria\r\n  private _listLocationSport = new BehaviorSubject<Sport[]>([]);\r\n\r\n  //Lista di tutti gli sport presenti in Gouego\r\n  get listSport() {\r\n    return this._listSport.asObservable();\r\n  }\r\n\r\n  /**\r\n  * Ritorna la lista non in modalità Observable\r\n  */\r\n  get actualListSport() {\r\n    return this._listSport.getValue();\r\n  }\r\n\r\n  //Lista degli sport presenti in una location\r\n  get listLocationSport() {\r\n    return this._listLocationSport.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private apiService: ApicallService) { \r\n    this._loaded = false;\r\n  }\r\n\r\n  /**\r\n   * Richiede al server l'elenco delle Attività\r\n   * @param config Parametri configurazione chiamata\r\n   */\r\n  request(config: StartConfiguration, withLivelli?:boolean) {\r\n    return new Promise((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n     \r\n      const doObject = 'SPORT';\r\n\r\n      //TODO: Non mi piace molto il modo\r\n      //Nei Parametri imposto il LivelloAutorizzazione\r\n      let myParams = new HttpParams().set('LivelloAutorizzazione','0');\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      if (withLivelli) {\r\n        //Richiedo di caricare anche i livelli\r\n        myHeaders = myHeaders.append('only-level','-1');\r\n      }\r\n  \r\n      /*Non ho ancora caricato dal server*/\r\n      if (!this._loaded) {\r\n        this.apiService\r\n          .httpGet(myUrl, myHeaders, myParams)\r\n          .pipe(map(data => {\r\n            return data.SPORT\r\n          }))\r\n          .subscribe(resultData => {\r\n    \r\n            //Arrivati dal server\r\n            this._loaded = true;\r\n            if (resultData) {\r\n\r\n              for (let index = 0; index < resultData.length; index++) {\r\n                const element = resultData[index];\r\n                let newSport = new Sport();\r\n                newSport.setJSONProperty(element);\r\n                this.add2ListSport(newSport);                \r\n              }\r\n              resolve(this._listSport);\r\n\r\n            }\r\n            else {\r\n              reject('No data Attività retrieved');\r\n            }\r\n            \r\n          }, error=>{\r\n            reject(error);\r\n          });\r\n      }\r\n      else {\r\n        //Già caricati dal server\r\n      }\r\n      \r\n    })\r\n\r\n  }\r\n\r\n\r\n  //Aggiunge una attivita alla lista globale\r\n  add2ListSport(objSport: Sport) {\r\n\r\n    this.listSport\r\n      .pipe(take(1))\r\n      .subscribe( collSport => {\r\n        this._listSport.next( collSport.concat(objSport))\r\n      });\r\n    \r\n  }\r\n\r\n\r\n  /**\r\n   * Richiede le attività praticate in una location\r\n   * Sottoscriversi all'oggetto listLocationSport per ricevere i risultati\r\n   * \r\n   * @param config Dati configurazione\r\n   * @param idLocation Location\r\n   */\r\n  requestLocationSport(config: StartConfiguration, idLocation: string) {\r\n    return new Promise((resolve, reject)=>{\r\n      \r\n        // const myHeaders = new HttpHeaders({'Content-type':'text/plain', \r\n        //                   'X-HTTP-Method-Override':'getSportLocation', \r\n        //                   'appid':config.appId,\r\n        //                   'child-level': '1'\r\n        //                   });\r\n\r\n      let myHeaders = config.getHttpHeaders();\r\n      const myParams = new HttpParams().set('idLocation', idLocation);\r\n      const doObject = 'SPORT';\r\n      myHeaders = myHeaders.append('X-HTTP-Method-Override','getSportLocation');\r\n      myHeaders = myHeaders.append('child-level', '1');\r\n\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n\r\n      //Svuoto gli attuali\r\n      this._listLocationSport.next([]);\r\n\r\n      // Effettuo la chiamata\r\n      return this.apiService\r\n                .httpGet(myUrl, myHeaders, myParams)\r\n                .pipe(map(data => {\r\n                        return data.SPORT\r\n                      }))\r\n                .subscribe(resultData => {\r\n\r\n                      resultData.forEach(element => {\r\n        \r\n                        let newSport = new Sport();\r\n                        newSport.setJSONProperty(element);\r\n                        this.add2ListLocationSport(newSport);\r\n                        \r\n                      });\r\n                      resolve(this._listLocationSport);\r\n                }, error=>{\r\n                  reject(error);\r\n                });\r\n    })\r\n    }\r\n\r\n\r\n    //Aggiunge una attivita alla lista globale\r\n    add2ListLocationSport(objSport: Sport) {\r\n\r\n      this.listLocationSport\r\n            .pipe(take(1))\r\n            .subscribe( collSport => {\r\n                  this._listLocationSport.next( collSport.concat(objSport))\r\n            });\r\n      \r\n    }\r\n\r\n\r\n    /**\r\n   * Dato l'id di uno sport, restituisce la stringa dell'icona associata\r\n   * @param idSport l'id dello sport\r\n   */\r\n  getIconaSport(idSport: string){\r\n    let listSport = this._listSport.getValue();\r\n    let icona='';\r\n    let docSport: Sport;\r\n\r\n    if(listSport){\r\n\r\n      //Cerco lo Sport nella collection\r\n      docSport = listSport.find(el => {\r\n        return el.ID == idSport\r\n      });\r\n\r\n      //Sport trovato applico l'icona\r\n      if (!docSport) {\r\n        //Ne creo uno fasullo\r\n        docSport = new Sport();\r\n      }\r\n\r\n      //Ricavo l'icona\r\n      icona = docSport.htmlIconHex\r\n      \r\n    }\r\n    return icona;\r\n  }\r\n\r\n}\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Mansione } from './valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\n\r\n\r\nexport class Account extends IDDocument {\r\n\r\n    IDREF: string;\r\n    COGNOME: string;\r\n    NOME: string;\r\n    NOMINATIVO: string;\r\n    EMAIL: string;\r\n    WEBLOGIN: string;\r\n    SHAPASSWORD: string;\r\n    INPUTPASSWORD: string;\r\n    MOBILENUMBER: string;\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    RUOLO: number;\r\n    MANSIONE: Mansione;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDREF',\r\n                        'COGNOME',\r\n                        'NOME',\r\n                        'NOMINATIVO',\r\n                        'EMAIL',\r\n                        'WEBLOGIN',\r\n                        'SHAPASSWORD',\r\n                        'INPUTPASSWORD',\r\n                        'MOBILENUMBER',\r\n                        'IDAREAOPERATIVA',\r\n                        'IDLOCATION'\r\n                        ];\r\n        let arNumber = ['RUOLO','MANSIONE'];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'Account';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'ACCOUNT';\r\n        objDescriptor.describeField  = 'NOMINATIVO';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        return objDescriptor;\r\n    }\r\n    \r\n}\r\n","var map = {\n\t\"./pwa-action-sheet.entry.js\": [\n\t\t\"jDxf\",\n\t\t43\n\t],\n\t\"./pwa-camera-modal-instance.entry.js\": [\n\t\t\"37vE\",\n\t\t44\n\t],\n\t\"./pwa-camera-modal.entry.js\": [\n\t\t\"cJxf\",\n\t\t45\n\t],\n\t\"./pwa-camera.entry.js\": [\n\t\t\"eGHz\",\n\t\t46\n\t],\n\t\"./pwa-toast.entry.js\": [\n\t\t\"fHjd\",\n\t\t47\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"KwcL\";\nmodule.exports = webpackAsyncContext;","import { SlotDay } from './slotday.model';\r\nimport { ValueList, Giorni } from '../valuelist.model';\r\n\r\nexport class SlotWeek {\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    SLOTMINUTES: number; //Durata in minuti per lo Slot standard nella location\r\n\r\n    SLOTDAYS: SlotDay[];\r\n\r\n    constructor() {\r\n        this.SLOTDAYS = [];\r\n        this.SLOTMINUTES = 30;\r\n    }\r\n\r\n    /**\r\n     * Creazione dell'array SlotDay con tutte le giornate\r\n     */\r\n    initDays() {\r\n        let arGiorni = ValueList.getArray(Giorni);\r\n\r\n        this.SLOTDAYS = [];\r\n\r\n        arGiorni.forEach(element => {\r\n            let daySlot = new SlotDay();\r\n            //Imposto il giorno della settimana\r\n            daySlot.WEEKDAY = element.value;\r\n            this.SLOTDAYS.push(daySlot)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Ritorna uno slotday presente nell'array\r\n     * @param weekDayRequest WeekDay richiesto\r\n     */\r\n    getSlotDay(weekDayRequest: number) {\r\n        return this.SLOTDAYS.find(element => {\r\n            return element.WEEKDAY == weekDayRequest\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ritorna una copia di uno SlotDay \r\n     * \r\n     * @param dataGiorno Data richiesta\r\n     * @param changeTimeDate Se impostata a TRUE viene cambiata la data presente negli slottime impostando la data Giorno\r\n     */\r\n    getCopySlotDay(dataGiorno: Date, changeTimeDate?: boolean): SlotDay {\r\n\r\n        let weekDay = dataGiorno.getDay();\r\n        let myCopySlot: SlotDay;\r\n        let mySlot: SlotDay;\r\n\r\n        mySlot = this.SLOTDAYS.find(element => {\r\n                        return element.WEEKDAY == weekDay\r\n                        });\r\n        if (mySlot) {\r\n            //Creo un nuovo oggetto e copio tutte le proprietà\r\n            myCopySlot = new SlotDay();\r\n            myCopySlot.copyFrom(mySlot);    \r\n\r\n            /* TUTTI GLI SLOTTIMES DEVONO RICEVERE LA STESSA GIORNATA */\r\n            if (changeTimeDate) {\r\n                myCopySlot.changeDateInSlotTime(dataGiorno);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return myCopySlot;\r\n                \r\n    }\r\n\r\n    /**\r\n     * Crea per ogni giornata, tutti gli slot time\r\n     */\r\n    createSlotTimeDays() {\r\n\r\n        //Ciclo sui giorni presenti\r\n        this.SLOTDAYS.forEach(element => {\r\n            element.createSlotTime(this.SLOTMINUTES);\r\n        });\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, from } from 'rxjs';\r\nimport { OccupazioneCampi } from '../models/occupazionecampi.model';\r\nimport { IDDocument, OperatorCondition } from '../library/models/iddocument.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { SettoreAttivita } from '../models/valuelist.model';\r\n\r\nimport { RequestParams } from '../library/models/requestParams.model';\r\nimport { PrenotazionePianificazione } from '../models/prenotazionepianificazione.model';\r\nimport { Prenotazione } from '../models/prenotazione.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OccupazioniService {\r\n\r\n  private _listOccupazioni = new BehaviorSubject<OccupazioneCampi[]>([]);\r\n  \r\n\r\n  get listOccupazioni() {\r\n    return this._listOccupazioni.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private docStructureService: DocstructureService) { }\r\n\r\n  /**\r\n   * Richiede la lista di occupazione campi\r\n   * Senza filtro precedente, imposto la data Inizio da oggi\r\n   * @param filterDocument \r\n   * @param decodeAll \r\n   */\r\n  request(idArea: string, \r\n          idLocation?: string,\r\n          params?: RequestParams,\r\n          top: number = undefined,\r\n          fromTime: Date = undefined\r\n          ):Promise<OccupazioneCampi[]> {\r\n    let adesso = new Date();\r\n\r\n    return new Promise<OccupazioneCampi[]>((resolve, reject) => {\r\n\r\n      let filterTipo = [];\r\n      //Quando voglio mettere in OR dei valori su un campo, creo un array \r\n      //e lo passo alla funzione addFilterCondition\r\n      filterTipo.push(SettoreAttivita.settoreCorso);\r\n      filterTipo.push(SettoreAttivita.settorePrenotazione);\r\n      \r\n      let filterDocument = new OccupazioneCampi(true);\r\n      filterDocument.DATAINIZIO = adesso;\r\n      // filterDocument.ORAINIZIO = adesso;\r\n\r\n      filterDocument.IDAREA = idArea;\r\n      //Aggiungo la condizione speciale per TIPO con dei valori in OR\r\n      filterDocument.addFilterCondition(OperatorCondition.uguale, 'TIPO', filterTipo);\r\n\r\n      if(idLocation){\r\n        filterDocument.IDLOCATION = idLocation;\r\n      }\r\n\r\n      if(fromTime){\r\n        filterDocument.ORAFINE = fromTime\r\n        filterDocument.addFilterCondition(OperatorCondition.maggiore, 'ORAFINE');\r\n\r\n      }\r\n\r\n     \r\n     \r\n\r\n      if (!params) {\r\n        params = new RequestParams();\r\n        params.decode.active = true;\r\n        params.top = top;\r\n      }\r\n\r\n      this.docStructureService\r\n            .requestNew(filterDocument, params)\r\n            .then(genericListElements => {\r\n\r\n              let listElements: OccupazioneCampi[] = genericListElements;\r\n              listElements.sort((a, b) => {\r\n              if(a.ORAINIZIO > b.ORAINIZIO){\r\n                return 1;\r\n              }\r\n              else if(a.ORAINIZIO < b.ORAINIZIO){\r\n                return -1;\r\n              }\r\n              else{\r\n                return 0;\r\n              }\r\n            })\r\n\r\n              //gli elementi sono ordinati, ma devon controllare che ne siano arrivati davvero il numero giusto (INDE FA CAGARE!!!)\r\n              if(top && listElements.length > top){\r\n                //devo tagliare \r\n                listElements.splice(top)\r\n              }\r\n\r\n              //Riemetto Observable\r\n              this._listOccupazioni.next(listElements);\r\n\r\n              //Chiudo la promise\r\n              resolve(listElements);\r\n\r\n            })\r\n            .catch( error => {\r\n              reject(error);\r\n            })\r\n\r\n    });\r\n      \r\n  }\r\n\r\n  /**\r\n   * Richiede i dati occupazione con filtri\r\n   * @param filter Filtro di caricamento\r\n   * @param params Parametri \r\n   * @returns \r\n   */\r\n  requestByFilter(filter: OccupazioneCampi, params?: RequestParams):Promise<OccupazioneCampi[]>{\r\n    return new Promise((resolve, reject) => {\r\n      let myFilter: IDDocument;\r\n      let myParams: RequestParams;\r\n      if(filter){\r\n        myFilter = filter;\r\n        if(params){\r\n          myParams = params;\r\n        }\r\n        else{\r\n          myParams = new RequestParams();\r\n          myParams.decode.active = true;\r\n        }\r\n\r\n        //abbiamo tutto, possiamo fare la richiesta\r\n        this.docStructureService.requestNew(myFilter, myParams)\r\n        .then((genericListElements: any) => {\r\n          let listElements: OccupazioneCampi[] = genericListElements;\r\n          listElements.sort((a, b) => {\r\n            if(a.ORAINIZIO > b.ORAINIZIO){\r\n              return 1;\r\n            }\r\n            else if(a.ORAINIZIO < b.ORAINIZIO){\r\n              return -1;\r\n            }\r\n            else{\r\n              return 0;\r\n            }\r\n          })\r\n\r\n          let arPromises: Promise<IDDocument>[] = [];\r\n          listElements.forEach(elOccupazione => {\r\n            arPromises.push(this.docStructureService.getRelDoc(elOccupazione, ['IDREF'], 1, elOccupazione));\r\n          })\r\n\r\n          Promise.all(arPromises)\r\n          .then(() => {\r\n            resolve (listElements);\r\n          })\r\n          .catch(error => {\r\n            reject (error);\r\n          })\r\n        })\r\n        .catch(error => {\r\n          reject (error);\r\n        })\r\n      }\r\n      else{\r\n        reject('Documento filtro non definito');\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Richiede una singola occupazione cercando per id, se il secondo parametro è true, richiede anche il docprenotazione collegato e lo inserisce nel repository\r\n   * il docprenotazione viene inoltre decodificato, e contiene l'elenco delle pianificazioni; anch'esse decodificate\r\n   * @param idOccupazione id da cercare\r\n   * @param requestRelatedReservation indica se richiedere anche il documento prenotazione collegato e inserirlo nel docrepository\r\n   */\r\n  requestById(idOccupazione: string, requestRelatedReservation = false): Promise<OccupazioneCampi>{\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n      //filtro e parametri\r\n      let myFilter = new OccupazioneCampi(true);\r\n      let myParams = new RequestParams();\r\n\r\n      //controllo di avere un id\r\n      if(idOccupazione && idOccupazione.length > 0){\r\n        //preparo i parametri\r\n        myFilter.ID = idOccupazione;\r\n        myParams.decode.active = true;\r\n\r\n        //faccio la richiesta\r\n        this.docStructureService.requestNew(myFilter, myParams)\r\n\r\n        .then((resultList: OccupazioneCampi[]) => {\r\n          //se ho ottenuto qualcosa, lo ritorno al prossimo .then\r\n          if (resultList[0]){\r\n            return(resultList[0]);\r\n          }\r\n          //altrimenti rigetto\r\n          else{\r\n            reject('Nessuna occupazione presente con id indicato');\r\n          }\r\n        })\r\n\r\n        .then((elOccupazione: OccupazioneCampi) => {\r\n          //adesso che ho l'elemento, se mi è stato chiesto recupero il docprenotazione\r\n          if(requestRelatedReservation){\r\n            this.docStructureService.getRelDoc(elOccupazione, ['IDREF'], 3, elOccupazione)\r\n            .then(() => {\r\n              //@ts-ignore\r\n              let docPrenotazione: Prenotazione = elOccupazione.getDocInRepository(elOccupazione.IDREF)\r\n              //ora devo decodificare la prenotazione e le pianificazioni\r\n\r\n              let reqForeign = PrenotazionePianificazione.getReqForeignKeys();\r\n\r\n              Promise.all([\r\n                (this.docStructureService.decodeAll(docPrenotazione, true)),\r\n                (this.docStructureService.decodeCollection(docPrenotazione.PRENOTAZIONEPIANIFICAZIONE, reqForeign))\r\n\r\n               ])\r\n\r\n              \r\n              .then(() => {\r\n                resolve(elOccupazione);\r\n              })\r\n            })\r\n            .catch(error => {reject (error);})\r\n          }\r\n          else{\r\n            resolve (elOccupazione);\r\n          }\r\n        })\r\n\r\n        .catch(error => {\r\n          reject(error);\r\n        })\r\n      }\r\n\r\n\r\n      else{\r\n        reject('Id non fornito');\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Lista completa di occupazione\r\n   * @param collOccupazione Lista completa di occupazione\r\n   */\r\n  public createShortList(collOccupazione: OccupazioneCampi[]) {\r\n    let shortList: OccupazioneCampi[];\r\n    if (collOccupazione && collOccupazione.length != 0) {\r\n\r\n      shortList = collOccupazione.filter((element,index) => {\r\n        return (index < 5);\r\n      });\r\n\r\n    }\r\n    else {\r\n      shortList = [];\r\n    }\r\n    \r\n  }\r\n}\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class LocationImage extends IDDocument {\r\n    COVERIMAGE: boolean;\r\n    IMAGEURL: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IMAGEURL'];\r\n    let arNumber = [];\r\n    let arBoolean = ['COVERIMAGE'];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'LocationImage';\r\n    objDescriptor.classWebApiName = 'LOCATIONIMAGE';\r\n    objDescriptor.doRemote = true;\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n    \r\n    \r\n    \r\n    return objDescriptor;\r\n}    \r\n\r\n\r\n  \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { SettoreAttivita, StatoCorso } from './valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { RequestForeign } from '../library/models/requestParams.model';\r\n\r\nexport class Impegno extends IDDocument {\r\n\r\n    IDREFER:        string; //ID Riferimento\r\n    SETTORE:        SettoreAttivita;\r\n    DENOMINAZIONE:  string;\r\n    IDAREAOPERATIVA:string;\r\n    IDLOCATION:     string;\r\n    IDCAMPO:        string;\r\n    IDSPORT:        string; //Sport - Attività di riferimento\r\n    DATAORAINIZIO:  Date;\r\n    DATAORAFINE:    Date;\r\n    IDUTENTE:       string;\r\n    STATO:          StatoCorso;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n      /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDREFER',\r\n                    'DENOMINAZIONE',\r\n                    'IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'IDCAMPO',\r\n                    'IDSPORT',\r\n                    'IDUTENTE'];\r\n    let arNumber = ['SETTORE'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'Impegno';\r\n    objDescriptor.classWebApiName = 'IMPEGNO';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n    objDescriptor.setRelation('IDCAMPO','Campo');\r\n    objDescriptor.setRelation('IDSPORT','Sport');\r\n    objDescriptor.setRelation('IDUTENTE','Utente');\r\n    \r\n    return objDescriptor;\r\n}\r\n\r\nstatic getReqForeignKeys(): RequestForeign[] {\r\n    let arRequest: RequestForeign[] = [];\r\n    let objForeign: RequestForeign;\r\n\r\n    objForeign = new RequestForeign('IDAREAOPERATIVA');\r\n    arRequest.push(objForeign);\r\n\r\n    objForeign = new RequestForeign('IDSPORT');\r\n    arRequest.push(objForeign);\r\n\r\n    objForeign = new RequestForeign('IDCAMPO');\r\n    arRequest.push(objForeign);\r\n\r\n    objForeign = new RequestForeign('IDLOCATION');\r\n    objForeign.addDescribeField('DENOMINAZIONE');\r\n    objForeign.addDescribeField('INDIRIZZO');\r\n    \r\n\r\n    arRequest.push(objForeign);\r\n\r\n    return arRequest;\r\n}\r\n       \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class UtenteLivello extends IDDocument {\r\n    IDSPORT: string;\r\n    IDLIVELLO: string;\r\n    DESCRSPORT: string;\r\n    DESCRLIVELLO: string;\r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDSPORT',\r\n                        'IDLIVELLO',\r\n                        'DESCRSPORT',\r\n                        'DESCRLIVELLO'\r\n                        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        let arCollection = [];\r\n\r\n        objDescriptor.className = 'UtenteLivello';\r\n        objDescriptor.classWebApiName = 'UTENTELIVELLO';\r\n        objDescriptor.doRemote = true;\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n        \r\n        \r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDLIVELLO','Livello');\r\n\r\n        \r\n\r\n        return objDescriptor;\r\n    }    \r\n    /**\r\n     * Imposta le proprietà\r\n     * @param data JSON Ricevere\r\n     */\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n    }\r\n\r\n  \r\n\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { PaymentChannel, PaymentEnvironment, PaymentMode, SettorePagamentiAttivita, ValueList } from './valuelist.model';\r\n\r\n\r\nexport class AreaPaymentSetting extends IDDocument {\r\n    \r\n    IDAREAOPERATIVA: string;\r\n    TIPOPAYMENT: PaymentChannel;\r\n    PPENVIRONMENT: PaymentEnvironment;\r\n    PPACCOUNT: string;\r\n    PPCLIENTIDSANDBOX: string;\r\n    PPCLIENTIDPRODUCTION: string;\r\n    SETTORI: string;\r\n    STPUBLICKEY: string;\r\n    STPUBLICKEYTEST: string;\r\n    STENVIRONMENT: PaymentEnvironment;\r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n      super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n      let objDescriptor = new Descriptor();\r\n      let arString = ['IDAREAOPERATIVA',\r\n                      'PPACCOUNT',\r\n                      'PPCLIENTIDSANDBOX',\r\n                      'PPCLIENTIDPRODUCTION',\r\n                      'PPCLIENTSECRET',\r\n                      'SETTORI',\r\n                      'STPUBLICKEY',\r\n                      'STPUBLICKEYTEST'\r\n                    ];\r\n      let arNumber = ['TIPOPAYMENT','PPENVIRONMENT','STENVIRONMENT'];\r\n      let arBoolean = [];\r\n      let arDate = [];\r\n      let arDateTime =[];\r\n      let arTime = [];\r\n      let arCollection = [];\r\n\r\n      objDescriptor.className = 'AreaPaymentSetting';\r\n      objDescriptor.doRemote = true;\r\n      objDescriptor.classWebApiName = 'AREAPAYMENTSETTING';\r\n      objDescriptor.describeField = 'TIPOPAYMENT';\r\n\r\n      objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n      objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n      objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n      objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n      objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n      objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n      objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n      objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    \r\n\r\n\r\n      return objDescriptor;\r\n  }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Sovrascrive il metodo IDDOcument, lo richiama e sistema le collection\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n      super.setJSONProperty(data);\r\n\r\n      this.setOriginal();\r\n    }\r\n\r\n\r\n    /**\r\n     * Dato un Settore di pagamento, ritorna TRUE se il Setting lo contempla\r\n     * @param settore Settore di pagamento\r\n     */\r\n    isFor(settore:SettorePagamentiAttivita):boolean {\r\n      let arSettori = [];\r\n      let mySettore = settore + '';\r\n      let incluso = false;\r\n      if (this.SETTORI && this.SETTORI.length != 0) {\r\n        arSettori = this.SETTORI.split(';');\r\n        if (arSettori.includes(mySettore)) {\r\n          incluso = true;\r\n        }\r\n      }\r\n\r\n      return incluso;\r\n    }\r\n\r\n\r\n   /**\r\n   * Ritorna una Icon a seconda del channel\r\n   */\r\n   get icon() {\r\n      let icona = '';\r\n      switch (this.TIPOPAYMENT) {\r\n\r\n        case PaymentChannel.applePay:\r\n          icona = 'logo-apple';\r\n          break;\r\n\r\n        case PaymentChannel.bonifico:\r\n          icona = 'document-text-outline';\r\n          break;\r\n\r\n        case PaymentChannel.googlePay:\r\n          icona = 'logo-google';\r\n          break;\r\n\r\n        case PaymentChannel.stripe:\r\n          icona = 'card-outline';\r\n          break;\r\n            \r\n        case PaymentChannel.paypal:\r\n            icona = 'logo-paypal';\r\n            break;\r\n        \r\n        case PaymentChannel.onSite:\r\n            icona = 'cash-outline';\r\n            break;   \r\n          \r\n          default:\r\n              break;\r\n      }\r\n\r\n      return icona;\r\n    }\r\n\r\n   /**\r\n   * Ritorna una Label da mostrare in interfaccia\r\n   */\r\n    get label() {\r\n      let etichetta = '';\r\n\r\n      switch (this.TIPOPAYMENT) {\r\n\r\n        case PaymentChannel.applePay:\r\n          etichetta = 'Apple Pay';\r\n          break;\r\n\r\n        case PaymentChannel.bonifico:\r\n          etichetta = 'Bonifico';\r\n          break;\r\n\r\n        case PaymentChannel.googlePay:\r\n          etichetta = 'GPay';\r\n          break;\r\n\r\n        case PaymentChannel.stripe:\r\n          etichetta = 'Carta di credito';\r\n          break;\r\n            \r\n        case PaymentChannel.paypal:\r\n            etichetta = 'Paypal';\r\n            break;\r\n        \r\n        case PaymentChannel.onSite:\r\n            etichetta = 'Paga in struttura';\r\n            break;   \r\n          \r\n          default:\r\n              break;\r\n      }\r\n\r\n      return etichetta;\r\n    }    \r\n\r\n    //E' possibile pagare con funzionalità dentro all'App\r\n    get paymentInApp():boolean {\r\n      let inApp: boolean = false;\r\n\r\n      switch (this.TIPOPAYMENT) {\r\n\r\n          case PaymentChannel.onSite:\r\n              inApp = false;\r\n              break;\r\n\r\n          case PaymentChannel.paypal:\r\n              inApp = true;\r\n              break;\r\n\r\n          case PaymentChannel.bonifico:\r\n              inApp = false;\r\n              break;\r\n\r\n          case PaymentChannel.applePay:\r\n              inApp = false;\r\n              break;\r\n\r\n          case PaymentChannel.googlePay:\r\n              inApp = false;\r\n              break;\r\n\r\n          case PaymentChannel.stripe:\r\n              inApp = false;\r\n            break;\r\n\r\n          default:\r\n              break;\r\n      }\r\n\r\n      return inApp;\r\n    }    \r\n\r\n\r\n    /**\r\n     * Imposta al massimo 3 valori di ritorno dal enum PaymentMode\r\n     * pagaStruttura se presente una voce onSite\r\n     * pagaBonifico se presente una voce bonifico\r\n     * pagaAdesso se presente un pagamento elettronico\r\n     * \r\n     * @param arPaymentSettings Elenco Configurazione pagamenti \r\n     */\r\n    static prepareArPaymentMode(arPaymentSettings: AreaPaymentSetting[]): ValueList[] {\r\n      let onSite = false;\r\n      let withBonifico = false;\r\n      let electronicPay = false;\r\n      let myElList: ValueList;\r\n\r\n      let arReturn: ValueList[] = [];\r\n\r\n      if (arPaymentSettings) {\r\n\r\n        arPaymentSettings.forEach(element => {\r\n            switch (element.TIPOPAYMENT) {\r\n              case PaymentChannel.onSite:\r\n                if (!onSite) {\r\n                  myElList = new ValueList(PaymentMode.pagaStruttura, 'Paga in struttura');\r\n                  myElList.itemIcon = 'cash-outline';\r\n                  arReturn.push(myElList);\r\n                }\r\n                onSite = true;\r\n              break;\r\n\r\n              case PaymentChannel.bonifico:\r\n                if (!withBonifico) {\r\n                  myElList = new ValueList(PaymentMode.pagaBonifico, 'Effettua un bonifico');\r\n                  myElList.itemIcon = 'document-text-outline';\r\n                  arReturn.push(myElList);\r\n                }\r\n                withBonifico = true;\r\n              break;\r\n            \r\n              case PaymentChannel.applePay:\r\n              case PaymentChannel.googlePay:\r\n              case PaymentChannel.paypal:\r\n              case PaymentChannel.stripe:\r\n                if (!electronicPay) {\r\n                  myElList = new ValueList(PaymentMode.pagaAdesso, 'Paga adesso');\r\n                  myElList.itemIcon = 'card-outline';\r\n                  arReturn.push(myElList);\r\n                }\r\n                electronicPay = true;\r\n\r\n              break;\r\n\r\n              default:\r\n                break;\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n      }\r\n\r\n      return arReturn;\r\n      \r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport * as moment from \"moment\";\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\n\r\nimport { ApicallService } from './apicall.service';\r\n\r\nimport { SlotDay } from '../models/imdb/slotday.model';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { Location } from '../models/location.model';\r\nimport { Campo } from '../models/campo.model';\r\nimport { DateSlotLock } from '../models/dateslotlock.model';\r\nimport { SlotTime } from '../models/imdb/slottime.model';\r\nimport { StatoSlot } from '../models/valuelist.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { LogApp } from '../models/log.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SlotoccupazioneService {\r\n\r\n  gapHour: number; //Se lo slot e l'ora attuale hanno una differenza inferiore al gapHour non è prenotabile\r\n  gapMinutes: number; //Minuti in arrivo dalla location\r\n  _docOccupazione = new BehaviorSubject<SlotDay>(new SlotDay());\r\n\r\n  get docOccupazione() {\r\n    return this._docOccupazione.asObservable();\r\n  }\r\n\r\n  constructor(private apiCall: ApicallService) {\r\n    this.gapHour = 0;\r\n    this.gapMinutes = 0;\r\n   }\r\n\r\n   /**\r\n    * Passando un tempo in minuti imposta il Gap da utilizzare\r\n    * @param minuti Minuti da impostare\r\n    */\r\n   setGapMinutes(minuti: number) {\r\n    if (minuti && minuti !== 0) {\r\n      this.gapMinutes = minuti;\r\n      this.gapHour = (minuti/60);\r\n    }\r\n    else {\r\n      this.gapMinutes = 0;\r\n      this.gapHour = 0;\r\n    }\r\n   }\r\n\r\n  /**\r\n   * Prende in ingresso il template Slot Day, richiede al server i soli dati di occupazione di un determinato campo per un determinato giorno,\r\n   * sistema il template con le occupazioni e lo riporta come risultato Observable\r\n   * \r\n   * \r\n   * @param config Dati configurazione\r\n   * @param docLocation Location richiesta\r\n   * @param docCampo Campo richiesto\r\n   * @param dataGiorno Giorno richiesto\r\n   */\r\n  request(config: StartConfiguration,\r\n          templateSlotDay: SlotDay,\r\n          docLocation: Location, \r\n          docCampo: Campo, \r\n          dataGiorno: Date) {\r\n    return new Promise<void>((resolve, reject)=>{\r\n\r\n      let myHeaders = config.getHttpHeaders();\r\n      const doObject = 'CAMPO';\r\n      const strData = moment(dataGiorno).format('YYYY-MM-DD');\r\n      myHeaders = myHeaders.append('X-HTTP-Method-Override','GETDATESLOTLOCK');\r\n      \r\n      if (docLocation && docCampo)  {\r\n        \r\n        let myParams = new HttpParams().set('guidArea', docLocation.IDAREAOPERATIVA);\r\n        myParams = myParams.append('guidLocation', docLocation.ID);\r\n        myParams = myParams.append('guidCampo', docCampo.ID);\r\n        myParams = myParams.append('dataGiorno',strData);\r\n    \r\n        let myUrl = config.urlBase + '/' + doObject;\r\n    \r\n        this.apiCall\r\n            .httpGet(myUrl,myHeaders,myParams)\r\n            .subscribe(resultData => {\r\n  \r\n              //Reimposto il Gap dei minuti\r\n              this.setGapMinutes(docLocation.MINUTIPREAVVISOPRENOTAZIONE);\r\n              \r\n              //Ora cerco di sincronizzare il template del giorno con le occupazioni arrivate\r\n              this.syncResult(resultData, templateSlotDay);\r\n              resolve();\r\n              \r\n            }, error=>{\r\n              reject(error);\r\n            });\r\n      }\r\n      else {\r\n  \r\n        LogApp.consoleLog('Dati Occupazione: RICHIESTA FAILED');\r\n        LogApp.consoleLog('Manca' + (!docLocation?'Location':'') + ' ' + (!docCampo?'Campo':''));\r\n  \r\n        this._docOccupazione.next(templateSlotDay);\r\n        reject();\r\n        \r\n      }\r\n    })\r\n\r\n  \r\n  } \r\n  \r\n  /**\r\n   * \r\n   * @param resultDataServer Result in arrivo dal server\r\n   * @param templateSlot Template Slot in arrivo dalla videata\r\n   */\r\n  private syncResult(resultDataServer: any, templateSlot: SlotDay) {\r\n    //Converto il risultato in un oggetto reale\r\n    let srvResult = new DateSlotLock();\r\n    let nowMoment: any;\r\n    let isSlotOccupato: boolean;\r\n\r\n    srvResult.setJSONProperty(resultDataServer);\r\n\r\n\r\n    /**Informazioni occupazioni ricevute */\r\n    if (srvResult.RESULT) {\r\n      templateSlot._TEMPLATELOCK = false; //Sblocco il template in quanto son arrivati i risultati\r\n      templateSlot.APERTOCHIUSO = srvResult.APERTOCHIUSO;\r\n\r\n\r\n        /** Ciclo sugli Slot Orari */\r\n        templateSlot.SLOTTIMES.forEach(elSlotTime => {\r\n          //TUTTO CHIUSO\r\n          if (!templateSlot.APERTOCHIUSO) {\r\n            //Giornata Chiusa\r\n            elSlotTime.STATO = StatoSlot.chiuso;\r\n          }\r\n          else {\r\n\r\n            //Giornata Aperta\r\n            //Lo Slot ha già una impostazione da Template\r\n            //Nel caso da template sia CHIUSO non lo cambio\r\n\r\n            if (elSlotTime.STATO !== StatoSlot.chiuso) {\r\n\r\n              //Ora Attuale\r\n              nowMoment = moment();\r\n\r\n              //Lo Slot è nel passato - lo imposto a chiuso\r\n              if (moment(elSlotTime.START).isSameOrBefore(nowMoment)) {\r\n                  \r\n                //Lo Slot non è disponibile\r\n                elSlotTime.STATO = StatoSlot.chiuso;\r\n              }\r\n              else {\r\n                //Slot è nel futuro\r\n                \r\n                //Controllo se lo Slot è occupato\r\n                isSlotOccupato = this.slotInServerSlotLock(elSlotTime, srvResult);\r\n\r\n                if (isSlotOccupato) {\r\n                  //E' tra gli slot occupati\r\n                  elSlotTime.STATO = StatoSlot.occupato;\r\n                }\r\n                else {\r\n                  //Sembra libero lo SLOT ma controlliamo se c'e' un GAP di Preavviso\r\n                  if (this.gapHour != 0) {\r\n\r\n                    let disponibileDa = nowMoment.add(this.gapHour, 'hours');\r\n\r\n                    //Essendo dopo il preavviso lo segno come libero\r\n                    if (moment(elSlotTime.START).isAfter(disponibileDa)) {\r\n                      elSlotTime.STATO = StatoSlot.libero;\r\n                    }\r\n                    else {\r\n                      //Contattare in sede per la disponibilità\r\n                      elSlotTime.STATO = StatoSlot.contattare;\r\n                    }\r\n\r\n                  }\r\n                  else {\r\n                    //Non ci sono Gap di preavviso\r\n                    elSlotTime.STATO = StatoSlot.libero;\r\n                  }\r\n                }\r\n              }\r\n\r\n            }\r\n          }\r\n        });\r\n\r\n      \r\n    }\r\n\r\n    //Emetto l'evento di cambio\r\n    this._docOccupazione.next(templateSlot);\r\n\r\n  }\r\n \r\n    /**\r\n   * \r\n   * @param resultDataServer Result in arrivo dal server\r\n   * @param templateSlot Template Slot in arrivo dalla videata\r\n   */\r\n     private syncResultOriginale(resultDataServer: any, templateSlot: SlotDay) {\r\n      //Converto il risultato in un oggetto reale\r\n      let srvResult = new DateSlotLock();\r\n      srvResult.setJSONProperty(resultDataServer);\r\n  \r\n  \r\n      /**Informazioni occupazioni ricevute */\r\n      if (srvResult.RESULT) {\r\n        templateSlot._TEMPLATELOCK = false; //Sblocco il template in quanto son arrivati i risultati\r\n        templateSlot.APERTOCHIUSO = srvResult.APERTOCHIUSO;\r\n  \r\n  \r\n          /** Ciclo sugli Slot Orari */\r\n          templateSlot.SLOTTIMES.forEach(elSlotTime => {\r\n            //TUTTO CHIUSO\r\n            if (!templateSlot.APERTOCHIUSO) {\r\n              //Giornata Chiusa\r\n              elSlotTime.STATO = StatoSlot.chiuso;\r\n            }\r\n            else {\r\n              //Giornata Aperta\r\n              //Lo Slot ha già una impostazione da Template\r\n              //Nel caso da template sia CHIUSO non lo cambio\r\n  \r\n              if (elSlotTime.STATO !== StatoSlot.chiuso) {\r\n  \r\n                //ad Adesso applico un gap di Ore\r\n                //GAP ORE E' un preavviso\r\n                let adesso = moment().add(this.gapHour, 'hours');\r\n                 \r\n                //Se l'inizio dello Slot è superiore ad adesso\r\n                if (moment(elSlotTime.START).isAfter(adesso))  {\r\n  \r\n                  let inSlot = this.slotInServerSlotLock(elSlotTime, srvResult);\r\n    \r\n                \r\n                  if (inSlot) {\r\n                    //E' tra gli slot occupati\r\n                    elSlotTime.STATO = StatoSlot.occupato;\r\n                  }\r\n                }\r\n                else {\r\n                  //Lo Slot non è disponibile\r\n                  elSlotTime.STATO = StatoSlot.chiuso;\r\n                }\r\n  \r\n              }\r\n            }\r\n          });\r\n  \r\n        \r\n      }\r\n  \r\n      //Emetto l'evento di cambio\r\n      this._docOccupazione.next(templateSlot);\r\n  \r\n    }\r\n\r\n  /**\r\n   * Controlla se lo Slot è dentro a quelli Lock arrivati dal server\r\n   * @param docSlot Slot da controllare \r\n   * @param serverSlotLock Slot Bloccati a livello server\r\n   */\r\n  private slotInServerSlotLock(docSlot: SlotTime, serverSlotLock: DateSlotLock): boolean {\r\n    let findInSlotLock = false;\r\n    let result: boolean;\r\n\r\n    if (serverSlotLock) {\r\n      if (serverSlotLock.TIMELOCK) {\r\n\r\n        //Ciclo sugli orari bloccati\r\n        for (let index = 0; index < serverSlotLock.TIMELOCK.length; index++) {\r\n          const elLock = serverSlotLock.TIMELOCK[index];\r\n\r\n          result = MyDateTime.dateTimeInside(docSlot.START, docSlot.END, elLock.START, elLock.END);\r\n\r\n          \r\n          if (result) {\r\n            //SLOT OCCUPATO\r\n            findInSlotLock = true;\r\n            break;\r\n          }\r\n          \r\n        }\r\n      }\r\n    }\r\n    \r\n    return findInSlotLock;\r\n\r\n  }\r\n  \r\n}\r\n","import { TargetSesso, TipoCorso, Condition } from './valuelist.model';\r\n\r\n\r\n// Proprietà per Filtraggio Corsi\r\nexport class FilterCorsi {\r\n    ID: string;\r\n    IDLOCATION: string;\r\n    DATAFINE: Date;\r\n    _CONDITIONDATAFINE: Condition;\r\n    TARGETSESSO: TargetSesso;\r\n    IDCATEGORIEETA: string;\r\n    _DESCRCATEGORIEETA: string;\r\n    IDSPORT: string;\r\n    _DESCRSPORT: string;\r\n    TIPO: TipoCorso;\r\n    _CHECKISCRIZIONEAPERTA: boolean;\r\n\r\n\r\n    constructor(idLoc: string) {\r\n        this.IDLOCATION = idLoc;\r\n        this._CHECKISCRIZIONEAPERTA = false;\r\n    }\r\n\r\n\r\n\r\n}","import { SlotTime } from './slottime.model';\r\nimport { PrenotazionePianificazione } from '../prenotazionepianificazione.model';\r\nimport { MyDateTime, TypePeriod } from '../../library/models/mydatetime.model';\r\nimport { LogApp } from '../log.model';\r\nimport { StatoSlot } from '../valuelist.model';\r\nimport { SlottimeComponent } from 'src/app/shared/components/slottime/slottime.component';\r\nimport { element } from 'protractor';\r\n\r\nexport class SlotDay {\r\n    WEEKDAY:    number;\r\n    STARTTIME:  Date;\r\n    ENDTIME:    Date;\r\n    SLOTTIMES:  SlotTime[];\r\n    APERTOCHIUSO: boolean;\r\n    _TEMPLATELOCK: boolean; \r\n\r\n    ENDMIDDLE: Date;\r\n    STARTMIDDLE: Date;\r\n    \r\n    \r\n    constructor() {\r\n        this.SLOTTIMES = [];\r\n        this.APERTOCHIUSO = true;\r\n        this._TEMPLATELOCK = true; //Il giorno è ancora bloccato in quanto solo template e non attualizzato (Non posso prenotare nulla ancora)\r\n\r\n        this.setStandardTime();\r\n    }\r\n\r\n\r\n    /**\r\n     * Copia tutte le proprietà dall'oggetto passato\r\n     * @param oldObject Oggetto da cui copiare\r\n     */\r\n    copyFrom(oldObject: SlotDay) {\r\n        this.WEEKDAY = oldObject.WEEKDAY;\r\n        this.STARTTIME = oldObject.STARTTIME;\r\n        this.ENDTIME = oldObject.ENDTIME;\r\n        this.APERTOCHIUSO = oldObject.APERTOCHIUSO;\r\n        this._TEMPLATELOCK = oldObject._TEMPLATELOCK;\r\n        this.SLOTTIMES = [];\r\n\r\n        oldObject.SLOTTIMES.forEach(elSlotTime => {\r\n            let slot = new SlotTime(elSlotTime.START, elSlotTime.END);\r\n            slot.selected = elSlotTime.selected;\r\n            slot.STATO = elSlotTime.STATO;\r\n\r\n            this.SLOTTIMES.push(slot);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * segna come chiusi gli slot che sforano dentro un eventuale periodo intermedio di chiusura\r\n     */\r\n    disableClosedSlots(){\r\n        if (this.STARTMIDDLE && this.ENDMIDDLE){\r\n            this.SLOTTIMES.forEach(element => {\r\n                if (element.END > this.ENDMIDDLE && element.START < this.STARTMIDDLE){\r\n                    element.STATO = StatoSlot.chiuso;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * setta i parametri di un'eventuale chiusura e riapertura intermedia\r\n     * @param chiusura l'orario di chiusura intermedia\r\n     * @param riapertura l'orario di riapertura dopo la chiusura intermedia\r\n     */\r\n    setChiusuraIntermedia(chiusura: Date, riapertura: Date){\r\n        if (chiusura && riapertura){\r\n            this.ENDMIDDLE = chiusura;\r\n            this.STARTMIDDLE = riapertura;\r\n\r\n        }\r\n    }\r\n\r\n    setStandardTime() {\r\n\r\n        let adesso = new Date();\r\n        this.STARTTIME = new Date(adesso.getFullYear(), adesso.getMonth(), adesso.getDate(), 8,0,0);\r\n        this.ENDTIME = new Date(adesso.getFullYear(), adesso.getMonth(), adesso.getDate(), 20,0,0);\r\n    }\r\n\r\n    /**\r\n     * Creazione degli Slot Time\r\n     * @param minutiSlot Minuti di ogni slot\r\n     */\r\n    createSlotTime(minutiSlot: number) {\r\n        let anno = 0;\r\n        let mese = 0;\r\n        let giorno = 0;\r\n        let oreStart = 0;\r\n        let minutiStart = 0;\r\n        let oreEnd = 0;\r\n        let minutiEnd = 0;\r\n\r\n\r\n        \r\n\r\n        if (this.APERTOCHIUSO) {\r\n            anno = this.STARTTIME.getFullYear();\r\n            mese = this.STARTTIME.getMonth();\r\n            giorno = this.STARTTIME.getDate();\r\n            oreStart = this.STARTTIME.getHours();\r\n            oreEnd = this.ENDTIME.getHours();\r\n            minutiStart = this.STARTTIME.getMinutes();\r\n            minutiEnd = this.ENDTIME.getMinutes();\r\n\r\n            let myData = {anno, mese, giorno};\r\n            let myStart = {ore: oreStart, minuti: minutiStart};\r\n            let myEnd = {ore: oreEnd, minuti: minutiEnd }\r\n\r\n\r\n            \r\n            this.SLOTTIMES = SlotTime.getArrayStandardSlot(myData, myStart, myEnd, minutiSlot);\r\n            this.disableClosedSlots();\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Imposta tutti i figli SlotTime applicando a START e END lo stesso orario ma sulla data passata\r\n     * @param nuovaData Nuova Data da applicare\r\n     */\r\n    changeDateInSlotTime(nuovaData: Date) {\r\n        \r\n        if (this.SLOTTIMES) {\r\n            this.SLOTTIMES.forEach(elSlotTime => {\r\n                elSlotTime.changeDateInSlotTime(nuovaData);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Effettua le operazioni per il cambio selezione di uno slot\r\n     * @param idSlotTime SlotTime in cambiamento selection\r\n     */\r\n    changeSelectionSlotTime(actualSlot: SlotTime): PrenotazionePianificazione  {\r\n        \r\n        let newState: boolean;\r\n        let contaSelected: number; \r\n        let findSlot: boolean;\r\n        let findStart: boolean;\r\n        let docPianificazione: PrenotazionePianificazione;\r\n        \r\n        if (actualSlot) {\r\n            newState = !actualSlot.selected; //Il nuovo stato che assumerà lo Slot\r\n\r\n            //Se il nuovo stato è disattivare, posso farlo\r\n            if (newState == false) {\r\n                \r\n                contaSelected = 0; \r\n                findSlot = false;\r\n                \r\n                //Se prima dello Slot da disattivare ci fossero elementi selezionati, \r\n                // allora devo disattivare lo slot richiesto e tutti i seguenti\r\n                this.SLOTTIMES.forEach(element => {\r\n                    if (element.ID == actualSlot.ID) {\r\n                        findSlot = true;\r\n                        element.selected = false;\r\n                    }\r\n                    else if (!findSlot && element.selected) {\r\n                        contaSelected++;\r\n                    }\r\n                    else if (findSlot && contaSelected > 0) {\r\n                        element.selected = false;\r\n                    }\r\n                    \r\n\r\n                })\r\n\r\n            }\r\n            else { \r\n                contaSelected = 0;\r\n                findSlot = false;\r\n                //Se il nuovo Stato è ATTIVARE devo effettuare l'operazione \r\n                //controllando le altre selezioni\r\n                //Le selezioni massime possono essere solo 2\r\n                this.SLOTTIMES.forEach(element => {\r\n\r\n                    //Elemento selezionato\r\n                    if (element.selected) {\r\n                        //Se ne ho già selezionato 1, devo disattivare questo\r\n\r\n                        if ((contaSelected >= 1 && !findSlot) || (findSlot && contaSelected !== 1) ) {\r\n                            element.selected = false;\r\n                        }\r\n                        else {\r\n                            contaSelected++;\r\n                        }\r\n                    }\r\n                    else if (element.ID == actualSlot.ID) {\r\n\r\n\r\n                        element.selected = true;\r\n                        findSlot = true;\r\n\r\n                        contaSelected++;\r\n                    }\r\n                });\r\n\r\n                //Ora se ci sono 2 selezione posso selezionare tutto cio' che sta in mezzo\r\n                if (contaSelected == 2) {\r\n\r\n                    findStart = false;\r\n                    let lastIndex = -1;\r\n\r\n                    for (let index = 0; index < this.SLOTTIMES.length; index++) {\r\n                        const element = this.SLOTTIMES[index];\r\n                        if (element.selected && findStart) {\r\n                            //Ho finito di selezionare - esco\r\n                            lastIndex = index;\r\n                            break;\r\n                        }\r\n                        else if (element.selected && !findStart) {\r\n                            //Inizia adesso la selezione\r\n                            findStart = true;\r\n                        }\r\n                        else if (findStart) {\r\n                            //Ho trovato l'inizio e non ho ancora finito\r\n\r\n                            //Qua in mezzo c'e' qualcosa di chiuso o occupato e quindi mi devo fermare\r\n                            if (element.STATO == StatoSlot.chiuso || element.STATO == StatoSlot.occupato || element.STATO == StatoSlot.contattare) {\r\n                                lastIndex = index;\r\n                                break;\r\n                            }\r\n                            else {\r\n                                element.selected = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                     //Tutto quello che sta dopo il lastIndex deve essere disattivato\r\n                     if (lastIndex != -1 && lastIndex < this.SLOTTIMES.length) {\r\n                        for (let index = lastIndex + 1; index < this.SLOTTIMES.length; index++) {\r\n                            const element = this.SLOTTIMES[index];\r\n                            element.selected = false;\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        //Lo faccio fuori dagli If cosi creo sempre un oggetto\r\n        //Qui cerco di creare un oggetto di PrenotazionePianificazione da restituire\r\n        docPianificazione = this.getPrenotazionePianificazione();\r\n\r\n\r\n        return docPianificazione;\r\n        \r\n    }\r\n\r\n\r\n    getPrenotazionePianificazione(): PrenotazionePianificazione {\r\n        let docPianificazione: PrenotazionePianificazione;\r\n        let findStart = false;\r\n\r\n        docPianificazione = new PrenotazionePianificazione();\r\n\r\n        /**Devo cercare il primo selezionato e l'ultimo */\r\n        if (this.SLOTTIMES) {\r\n\r\n            this.SLOTTIMES.forEach(elSlot => {\r\n                if (elSlot.selected) {\r\n                    if (findStart) {\r\n                        docPianificazione.DATAORAFINE = elSlot.END;\r\n                        //Nel caso lo slot di End sia alle 00:00 allora sono le 00:00 del giorno seguente\r\n                        if (elSlot.END.getHours() == 0 && elSlot.END.getMinutes() == 0) {\r\n                            docPianificazione.DATAORAFINE = MyDateTime.calcola(elSlot.END, 1, TypePeriod.days);\r\n                        }\r\n\r\n                        docPianificazione.DURATAORE = MyDateTime.durataOre(docPianificazione.DATAORAINIZIO, docPianificazione.DATAORAFINE);\r\n                    }\r\n                    else {\r\n                        findStart = true;\r\n                        docPianificazione.DATAORAINIZIO = elSlot.START;\r\n                        docPianificazione.DATAORAFINE = elSlot.END;\r\n                        \r\n                        if (elSlot.END.getHours() == 0 && elSlot.END.getMinutes() == 0) {\r\n                            docPianificazione.DATAORAFINE = MyDateTime.calcola(elSlot.END, 1, TypePeriod.days);\r\n                        }\r\n\r\n                        docPianificazione.DURATAORE = MyDateTime.durataOre(docPianificazione.DATAORAINIZIO, docPianificazione.DATAORAFINE);\r\n                    }\r\n                }\r\n            });\r\n\r\n            \r\n        }\r\n\r\n        return docPianificazione;\r\n    }\r\n\r\n    /**\r\n     * Cerca e ritorna uno SlotTime per id\r\n     * @param idSlotTime id dello slottime da ricercare\r\n     */\r\n    findSlotTimeById(idSlotTime: string) {\r\n        let findSlot: SlotTime;\r\n        if (idSlotTime) {\r\n            findSlot = this.SLOTTIMES.find(element => {\r\n                return element.ID == idSlotTime;\r\n            })\r\n        }\r\n\r\n        return findSlot;\r\n    }\r\n    \r\n}","import { Gruppo } from './gruppo.model';\r\nimport { TipoPrivateImage } from './valuelist.model';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nexport class StartConfiguration {\r\n    private _ready: boolean; //Indica se la connessione con il server è avvenuta\r\n    private _errorMessage: string; //Errore occorso\r\n\r\n    private _appId: string;  //Identificatore connessione\r\n    private _urlDomain: string; //Dominio o IP da contattare\r\n    private _urlProtocol: string; //Protocollo usato http o https\r\n    \r\n    private _urlComponent: string; //Parte dell'URL relativa al componente\r\n    private _urlBase: string; // Url di Base per effettuare la chiamata\r\n\r\n    //Immagini rettangolari utilizzate come Logo\r\n    private _companyUrlLogo: string; // Logo Url company (Impostata in BackEnd)\r\n    private _appUrlLogo: string;  // Logo Url App Gouego (Statica di default)\r\n\r\n    //Immagini utilizzate come Icona quadrata\r\n    private _companyUrlIcon: string; // Icon company (Impostata in BackEnd)\r\n    private _appUrlIcon: string; // Icon App Gouego (Statica di Default)\r\n\r\n    private _companyName: string; //Nome Società\r\n    private _titleApp: string; //Titolo Applicazione\r\n    private _gruppo: Gruppo; //Gruppo Sportivo\r\n\r\n    private _idAreaSelected: string; //IDArea Operativa Selezionata\r\n    private _urlFileServer: string; //URL per il recupero di file dal server Gouego\r\n\r\n    private _authorizationAppCode: string; //Codice di autorizzazione da inviare\r\n    private _authorizationUserCode: string; //Codice di autorizzazione utente quando loggato da inviare\r\n        \r\n    constructor() {\r\n\r\n        this._urlComponent = 'COMPGOUEGO';\r\n        this._ready = false;\r\n        this._titleApp = 'Gouego';\r\n        this._companyName = 'Gouego Sport';\r\n\r\n        //Immagine Rettangolare\r\n\r\n        //Questa è sempre una immagine statica\r\n        this._appUrlLogo = 'assets/img/logoapp.png';\r\n        //Questa è inizialmente come appUrlLogo ma il server puo' mandarcene un'altra\r\n        this._companyUrlLogo = this._appUrlLogo ;\r\n\r\n\r\n        //Immagine Quadrata come ICONA\r\n        //Questa è sempre una immagine statica\r\n        this._appUrlIcon = 'assets/img/iconapp.png';\r\n\r\n        //Questa è inizialmente come appUrlIcon ma il server puo' mandarcene un'altra\r\n        this._companyUrlIcon = this._appUrlIcon;\r\n\r\n        //AppId gestito dagli eventi dello Start Service\r\n        this._appId = '';\r\n        this._idAreaSelected = '';\r\n        \r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param prefixDomain Prefisso del dominio es (openbeach,demo, localhost)\r\n     * @param testingMode \r\n     */\r\n    setUrlLocation(testingMode = false) {\r\n        if (testingMode == true) {\r\n            //Modalità di test\r\n\r\n            //Modalità in locale\r\n            //Protocollo per forza http\r\n            this._urlProtocol = 'http';\r\n            this._urlDomain = 'localhost/gouegoapi';\r\n            \r\n            this._urlFileServer = 'localhost/gouego';\r\n\r\n        }\r\n        else {\r\n            //Non sono in test perchè voglio collegarmi al server, ma da dentro ionic serve\r\n            this._urlProtocol = 'https';\r\n            //Modalità Server\r\n            this._urlDomain = 'api.gouego.com';            \r\n            this._urlFileServer = 'app.gouego.com/admin';\r\n            \r\n\r\n        }\r\n    }\r\n\r\n    // Utilizzato al termine di una chiamata di \r\n    // Autorizzazione\r\n    setGruppoAuthorization(responseData: any) {\r\n        // Inizializzo il Gruppo\r\n        this._gruppo = new Gruppo();\r\n        this._gruppo.setJSONProperty(responseData);\r\n\r\n        //Ciclo sulle immagini ricevute (se presenti)\r\n        this._gruppo.PRIVATEIMAGE.forEach(elImage => {\r\n\r\n            if (elImage.FILENAMEESTENSIONE) {\r\n                switch (elImage.TIPO) {\r\n                    case TipoPrivateImage.icon:\r\n                        this._companyUrlIcon = `${this._urlProtocol}://${this._urlFileServer}/${elImage.FILENAMEESTENSIONE}`;\r\n                        break;\r\n                    case TipoPrivateImage.logo:\r\n                        this._companyUrlLogo = `${this._urlProtocol}://${this._urlFileServer}/${elImage.FILENAMEESTENSIONE}`;\r\n                        break;\r\n                \r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            \r\n        });\r\n\r\n        \r\n        if (this._gruppo.DENOMINAZIONE) {\r\n\r\n            this._companyName = this._gruppo.DENOMINAZIONE;\r\n\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    get gruppo(): Gruppo {\r\n        return this._gruppo;\r\n    }\r\n\r\n    set gruppo(value: Gruppo) {\r\n        this._gruppo = value;\r\n    }\r\n\r\n    get idAreaSelected(): string {\r\n        return this._idAreaSelected;\r\n    }\r\n\r\n    set idAreaSelected(value: string) {\r\n        this._idAreaSelected = value;\r\n    }\r\n\r\n    /**\r\n     * Ritorna il logo standard di Gouego\r\n     */\r\n    get appUrlLogo() {\r\n        return this._appUrlLogo;\r\n    }\r\n\r\n    set appUrlLogo(value: string) {\r\n        this._appUrlLogo = value;\r\n    }\r\n\r\n    /**\r\n     * Ritorna il logo aziendale\r\n     */\r\n    get companyUrlLogo() {\r\n        return this._companyUrlLogo;\r\n    }\r\n\r\n    set companyUrlLogo(value: string) {\r\n        this._companyUrlLogo = value;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Brand Logo Image\r\n    /**\r\n     * Ritorna Icona Rettangolare Standard\r\n     */\r\n    get appUrlIcon() {\r\n        return this._appUrlIcon;\r\n    }\r\n\r\n    set appUrlIcon(value: string) {\r\n        this._appUrlIcon = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna Icona Aziendale\r\n     */\r\n    get companyUrlIcon() {\r\n        return this._companyUrlIcon;\r\n    }\r\n\r\n    set companyUrlIcon(value: string) {\r\n        this._companyUrlIcon = value;\r\n    }    \r\n    //#endregion\r\n\r\n    \r\n\r\n    /**\r\n     * Ritorna Logo rettangolare da utilizzare\r\n     */\r\n    getUrlLogo() {\r\n        return (this._companyUrlLogo ? this._companyUrlLogo : this._appUrlLogo)\r\n    }\r\n\r\n    /**\r\n     * Ritorna una Icona quadrata\r\n     */\r\n    getUrlIcon() {\r\n        return (this._companyUrlIcon ? this._companyUrlIcon : this._appUrlIcon)\r\n    }\r\n\r\n    \r\n    get errorMessage() {\r\n        return this._errorMessage;\r\n    }\r\n\r\n    set errorMessage(value: string) {\r\n        this._errorMessage = value;\r\n    }\r\n\r\n    get companyName() {\r\n        return this._companyName;\r\n    }\r\n\r\n    set companyName(value: string) {\r\n        this._companyName = value;\r\n    }\r\n\r\n    get titleApp() {\r\n        return this._titleApp;\r\n    }\r\n\r\n    set titleApp(value: string) {\r\n        this._titleApp = value;\r\n    }    \r\n\r\n    get ready(): boolean {\r\n        return this._ready;\r\n    }\r\n    \r\n    set ready(value: boolean) {\r\n        this._ready = value;\r\n    }\r\n\r\n\r\n\r\n    // get set appId\r\n    get appId() {\r\n        return this._appId;\r\n    }\r\n\r\n    set appId(value: string) {\r\n        this._appId = value;\r\n    }\r\n\r\n\r\n    get urlDomain():string {\r\n        return this._urlDomain;\r\n    }\r\n\r\n    get urlFileServer(): string {\r\n        let myUrl = `${this._urlProtocol}://${this._urlFileServer}`;\r\n\r\n        return myUrl\r\n    }\r\n\r\n    //Url di Base per effettuare la chiamata\r\n    get urlBase():string {\r\n        let myUrl = `${this._urlProtocol}://${this._urlDomain}`;\r\n\r\n\r\n        myUrl = myUrl + '/' + this._urlComponent;\r\n\r\n        return myUrl;\r\n    }\r\n\r\n    /**\r\n     * Codice autorizzazione Applicazione ottenuto nella fase di \r\n     * shaking iniziale da inviare come authcode ad ogni richiesta\r\n     */\r\n    get authorizationAppCode(): string {\r\n        return this._authorizationAppCode;\r\n    }\r\n\r\n    set authorizationAppCode(value: string) {\r\n        this._authorizationAppCode = value;\r\n    }\r\n\r\n    /**\r\n     * Codice autorizzazione utente ottenuto nella fase di login\r\n     * e da inviare se loggato\r\n     */\r\n    get authorizationUserCode(): string {\r\n        return this._authorizationUserCode;\r\n    }\r\n\r\n    set authorizationUserCode(value: string) {\r\n        this._authorizationUserCode = value;\r\n    }\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * Ritorna l'headerHttp da applicare con l'impostazione \r\n     * @param contentType Eventuale content Type da applicare\r\n     */\r\n    getHttpHeaders(contentType?:string): HttpHeaders {\r\n        let content = 'application/json';\r\n        if (contentType && contentType.length != 0) {\r\n            content = contentType;\r\n        }\r\n\r\n        let myHeaders = new HttpHeaders({'Content-type':content});\r\n        \r\n        //Se ho l'app-id lo imposto, \r\n        //altrimenti \r\n        if (this._appId && this._appId.length != 0) {\r\n\r\n            myHeaders = myHeaders.append('appid',this._appId);\r\n        }\r\n        else {\r\n            myHeaders = myHeaders.append('dashrequest','-1');\r\n        }\r\n\r\n        myHeaders = myHeaders.append('fromrequest','gouegoapp');\r\n\r\n        //Devo inviare il codice di autorizzazione app\r\n        if (this._authorizationAppCode && this._authorizationAppCode.length != 0) {\r\n            myHeaders = myHeaders.append('authcode',this._authorizationAppCode);\r\n            \r\n        }\r\n\r\n        //Devo inviare il codice di autorizazione utente\r\n        if (this._authorizationUserCode && this._authorizationUserCode.length != 0) {\r\n            myHeaders = myHeaders.append('authusercode',this._authorizationUserCode);\r\n        }\r\n\r\n        return myHeaders;\r\n    }\r\n\r\n    \r\n\r\n\r\n}\r\n\r\nexport class StartAuthorization {\r\n\r\n    result: number;\r\n    authcode: string;\r\n    GRUPPOSPORTIVO: Gruppo;\r\n\r\n    constructor() {\r\n    }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoPrivateImage } from './valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class PrivateImage extends IDDocument {\r\n    TIPO: TipoPrivateImage;\r\n    FILENAMEESTENSIONE: string; //Percorso relativo di scaricamento \r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['FILENAMEESTENSIONE'];\r\n    let arNumber = ['TIPO'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'PrivateImage';\r\n    objDescriptor.doRemote = false;\r\n    objDescriptor.classWebApiName = '';\r\n\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    return objDescriptor;\r\n} \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class DateSlotLock extends IDDocument {\r\n    RESULT: boolean;\r\n    MESSAGE: string;\r\n    DATA: Date;\r\n    APERTOCHIUSO: boolean;\r\n    TIMELOCK: TimeLock[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.RESULT = false;\r\n        this.APERTOCHIUSO = false;\r\n        this.TIMELOCK = [];\r\n    }\r\n\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n\r\n        //Imposto che il documento è originale\r\n        this.setOriginal();   \r\n    }\r\n\r\n    /**\r\n     * Imposta le collection\r\n     */\r\n    setCollection(data: any) {\r\n        this.TIMELOCK = [];\r\n\r\n        if (data) {\r\n            if (data.TIMELOCK) {\r\n\r\n                data.TIMELOCK.forEach(element => {\r\n\r\n                    let newTl = new TimeLock();\r\n                    newTl.setJSONProperty(element);\r\n                    this.TIMELOCK.push(newTl);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['MESSAGE'];\r\n        let arNumber = [];\r\n        let arNumberDecimal = [];\r\n        let arBoolean = ['APERTOCHIUSO','RESULT'];\r\n        let arDate = ['DATA'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        let arCollection = ['TIMELOCK'];\r\n\r\n        objDescriptor.className = 'DateSlotLock';\r\n        objDescriptor.classWebApiName = '';\r\n        objDescriptor.doRemote = false;\r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n        \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\nexport class TimeLock extends IDDocument {\r\n    START: Date;\r\n    END: Date;\r\n\r\n    constructor() {\r\n        super();\r\n      }\r\n    \r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [];\r\n        let arNumber = [];\r\n        let arNumberDecimal = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =['START','END'];\r\n        let arTime = [];\r\n        let arCollection = [];\r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { ClasseDocumento, TipoDocumentazione } from './tipodocumentazione.model';\r\n\r\nexport class InvioDocumentazione extends IDDocument{\r\n    TOKENUTENTE: string;\r\n    IDTIPODOCUMENTAZIONE : string;\r\n    FILE : string;\r\n    DESCRIZIONE : string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n    \r\n          /**\r\n        * Ritorna il descrittore della Struttura Campi\r\n        */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDTIPODOCUMENTAZIONE',\r\n                        'FILE',\r\n                        'DESCRIZIONE',\r\n                        'TOKENUTENTE'];\r\n        \r\n    \r\n        objDescriptor.className = 'InvioDocumentazione';\r\n        objDescriptor.doRemote = false;\r\n        objDescriptor.describeField = 'DESCRIZIONE'\r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n            \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\nexport class Documentazione extends IDDocument{\r\n    IDUTENTE : string;\r\n    IDTIPODOCUMENTAZIONE : string;\r\n    CLASSE : ClasseDocumento;\r\n    DESCRIZIONE : string;\r\n    FILENAMEESTENSIONE : string; //percorso relativo\r\n    VALIDOFINO : Date;\r\n    FILETYPE : string;\r\n    CLIENTUPLOAD : boolean;\r\n    DATAORACARICAMENTO: Date;\r\n    DATAORAMODIFICA: Date;\r\n    \r\n\r\n    constructor(onlyInstance = false){\r\n        super(onlyInstance);\r\n    }\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDUTENTE',\r\n                        'IDTIPODOCUMENTAZIONE',\r\n                        'DESCRIZIONE',\r\n                        'FILENAMEESTENSIONE',\r\n                        'FILETYPE'\r\n                        ];\r\n        let arBoolean = ['CLIENTUPLOAD'];\r\n        let arDate = ['VALIDOFINO'];\r\n        let arDateTime = ['DATAORACARICAMENTO','DATAORAMODIFICA'];\r\n        let arNumber = ['CLASSE'];\r\n    \r\n        objDescriptor.className = 'Documentazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'DOCUMENTAZIONE';\r\n        objDescriptor.describeField = 'FILENAMEESTENSIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    \r\n        \r\n        objDescriptor.setRelation('IDUTENTE','Utente');\r\n        objDescriptor.setRelation('IDTIPODOCUMENTAZIONE','TipoDocumentazione');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { isDate } from 'util';\r\nimport { TypeDefinition } from './descriptor.model';\r\nimport { IDLibrary } from './idlibrary.model';\r\n\r\n//Classe con parametri Request POST\r\nexport class PostParams {\r\n  key: string;\r\n  value: any;\r\n  exportOnlyDocModified: boolean; //Se Value è un documento, indica se esportare solo i documenti modificati\r\n  exportOnlyPropertyModified: boolean; //Se Value è un documento, indica se esportare solo le proprietà modificate o tutte\r\n\r\n  constructor() {\r\n    this.exportOnlyPropertyModified = false;\r\n    this.exportOnlyDocModified = false;\r\n  }\r\n\r\n  /**\r\n   * Controlla se il value contenuto è di tipo basico\r\n   */\r\n  isBasicType(): boolean {\r\n    let basic = false;\r\n    let typeVar: TypeDefinition;\r\n    let arBasicType: TypeDefinition[] = [];\r\n\r\n    typeVar = IDLibrary.getValueType(this.value);\r\n    arBasicType.push(TypeDefinition.boolean);\r\n    arBasicType.push(TypeDefinition.char);\r\n    arBasicType.push(TypeDefinition.date);\r\n    arBasicType.push(TypeDefinition.dateTime);\r\n    arBasicType.push(TypeDefinition.number);\r\n    arBasicType.push(TypeDefinition.numberDecimal);\r\n    arBasicType.push(TypeDefinition.time);\r\n    \r\n    if (arBasicType.includes(typeVar)) {\r\n      basic = true;\r\n    }\r\n\r\n    return basic;\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n   * Esporta l'insieme chiave valore come\r\n   * \"chiave\": valore\r\n   * in formato JSON\r\n   */\r\n  exportJSON(): string {\r\n    let jsonReturn = '';\r\n    let jsonValue = IDLibrary.exportJSONValue(this.value, this.exportOnlyPropertyModified, this.exportOnlyDocModified);\r\n\r\n    jsonReturn = `\\\"${this.key}\\\":` + jsonValue;\r\n\r\n    return jsonReturn;\r\n  }\r\n\r\n\r\n  /**\r\n   * Dato un oggetto PostParams o un ArrayPostParams controlla \r\n   * che gli elementi siano di tipo basico\r\n   */\r\n  static getBasicTypeFrom(myParams: PostParams | PostParams[]): boolean {\r\n    let basic = false;\r\n    if (myParams) {\r\n      if (Array.isArray(myParams)) {\r\n        basic = true;\r\n\r\n        for (let index = 0; index < myParams.length; index++) {\r\n          const element = myParams[index];\r\n          if (element.isBasicType() == false) {\r\n            basic = false;\r\n            break;\r\n          }\r\n        }\r\n        \r\n      }\r\n      else {\r\n        basic = myParams.isBasicType();\r\n      }\r\n    }\r\n    \r\n\r\n    return basic;\r\n  }\r\n\r\n\r\n  /**\r\n   * Viene creato un oggetto JSON con gli elementi presenti in myParams\r\n   * @param myParams Singolo oggetto PostParams o Array di PostParams\r\n   */\r\n  static getJsonFrom(myParams: PostParams | PostParams[]): string {\r\n    let jsonReturn = '';\r\n    if (myParams) {\r\n\r\n      if (Array.isArray(myParams)) {\r\n        for (let index = 0; index < myParams.length; index++) {\r\n          const element = myParams[index];\r\n          let jsonSingle = element.exportJSON();\r\n          if (jsonReturn.length !== 0) {\r\n              jsonReturn += ', ';\r\n          }\r\n\r\n          jsonReturn += jsonSingle;\r\n          \r\n        }\r\n      }\r\n      else {\r\n        jsonReturn = myParams.exportJSON();\r\n      }\r\n    }\r\n\r\n    jsonReturn = '{' + jsonReturn + '}';\r\n\r\n    return jsonReturn;\r\n  }\r\n}\r\n\r\n\r\n//Classe con parametri da impostare nelle Request di tipo Get\r\n  export class RequestParams {\r\n\r\n    child_level?: number; //Profondita Richiesta\r\n    top?: number; //Numero massimo di elementi ritornati\r\n    orderBy?: string; //Ordinamento asc || desc\r\n    decode:RequestDecode; //Oggetto per la richiesta di decodifica automatica dei dati ricevuti\r\n\r\n    constructor() {\r\n        this.decode = new RequestDecode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Classe con la definizione dei parametri di decodifica se richiesta\r\n   */\r\n  export class RequestDecode {\r\n    active?: boolean;   //TRUE: si richiede la decodifica alla ricezione degli elementi\r\n    foreignFields?: RequestForeign[]; \r\n    //Se non passato vengono decodificati tutti i campi di foreign key con le describeRowFiels,\r\n    //altrimenti è possibile specificare le foreignKey da decodificare\r\n   \r\n    constructor() {\r\n        this.active = false;\r\n        this.foreignFields = [];\r\n    }\r\n\r\n    /**\r\n     * Aggiunge una ForeignKey tra quelle da decodificare\r\n     * Ritorna l'oggetto RequestForeign\r\n     * @param nameField Nome del campo di Foreign Key\r\n     */\r\n    addForeignField(nameField:string ): RequestForeign {\r\n\r\n        let docForeign: RequestForeign;\r\n        if (nameField && nameField.length !== 0) {\r\n            docForeign = new RequestForeign(nameField);\r\n            this.foreignFields.push(docForeign);\r\n        }\r\n\r\n        return docForeign;\r\n    }\r\n\r\n  }\r\n \r\n  /**\r\n   * Classe con le foreignKey usate per la decodifica, e se presenti i campi di describe da usare\r\n   */\r\n  export class RequestForeign {\r\n    nameField: string;\r\n    describeFields?: string[];\r\n\r\n    constructor(nameField: string) {\r\n\r\n        this.nameField = nameField;\r\n        this.describeFields = [];\r\n    }\r\n\r\n    addDescribeField(nameField: string) {\r\n        if (nameField && nameField.length !== 0) {\r\n            this.describeFields.push(nameField);\r\n        }\r\n    }\r\n  }\r\n\r\n  \r\n\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoCampo, StrutturaCampo } from '../models/valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { CampoSport } from './camposport.model';\r\n\r\n\r\n\r\nexport class Campo extends IDDocument {\r\n    \r\n  IDAREAOPERATIVA: string;\r\n  IDLOCATION: string;\r\n  IDSPORT: string;\r\n  DENOMINAZIONE: string;\r\n  TIPOLOGIA: TipoCampo;\r\n  DIMENSIONI: string;\r\n  STRUTTURA: StrutturaCampo;\r\n  CAMPOSPORT: CampoSport[]; \r\n  UTILIZZABILE: boolean; //Segnato come utilizzabile\r\n  DURATAOREMINIMA: number; //Se presente è la durata minima di prenotazione\r\n\r\n  constructor(onlyInstance?:boolean) {\r\n    super(onlyInstance);\r\n  }\r\n\r\n      /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'IDSPORT',\r\n                    'DENOMINAZIONE',\r\n                    'DIMENSIONI'\r\n                    ];\r\n    let arNumber = ['TIPOLOGIA', 'STRUTTURA'];\r\n    let arNumberDecimal = ['DURATAOREMINIMA'];\r\n    let arBoolean = ['UTILIZZABILE'];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = ['CAMPOSPORT'];\r\n\r\n    objDescriptor.className = 'Campo';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'CAMPO';\r\n    objDescriptor.describeField = 'DENOMINAZIONE'\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n    objDescriptor.setRelation('IDSPORT','Sport');\r\n    \r\n\r\n    return objDescriptor;\r\n}\r\n\r\n// Sovrascrivo il metodo IDDocument\r\nsetJSONProperty(data: any) {\r\n  //Chiamo il metodo IDDocument\r\n  super.setJSONProperty(data);\r\n\r\n  //Chiamo il metodo per le collection\r\n  this.setCollection(data);\r\n\r\n  this.setOriginal();\r\n}\r\n\r\n/**\r\n * Imposta le collection dell'oggetto, con i reali oggetti tipizzati\r\n * @param data JSON Received\r\n */\r\nsetCollection(data: any) {\r\n  \r\n  // Riazzero e ricreo\r\n  this.CAMPOSPORT = [];\r\n\r\n  //Sistemazione Immagini Location\r\n  if (data.CAMPOSPORT) {\r\n    this.setCollectionCampoSport(data);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Inizializza la collection Apertura Location con oggetto tipizzati\r\n * @param data JSON Received\r\n */\r\nprivate setCollectionCampoSport(data: any) {\r\n  if (data.CAMPOSPORT) {\r\n\r\n\r\n    data.CAMPOSPORT.forEach(elCampoSport => {\r\n      let newCampoSport = new CampoSport();\r\n      newCampoSport.setJSONProperty(elCampoSport);\r\n\r\n      this.CAMPOSPORT.push(newCampoSport);\r\n    });\r\n  }\r\n}\r\n\r\n \r\n\r\n//Aggiunge alla collection un campo Sport\r\naddCampoSport(docCampoSport: CampoSport) {\r\n  if (!this.CAMPOSPORT) {\r\n    this.CAMPOSPORT = [];\r\n  }\r\n\r\n  this.CAMPOSPORT.push(docCampoSport);\r\n}\r\n\r\n\r\n}","var map = {\n\t\"./af\": \"K/tc\",\n\t\"./af.js\": \"K/tc\",\n\t\"./ar\": \"jnO4\",\n\t\"./ar-dz\": \"o1bE\",\n\t\"./ar-dz.js\": \"o1bE\",\n\t\"./ar-kw\": \"Qj4J\",\n\t\"./ar-kw.js\": \"Qj4J\",\n\t\"./ar-ly\": \"HP3h\",\n\t\"./ar-ly.js\": \"HP3h\",\n\t\"./ar-ma\": \"CoRJ\",\n\t\"./ar-ma.js\": \"CoRJ\",\n\t\"./ar-sa\": \"gjCT\",\n\t\"./ar-sa.js\": \"gjCT\",\n\t\"./ar-tn\": \"bYM6\",\n\t\"./ar-tn.js\": \"bYM6\",\n\t\"./ar.js\": \"jnO4\",\n\t\"./az\": \"SFxW\",\n\t\"./az.js\": \"SFxW\",\n\t\"./be\": \"H8ED\",\n\t\"./be.js\": \"H8ED\",\n\t\"./bg\": \"hKrs\",\n\t\"./bg.js\": \"hKrs\",\n\t\"./bm\": \"p/rL\",\n\t\"./bm.js\": \"p/rL\",\n\t\"./bn\": \"kEOa\",\n\t\"./bn-bd\": \"loYQ\",\n\t\"./bn-bd.js\": \"loYQ\",\n\t\"./bn.js\": \"kEOa\",\n\t\"./bo\": \"0mo+\",\n\t\"./bo.js\": \"0mo+\",\n\t\"./br\": \"aIdf\",\n\t\"./br.js\": \"aIdf\",\n\t\"./bs\": \"JVSJ\",\n\t\"./bs.js\": \"JVSJ\",\n\t\"./ca\": \"1xZ4\",\n\t\"./ca.js\": \"1xZ4\",\n\t\"./cs\": \"PA2r\",\n\t\"./cs.js\": \"PA2r\",\n\t\"./cv\": \"A+xa\",\n\t\"./cv.js\": \"A+xa\",\n\t\"./cy\": \"l5ep\",\n\t\"./cy.js\": \"l5ep\",\n\t\"./da\": \"DxQv\",\n\t\"./da.js\": \"DxQv\",\n\t\"./de\": \"tGlX\",\n\t\"./de-at\": \"s+uk\",\n\t\"./de-at.js\": \"s+uk\",\n\t\"./de-ch\": \"u3GI\",\n\t\"./de-ch.js\": \"u3GI\",\n\t\"./de.js\": \"tGlX\",\n\t\"./dv\": \"WYrj\",\n\t\"./dv.js\": \"WYrj\",\n\t\"./el\": \"jUeY\",\n\t\"./el.js\": \"jUeY\",\n\t\"./en-au\": \"Dmvi\",\n\t\"./en-au.js\": \"Dmvi\",\n\t\"./en-ca\": \"OIYi\",\n\t\"./en-ca.js\": \"OIYi\",\n\t\"./en-gb\": \"Oaa7\",\n\t\"./en-gb.js\": \"Oaa7\",\n\t\"./en-ie\": \"4dOw\",\n\t\"./en-ie.js\": \"4dOw\",\n\t\"./en-il\": \"czMo\",\n\t\"./en-il.js\": \"czMo\",\n\t\"./en-in\": \"7C5Q\",\n\t\"./en-in.js\": \"7C5Q\",\n\t\"./en-nz\": \"b1Dy\",\n\t\"./en-nz.js\": \"b1Dy\",\n\t\"./en-sg\": \"t+mt\",\n\t\"./en-sg.js\": \"t+mt\",\n\t\"./eo\": \"Zduo\",\n\t\"./eo.js\": \"Zduo\",\n\t\"./es\": \"iYuL\",\n\t\"./es-do\": \"CjzT\",\n\t\"./es-do.js\": \"CjzT\",\n\t\"./es-mx\": \"tbfe\",\n\t\"./es-mx.js\": \"tbfe\",\n\t\"./es-us\": \"Vclq\",\n\t\"./es-us.js\": \"Vclq\",\n\t\"./es.js\": \"iYuL\",\n\t\"./et\": \"7BjC\",\n\t\"./et.js\": \"7BjC\",\n\t\"./eu\": \"D/JM\",\n\t\"./eu.js\": \"D/JM\",\n\t\"./fa\": \"jfSC\",\n\t\"./fa.js\": \"jfSC\",\n\t\"./fi\": \"gekB\",\n\t\"./fi.js\": \"gekB\",\n\t\"./fil\": \"1ppg\",\n\t\"./fil.js\": \"1ppg\",\n\t\"./fo\": \"ByF4\",\n\t\"./fo.js\": \"ByF4\",\n\t\"./fr\": \"nyYc\",\n\t\"./fr-ca\": \"2fjn\",\n\t\"./fr-ca.js\": \"2fjn\",\n\t\"./fr-ch\": \"Dkky\",\n\t\"./fr-ch.js\": \"Dkky\",\n\t\"./fr.js\": \"nyYc\",\n\t\"./fy\": \"cRix\",\n\t\"./fy.js\": \"cRix\",\n\t\"./ga\": \"USCx\",\n\t\"./ga.js\": \"USCx\",\n\t\"./gd\": \"9rRi\",\n\t\"./gd.js\": \"9rRi\",\n\t\"./gl\": \"iEDd\",\n\t\"./gl.js\": \"iEDd\",\n\t\"./gom-deva\": \"qvJo\",\n\t\"./gom-deva.js\": \"qvJo\",\n\t\"./gom-latn\": \"DKr+\",\n\t\"./gom-latn.js\": \"DKr+\",\n\t\"./gu\": \"4MV3\",\n\t\"./gu.js\": \"4MV3\",\n\t\"./he\": \"x6pH\",\n\t\"./he.js\": \"x6pH\",\n\t\"./hi\": \"3E1r\",\n\t\"./hi.js\": \"3E1r\",\n\t\"./hr\": \"S6ln\",\n\t\"./hr.js\": \"S6ln\",\n\t\"./hu\": \"WxRl\",\n\t\"./hu.js\": \"WxRl\",\n\t\"./hy-am\": \"1rYy\",\n\t\"./hy-am.js\": \"1rYy\",\n\t\"./id\": \"UDhR\",\n\t\"./id.js\": \"UDhR\",\n\t\"./is\": \"BVg3\",\n\t\"./is.js\": \"BVg3\",\n\t\"./it\": \"bpih\",\n\t\"./it-ch\": \"bxKX\",\n\t\"./it-ch.js\": \"bxKX\",\n\t\"./it.js\": \"bpih\",\n\t\"./ja\": \"B55N\",\n\t\"./ja.js\": \"B55N\",\n\t\"./jv\": \"tUCv\",\n\t\"./jv.js\": \"tUCv\",\n\t\"./ka\": \"IBtZ\",\n\t\"./ka.js\": \"IBtZ\",\n\t\"./kk\": \"bXm7\",\n\t\"./kk.js\": \"bXm7\",\n\t\"./km\": \"6B0Y\",\n\t\"./km.js\": \"6B0Y\",\n\t\"./kn\": \"PpIw\",\n\t\"./kn.js\": \"PpIw\",\n\t\"./ko\": \"Ivi+\",\n\t\"./ko.js\": \"Ivi+\",\n\t\"./ku\": \"JCF/\",\n\t\"./ku.js\": \"JCF/\",\n\t\"./ky\": \"lgnt\",\n\t\"./ky.js\": \"lgnt\",\n\t\"./lb\": \"RAwQ\",\n\t\"./lb.js\": \"RAwQ\",\n\t\"./lo\": \"sp3z\",\n\t\"./lo.js\": \"sp3z\",\n\t\"./lt\": \"JvlW\",\n\t\"./lt.js\": \"JvlW\",\n\t\"./lv\": \"uXwI\",\n\t\"./lv.js\": \"uXwI\",\n\t\"./me\": \"KTz0\",\n\t\"./me.js\": \"KTz0\",\n\t\"./mi\": \"aIsn\",\n\t\"./mi.js\": \"aIsn\",\n\t\"./mk\": \"aQkU\",\n\t\"./mk.js\": \"aQkU\",\n\t\"./ml\": \"AvvY\",\n\t\"./ml.js\": \"AvvY\",\n\t\"./mn\": \"lYtQ\",\n\t\"./mn.js\": \"lYtQ\",\n\t\"./mr\": \"Ob0Z\",\n\t\"./mr.js\": \"Ob0Z\",\n\t\"./ms\": \"6+QB\",\n\t\"./ms-my\": \"ZAMP\",\n\t\"./ms-my.js\": \"ZAMP\",\n\t\"./ms.js\": \"6+QB\",\n\t\"./mt\": \"G0Uy\",\n\t\"./mt.js\": \"G0Uy\",\n\t\"./my\": \"honF\",\n\t\"./my.js\": \"honF\",\n\t\"./nb\": \"bOMt\",\n\t\"./nb.js\": \"bOMt\",\n\t\"./ne\": \"OjkT\",\n\t\"./ne.js\": \"OjkT\",\n\t\"./nl\": \"+s0g\",\n\t\"./nl-be\": \"2ykv\",\n\t\"./nl-be.js\": \"2ykv\",\n\t\"./nl.js\": \"+s0g\",\n\t\"./nn\": \"uEye\",\n\t\"./nn.js\": \"uEye\",\n\t\"./oc-lnc\": \"Fnuy\",\n\t\"./oc-lnc.js\": \"Fnuy\",\n\t\"./pa-in\": \"8/+R\",\n\t\"./pa-in.js\": \"8/+R\",\n\t\"./pl\": \"jVdC\",\n\t\"./pl.js\": \"jVdC\",\n\t\"./pt\": \"8mBD\",\n\t\"./pt-br\": \"0tRk\",\n\t\"./pt-br.js\": \"0tRk\",\n\t\"./pt.js\": \"8mBD\",\n\t\"./ro\": \"lyxo\",\n\t\"./ro.js\": \"lyxo\",\n\t\"./ru\": \"lXzo\",\n\t\"./ru.js\": \"lXzo\",\n\t\"./sd\": \"Z4QM\",\n\t\"./sd.js\": \"Z4QM\",\n\t\"./se\": \"//9w\",\n\t\"./se.js\": \"//9w\",\n\t\"./si\": \"7aV9\",\n\t\"./si.js\": \"7aV9\",\n\t\"./sk\": \"e+ae\",\n\t\"./sk.js\": \"e+ae\",\n\t\"./sl\": \"gVVK\",\n\t\"./sl.js\": \"gVVK\",\n\t\"./sq\": \"yPMs\",\n\t\"./sq.js\": \"yPMs\",\n\t\"./sr\": \"zx6S\",\n\t\"./sr-cyrl\": \"E+lV\",\n\t\"./sr-cyrl.js\": \"E+lV\",\n\t\"./sr.js\": \"zx6S\",\n\t\"./ss\": \"Ur1D\",\n\t\"./ss.js\": \"Ur1D\",\n\t\"./sv\": \"X709\",\n\t\"./sv.js\": \"X709\",\n\t\"./sw\": \"dNwA\",\n\t\"./sw.js\": \"dNwA\",\n\t\"./ta\": \"PeUW\",\n\t\"./ta.js\": \"PeUW\",\n\t\"./te\": \"XLvN\",\n\t\"./te.js\": \"XLvN\",\n\t\"./tet\": \"V2x9\",\n\t\"./tet.js\": \"V2x9\",\n\t\"./tg\": \"Oxv6\",\n\t\"./tg.js\": \"Oxv6\",\n\t\"./th\": \"EOgW\",\n\t\"./th.js\": \"EOgW\",\n\t\"./tk\": \"Wv91\",\n\t\"./tk.js\": \"Wv91\",\n\t\"./tl-ph\": \"Dzi0\",\n\t\"./tl-ph.js\": \"Dzi0\",\n\t\"./tlh\": \"z3Vd\",\n\t\"./tlh.js\": \"z3Vd\",\n\t\"./tr\": \"DoHr\",\n\t\"./tr.js\": \"DoHr\",\n\t\"./tzl\": \"z1FC\",\n\t\"./tzl.js\": \"z1FC\",\n\t\"./tzm\": \"wQk9\",\n\t\"./tzm-latn\": \"tT3J\",\n\t\"./tzm-latn.js\": \"tT3J\",\n\t\"./tzm.js\": \"wQk9\",\n\t\"./ug-cn\": \"YRex\",\n\t\"./ug-cn.js\": \"YRex\",\n\t\"./uk\": \"raLr\",\n\t\"./uk.js\": \"raLr\",\n\t\"./ur\": \"UpQW\",\n\t\"./ur.js\": \"UpQW\",\n\t\"./uz\": \"Loxo\",\n\t\"./uz-latn\": \"AQ68\",\n\t\"./uz-latn.js\": \"AQ68\",\n\t\"./uz.js\": \"Loxo\",\n\t\"./vi\": \"KSF8\",\n\t\"./vi.js\": \"KSF8\",\n\t\"./x-pseudo\": \"/X5v\",\n\t\"./x-pseudo.js\": \"/X5v\",\n\t\"./yo\": \"fzPg\",\n\t\"./yo.js\": \"fzPg\",\n\t\"./zh-cn\": \"XDpg\",\n\t\"./zh-cn.js\": \"XDpg\",\n\t\"./zh-hk\": \"SatO\",\n\t\"./zh-hk.js\": \"SatO\",\n\t\"./zh-mo\": \"OmwH\",\n\t\"./zh-mo.js\": \"OmwH\",\n\t\"./zh-tw\": \"kOpN\",\n\t\"./zh-tw.js\": \"kOpN\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"RnhZ\";","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport {  StatoPagamento, TipoCorso } from '../models/valuelist.model';\r\n\r\nexport class UtenteIscrizione extends IDDocument {\r\n\r\n        IDCORSO:               string; //\r\n        IDAREAOPERATIVA:       string; //\r\n        TIPOCORSO:             number;\r\n        DENOMINAZIONECORSO:    string;\r\n        DATAINIZIO:            Date;\r\n        ORAINIZIO:             Date;\r\n        DATAFINE:              Date;\r\n        ORELEZIONE:            number;\r\n        GIORNIPREVISTI:        string;\r\n        IDUTENTE:              string; //\r\n        DATAISCRIZIONE:        Date;\r\n        ANNOISCRIZIONE:        number;\r\n        IDSPORT:               string;\r\n        DENOMINAZIONESPORT:    string;\r\n        ICONASPORT:            string;\r\n        IDLOCATION:            string; //\r\n        DENOMINAZIONELOCATION: string;\r\n        INDIRIZZOLOCATION:     string;\r\n        COMUNELOCATION:        string;\r\n        IDCAMPO:               string;\r\n        DENOMINAZIONECAMPO:    string;\r\n        IDTIPOPAGAMENTO:       string;\r\n        DESCRTIPOPAGAMENTO:    string;\r\n        IMPORTO:               number;\r\n        VERSATO:               number;\r\n        RESIDUO:               number;\r\n        CODICEALFA:            string;\r\n        CODICEINT:             number;\r\n        STATOISCRIZIONE:       number;\r\n\r\n        constructor(onlyInstance?:boolean) {\r\n            super(onlyInstance);\r\n        }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDCORSO',\r\n                        'IDAREAOPERATIVA',\r\n                        'DENOMINAZIONECORSO',\r\n                        'IDUTENTE',\r\n                        'IDSPORT',\r\n                        'DENOMINAZIONESPORT',\r\n                        'ICONASPORT',\r\n                        'IDLOCATION',\r\n                        'DENOMINAZIONELOCATION',\r\n                        'INDIRIZZOLOCATION',\r\n                        'COMUNELOCATION',\r\n                        'IDCAMPO',\r\n                        'DENOMINAZIONECAMPO',\r\n                        'IDTIPOPAGAMENTO',\r\n                        'DESCRTIPOPAGAMENTO',\r\n                        'CODICEALFA',\r\n                        'GIORNIPREVISTI'\r\n                        ];\r\n        let arNumber = ['TIPOCORSO','ANNOISCRIZIONE','CODICEINT','STATOISCRIZIONE'];\r\n        let arNumberDecimal = ['IMPORTO','VERSATO','RESIDUO','ORELEZIONE'];\r\n        let arBoolean = [];\r\n        let arDate = ['DATAINIZIO','DATAFINE','DATAISCRIZIONE'];\r\n        let arDateTime =['ORAINIZIO'];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'UtenteIscrizione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'UTENTEISCRIZIONE';\r\n        objDescriptor.describeField = 'DENOMINAZIONECORSO';\r\n\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDCORSO','Corso');\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDUTENTE','Utente');\r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n     /**\r\n     * Ritorna una icona a seconda del tipo Corso\r\n     */\r\n    getIcon() {\r\n        let nameIcon= 'ribbon';\r\n  \r\n        switch (this.TIPOCORSO) {\r\n          case TipoCorso.corso:\r\n            nameIcon = 'ribbon';\r\n            break;\r\n          \r\n          case TipoCorso.prova: \r\n            nameIcon = 'trail-sign';\r\n            break;\r\n        \r\n          default:\r\n            nameIcon = 'ribbon';\r\n            break;\r\n        }\r\n  \r\n        return nameIcon;\r\n        \r\n      }\r\n\r\n     /**\r\n     * Ritorna il valore che è necessario pagare\r\n     */\r\n     get amountPayment(): number {\r\n\r\n        let myAmount: number = 0;\r\n        \r\n        myAmount = this.RESIDUO;\r\n\r\n        return myAmount;\r\n     }\r\n  \r\n  \r\n      /**\r\n       * Stato del pagamento in formato testo\r\n       * @param showForPay: se TRUE verrà restituito un messaggio per effettuare il pagamento\r\n       */\r\n      getCaptionStatePayment(showForPay: boolean = false): string {\r\n        let caption = '';\r\n\r\n        if (this.amountPayment != 0) {\r\n            if (showForPay) {\r\n                caption = 'Paga Ora';\r\n            }\r\n            else {\r\n                caption = 'Corso da pagare';\r\n            }\r\n        }\r\n        else {\r\n\r\n            caption = 'Corso pagato';\r\n        }\r\n        return caption;\r\n      }\r\n\r\n      /**\r\n       * Ritorna lo Stato del pagamento Iscrizione\r\n       */\r\n      getStatoPagamento(): StatoPagamento {\r\n        let myStato = StatoPagamento.daPagare;\r\n\r\n        if (this.RESIDUO == 0 ) {\r\n          myStato = StatoPagamento.pagato;\r\n        }\r\n        else if (this.RESIDUO != 0 && this.RESIDUO != this.IMPORTO) {\r\n          myStato = StatoPagamento.pagatoInParte;\r\n        }\r\n\r\n        return myStato;\r\n      }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { UtenteIscrizione } from '../models/utenteiscrizione.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtenteiscrizioneService {\r\n\r\n  private _listUtenteIscrizione = new BehaviorSubject<UtenteIscrizione[]>([]);\r\n\r\n  get listUtenteIscrizione() {\r\n    return this._listUtenteIscrizione.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n   /**\r\n   * Richiede l'elenco delle Iscrizioni Corsi\r\n   * @param config Dati configurazione\r\n   * @param idUtente Utente che effettua richiesta\r\n   * @param maxRecord Max Record da recuperare\r\n   */\r\n  request(config: StartConfiguration, idUtente: string, maxRecord: number = 0) {\r\n    return new Promise<UtenteIscrizione[]>((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      myHeaders = myHeaders.append('order-by','desc');\r\n\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'UTENTEISCRIZIONE';\r\n      const filterDateTime = this.getFilterDateTime();\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto l'area richiesta\r\n      let myParams = new HttpParams().set('IDUTENTE',idUtente);\r\n      myParams = myParams.append('DATAISCRIZIONE',filterDateTime);\r\n      myParams = myParams.append('$top', (maxRecord + '') );\r\n  \r\n      //Elimino gli attuali\r\n      this._listUtenteIscrizione.next([]);\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n            \r\n              let arReturn = [];\r\n              if (data.UTENTEISCRIZIONE) {\r\n                arReturn = data.UTENTEISCRIZIONE;\r\n              }\r\n  \r\n              return arReturn;\r\n            \r\n        }))\r\n        .subscribe (resultData => {\r\n  \r\n          for (let index = 0; index < resultData.length; index++) {\r\n            const element = resultData[index];\r\n            let newUtenteIscrizione = new UtenteIscrizione();\r\n            newUtenteIscrizione.setJSONProperty(element);\r\n            this.addUtenteIscrizione(newUtenteIscrizione);            \r\n          }\r\n\r\n            resolve(this._listUtenteIscrizione.getValue());\r\n\r\n        }, error=>{\r\n          reject (error);\r\n        })\r\n      \r\n    })\r\n  }\r\n\r\n\r\n     /**\r\n   * \r\n   * @param config Dati configurazione\r\n   * @param idIscrizione ID Iscrizione richiesta\r\n   */\r\n  requestById(config: StartConfiguration, idIscrizione: string) {\r\n    return new Promise<UtenteIscrizione>((resolve, reject)=>{\r\n      //let myHeaders = new HttpHeaders({'Content-type':'text/plain'});\r\n      let myHeaders = config.getHttpHeaders();\r\n      myHeaders = myHeaders.append('order-by','desc');\r\n\r\n      const doObject = 'UTENTEISCRIZIONE';\r\n      const filterDateTime = this.getFilterDateTime();\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto richiesta\r\n      let myParams = new HttpParams().set('ID',idIscrizione);\r\n        \r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n              return data.UTENTEISCRIZIONE      \r\n        }))\r\n        .subscribe (arrData => {\r\n\r\n            let docIscrizione = new UtenteIscrizione();\r\n\r\n            if (arrData) {\r\n              if (arrData[0]){\r\n                docIscrizione.setJSONProperty(arrData[0]);\r\n                resolve(docIscrizione);\r\n              }\r\n              else{\r\n                reject('iscrizione inesistente');\r\n              }\r\n            }\r\n            else {\r\n              reject('iscrizione inesistente');\r\n            }\r\n\r\n            \r\n        }, error => {\r\n          reject (error);\r\n        })\r\n      \r\n    })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge all'elenco una prenotazione dell'utente\r\n   * @param objUtenteIscrizione Prenotazione da aggiungere\r\n   */\r\n  addUtenteIscrizione(objUtenteIscrizione: UtenteIscrizione) {\r\n    this.listUtenteIscrizione\r\n      .pipe(take(1))\r\n      .subscribe (collUtenteIscrizione => {\r\n        let findElement = collUtenteIscrizione.find(element => {\r\n          return element.ID == objUtenteIscrizione.ID\r\n        });\r\n\r\n        if (!findElement) {\r\n          this._listUtenteIscrizione.next( collUtenteIscrizione.concat(objUtenteIscrizione));\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n    /**\r\n   * Crea il Parametro Filtro per il campo\r\n   */\r\n  getFilterDateTime(): string {\r\n    let adesso = new Date();\r\n    let newDoc = new IDDocument();\r\n    let startDate = new Date(adesso.getFullYear(),0,1);\r\n    let strAdesso = '';\r\n    if (adesso.getMonth() < 6) {\r\n      startDate = new Date((adesso.getFullYear()) - 1, 5, 1);\r\n    }\r\n\r\n    strAdesso = newDoc.formatDateTimeISO(startDate);\r\n\r\n    strAdesso = '>' + strAdesso;\r\n\r\n    return strAdesso;\r\n  }\r\n\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\nimport { Platform } from '@ionic/angular';\r\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\r\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\r\n\r\nimport { StartConfiguration } from './models/start-configuration.model';\r\nimport { StartService } from './services/start.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n  styleUrls: ['app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n\r\n  showSplash = true;\r\n  startConfig: StartConfiguration;\r\n  listenStartConfig: Subscription;\r\n  listenAppReady: Subscription;\r\n\r\n  constructor(\r\n    private platform: Platform,\r\n    private splashScreen: SplashScreen,\r\n    private statusBar: StatusBar,\r\n    private startService: StartService\r\n  ) {\r\n    this.initializeApp();\r\n  }\r\n\r\n  initializeApp() {\r\n    // this.splashScreen.hide(); // Nasconde l'immagine statica\r\n    this.platform.ready().then(() => {\r\n      // this.statusBar.styleDefault();\r\n\r\n      this.listenAppReady = this.startService.appReady\r\n                                  .subscribe(valueReady => {\r\n                                    if (valueReady) {\r\n                                      //Ambiente pronto\r\n                                      //Termino lo Splash\r\n                                      this.showSplash = false;\r\n\r\n                                      //Tolgo la sottoscrizione\r\n                                      if (this.listenAppReady) {\r\n                                        this.listenAppReady.unsubscribe();\r\n                                      }\r\n                                    }\r\n                                  });\r\n\r\n      //Mi Sottoscrivo per ricevere la configurazione\r\n       this.listenStartConfig = this.startService.startConfig\r\n                      .subscribe(element => {\r\n                            //Memorizzo per la visualizzazione del Menu\r\n                            this.startConfig = element;\r\n                        });\r\n\r\n      // Richiedo l'autorizzazione\r\n      //this.startService.requestStartAuthorization();\r\n      this.startService.settingStartStepOne();\r\n\r\n    });\r\n  }\r\n}\r\n","<div *ngIf=\"showSplash\" class=\"splash\">\r\n  <div class=\"sk-cube-grid\">\r\n    <div class=\"sk-cube sk-cube1\"></div>\r\n    <div class=\"sk-cube sk-cube2\"></div>\r\n    <div class=\"sk-cube sk-cube3\"></div>\r\n    <div class=\"sk-cube sk-cube4\"></div>\r\n    <div class=\"sk-cube sk-cube5\"></div>\r\n    <div class=\"sk-cube sk-cube6\"></div>\r\n    <div class=\"sk-cube sk-cube7\"></div>\r\n    <div class=\"sk-cube sk-cube8\"></div>\r\n    <div class=\"sk-cube sk-cube9\"></div>\r\n  </div>\r\n</div>\r\n<ion-app *ngIf=\"!showSplash\"> \r\n  <!-- vvv<ion-menu side=\"start\" menuId=\"m1\" contentId=\"m1\">\r\n    <ion-header>\r\n      <ion-toolbar>\r\n        <div class=\"titleicon\">\r\n          <img [src]=\"startConfig.getUrlBrand()\"/>\r\n        </div>\r\n\r\n      </ion-toolbar>\r\n    </ion-header>\r\n\r\n    <ion-content>\r\n      <ion-list>\r\n        <ion-menu-toggle>\r\n          <ion-item lines=\"none\">\r\n            <ion-icon name=\"ribbon\" slot=\"start\" color=\"primary\"></ion-icon>\r\n          <ion-label >{{startConfig?.companyName}}</ion-label>\r\n          </ion-item>\r\n\r\n\r\n          <ion-item lines=\"none\"  button>\r\n            <ion-icon name=\"information-circle-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n            <ion-label>About</ion-label>\r\n          </ion-item>\r\n        </ion-menu-toggle>\r\n      </ion-list>\r\n    </ion-content>\r\n\r\n  </ion-menu>\r\n  <ion-router-outlet id=\"m1\"></ion-router-outlet> -->\r\n\r\n  <ion-router-outlet></ion-router-outlet>\r\n</ion-app>\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class Livello extends IDDocument {\r\n    IDSPORT: string;\r\n    DENOMINAZIONE: string;\r\n    PROGRESSIONE: number;\r\n    ETAMINIMA: number;\r\n    ETAMASSIMA: number;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n    }\r\n\r\n\r\n          /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDSPORT',\r\n                    'DENOMINAZIONE'\r\n                    ];\r\n    let arNumber = ['PROGRESSIONE','ETAMINIMA','ETAMASSIMA'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'Livello';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'LIVELLO';\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n\r\n    objDescriptor.setRelation('IDSPORT','Sport');\r\n\r\n    return objDescriptor;\r\n}\r\n\r\n   \r\n}","import { StatoSlot } from '../valuelist.model';\r\nimport * as moment from \"moment\";\r\nimport { MyDateTime } from '../../library/models/mydatetime.model';\r\nimport { IDDocument } from '../../library/models/iddocument.model';\r\n\r\n\r\n/**\r\n * Classe che identifica una linea oraria di una prenotazione (slot)\r\n */\r\nexport class SlotTime extends IDDocument {\r\n    \r\n    START: Date;\r\n    END: Date;\r\n    STATO: StatoSlot;\r\n        \r\n    \r\n    constructor(inizioTime: Date, fineTime: Date) {\r\n\r\n        super();\r\n        this.START = inizioTime;\r\n        this.END = fineTime;\r\n        this.STATO = StatoSlot.libero;\r\n\r\n    }\r\n\r\n\r\n    /** Ritorna un array degli slot da impostare */\r\n    static getArrayStandardSlot( data: {\r\n                                    anno: number, \r\n                                    mese: number, \r\n                                    giorno: number\r\n                                }, \r\n                                start: {ore: number, minuti:number},\r\n                                end: {ore: number, minuti:number},\r\n                                minuteSlot: number\r\n    ): SlotTime[] {\r\n\r\n        let arSlots: SlotTime[] = [];\r\n        let startDate = new Date(data.anno, data.mese, data.giorno, start.ore, start.minuti, 0);\r\n        let endDate = new Date(data.anno, data.mese, data.giorno, end.ore, end.minuti, 0);\r\n        let countWrapper = moment(startDate);\r\n        let endWrapper = moment(endDate);\r\n        \r\n\r\n\r\n        /** Mentre la data è inferiore o uguale */\r\n        //while (countWrapper.isSameOrBefore(endWrapper)) {\r\n        while (countWrapper.isBefore(endWrapper)) {\r\n\r\n            //Al count aggiungo i minuti dello slot\r\n            let endSlotWrapper = moment(countWrapper.toDate());\r\n            endSlotWrapper.add(minuteSlot, 'm');\r\n            \r\n            //Creo lo Slot\r\n            let slotBlock = new SlotTime(countWrapper.toDate(), endSlotWrapper.toDate());\r\n            \r\n            //Aggiungo all'array di ritorno\r\n            arSlots.push(slotBlock);\r\n         \r\n\r\n            //Aumento il Count dei minuti di slot\r\n            countWrapper.add(minuteSlot, 'm');\r\n\r\n        }\r\n\r\n        return arSlots;\r\n    }\r\n\r\n    /**\r\n     * Imposta a START e END l'orario presente ma sulla data passata\r\n     * @param nuovaData Nuova data da applicare\r\n     */\r\n    changeDateInSlotTime(nuovaData: Date) {\r\n        if (nuovaData) {\r\n            if (this.START) {\r\n                //Aggiorno la data \r\n                this.START = MyDateTime.changeDateInTime(nuovaData, this.START);\r\n                \r\n            }\r\n\r\n            if (this.END) {\r\n                //Aggiorno la data \r\n                this.END = MyDateTime.changeDateInTime(nuovaData, this.END);\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\n\r\nexport class UtentePrenotazione extends IDDocument {\r\n    IDPRENOTAZIONE: string;\r\n    IDAREAOPERATIVA: string;\r\n    IDUTENTE: string;\r\n\r\n    IDLOCATION: string;\r\n    INDIRIZZOLOCATION: string;\r\n    COMUNELOCATION: string;\r\n\r\n    IDSPORT: string;\r\n    DENOMINAZIONESPORT: string;\r\n\r\n    IDCAMPO: string;\r\n    DENOMINAZIONECAMPO: string;\r\n\r\n    DATAORAINIZIO: Date;\r\n    DATAORAFINE: Date;\r\n\r\n    \r\n    DURATAORE: number; \r\n    NUMPARTECIPANTI: number;\r\n    \r\n    \r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        \r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n            this.NUMPARTECIPANTI = 1;\r\n        }\r\n    }\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n\r\n        //Imposto che il documento è originale\r\n        this.setOriginal();\r\n    }\r\n\r\n    setCollection(data: any) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDPRENOTAZIONE',\r\n                        'IDAREAOPERATIVA',\r\n                        'IDUTENTE',\r\n                        'IDLOCATION',\r\n                        'INDIRIZZOLOCATION',\r\n                        'COMUNELOCATION',\r\n                        'IDSPORT',\r\n                        'DENOMINAZIONESPORT',\r\n                        'IDCAMPO',\r\n                        'DENOMINAZIONECAMPO'\r\n                        ];\r\n        let arNumber = ['NUMPARTECIPANTI'];\r\n        let arNumberDecimal = ['DURATAORE'];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'UtentePrenotazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'UTENTEPRENOTAZIONE';\r\n        objDescriptor.describeField = 'DATAORAINIZIO';\r\n\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDPRENOTAZIONE','Prenotazione');\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDUTENTE','Utente');\r\n        objDescriptor.setRelation('IDCAMPO','Campo');\r\n        \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { GeolocationPosition, Plugins } from '@capacitor/core';\r\nimport { Area } from '../models/area.model';\r\nconst { Geolocation } = Plugins;\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PosizioneService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * La funzione restituisce una promise con la posizione attuale\r\n   */\r\n  getCurrentPosition(): Promise<GeolocationPosition>{\r\n    return Geolocation.getCurrentPosition();\r\n    \r\n  }\r\n\r\n  /**\r\n * data in input una lista di aree, la funzione restituisce l'oggetto area più vicino alla posizione attuale\r\n * @param listAree la lista delle aree tra cui cercare\r\n */\r\n  getNearestArea(listAree: Area[]){\r\n    return new Promise<Area> ((resolve, reject) => {\r\n      \r\n      let nearestArea: Area;\r\n  \r\n      //Se ci sono delle aree\r\n      if (listAree && listAree.length != 0){\r\n\r\n        //inizio a salvarmi la prima\r\n        nearestArea = listAree[0]\r\n\r\n        //se è solo una ho finito\r\n        if (listAree.length == 1){\r\n          resolve(nearestArea);\r\n        }\r\n\r\n        else{\r\n          //se sono almeno due\r\n          //recupero la posizione attuale\r\n          this.getCurrentPosition()\r\n          .then(currentPosition => {\r\n            \r\n              //se effettivamento ho la posizione, posso ciclare sull'array\r\n              for (let index = 1; index < listAree.length; index++){\r\n                if(listAree[index].distanceFrom(currentPosition)){\r\n                  //se è possibile calcolare la distanza per quest'area (sono presenti lat e long)\r\n                  if(listAree[index].distanceFrom(currentPosition) < nearestArea.distanceFrom(currentPosition)){\r\n                    //se l'area corrente è più vicina di quella memorizzata, la salvo\r\n                    nearestArea = listAree[index];\r\n                  }\r\n                }\r\n              }\r\n\r\n            //ho finito, posso risolvere\r\n            resolve(nearestArea)\r\n          })\r\n          .catch(error => {\r\n            \r\n              //errore, non ho recuperato la posizione\r\n              reject(error);\r\n            })\r\n        }\r\n        \r\n    \r\n      }\r\n\r\n      else{\r\n        //errore, non mi hanno passato le aree\r\n        reject('Errore, lista aree vuota');\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { LocationImage } from './locaton-image.model';\r\nimport { Campo } from './campo.model';\r\nimport { AperturaLocation } from './aperturalocation.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { CampoSport } from './camposport.model';\r\nimport { OccupazioneCampi } from './occupazionecampi.model';\r\nimport { TipoSocieta } from './valuelist.model';\r\n\r\nexport class Location extends IDDocument {\r\n\r\n    IDAREAOPERATIVA: string;\r\n    DENOMINAZIONE: string;\r\n    INDIRIZZO: string;\r\n    CAP: string;\r\n    COMUNE: string;\r\n    PROVINCIA: string;\r\n    ISOSTATO: string;\r\n    IMAGEURL: string;\r\n    FAVORITE: boolean;\r\n    DESCRIZIONEMOB: string;\r\n    TELEFONO: string;\r\n    EMAIL: string;\r\n    ENABLEPRENOTAZIONI: boolean;\r\n    MINUTISLOTPRENOTAZIONE: number;\r\n    MINUTIPREAVVISOPRENOTAZIONE: number;\r\n    ENABLEDELETEPRENOTAZIONI: boolean;\r\n    MINUTIPREAVVISODELETEPRENOTAZIONE: number;    \r\n    APPVISIBILITY: number;\r\n    IDAZIENDACLIENTE: string;\r\n    LOCATIONIMAGE: LocationImage[];\r\n    CAMPO: Campo[];\r\n    APERTURALOCATION: AperturaLocation[];\r\n    _LISTOCCUPAZIONI:OccupazioneCampi[] = [];\r\n    \r\n  \r\n    constructor(onlyInstance?:boolean) {\r\n      \r\n      super(onlyInstance);\r\n      \r\n      this.LOCATIONIMAGE = [];\r\n      this.CAMPO = [];\r\n      this.APERTURALOCATION = [];\r\n      \r\n      if (!onlyInstance) { \r\n\r\n        this.ENABLEPRENOTAZIONI = false;\r\n        this.MINUTISLOTPRENOTAZIONE = 30;\r\n        this.MINUTIPREAVVISOPRENOTAZIONE = 0;\r\n        // Imposto una cover standard\r\n        this.setStandardCover();\r\n\r\n      }\r\n    }\r\n\r\n\r\n            /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDAREAOPERATIVA',\r\n                    'DENOMINAZIONE',\r\n                    'INDIRIZZO',\r\n                    'CAP',\r\n                    'COMUNE',\r\n                    'PROVINCIA',\r\n                    'ISOSTATO',\r\n                    'IMAGEURL',\r\n                    'DESCRIZIONEMOB',\r\n                    'TELEFONO',\r\n                    'EMAIL',\r\n                    'IDAZIENDACLIENTE'\r\n                    ];\r\n    let arNumber = ['MINUTISLOTPRENOTAZIONE','MINUTIPREAVVISOPRENOTAZIONE','APPVISIBILITY','MINUTIPREAVVISODELETEPRENOTAZIONE'];\r\n    let arBoolean = ['FAVORITE','ENABLEPRENOTAZIONI','ENABLEDELETEPRENOTAZIONI'];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = ['LOCATIONIMAGE','CAMPO','APERTURALOCATION'];\r\n\r\n    objDescriptor.className = 'Location';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'LOCATION';\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    \r\n    return objDescriptor;\r\n}\r\n\r\n  \r\n\r\n    // Sovrascrivo il metodo IDDocument\r\n    setJSONProperty(data: any) {\r\n      //Chiamo il metodo IDDocument\r\n      super.setJSONProperty(data);\r\n\r\n      //Chiamo il metodo per le collection\r\n      this.setCollection(data);\r\n\r\n      //Imposto che il documento è originale\r\n      this.setOriginal();\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta una coverImage standard, eliminando le presenti\r\n     */\r\n    setStandardCover() {\r\n\r\n      this.LOCATIONIMAGE = [];\r\n      let standardImage = 'assets/img/cardhome_ge.png';\r\n      \r\n      //Immagine Cover nell'oggetto\r\n      this.IMAGEURL = standardImage;\r\n\r\n      //Creo una immagine standard\r\n      let newImage = new LocationImage;\r\n      newImage.COVERIMAGE = true;\r\n      newImage.IMAGEURL = standardImage;\r\n\r\n      //Impostazione nell'Array\r\n      this.LOCATIONIMAGE.push(newImage);\r\n\r\n    }\r\n\r\n    /** Ritorna il percorso da applicare al tag image */\r\n    getUrlImage(tipoSocieta?: TipoSocieta) {\r\n      let returnImage = '';\r\n      if (this.IMAGEURL) {\r\n        returnImage = this.IMAGEURL;\r\n      }\r\n      else {\r\n        if (tipoSocieta) {\r\n          switch (tipoSocieta) {\r\n            case TipoSocieta.sportiva:\r\n              returnImage = 'assets/img/cardhome_ss.png';    \r\n              break;\r\n\r\n            case TipoSocieta.formazione:\r\n              returnImage = 'assets/img/cardhome_fo.png';    \r\n              break;\r\n          \r\n            default:\r\n              break;\r\n          }\r\n        }\r\n        else {\r\n          returnImage = 'assets/img/cardhome_ge.png';\r\n        }\r\n      }\r\n\r\n      return returnImage;\r\n    }\r\n\r\n    /** Ritorna il numero di campi presenti nella Location */\r\n    getNumCampi() {\r\n      let numCampi = 0;\r\n      if (this.CAMPO) {\r\n        numCampi = this.CAMPO.length;\r\n      }\r\n\r\n      return numCampi;\r\n    }\r\n\r\n    /** Ritorna una copia dell'Array senza l'immagine di Cover */\r\n    imageGallery() {\r\n      return [...this.LOCATIONIMAGE.filter(element => {\r\n        return !element.COVERIMAGE;\r\n      })];\r\n    }\r\n\r\n\r\n\r\n\r\n    //#region COLLECTION SETTING\r\n\r\n    /**\r\n     * Imposta le collection dell'oggetto, con i reali oggetti tipizzati\r\n     * @param data JSON Received\r\n     */\r\n    setCollection(data: any) {\r\n      \r\n      // Riazzero e ricreo le aperture\r\n      this.APERTURALOCATION = [];\r\n\r\n      //Sistemazione Immagini Location\r\n      if (data.LOCATIONIMAGE) {\r\n        this.setCollectionLocationImage(data);\r\n      }\r\n\r\n      //Sistemazione Aperture Location\r\n      if (data.APERTURALOCATION) {\r\n        this.setCollectionAperturaLocation(data);\r\n      }\r\n\r\n      //Sistenazione Campo\r\n      if (data.CAMPO) {\r\n        this.setCollectionCampo(data);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Inizializza la collection CAMPO con i dati ricevuti tipizzando gli oggetti\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionCampo(data: any) {\r\n\r\n      if (data.CAMPO) {\r\n\r\n        //Imposto gli elementi CAMPO in stato da eliminare\r\n        //Utilizzando l'oggetto IDCollection\r\n        IDDocument.setAllDeleting(this.CAMPO);\r\n\r\n        // Ciclo sugli elementi arrivati\r\n        data.CAMPO.forEach(elCampo => {\r\n          // Cerco eventualmente il campo\r\n          let docCampo = this.getCampoByID(elCampo.ID);\r\n          \r\n          //Campo non trovato\r\n          if (!docCampo) {\r\n            docCampo = new Campo();\r\n            docCampo.setJSONProperty(elCampo);\r\n            this.CAMPO.push(docCampo);\r\n          }\r\n          else {\r\n            //Campo Trovato\r\n            docCampo.setJSONProperty(elCampo);\r\n            docCampo.do_deleted = false;\r\n          }\r\n        });\r\n\r\n        //Rimozione di tutti gli elementi non cancellati\r\n        this.CAMPO = this.CAMPO.filter(element => {\r\n          return !element.do_deleted\r\n        });\r\n\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Inizializza la collection Apertura Location con oggetto tipizzati\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionAperturaLocation(data: any) {\r\n      if (data.APERTURALOCATION) {\r\n\r\n\r\n        data.APERTURALOCATION.forEach(elApertura => {\r\n          let newDay = new AperturaLocation();\r\n          newDay.setJSONProperty(elApertura);\r\n\r\n          this.APERTURALOCATION.push(newDay);\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Imposta la collection delle LocationImage\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionLocationImage(data: any) {\r\n      if (data.LOCATIONIMAGE) {\r\n        if (data.LOCATIONIMAGE.length !== 0) {\r\n          \r\n          //Svuoto l'array\r\n          this.LOCATIONIMAGE = [];\r\n\r\n          //Ciclo sulle Location Image arrivate\r\n          data.LOCATIONIMAGE.forEach(elImage => {\r\n            let newImage = new LocationImage();\r\n            newImage.setJSONProperty(elImage);\r\n            this.LOCATIONIMAGE.push(newImage);\r\n\r\n            // Se fosse l'immagine di Cover la imposto nell'oggetto\r\n            if (newImage.COVERIMAGE) {\r\n              this.IMAGEURL = newImage.IMAGEURL;\r\n            }\r\n          });\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    getCampoByID(id: string): Campo {\r\n      return this.CAMPO.find(element => {\r\n        return element.ID == id;\r\n      })\r\n    }\r\n\r\n\r\n    /**\r\n     * Cicla su tutti i CAMPI presenti ed elimina \r\n     * le informazioni CAMPOSPORT\r\n     */\r\n    emptyCampiSport() {\r\n\r\n      this.CAMPO.forEach(elCampo => {\r\n        elCampo.CAMPOSPORT = [];\r\n      })\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param docCampoSport Campo Sport da aggiungere\r\n     * @param idCampo IDCampo da prelevare\r\n     */\r\n    addCampoSport(docCampoSport: CampoSport, idCampo: string) {\r\n      this.CAMPO.forEach(elCampo => {\r\n        if (elCampo.ID == idCampo) {\r\n          elCampo.addCampoSport(docCampoSport);\r\n        }\r\n      })\r\n    }\r\n\r\n    /**\r\n     * Ritorna l'oggetto Campo che nell'array risulta successivo a quello rappresentato da idCampo\r\n     * Undefined se non ci sono elementi o elementi successivi a quello selezionato\r\n     * @param idCampo IDCampo Attuale\r\n     */\r\n    getNextCampo(idCampo: string = '') {\r\n      let myCampo: Campo;\r\n      let isNext = false;\r\n\r\n      if (this.CAMPO) {\r\n        for (let index = 0; index < this.CAMPO.length; index++) {\r\n          const elCampo = this.CAMPO[index];\r\n\r\n          //Senza idCampo il primo che trovo va bene\r\n          if (!idCampo) {\r\n            myCampo = elCampo;\r\n            break;\r\n          }\r\n          else if (isNext) {\r\n            //Questo è quello che mi serve\r\n            myCampo = elCampo;\r\n            break;\r\n          }\r\n          else if (elCampo.ID == idCampo) {\r\n            //Sarà il prossimo che devo usare\r\n            isNext = true;\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n      return myCampo;\r\n    }\r\n\r\n    /**\r\n     * Ritorna un campo partendo dal suo Indice\r\n     * @param indexZeroBase Indice del campo Zero Base\r\n     */\r\n    getCampoByIndex(indexZeroBase: number) {\r\n      let myCampo: Campo;\r\n      if (this.CAMPO)  {\r\n        myCampo = this.CAMPO[indexZeroBase];\r\n      }\r\n\r\n      return myCampo;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna l'indirizzo della Location nel formato\r\n     * Indirizzo - Citta\r\n     * @param shortVersion Versione ridotta con Indirizzo se presente, oppure Citta\r\n     */\r\n    getAddressLocation(shortVersion: boolean) {\r\n      let value = '';\r\n      if (shortVersion) {\r\n        if (this.INDIRIZZO.length !== 0)  {\r\n          value = this.INDIRIZZO;\r\n        }\r\n        else if (this.COMUNE.length !== 0) {\r\n          value = this.COMUNE;\r\n        }\r\n      }\r\n      else {\r\n        if (this.INDIRIZZO.length !== 0)  {\r\n          value = this.INDIRIZZO;\r\n        }\r\n\r\n        if (this.COMUNE.length !== 0) {\r\n          if (value.length !== 0) {\r\n            value += ' - ';\r\n          }\r\n\r\n          value += this.COMUNE;\r\n        }\r\n\r\n      }\r\n\r\n      return value;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Cerca nella collection dei campi, verificando se lo Sport passato come parametro, puo' essere\r\n     * giocato e ritorna un Array dei Campi Consentiti\r\n     * @param isSport \r\n     */\r\n    getAvalaibleFields(idSport: string) {\r\n      let arCampi = [];\r\n      if (idSport) {\r\n        if (this.CAMPO) {\r\n\r\n            arCampi = this.CAMPO.filter( el => {\r\n                let trovato =false;\r\n                if (el.CAMPOSPORT) {\r\n\r\n                  for (const iterator of el.CAMPOSPORT) {\r\n\r\n                    if (iterator.IDSPORT == idSport) {\r\n                      trovato=true;\r\n                      break;\r\n                    }\r\n\r\n                  }\r\n\r\n                }\r\n              return trovato;\r\n            });\r\n\r\n        }\r\n      }\r\n\r\n      return arCampi;\r\n    }\r\n\r\n    \r\n\r\n}","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { ApicallService } from './apicall.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DocumentoService {\r\n\r\n  constructor(\r\n    private apiCallService: ApicallService\r\n  ) { }\r\n\r\n\r\n  request(config: StartConfiguration, fileUrl: string) {\r\n\r\n        let myHeaders;\r\n        //Per ora non dichiaro un tipo (funziona lo stesso)\r\n        //new HttpHeaders({'Content-type':'text/plain'});    \r\n        \r\n    \r\n        let myUrl = config.urlFileServer + '/' + fileUrl;\r\n        \r\n        return this.apiCallService\r\n          .httpGetFile (myUrl, myHeaders)\r\n          .toPromise<Blob>();\r\n\r\n  }\r\n\r\n}\r\n","\r\n\r\nexport enum TipoArea {\r\n    areaGruppo = 10,\r\n    areaIndipendente = 20\r\n}\r\n\r\nexport enum SettoreAttivita {\r\n    settoreCorso = 10,\r\n    settorePrenotazione = 20,\r\n    settoreTorneo = 30\r\n}\r\n\r\nexport enum SettorePagamentiAttivita {\r\n    settorePagamentoCorso = 10,\r\n    settorePagamentoPrenotazione = 20,\r\n    settorePagamentoTorneo = 30,\r\n    settorePagamentoShop = 40\r\n}\r\n\r\nexport enum TipoCampo {\r\n    campo = 10,\r\n    aulaIndividuale = 100,\r\n    aulaMultipla = 110,\r\n    sala = 200,\r\n    salone = 210\r\n} \r\n\r\nexport enum TipoCorso {\r\n    corso = 10,\r\n    prova = 20\r\n}\r\n\r\nexport enum StatoCorso {\r\n    inserito = 10,\r\n    inValutazione = 20,\r\n    confermato = 30,\r\n    iscrizioniAperte = 40,\r\n    inEsecuzione = 50,\r\n    eseguito = 60,\r\n    annullato = 80\r\n  }\r\n\r\n  export enum TipoSocieta {\r\n    sportiva = 10,\r\n    formazione = 20\r\n  }\r\n\r\n  export enum TipoSport {\r\n    gruppo =  10,\r\n    coppia = 20,\r\n    individuale = 30\r\n}\r\n\r\nexport enum Mansione {\r\n    trainer = 10,\r\n    assistenteTrainer = 20,\r\n    segreteria = 200,\r\n    contabile = 210,\r\n    social = 220,\r\n    custode = 230\r\n} \r\n\r\nexport enum Ruolo {\r\n    admin = 1,\r\n    super = 20,\r\n    collaboratore = 30,\r\n    cliente = 50\r\n}\r\n\r\nexport enum TargetSesso {\r\n    maschile = 10,\r\n    femminile = 20,\r\n    maschileFemminile = 30\r\n}\r\n\r\nexport enum Sesso {\r\n    maschio = 10,\r\n    femmina = 20\r\n}\r\n\r\nexport enum Language {\r\n    italiano = 'ITA',\r\n    inglese = 'ENG',\r\n    spagnolo = 'ESP',\r\n    francese = 'FR'\r\n}\r\n\r\nexport enum Giorni {\r\n    domenica = 0,\r\n    lunedi = 1,\r\n    martedi = 2,\r\n    mercoledi = 3,\r\n    giovedi = 4,\r\n    venerdi = 5,\r\n    sabato = 6\r\n}\r\n\r\nexport enum StrutturaCampo {\r\n    coperto = 10,\r\n    scoperto = 20,\r\n    copertoScoperto = 30\r\n}\r\n\r\nexport enum StatoSlot {\r\n    libero = 0,\r\n    occupato = 10,\r\n    chiuso = 20,\r\n    contattare = 21\r\n}\r\n\r\nexport enum TipoPrivateImage {\r\n    logo = 10,\r\n    icon = 20\r\n}\r\n\r\nexport enum StatoPrenotazione {\r\n    confermata = 10,\r\n    daConfermare = 20,\r\n    disdetta = 30\r\n}\r\n\r\nexport enum AmbitoNews {\r\n    corso = 10,\r\n    prenotazione = 20,\r\n    torneo = 30\r\n}\r\n\r\nexport enum PageType {\r\n    home = 10,\r\n    policyPrivacy = 20,\r\n    condizioniVenditaPrenotazioni = 100,\r\n    condizioniVenditaIscrizioni = 110,\r\n    facebook = 200,\r\n    twitter = 210,\r\n    instagram = 220,\r\n    tikTok = 230\r\n}\r\n\r\n//Questa lista non è presente in Inde ma memorizzata sul db nelle opzioni\r\nexport enum TipoVerificaAccount {\r\n    noverifica = 0,\r\n    verificaemail = 10,\r\n    verificasms = 20,\r\n    verificaemailsms = 30\r\n}\r\n\r\nexport enum RequestPincodeUse {\r\n    forRegistration = 10,\r\n    forRecovery = 20,\r\n    forValidation = 30,\r\n}\r\n\r\nexport enum TipoArticolo {\r\n    prodotto = 10,\r\n    servizio = 20\r\n}\r\n\r\nexport enum TipoPrezzo {\r\n    alNettoDiImposta = 10,\r\n    comprensiviDiImposta = 20\r\n}\r\n\r\n\r\nexport enum TipoMasterDocumento{\r\n    preventivo = 10,\r\n    fattura = 500,\r\n    notaDiCredito = 510,\r\n    ricevuta = 530\r\n}\r\n\r\nexport enum TipoChiusura{\r\n    rangeDate = 10,\r\n    natale = 20,\r\n    santoStefano = 30,\r\n    pasquaCattolica = 40,\r\n    lunediDellAngelo = 50,\r\n    ferragosto = 60,\r\n    aprile25 = 70,\r\n    maggio1 = 80,\r\n    dicembre8 = 90, \r\n    giugno2 = 100 \r\n}\r\n\r\nexport enum AttivitaChiusura{\r\n    tutte = -1,\r\n    affittoStrutture = 10,\r\n    svolgimentoCorsi = 20\r\n}\r\n\r\nexport enum StatoPagamento {\r\n    daPagare=0,\r\n    pagatoInParte=10,\r\n    pagato=20\r\n  \r\n}\r\n\r\nexport enum TipoRigoIncasso {\r\n    incassato = 10,\r\n    scadenza = 20,\r\n    abbuono = 30,\r\n    perdita = 40\r\n}\r\n\r\n//Canali dove effettuare il pagamento, compreso onSite in contanti\r\nexport enum PaymentChannel {\r\n    onSite = 10,\r\n    bonifico = 50,\r\n    applePay = 200,\r\n    googlePay = 210,\r\n    paypal = 220,\r\n    stripe = 240\r\n}\r\n\r\nexport enum PaymentEnvironment {\r\n    test = 10,\r\n    production = 20\r\n}\r\n\r\n//Si puo' pagare in struttura, pagare subito, o con un bonifico\r\nexport enum PaymentMode {\r\n    pagaStruttura = 10,\r\n    pagaBonifico = 50,\r\n    pagaAdesso = 200\r\n}\r\n\r\n//Stati possibili a seguito di una richiesta pagamento Paypal\r\n/*\r\nThe possible values are:\r\n\r\nCREATED. The order was created with the specified context.\r\nSAVED. The order was saved and persisted. The order status continues to be in progress until a capture is made with final_capture = true for all purchase units within the order.\r\nAPPROVED. The customer approved the payment through the PayPal wallet or another form of guest or unbranded payment. For example, a card, bank account, or so on.\r\nVOIDED. All purchase units in the order are voided.\r\nCOMPLETED. The payment was authorized or the authorized payment was captured for the order.\r\nPAYER_ACTION_REQUIRED. The order requires an action from the payer (e.g. 3DS authentication). Redirect the payer to the \"rel\":\"payer-action\" HATEOAS link returned as part of the response prior to authorizing or capturing the order.\r\n*/\r\nexport enum PaypalStatus {\r\n    created = 'CREATED',\r\n    saved = 'SAVED',\r\n    approved = 'APPROVED',\r\n    voided = 'VOIDED',\r\n    completed = 'COMPLETED',\r\n    payer_action_required = 'PAYER_ACTION_REQUIRED'\r\n}\r\n\r\n\r\nexport enum FileType{\r\n    immagini = \"file-photo-o\",\r\n    video = \"file-movie-o\",\r\n    audio = \"file-audio-o\",\r\n    zip = \"file-archive-o\",\r\n    text = \"file-text-o\",\r\n    indefinito = \"file-o\",\r\n    word = \"file-word-o\",\r\n    excel = \"file-excel-o\",\r\n    powerpoint = \"file-powerpoint-o\",\r\n    pdf = \"file-pdf-o\",\r\n}\r\n\r\n//Indica chi puo' visualizzare la location nell'app\r\n//Tutti, Nessuno (Location nascosta), Utenti Specifici (quando la location ha un IDAZIENDACLIENTE, solo gli Utenti legati alla azienda)\r\nexport enum LocationAppVisibility {\r\n    tutti = -1,\r\n    nessuno = 0,\r\n    utentiSpecifici = -2\r\n}\r\n\r\nexport enum ModalitaFruizione{\r\n    inPresenza = 10,\r\n    inRemoto = 20\r\n}\r\n\r\n\r\n\r\n\r\nexport class ValueList {\r\n\r\n    value: any;\r\n    description: any;\r\n    selected: boolean;\r\n    itemIcon: string;\r\n\r\n    /**\r\n     * \r\n     * @param valore Valore Elemento\r\n     * @param descrizione Descrizione\r\n     */\r\n    constructor(valore: any, descrizione: any) {\r\n        this.value = valore;\r\n        this.description = descrizione;\r\n        this.selected = false;\r\n    }\r\n\r\n    /**\r\n     * Decodifica un valore da una lista valori\r\n     * @param objEnum Lista Valori da utilizzare\r\n     * @param value Valore da decodificare\r\n     */\r\n    static decode(objEnum: any, value: any): string {\r\n        let label = '';\r\n\r\n        // Proprietà presente\r\n        if (objEnum.hasOwnProperty(value) ) {\r\n            // Ricavo l'identificativo dato all'Enum\r\n            label = objEnum[value];\r\n            // Ora trasformo la label\r\n            label = ValueList.convert(label);\r\n        }\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * Esempio di utilizzo della decode\r\n     */\r\n    private esempioUso() {\r\n        let label = '';\r\n        label = ValueList.decode(SettoreAttivita, SettoreAttivita.settoreCorso);\r\n    }\r\n\r\n    /**\r\n     * Preleva una etichetta senza Spazi ma in Camel Mode ed inserisce \r\n     * uno spazio prima di ogni maiuscola\r\n     * @param label Etichetta da convertira\r\n     */\r\n    static convert(label: string) {\r\n        let retLabel = '';\r\n        let car = '';\r\n\r\n        if (label) {\r\n\r\n            for (let index = 0; index < label.length; index++) {\r\n\r\n                car = label.substring(index, index+1);\r\n                if (car == car.toUpperCase()) {\r\n                    retLabel = retLabel + ' ';\r\n                }\r\n\r\n                if (index === 0) {\r\n                    car = car.toUpperCase();\r\n                }\r\n\r\n                retLabel = retLabel + car;\r\n\r\n            }\r\n        }\r\n\r\n        return retLabel;\r\n    }\r\n\r\n    /**\r\n     * Dato un Enum (Lista Valori) Torna un Array con elementi\r\n     * value - description\r\n     * @param objEnum Nome della Lista Valori desiderata\r\n     */\r\n    static getArray(objEnum: any) : ValueList[] {\r\n        let retElements: ValueList[] = [];\r\n\r\n        Object.keys(objEnum).forEach(key => {\r\n            if (ValueList.isNumber(key) == false) {\r\n                let field = key;\r\n                let value = objEnum[field];\r\n                let decodifica = ValueList.decode(objEnum, value);\r\n                let element = new ValueList(value, decodifica);\r\n\r\n                retElements.push(element);\r\n            }\r\n        });\r\n\r\n        return retElements;\r\n    }\r\n\r\n    /**\r\n     * Ritorna TRUE / FALSE a seconda se un elemento è Numerico o No\r\n     * @param value Valore da controllare\r\n     */\r\n    static isNumber(value: string | number): boolean\r\n    {\r\n      return ((value != null) &&\r\n              (value !== '') &&\r\n              !isNaN(Number(value.toString())));\r\n    }\r\n}\r\n\r\n//#region LISTE VALORI INTERNE\r\n//Liste non presenti in GOUEGO\r\n\r\nexport enum Condition {\r\n    uguale = '=',\r\n    maggiore = '>',\r\n    minore = '<',\r\n    diverso = '#'\r\n}\r\n\r\n\r\nexport enum RequestState {\r\n    noRequest = 0,\r\n    waitingReply = 1,\r\n    executed = 2\r\n}\r\n\r\nexport enum SegmentCorsi {\r\n    tutti = 10,\r\n    mioLivello = 20\r\n}\r\n\r\nexport enum StatoIscrizione{\r\n    confermata = -1,\r\n    inProva = 0\r\n}\r\n\r\nexport enum Mesi {\r\n    gennaio = 1,\r\n    febbraio = 2,\r\n    marzo = 3,\r\n    aprile = 4,\r\n    maggio = 5,\r\n    giugno = 6,\r\n    luglio = 7,\r\n    agosto = 8,\r\n    settembre = 9,\r\n    ottobre = 10,\r\n    novembre = 11,\r\n    dicembre = 12\r\n\r\n}\r\n\r\n//Identifica un corso rispett ad oggi\r\nexport enum TimeTrainerCourse {\r\n    attivi = 0,\r\n    passati = -1,\r\n    futuri = 1\r\n  \r\n  }\r\n\r\nexport enum RangeSearch {\r\n    giorno = 10,\r\n    settimana = 20,\r\n    mese = 30\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n//#endregion","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\nexport class Valuta extends IDDocument{\r\n    DESCR: string;\r\n    SIMBOLO: string;\r\n    NUMDECIMALI: number;\r\n    DATAOBSOLESCENZA: Date;\r\n    CODICEISO: string;\r\n    PREDEFINITA: boolean;\r\n    ICONPREF: string;\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'DESCR',\r\n            'SIMBOLO',\r\n            'CODICEISO',\r\n            'ICONPREF'            \r\n        ];\r\n        let arNumber = ['NUMDECIMALI'];\r\n        let arBoolean = ['PREDEFINITA'];\r\n        let arDate = ['DATAOBSOLESCENZA'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'Valuta';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'VALUTA';\r\n        objDescriptor.describeField = 'DESCR';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject, from } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Utente } from '../models/utente.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { LogApp } from '../models/log.model';\r\nimport { AccountRequestCode, AccountOperationResponse, AccountVerifyCode } from '../models/accountregistration.model';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\nimport { ParamsExport } from '../library/models/iddocument.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { Account } from '../models/account.model';\r\nimport { promise } from 'protractor';\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtenteService {\r\n\r\n  private _utente = new BehaviorSubject<Utente>(new Utente);\r\n  private _utenteLoggato = new BehaviorSubject<boolean>(false);\r\n  private _idAreaFAV = new BehaviorSubject<string>(''); //Avvisa di cambiare l'Area Operativa\r\n  private _userPicture = new BehaviorSubject<string>('');\r\n\r\n  get utente() {\r\n    return this._utente.asObservable();\r\n  }\r\n\r\n  get utenteLoggato() {\r\n    return this._utenteLoggato.asObservable();\r\n  }\r\n\r\n  get actualLoggato(){\r\n    return this._utenteLoggato.getValue();\r\n  }\r\n\r\n  get actualUtente() {\r\n    return this._utente.getValue();\r\n  }\r\n\r\n  get userPicture():Observable<string> {\r\n    return this._userPicture.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Imposta la UserPicture\r\n   * @param value DataUrl image\r\n   */\r\n  setUserPicture(dataUrl: string) {\r\n    this._userPicture.next(dataUrl);\r\n  }\r\n\r\n  /**\r\n   * Area Favorita dall'utente\r\n   */\r\n  get idAreaFAV() {\r\n    return this._idAreaFAV.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private apiService: ApicallService,\r\n              private docService: DocstructureService) { }\r\n\r\n\r\n  /**\r\n   * Effettua la richiesta al Server con i dati dell'Utente\r\n   * @param config Parametri di configurazione\r\n   * @param username Username Utente\r\n   * @param password Password Utente\r\n   * @param forceIdArea Se impostata, l'area favorita dell'utente diventa questa\r\n   */\r\n  login(username: string,\r\n        password: string,\r\n        myStartConfig: BehaviorSubject<StartConfiguration>,\r\n        forceIdArea?:string \r\n        ): Promise<any> {\r\n\r\n    return new Promise<any>((resolve,reject) => {\r\n            let myUtente = new Utente();\r\n            let jsonBody = '';\r\n            let paramExp = new ParamsExport();\r\n            let myAccount = new Account();\r\n            const method = 'authLoginMob';\r\n            let startConf: StartConfiguration;\r\n\r\n            //Compilo un documento con login e password\r\n            myUtente.WEBLOGIN = username;\r\n            myUtente.INPUTPASSWORD = password;\r\n\r\n            //Preparo esportazione\r\n            paramExp.clearDOProperty = true;\r\n            paramExp.clearPKProperty = true;\r\n            paramExp.clearPrivateProperty = true;\r\n            jsonBody = myUtente.exportToJSON(paramExp);\r\n            jsonBody = `{\"docUtente\" : ${jsonBody}}`;\r\n\r\n\r\n            //Disattivo il login utente\r\n            this._utenteLoggato.next(false);\r\n\r\n            this.docService.requestForFunction(myAccount,method,jsonBody)\r\n                          .then((response:PostResponse) => {\r\n                            let myUserAuthCode = '';\r\n\r\n                            //Risposta ricevuta\r\n                            if (response.result) {\r\n\r\n                              if (response.document) {\r\n\r\n                                let docInResponse = response.document\r\n                                \r\n  \r\n                                let docUtente = new Utente();\r\n                                docUtente.setJSONProperty(docInResponse);\r\n                                docUtente.WEBLOGIN = username;\r\n                                docUtente.setOriginal();\r\n                                \r\n  \r\n                                //Imposto come tag authCode il codice di autorizzazione utente ricevuto\r\n                                docUtente.setTagValue('authCode',response.code);\r\n                                myUserAuthCode = response.code;\r\n\r\n                                startConf = myStartConfig.getValue();\r\n                                startConf.authorizationUserCode = response.code;\r\n                                myStartConfig.next(startConf);\r\n  \r\n                                //Emetto Utente\r\n                                this._utente.next(docUtente);\r\n  \r\n                                //Emetto il Boolean TRUE di avvenuto accesso\r\n                                this._utenteLoggato.next(true);\r\n  \r\n                                //Se devo forzare l'area preferita la imposto\r\n                                if (forceIdArea && forceIdArea.length !== 0) {\r\n                                  docUtente.IDAREAOPERATIVA = forceIdArea;\r\n                                }\r\n\r\n                                //Utente ha una area preferita\r\n                                if (docUtente.IDAREAOPERATIVA) {\r\n                                  //Dovrei posizionarlo\r\n                                  this._idAreaFAV.next(docUtente.IDAREAOPERATIVA);\r\n                                }\r\n  \r\n                                //Emetto la risposta del server\r\n                                resolve(response);\r\n                              }\r\n                              else {\r\n                                reject(\"User document not found\");\r\n                              }\r\n                              \r\n                            }\r\n                            else {\r\n                              reject(response.message);\r\n                            }\r\n\r\n                            //Reimposto authorization code\r\n                            startConf = myStartConfig.getValue();\r\n                            startConf.authorizationUserCode = response.code;\r\n                            myStartConfig.next(startConf);\r\n\r\n\r\n\r\n                          })\r\n                          .catch(error => {\r\n\r\n                            //Reimposto authorization code\r\n                            startConf = myStartConfig.getValue();\r\n                            startConf.authorizationUserCode = '';\r\n                            myStartConfig.next(startConf);\r\n\r\n                            reject(error);\r\n                          });\r\n      });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Esecuzione Logoff dell'utente\r\n   */\r\n  logoff() {\r\n\r\n    this._utenteLoggato.next(false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Richiede nuovamente al server i dati dell'utente (esattamente come al login); dopodichè il docutente viene riemesso aggiornato\r\n   * @param authUserCode codice autorizzativo legato all'utente\r\n   */\r\n  updateClientData(): Promise<Utente>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const method = 'GetActiveUtente';  //Da decidere \r\n      const document = new Account();\r\n\r\n      //faccio la richiesta\r\n      this.docService.requestForFunction(document, method)\r\n      .then(result => {\r\n\r\n        if(result){\r\n\r\n          let newUtente: Utente = new Utente();\r\n          newUtente.setJSONProperty(result);\r\n          this._utenteLoggato.next(true);\r\n          this._utente.next(newUtente);\r\n\r\n          resolve(newUtente);\r\n        }\r\n        else{\r\n          throw new Error('Nessuna risposta dal server');\r\n        }\r\n\r\n        //recupero l'utente\r\n        //lo metto nella proprietà\r\n        //riemetto il next della proprietà\r\n        //risolvo\r\n\r\n\r\n      })\r\n      .catch(error => {\r\n        reject(error); \r\n      })\r\n      \r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Richiede al server l'aggiornamento dei dati Utente\r\n   * @param config Dati di configurazione\r\n   * @param docUtenteUpdate Documento Utente con dati modificati\r\n   */\r\n\r\n  requestUpdate(config: StartConfiguration, docUtenteUpdate: Utente):Promise<Utente>{\r\n\r\n    return new Promise((resolve, reject)=>{\r\n\r\n    const doObject = 'UTENTE';\r\n\r\n    const metodo = 'updateUtente';\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n\r\n    const myParams = new HttpParams();\r\n    let body = '';\r\n\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n    //Body da inviare\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramExport = new ParamsExport();\r\n    paramExport.clearDOProperty = true;\r\n    paramExport.clearPKProperty = false;\r\n    paramExport.clearPrivateProperty = true;\r\n    paramExport.onlyPropertyModified = true;\r\n\r\n    body = docUtenteUpdate.exportToJSON(paramExport);\r\n    body = `{\"docUtente\": ${body}}`;\r\n\r\n\r\n    //faccio la richiesta\r\n    this.apiService.httpPost(myUrl, myHeaders, myParams, body)\r\n    .pipe(map(rawResponse => {\r\n\r\n      return rawResponse.update;\r\n\r\n    })).subscribe(response => {\r\n\r\n      let myResponse = new PostResponse();\r\n      myResponse.result = response['result'];\r\n      myResponse.message = response['message'];\r\n      myResponse.document = response['document'];\r\n\r\n      if (myResponse.result){\r\n\r\n        let docUtente = new Utente();\r\n        let objDocument = myResponse.getDocument();\r\n\r\n        if (objDocument) {\r\n            //l'operazione è andata a buon fine, restituisco l'utente\r\n            docUtente.setJSONProperty(objDocument);\r\n            \r\n            this._utente.next(docUtente);\r\n            resolve(docUtente);\r\n        }\r\n        else {\r\n          reject('Errore ricezione dati server');\r\n        }\r\n\r\n      }\r\n      else{\r\n        //il server ha risposto, ma l'operazione non è andata a buon fine, restituisco il messaggio di errore\r\n        reject (response.message);\r\n      }\r\n    }, error => {\r\n\r\n      //il server non ha risposto\r\n      reject(error);\r\n\r\n    })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  requestChangePassword(config: StartConfiguration, oldPsw:string, newPsw:string) {\r\n    let actualUtente = this._utente.getValue();\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override','CHANGEPWDMOB');\r\n\r\n    //  new HttpHeaders({'Content-type':'application/json',\r\n    //                                    'X-HTTP-Method-Override':'CHANGEPWDMOB',\r\n    //                                    'appid':config.appId\r\n    //                                   });\r\n\r\n    const myParams = new HttpParams().set('GUIDUTENTE', actualUtente.ID).append('PWDATTUALE', oldPsw).append('PWDNUOVA',newPsw);\r\n    const doObject = 'ACCOUNT';\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n\r\n    // Ritorno la chiamata\r\n    return this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n\r\n  }\r\n\r\n\r\n  //#region FASI REGISTRAZIONE\r\n\r\n\r\n  /**\r\n   * Invia al server la richiesta per inviare via Mail/SMS i codici per la registrazione account\r\n   * @param config Dati di configurazione\r\n   * @param docRequestCode Documento con le informazioni da inviare al server per effettuare la richiesta\r\n   */\r\n  registrationSendCodici(config: StartConfiguration,\r\n                         docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n          //Viene effettuata una chiamata al server per ottenere\r\n          //l'invio di una mail e/o un SMS contenente codici PIN\r\n          const metodo = 'registrationSendCodici';\r\n          let myHeaders = config.getHttpHeaders();\r\n          myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n\r\n          const myParams = new HttpParams();\r\n          const doObject = 'ACCOUNT';\r\n          let bodyRequest = '';\r\n\r\n          let myUrl = config.urlBase + '/' + doObject;\r\n\r\n          return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n            if (docRequestCode) {\r\n\r\n              //Creo il body da inviare\r\n\r\n              //Questi sono i parametri per l'esportazione\r\n              let paramExport = new ParamsExport();\r\n              paramExport.clearDOProperty = true;\r\n              paramExport.clearPKProperty = true;\r\n              paramExport.clearPrivateProperty = true;\r\n\r\n              bodyRequest = docRequestCode.exportToJSON(paramExport);\r\n\r\n              bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n              \r\n\r\n              //Faccio la chiamata POST\r\n              this.apiService\r\n                  .httpPost(myUrl, myHeaders, myParams, bodyRequest )\r\n                  .pipe(map(received => {\r\n                          return received.activation;\r\n                  }))\r\n                  .subscribe((response:AccountOperationResponse) => {\r\n                      if (response.result) {\r\n                        resolve(response);\r\n                      }\r\n                      else {\r\n                        reject(response.message);\r\n                      }\r\n                  }, error => {\r\n                  reject(error);\r\n                  })\r\n            }\r\n            else {\r\n              reject('Dati mancanti per la richiesta');\r\n            }\r\n\r\n          });\r\n\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Invia al server una richiesta per verificare i pincode inseriti dall'utente\r\n   * @param config Dati di configurazione\r\n   * @param docVerifyCode Dati da verificare\r\n   */\r\n  registrationVerifyCodici(config: StartConfiguration,\r\n    docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n        const metodo = 'registrationVerifyCodici';\r\n        let myHeaders = config.getHttpHeaders();\r\n        myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n\r\n        const myParams = new HttpParams();\r\n        const doObject = 'ACCOUNT';\r\n        let bodyRequest = '';\r\n\r\n        let myUrl = config.urlBase + '/' + doObject;\r\n\r\n        return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n            if (docVerifyCode) {\r\n\r\n                //Creo il body da inviare\r\n\r\n                //Questi sono i parametri per l'esportazione\r\n                let paramExport = new ParamsExport();\r\n                paramExport.clearDOProperty = true;\r\n                paramExport.clearPKProperty = true;\r\n                paramExport.clearPrivateProperty = true;\r\n\r\n\r\n                bodyRequest = docVerifyCode.exportToJSON(paramExport);\r\n\r\n                bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n\r\n                //Faccio la chiamata POST\r\n                this.apiService\r\n                .httpPost(myUrl, myHeaders, myParams, bodyRequest )\r\n                .pipe(map(received => {\r\n                    return received.activation;\r\n                }))\r\n                .subscribe((response:AccountOperationResponse) => {\r\n                if (response.result) {\r\n                  resolve(response);\r\n                }\r\n                else {\r\n                  reject(response.message);\r\n                }\r\n                }, error => {\r\n                  reject(error);\r\n                })\r\n            }\r\n            else {\r\n              reject('Dati mancanti per la richiesta');\r\n            }\r\n\r\n        });\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * Invia al server i dati per completare la registrazione di un account\r\n * @param config Dati configurazione\r\n * @param docUtente Utente da registrare\r\n * @param docRequestCode Documento di Richiesta codici iniziale\r\n */\r\nregistrationFinalize(config: StartConfiguration,\r\n  docUtente: Utente,\r\n  docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\n    //Viene inviato al server il documento per chiedere la registrazione utente\r\n    const metodo = 'registrationFinalize';\r\n\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n\r\n    const myParams = new HttpParams();\r\n    const doObject = 'ACCOUNT';\r\n    let bodyRequest = '';\r\n    let bodyUtente = '';\r\n    let bodyFinal = '';\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\nreturn new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n  if (docRequestCode && docUtente) {\r\n\r\n    //Creo il body da inviare\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramExport = new ParamsExport();\r\n    paramExport.clearDOProperty = true;\r\n    paramExport.clearPKProperty = true;\r\n    paramExport.clearPrivateProperty = true;\r\n\r\n\r\n    bodyRequest = docRequestCode.exportToJSON(paramExport);\r\n    bodyUtente = docUtente.exportToJSON(paramExport);\r\n\r\n    bodyFinal = `{\"docRequest\" : ${bodyRequest}, \"docUtente\": ${bodyUtente}}`;\r\n\r\n    \r\n\r\n    //Faccio la chiamata POST\r\n    this.apiService\r\n      .httpPost(myUrl, myHeaders, myParams, bodyFinal )\r\n      .pipe(map(received => {\r\n        return received.activation;\r\n      }))\r\n      .subscribe((response:AccountOperationResponse) => {\r\n\r\n\r\n        if (response.result) {\r\n            resolve(response);\r\n        }\r\n        else {\r\n            reject(response.message);\r\n        }\r\n        }, error => {\r\n            reject(error);\r\n        });\r\n    }\r\n    else {\r\n      reject('Dati mancanti per la richiesta');\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n\r\n  //#endregion\r\n\r\n\r\n  //#region  FASI RECUPERO PSW\r\n\r\n  /**\r\n   * Invia al server la richiesta per inviare via Mail/SMS i codici per la registrazione account\r\n   * @param config Dati di configurazione\r\n   * @param docRequestCode Documento con le informazioni da inviare al server per effettuare la richiesta\r\n   */\r\n  recoverySendCodici(config: StartConfiguration,\r\n  docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n  //Viene effettuata una chiamata al server per ottenere\r\n  //l'invio di una mail e/o un SMS contenente codici PIN\r\n  const metodo = 'recoverySendCodici';\r\n\r\n  let myHeaders = config.getHttpHeaders();\r\n  myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n  const myParams = new HttpParams();\r\n  const doObject = 'ACCOUNT';\r\n  let bodyRequest = '';\r\n\r\n  let myUrl = config.urlBase + '/' + doObject;\r\n\r\n  return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n  if (docRequestCode) {\r\n\r\n  //Creo il body da inviare\r\n\r\n  //Questi sono i parametri per l'esportazione\r\n  let paramExport = new ParamsExport();\r\n  paramExport.clearDOProperty = true;\r\n  paramExport.clearPKProperty = true;\r\n  paramExport.clearPrivateProperty = true;\r\n\r\n\r\n  bodyRequest = docRequestCode.exportToJSON(paramExport);\r\n\r\n  bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n  \r\n\r\n  //Faccio la chiamata POST\r\n  this.apiService\r\n  .httpPost(myUrl, myHeaders, myParams, bodyRequest )\r\n  .pipe(map(received => {\r\n      return received.recovery;\r\n  }))\r\n  .subscribe((response:AccountOperationResponse) => {\r\n    resolve(response);\r\n  }, error => {\r\n  reject(error);\r\n  })\r\n  }\r\n  else {\r\n  reject('Dati mancanti per la richiesta');\r\n  }\r\n\r\n  });\r\n\r\n\r\n\r\n}\r\n\r\n /**\r\n   * Invia al server una richiesta per verificare i pincode inseriti dall'utente\r\n   * @param config Dati di configurazione\r\n   * @param docVerifyCode Dati da verificare\r\n   */\r\n  recoveryVerifyCodici(config: StartConfiguration,\r\n    docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n        const metodo = 'recoveryVerifyCodici';\r\n\r\n        let myHeaders = config.getHttpHeaders();\r\n        myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n        const myParams = new HttpParams();\r\n        const doObject = 'ACCOUNT';\r\n        let bodyRequest = '';\r\n\r\n        let myUrl = config.urlBase + '/' + doObject;\r\n\r\n        return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n            if (docVerifyCode) {\r\n\r\n                //Creo il body da inviare\r\n\r\n                //Questi sono i parametri per l'esportazione\r\n                let paramExport = new ParamsExport();\r\n                paramExport.clearDOProperty = true;\r\n                paramExport.clearPKProperty = true;\r\n                paramExport.clearPrivateProperty = true;\r\n\r\n                bodyRequest = docVerifyCode.exportToJSON(paramExport);\r\n                bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n\r\n                //Faccio la chiamata POST\r\n                this.apiService\r\n                .httpPost(myUrl, myHeaders, myParams, bodyRequest )\r\n                .pipe(map(received => {\r\n                    return received.recovery;\r\n                }))\r\n                .subscribe((response:AccountOperationResponse) => {\r\n                  resolve(response);\r\n                }, error => {\r\n                  reject(error);\r\n                })\r\n            }\r\n            else {\r\n              reject('Dati mancanti per la richiesta');\r\n            }\r\n\r\n        });\r\n}\r\n\r\n/**\r\n * Invia al server i dati per completare la registrazione di un account\r\n * @param config Dati configurazione\r\n * @param docUtente Utente da registrare\r\n * @param docRequestCode Documento di Richiesta codici iniziale\r\n */\r\nrecoveryFinalize(config: StartConfiguration,\r\n  docUtente: Utente,\r\n  docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\n    //Viene inviato al server il documento per chiedere la registrazione utente\r\n    const metodo = 'recoveryFinalize';\r\n\r\n\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n    const myParams = new HttpParams();\r\n    const doObject = 'ACCOUNT';\r\n    let bodyRequest = '';\r\n    let bodyUtente = '';\r\n    let bodyFinal = '';\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\nreturn new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n  if (docRequestCode && docUtente) {\r\n\r\n    //Creo il body da inviare\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramReqExport = new ParamsExport();\r\n    paramReqExport.clearDOProperty = true;\r\n    paramReqExport.clearPKProperty = true;\r\n    paramReqExport.clearPrivateProperty = true;\r\n\r\n    bodyRequest = docRequestCode.exportToJSON(paramReqExport);\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramUteExport = new ParamsExport();\r\n    paramUteExport.clearDOProperty = true;\r\n    paramUteExport.clearPKProperty = false;\r\n    paramUteExport.clearPrivateProperty = true;\r\n\r\n    bodyUtente = docUtente.exportToJSON(paramUteExport);\r\n\r\n    bodyFinal = `{\"docRequest\" : ${bodyRequest}, \"docUtente\": ${bodyUtente}}`;\r\n\r\n    \r\n\r\n    //Faccio la chiamata POST\r\n    this.apiService\r\n      .httpPost(myUrl, myHeaders, myParams, bodyFinal)\r\n      .pipe(map(received => {\r\n        return received.recovery;\r\n      }))\r\n      .subscribe((response:AccountOperationResponse) => {\r\n\r\n        resolve(response);\r\n        }, error => {\r\n            reject(error);\r\n        });\r\n    }\r\n    else {\r\n      reject('Dati mancanti per la richiesta');\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n  //#endregion\r\n\r\n  //#region VERIFICA CONTATTI\r\n\r\n  /**\r\n   * Invia al server la richiesta per inviare via Mail/SMS i codici per la procedura di verifica dei contatti\r\n   * @param config Dati di configurazione\r\n   * @param docRequestCode Documento con le informazioni da inviare al server per effettuare la richiesta\r\n   */\r\n  validationSendCodici(config: StartConfiguration,\r\n    docUtente:Utente,\r\n    docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n    //Viene effettuata una chiamata al server per ottenere\r\n    //l'invio di una mail e/o un SMS contenente codici PIN\r\n    const metodo = 'validationSendCodici';\r\n    // const myHeaders = new HttpHeaders({'Content-type':'application/json',\r\n    //                         'X-HTTP-Method-Override': metodo,\r\n    //                         'appid':config.appId\r\n    //                       });\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n    const myParams = new HttpParams();\r\n    const doObject = 'ACCOUNT';\r\n    let bodyRequest = '';\r\n    let bodyUtente = '';\r\n    let bodyFinal = '';\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n    return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n    if (docRequestCode) {\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramReqExport = new ParamsExport();\r\n    paramReqExport.clearDOProperty = true;\r\n    paramReqExport.clearPKProperty = true;\r\n    paramReqExport.clearPrivateProperty = true;\r\n\r\n    //Creo il body da inviare\r\n    bodyRequest = docRequestCode.exportToJSON(paramReqExport);\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramUteExport = new ParamsExport();\r\n    paramUteExport.clearDOProperty = true;\r\n    paramUteExport.clearPKProperty = false;\r\n    paramUteExport.clearPrivateProperty = true;\r\n\r\n    bodyUtente = docUtente.exportToJSON(paramUteExport);\r\n\r\n    bodyFinal = `{\"docRequest\" : ${bodyRequest}, \"docUtente\": ${bodyUtente}}`;\r\n\r\n    //Faccio la chiamata POST\r\n    this.apiService\r\n    .httpPost(myUrl, myHeaders, myParams, bodyFinal )\r\n    .pipe(map(received => {\r\n        return received.validation;\r\n    }))\r\n    .subscribe((response:AccountOperationResponse) => {\r\n      resolve(response);\r\n    }, error => {\r\n      reject(error);\r\n    })\r\n    }\r\n    else {\r\n      reject('Dati mancanti per la richiesta');\r\n    }\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n   /**\r\n   * Invia al server una richiesta per verificare i pincode inseriti dall'utente\r\n   * @param config Dati di configurazione\r\n   * @param docVerifyCode Dati da verificare\r\n   */\r\n  validationVerifyCodici(config: StartConfiguration,\r\n    docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n        const metodo = 'validationVerifyCodici';\r\n\r\n        let myHeaders = config.getHttpHeaders();\r\n        myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n        const myParams = new HttpParams();\r\n        const doObject = 'ACCOUNT';\r\n        let bodyRequest = '';\r\n\r\n        let myUrl = config.urlBase + '/' + doObject;\r\n\r\n        return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n            if (docVerifyCode) {\r\n\r\n                //Creo il body da inviare\r\n\r\n                //Questi sono i parametri per l'esportazione\r\n                let paramReqExport = new ParamsExport();\r\n                paramReqExport.clearDOProperty = true;\r\n                paramReqExport.clearPKProperty = true;\r\n                paramReqExport.clearPrivateProperty = true;\r\n\r\n                bodyRequest = docVerifyCode.exportToJSON(paramReqExport);\r\n                bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n\r\n                //Faccio la chiamata POST\r\n                this.apiService\r\n                .httpPost(myUrl, myHeaders, myParams, bodyRequest)\r\n                .pipe(map(received => {\r\n                    return received.validation;\r\n                }))\r\n                .subscribe((response:AccountOperationResponse) => {\r\n                  this.updateClientData()\r\n                  .then(() => {\r\n                    resolve(response);\r\n                  })\r\n                  .catch(error => {\r\n                    reject(error);\r\n                  })\r\n                }, error => {\r\n                    reject(error);\r\n                })\r\n            }\r\n            else {\r\n              reject('Dati mancanti per la richiesta');\r\n            }\r\n\r\n        });\r\n}\r\n\r\n  //#endregion\r\n}\r\n","export enum TypeDefinition {\r\n    undefined = 'undefined',\r\n    char = 'String',\r\n    date = 'Date',\r\n    dateTime = 'DateTime',\r\n    time = 'Time',\r\n    number = 'Number',\r\n    numberDecimal = 'Float',\r\n    boolean = 'boolean',\r\n    collection = 'collection',\r\n    document = 'document'\r\n}\r\n\r\n/**\r\n* Classe di associazione NomeCampo -> Tipologia\r\n*/\r\nexport class TypeReflector {\r\n\r\n    private _fieldName: string;\r\n    private _fieldType: TypeDefinition;\r\n    //Se il campo è in relazione con un altro documento, qui trovo la relazione con il documento e la proprietà del documento in relazione\r\n    private _relFieldDoc: string;\r\n    private _relFieldName: string;\r\n    private _primaryKey: boolean; //Il campo è una chiave primaria\r\n\r\n    get primaryKey(): boolean {\r\n      return this._primaryKey;\r\n    }\r\n  \r\n    set primaryKey(value: boolean) {\r\n      this._primaryKey = value;\r\n    }  \r\n  \r\n    get fieldName(): string {\r\n      return this._fieldName;\r\n    }\r\n  \r\n    set fieldName(value: string) {\r\n\r\n        this._fieldName = value;\r\n        //Se fosse ID lo imposta come chiave primaria\r\n        this._forceIfPrimaryKey();  \r\n    }\r\n  \r\n    get fieldType(): TypeDefinition {\r\n      return this._fieldType;\r\n    }\r\n  \r\n    set fieldType(value: TypeDefinition) {\r\n      this._fieldType = value;\r\n    }\r\n\r\n        /**\r\n     * Forza impostando come primary Key un campo che si chiama ID\r\n     */\r\n    private _forceIfPrimaryKey() {\r\n        if (this._fieldName == 'ID') {\r\n        this._primaryKey = true;\r\n        }\r\n    }\r\n  \r\n    constructor(campoName: string,\r\n                campoType: TypeDefinition,\r\n                relDoc?: string,\r\n                relName?: string) {\r\n  \r\n        this._fieldName = campoName;\r\n        this._fieldType = campoType;\r\n        this._relFieldDoc = relDoc;\r\n        this._relFieldName = relName;\r\n\r\n        //Metto come chiave False, semmai la cambio dopo\r\n        this._primaryKey = false;\r\n        //Se fosse ID lo imposta come chiave primaria\r\n        this._forceIfPrimaryKey();        \r\n  \r\n    }\r\n  \r\n    get relFieldDoc(): string {\r\n        return this._relFieldDoc;\r\n    }\r\n  \r\n    set relFieldDoc(value:string) {\r\n        this._relFieldDoc = value;\r\n    }\r\n  \r\n    get relFieldName(): string {\r\n        let strReturn = '';\r\n        if (this._relFieldDoc && this._relFieldDoc.length !== 0) {\r\n            if (this._relFieldName && this._relFieldName) {\r\n                strReturn = this._relFieldName;\r\n            }\r\n            else {\r\n                strReturn = 'ID';\r\n            }\r\n        }\r\n  \r\n        return strReturn;\r\n    }\r\n  \r\n    set relFieldName(value:string) {\r\n        this._relFieldName = value;\r\n    }\r\n  \r\n    /**\r\n     * Ritorna TRUE se il campo è parte di un servizio Documentale\r\n     * ID, do_deleted etc...\r\n     */\r\n    serviceField(): boolean {\r\n        let value = false;\r\n        let arServizi = ['ID','do_updated','do_loaded','do_inserted','do_deleted'];\r\n        if (arServizi.includes(this._fieldName)) {\r\n            value = true;\r\n        }\r\n        return value;\r\n    }\r\n  \r\n    /**\r\n     * Ritorna TRUE se il campo è un campo presente anche sul server\r\n     */\r\n    nativeField(): boolean {\r\n        let value = true;\r\n        if (this._fieldName.substr(0,1) == '_') {\r\n            // I campi che iniziano con _ sono privati di solito di Lookup\r\n            value = false;\r\n        }\r\n  \r\n        return value;\r\n    }\r\n  \r\n  \r\n    /**\r\n     * Controlla e indica se ha una relazione il campo\r\n     */\r\n    get isForeignKey():boolean {\r\n        let result = false;\r\n  \r\n        if (this._relFieldDoc) {\r\n            result = true;\r\n        }\r\n  \r\n        return result;\r\n    }\r\n  }\r\n\r\n/**\r\n * Classe per Tipizzare intere classi\r\n */\r\nexport class  Descriptor{\r\n    fields: TypeReflector[] = [];\r\n\r\n    //Nome della classe\r\n    private _className: string; \r\n\r\n    //Indica se la classe viene gestita in remoto\r\n    private _doRemote: boolean;\r\n\r\n    //Nome da utilizzare nelle chiamate webapi\r\n    private _classWebApiName: string;\r\n\r\n    //Campo che descrive la riga (usato di default per le decodifiche)\r\n    private _describeField: string;\r\n\r\n    \r\n    get className() {\r\n        return this._className;\r\n    }\r\n\r\n    set className(value:string) {\r\n        this._className = value;\r\n        \r\n        if (!this._classWebApiName || this._classWebApiName.length == 0) {\r\n            this._classWebApiName = value;\r\n        }\r\n    }\r\n\r\n    get classWebApiName() {\r\n        return this._classWebApiName;\r\n    }\r\n\r\n    set classWebApiName(value: string) {\r\n        this._classWebApiName = value;\r\n    }\r\n\r\n    get describeField() {\r\n        return this._describeField;\r\n    }\r\n\r\n    set describeField(value: string) {\r\n        this._describeField = value;\r\n    }    \r\n\r\n    get doRemote() {\r\n        return this._doRemote;\r\n    }\r\n\r\n    set doRemote(value: boolean) {\r\n        this._doRemote = value;\r\n    }\r\n\r\n    /**\r\n     * Ritorna un array con i campi foreignkey\r\n     */\r\n    get foreignKeys():TypeReflector[] {\r\n\r\n        let arForeign: TypeReflector[] = [];\r\n\r\n        if (this.fields) {\r\n            for (let index = 0; index < this.fields.length; index++) {\r\n                const element = this.fields[index];\r\n                const isForeign = element.isForeignKey;\r\n                if (isForeign) {\r\n                    arForeign.push(element);\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        return arForeign;\r\n    }\r\n\r\n  /**\r\n   * Ritorna il nome della chiave primaria se presente\r\n   */\r\n  get primaryKeyFieldName(): string {\r\n    let field: TypeReflector;\r\n    let fieldName: string = '';\r\n    field = this.fields.find(elField => {\r\n      return (elField.primaryKey == true)\r\n    });\r\n\r\n    if (field) {\r\n      fieldName = field.fieldName;\r\n    }\r\n\r\n    return fieldName;\r\n  }    \r\n\r\n    constructor() {\r\n        this._doRemote = false;\r\n\r\n        this.add('ID',TypeDefinition.char);\r\n        this.add('do_updated', TypeDefinition.boolean);\r\n        this.add('do_loaded', TypeDefinition.boolean);\r\n        this.add('do_inserted', TypeDefinition.boolean);\r\n        this.add('do_deleted', TypeDefinition.boolean);\r\n    }\r\n\r\n\r\n  /**\r\n   * Aggiunge un Campo/Tipo all'insieme\r\n   * @param campoName Nome Campo\r\n   * @param campoType Tipo Campo\r\n   */\r\n  add(campoName: string, campoType: TypeDefinition, relDoc?:string, relField?:string) {\r\n    let typeR = new TypeReflector(campoName, campoType, relDoc, relField);\r\n    //Se non esiste lo aggiungo\r\n    if (this.hasFieldName(campoName) == false) {\r\n      this.fields.push(typeR);\r\n    }\r\n}\r\n\r\n\r\n    /**\r\n     * Ricerca tra i campi quello denominato fieldName e ne setta una relazione con\r\n     * relDoc grazie a relFieldName\r\n     * @param fieldName \r\n     * @param relDoc \r\n     * @param relFieldName \r\n     */\r\n    setRelation(fieldName: string, relDoc:string, relFieldName?: string) {\r\n        \r\n        let findField = this.fields.find(el => {\r\n            return el.fieldName == fieldName;\r\n        });\r\n\r\n        if (findField) {\r\n            findField.relFieldName = relFieldName;\r\n            findField.relFieldDoc = relDoc;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Aggiunge un array di NomiCampo alla stessa tipologia\r\n     * @param arrayCampoName Array con tutti nomi dei campi\r\n     * @param campoType Tipologia da associare\r\n     */\r\n    addMultiple(arrayCampoName:string[], campoType: TypeDefinition) {\r\n        if (arrayCampoName) {\r\n            arrayCampoName.forEach(element => {\r\n                this.add(element, campoType);\r\n            });\r\n        }\r\n    }\r\n\r\n  /**\r\n   * Aggiunge una collection alla struttura\r\n   * @param collectionName Nome Collection\r\n   * @param relDoc Riferimento ai documenti contenuti nella collection\r\n   * @param relFieldName Nome campo nel documento di riferimento che crea il legame\r\n   */\r\n  addCollection(collectionName: string, relDoc:string, relFieldName: string) {\r\n    let newField: TypeReflector;\r\n\r\n    if (collectionName) {\r\n      if (this.hasCollection(collectionName) == false) {\r\n\r\n        newField = new TypeReflector(collectionName,TypeDefinition.collection);\r\n        newField.relFieldDoc = relDoc;\r\n        newField.relFieldName = relFieldName;\r\n\r\n        this.fields.push(newField);\r\n      }\r\n    }\r\n  }  \r\n\r\n    /**\r\n     * Con un nome campo torna la tipologia associata\r\n     * @param campoName Nome del Campo\r\n     */\r\n    getType(campoName: string): TypeDefinition {\r\n        let retType = TypeDefinition.undefined;\r\n\r\n        let elType = this.fields.find(element => {\r\n            return element.fieldName == campoName;\r\n        });\r\n\r\n        if (elType) {\r\n            retType = elType.fieldType;\r\n        }\r\n\r\n        return retType;\r\n    }\r\n\r\n    /**\r\n     * Cerca e ritorna il campo per fieldName\r\n     * @param fieldName Nome del campo\r\n     */\r\n    getByFieldName(fieldName: string) : TypeReflector {\r\n        return this.fields.find(el => {\r\n            return el.fieldName == fieldName;\r\n        });\r\n    }\r\n\r\n  /**\r\n   * Ritorna se presente una collection passata come parametro\r\n   * @param collectionName Nome Collection\r\n   */\r\n  getByCollectionName(collectionName: string): TypeReflector {\r\n\r\n    let collFind: TypeReflector;\r\n    collFind = this.fields.find(elField => {\r\n      return (elField.fieldName == collectionName && elField.fieldType== TypeDefinition.collection);\r\n    });\r\n\r\n    return collFind;\r\n  }      \r\n\r\n  \r\n  /**\r\n   * Controlla che la collection passata come parametro esista nel documento\r\n   * @param collectionName Nome Collection\r\n   */\r\n  hasCollection(collectionName: string) {\r\n    let exist = false;\r\n    let collFind: TypeReflector;\r\n    collFind = this.fields.find(elField => {\r\n      return (elField.fieldName == collectionName && elField.fieldType== TypeDefinition.collection);\r\n    });\r\n\r\n    if (collFind) {\r\n      exist = true;\r\n    }\r\n\r\n    return exist;\r\n  }\r\n\r\n    /**\r\n   * Controlla che la collection passata come parametro esista nel documento\r\n   * @param collectionName Nome Collection\r\n   */\r\n  hasFieldName(fieldName: string):boolean {\r\n    let exist = false;\r\n    let fieldFind: TypeReflector;\r\n    fieldFind = this.fields.find(elField => {\r\n      return (elField.fieldName == fieldName);\r\n    });\r\n\r\n    if (fieldFind) {\r\n      exist = true;\r\n    }\r\n\r\n    return exist;\r\n  }\r\n\r\n}","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoMasterDocumento } from './valuelist.model';\r\n\r\n\r\nexport class MasterDocumento extends IDDocument{\r\n    IDANAGRAFICA : string;\r\n    NOTESSTAMPA : string;\r\n    \r\n    DATADOCUMENTO : Date;\r\n    IDVALUTA: string;\r\n    SERIE: string;\r\n    NUMERODOCUMENTO: number;\r\n    NUMEROSTAMPA: string;\r\n    TIPOLOGIA: TipoMasterDocumento;\r\n    TOTDOCUMENTO: number;\r\n    ANNO: number;\r\n\r\n   \r\n\r\n    constructor(onlyInstance = false){\r\n        super(onlyInstance);\r\n    }\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDANAGRAFICA',\r\n                        'NOTESSTAMPA',\r\n                        'IDVALUTA',\r\n                        'SERIE',\r\n                        'NUMEROSTAMPA'\r\n                        ];\r\n        let arBoolean = [];\r\n        let arDate = ['DATADOCUMENTO'];\r\n        let arDateTime = [];\r\n        let arNumber = ['NUMERODOCUMENTO', 'TOTDOCUMENTO', 'TIPOLOGIA','ANNO' ];\r\n    \r\n        objDescriptor.className = 'MasterDocumento';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'MASTERDOCUMENTO';\r\n        objDescriptor.describeField = 'NOTESSTAMPA';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    \r\n        \r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, of, from } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { ApicallService } from './apicall.service';\r\n\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { NewsEvento } from '../models/newsevento.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { promise } from 'protractor';\r\n\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NewseventiService {\r\n\r\n  private _listNews = new BehaviorSubject<NewsEvento[]>([]);\r\n\r\n  get listNews() {\r\n    return this._listNews.asObservable();\r\n  }\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n\r\n\r\n  /**\r\n   * Aggiunge una news\r\n   * @param objNews News da aggiungere\r\n   */\r\n  addNews(objNews: NewsEvento) {\r\n    this.listNews\r\n      .pipe(take(1))\r\n      .subscribe (collNews => {\r\n        let findElement = collNews.find(element => {\r\n          return element.ID == objNews.ID\r\n        });\r\n\r\n        if (!findElement) {\r\n          this._listNews.next( collNews.concat(objNews));\r\n        }\r\n      })\r\n  }\r\n  \r\n\r\n  /**\r\n   * Crea il Parametro Filtro per il campo PUBBLICATADAL\r\n   */\r\n  getFilterDateTime(): string {\r\n    let adesso = new Date();\r\n    let newDoc = new IDDocument();\r\n    let strAdesso = newDoc.formatDateTimeISO(adesso);\r\n\r\n    strAdesso = '<' + strAdesso;\r\n\r\n    return strAdesso;\r\n  }\r\n\r\n  /** Recupera una News e la torna Observable, \r\n   *\r\n   * @param config Configurazione\r\n   * @param idNews News ricercata\r\n   * */\r\n  getNewsById(idNews: string) {\r\n    let news = this._listNews\r\n                      .getValue()\r\n                      .find(element => {\r\n                        return (element.ID == idNews)\r\n                      });\r\n\r\n    return news;\r\n  }\r\n\r\n  /**\r\n   * Richiede al server la news\r\n   * @param config Dati configurazione\r\n   * @param idNews News da richiedere al server\r\n   */\r\n  private _requestServerById(config: StartConfiguration, idNews: string) {\r\n    let myHeaders = config.getHttpHeaders();\r\n    //new HttpHeaders({'Content-type':'text/plain'});\r\n    const doObject = 'NEWSEVENTO';\r\n    \r\n\r\n    let myUrl = config.urlBase + '/' + doObject;  \r\n\r\n    //Nei Parametri imposto l'area richiesta\r\n    let myParams = new HttpParams().set('ID',idNews);\r\n    \r\n\r\n    return this.apiService\r\n      .httpGet(myUrl, myHeaders, myParams)\r\n      .pipe(map(data => {\r\n          \r\n            let arReturn = [];\r\n            if (data.NEWSEVENTO) {\r\n              arReturn = data.NEWSEVENTO;\r\n            }\r\n\r\n            return arReturn;\r\n          \r\n      }))\r\n      .pipe(take(1))\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param config Parametri di configurazione\r\n   * @param guidArea GUID Area di riferimento\r\n   * @param n Numero massimo di elementi\r\n   * @returns Promise<NewsEvento[]>\r\n   */\r\n  request(config: StartConfiguration, guidArea:string, n:number){\r\n    return new Promise<NewsEvento[]>((resolve,reject)=>{\r\n\r\n      let myHeaders = config.getHttpHeaders();\r\n      \r\n      const doObject = 'NEWSEVENTO';\r\n  \r\n      myHeaders = myHeaders.append('X-HTTP-Method-Override','GETNEXTNEWS')\r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto l'area richiesta\r\n      let myParams = new HttpParams().set('guidArea',guidArea);\r\n\r\n      myParams = myParams.append('$top', n+'');\r\n\r\n      this.apiService.httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data=>{\r\n        let arReturn = [];\r\n        if (data.NEWSEVENTO){\r\n          arReturn=data.NEWSEVENTO;\r\n        }\r\n        return arReturn;\r\n      }))\r\n      .subscribe(myListReceived => {\r\n\r\n        let myListNews: NewsEvento[]=[];\r\n\r\n        for (let index = 0; index < myListReceived.length; index++) {\r\n\r\n          const objElement = myListReceived[index];\r\n          //Creo un nuovo oggetto\r\n          let newsEvento= new NewsEvento();\r\n          //Copio le proprietà\r\n          newsEvento.setJSONProperty(objElement);\r\n          //Inserisco nell'array\r\n          myListNews.push(newsEvento);\r\n\r\n        }\r\n        //La Promise ritorna l'elenco news\r\n        resolve(myListNews);\r\n\r\n      }, error=>{\r\n        reject(error);\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n}\r\n","import { NgModule, LOCALE_ID } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouteReuseStrategy, RouterModule } from '@angular/router';\r\nimport { HttpClientModule} from '@angular/common/http';\r\nimport { IonicStorageModule } from '@ionic/storage';\r\n\r\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\r\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\r\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { registerLocaleData } from '@angular/common';\r\n\r\nimport { QRCodeModule } from 'angularx-qrcode';\r\n\r\n\r\nimport localeIt from '@angular/common/locales/it';\r\n\r\n\r\nimport { SocialSharing } from '@ionic-native/social-sharing/ngx';\r\nimport { CryptoService } from './library/services/crypto.service';\r\nimport { FileOpener } from '@ionic-native/file-opener/ngx';\r\nimport { File } from '@ionic-native/file/ngx';\r\n\r\n\r\n\r\nregisterLocaleData(localeIt,'it');\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  entryComponents: [],\r\n  imports: [BrowserModule, \r\n            FormsModule,\r\n            HttpClientModule,\r\n            IonicModule.forRoot(), \r\n            IonicStorageModule.forRoot(),\r\n            AppRoutingModule,\r\n            QRCodeModule,\r\n              \r\n            ],\r\n  providers: [\r\n    StatusBar,\r\n    SplashScreen,\r\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\r\n    { provide: LOCALE_ID, useValue: 'it' },\r\n    SocialSharing,\r\n    CryptoService,\r\n    File,\r\n    FileOpener\r\n    \r\n\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { RequestForeign } from '../library/models/requestParams.model';\r\nimport { CorsoPresenze } from './corsopresenze.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { TypePeriod } from '../library/models/mydatetime.model';\r\n\r\n\r\nexport class PianificazioneCorso extends IDDocument {\r\n    IDCORSO: string;\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    IDCAMPO: string;\r\n    DATA: Date;\r\n    VALUEGIORNO: number;\r\n    ORAINIZIO: Date;\r\n    ORELEZIONE: number;\r\n    DATAORAINIZIO: Date;\r\n    DATAORAFINE: Date;\r\n    MULTIPLA: boolean;\r\n    CORSOPRESENZE: CorsoPresenze[];\r\n    NOTEADMIN: string;\r\n    NOTETRAINER: string;\r\n\r\n\r\n    constructor(\r\n      onlyInstance?:boolean\r\n    ){\r\n        super(onlyInstance);\r\n\r\n        this.CORSOPRESENZE = [];\r\n    }\r\n\r\n    /**\r\n     * Imposta le proprietà nell'oggetto\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n\r\n      //Chiamo IDDOcument\r\n      super.setJSONProperty(data);  \r\n      \r\n      //Imposto la collection\r\n      this.setCollection(data);\r\n\r\n      //Imposto che il documento è originale\r\n      this.setOriginal();\r\n\r\n    }\r\n\r\n    /**\r\n     * Sistema le collection se presenti\r\n     * @param data JSON Ricevuto\r\n     */\r\n    setCollection(data: any) {\r\n      this.CORSOPRESENZE = [];\r\n\r\n      if (data.CORSOPRESENZE) {\r\n        this.setCollectionCorsoPresenze(data.CORSOPRESENZE);\r\n      }\r\n      \r\n    }    \r\n\r\n    /**\r\n     * Imposta la collection CorsoPresenze\r\n     * @param arPresenze JSON Ricevuti\r\n     */\r\n    setCollectionCorsoPresenze(arPresenze: any[]) {\r\n\r\n      this.CORSOPRESENZE = [];\r\n\r\n      if (arPresenze) {\r\n\r\n        arPresenze.forEach(element => {\r\n            // Ricerco se esiste già\r\n            let newProgramma = new CorsoPresenze();\r\n            newProgramma.setJSONProperty(element);\r\n            this.CORSOPRESENZE.push(newProgramma);\r\n        });\r\n      }\r\n    }    \r\n\r\n    \r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDCORSO',\r\n                    'IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'IDCAMPO',\r\n                    'NOTEADMIN',\r\n                    'NOTETRAINER'\r\n                    ];\r\n    let arNumber = ['VALUEGIORNO','ORELEZIONE'];\r\n    let arBoolean = ['MULTIPLA'];\r\n    let arDate = ['DATA'];\r\n    let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\r\n    let arTime = ['ORAINIZIO'];\r\n    \r\n\r\n    objDescriptor.className = 'PianificazioneCorso';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'PIANIFICAZIONECORSO';\r\n    objDescriptor.describeField = 'DATA';\r\n\r\n    \r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addCollection('CORSOPRESENZE', 'CorsoPresenze', 'IDPIANIFICAZIONECORSO');\r\n    \r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n    objDescriptor.setRelation('IDCORSO','Corso');\r\n    objDescriptor.setRelation('IDCAMPO','Campo');\r\n\r\n\r\n    return objDescriptor;\r\n}    \r\n\r\n\r\nstatic getReqForeignKeys(): RequestForeign[] {\r\n  let arRequest: RequestForeign[] = [];\r\n  let objForeign: RequestForeign;\r\n\r\n  objForeign = new RequestForeign('IDAREAOPERATIVA');\r\n  arRequest.push(objForeign);\r\n\r\n  objForeign = new RequestForeign('IDSPORT');\r\n  arRequest.push(objForeign);\r\n\r\n  objForeign = new RequestForeign('IDCAMPO');\r\n  arRequest.push(objForeign);\r\n\r\n  objForeign = new RequestForeign('IDLOCATION');\r\n  objForeign.addDescribeField('DENOMINAZIONE');\r\n  objForeign.addDescribeField('INDIRIZZO');\r\n  objForeign.addDescribeField('COMUNE');\r\n  objForeign.addDescribeField('EMAIL');\r\n\r\n  arRequest.push(objForeign);\r\n\r\n  return arRequest;\r\n}\r\n\r\n   \r\n  \r\n  /**\r\n   * Ritorna TRUE, FALSE a seconda se \r\n   * l'evento è passato o no\r\n   */\r\n  eventoPassato() {\r\n\r\n    return (new Date() > this.DATAORAFINE );\r\n  }\r\n\r\n  /**\r\n   * Ritorna un valore che indica se la pianificazioneCorso è aggiornabile nelle presenze.\r\n   * @param gapOre Numero Positivo che indica quante ore di tempo di hanno dalla fine del corso per aggiornare le presenze \r\n   */\r\n  canUpdatePresenze(gapOre: number): boolean{\r\n    let canUpdate: boolean = true;\r\n    let now = new Date;\r\n\r\n    //Non è ancora iniziato\r\n    if (now < this.DATAORAINIZIO){\r\n      canUpdate = false;\r\n    }\r\n    else {\r\n      if (gapOre !== 0) {\r\n        if (now > MyDateTime.calcola(this.DATAORAFINE, gapOre, TypePeriod.hours)){\r\n          canUpdate = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return canUpdate;\r\n  }\r\n\r\n  /**\r\n   * Messaggio da mostrare all'utente riguardo all'aggiornamento dei dati presenza\r\n   * @param gapOre Numero Positivo che indica quante ore di tempo di hanno dalla fine del corso per aggiornare le presenze \r\n   */\r\n  msgCanUpdatePresenze(gapOre: number): string{\r\n\r\n    let strReturn = '';\r\n    let now = new Date();\r\n\r\n\r\n    //E' troppo presto\r\n    if (now < this.DATAORAINIZIO){\r\n      strReturn = 'Non è ancora possibile modificare le presenze di questa lezione';\r\n      strReturn = 'E\\' possibile modificare le presenze dal ' + MyDateTime.formatDate(this.DATAORAINIZIO, 'DD/MM/YYYY') + ' dalle ' +  MyDateTime.formatTime(this.DATAORAINIZIO, false);\r\n    }\r\n    else {\r\n      //In teoria potrei aggiornare le presenze\r\n      if (gapOre == 0) {\r\n        strReturn = 'Clicca su ogni partecipante per impostare la presenza/assenza';\r\n      }\r\n      else {\r\n        //Possiamo aggiornarle\r\n        if (this.canUpdatePresenze(gapOre)) {\r\n          //recupero la data entro cui è possibile aggiornare\r\n          let scadenza = MyDateTime.calcola(this.DATAORAFINE, gapOre, TypePeriod.hours);\r\n\r\n          //la converto in stringa\r\n          let strScadenza =MyDateTime.formatDate(scadenza, 'DD/MM/YY');\r\n\r\n          strReturn = 'Clicca su ogni partecipante per impostare la presenza/assenza, presenze aggiornabili fino al ' + strScadenza;\r\n\r\n        }\r\n        else {\r\n          strReturn = 'Non è più possibile modificare le presenze di questa lezione';\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return strReturn;\r\n  }\r\n\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\n\r\n\r\nexport class TipoDocumentazione extends IDDocument{\r\n    DENOMINAZIONE : string;\r\n    CLASSE : ClasseDocumento;\r\n    ZORDER : number;\r\n\r\n    constructor(onlyInstance?: boolean){\r\n        super(onlyInstance);\r\n    }\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['DENOMINAZIONE', 'ZORDER'];\r\n        let arNumber = ['CLASSE'];\r\n\r\n    \r\n        objDescriptor.className = 'TipoDocumentazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'TIPODOCUMENTAZIONE';\r\n        objDescriptor.describeField = 'DENOMINAZIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n   \r\n                \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\nexport enum ClasseDocumento {\r\n    certificatoMedico = 10,\r\n    attestato = 20,\r\n    documento = 30,\r\n    certificazioneIsee = 40,\r\n    certificazione = 50,\r\n    curriculum = 60,\r\n    documentazione = 1000\r\n\r\n}\r\n\r\nexport enum SorgenteFile {\r\n    filesystem = 'file',\r\n    photoGallery = 'photo'\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams, JsonpInterceptor } from '@angular/common/http';\r\n\r\nimport { PianificazioneCorso } from '../models/pianificazionecorso.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { LogApp } from '../models/log.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { IDDocument, ParamsExport } from '../library/models/iddocument.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { resolve } from 'url';\r\nimport { promise } from 'protractor';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\nimport { PostParams } from '../library/models/requestParams.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CourseschedulerService {\r\n\r\n  _calendarioCorso = new BehaviorSubject<PianificazioneCorso[]>([]);\r\n  _listImpegniTrainer = new BehaviorSubject<PianificazioneCorso[]>([]);\r\n\r\n  constructor(\r\n    private apiService: ApicallService,\r\n    private docStructureService: DocstructureService\r\n    ) { }\r\n\r\n\r\n\r\n  get calendarioCorso() {\r\n    return this._calendarioCorso.asObservable();\r\n  }\r\n\r\n   /**\r\n   * recupero la lista degli impegni del trainer (observable)\r\n   */\r\n  get listImpegniTrainer(){\r\n    return this._listImpegniTrainer.asObservable();\r\n  }\r\n\r\n\r\n\r\n    /**\r\n   * Effettua una chiamata al server per il recupero dei corsi\r\n   * Utilizzare il documento di Filtro per richiedere dati filtrati\r\n   * @param config Parametri di configurazione\r\n   * @param idCorso Corso Richiesto\r\n   */\r\n  requestCalendario(config: StartConfiguration, idCorso: string) {\r\n    return new Promise<void>((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      \r\n      const doObject = 'PIANIFICAZIONECORSO';\r\n       \r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto il corso richiesto\r\n      let myParams = new HttpParams().set('IDCORSO',idCorso);\r\n  \r\n      //Elimino le schedulazioni presenti\r\n      this.emptyCalendario();\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n          return data.PIANIFICAZIONECORSO\r\n        }))\r\n        .subscribe( resultData => {\r\n  \r\n          \r\n          \r\n          if (resultData) {\r\n            resultData.forEach(element => {\r\n    \r\n              let newCorsoCalendario = new PianificazioneCorso();\r\n              newCorsoCalendario.setJSONProperty(element);\r\n              LogApp.consoleLog(newCorsoCalendario);\r\n              this.addCorsoCalendario(newCorsoCalendario);\r\n              resolve();\r\n            },\r\n            error=>{\r\n              reject(error);\r\n            });\r\n          }\r\n        })\r\n\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge una schedulazione\r\n   * @param objCorsoScheduler Schedulazione Corso\r\n   */\r\n  addCorsoCalendario(objCorsoScheduler: PianificazioneCorso) {\r\n    this.calendarioCorso\r\n      .pipe(take(1))\r\n      .subscribe( collCalendario => {\r\n        this._calendarioCorso.next( collCalendario.concat(objCorsoScheduler));\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge una pianificazione alla lista Trainer\r\n   * @param docPianificazione Documento di Pianificazione\r\n   */\r\n  addImpegnotrainer(docPianificazione: PianificazioneCorso) {\r\n    this.listImpegniTrainer\r\n      .pipe(take(1))\r\n      .subscribe( collListImpegni => {\r\n        this._listImpegniTrainer.next( collListImpegni.concat(docPianificazione));\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Svuota il calendario presente\r\n   */\r\n  emptyCalendario() {\r\n    this._calendarioCorso.next([]);\r\n  }\r\n\r\n  /**\r\n   * Svuotare la lista degli impegni del trainer\r\n   */\r\n  emptyListImpegniTrainer() {\r\n    this._listImpegniTrainer.next([]);\r\n  }\r\n\r\n  /**\r\n   * richiede al server gli impegni del trainer con id specificato. ritorna la lista tramite Promise. sulla lista vengono anche effettuate le decodifiche\r\n   * \r\n   * @param idRef l'id del trainer\r\n   * @param dataInizio data di inizio  \r\n   * @param dataFine data di fine\r\n   */\r\n  requestImpegniTrainer(idRef: string, dataInizio: Date, dataFine?: Date){\r\n    return new Promise<PianificazioneCorso[]> ((resolve, reject) => {\r\n      \r\n      const methodName = 'getPianificazioniTrainer'\r\n      const document = new PianificazioneCorso(true);\r\n\r\n      if (!dataFine && !dataInizio) {\r\n        dataInizio = new Date();\r\n        dataFine = new Date();\r\n      }\r\n      else if (!dataInizio && dataFine) {\r\n        dataInizio = dataFine;\r\n      }\r\n      else if (dataInizio && !dataFine) {\r\n        dataFine = dataInizio;\r\n      }\r\n  \r\n      let params = {\r\n        'idRef': idRef,\r\n        'dataInizio': MyDateTime.formatDateISO(dataInizio),\r\n        'dataFine': MyDateTime.formatDateISO(dataFine)\r\n      }\r\n  \r\n      this.docStructureService.requestForFunction(document, methodName, JSON.stringify(params))\r\n      .then(response => {\r\n\r\n        let requestDecode = false;\r\n\r\n        //Svuotiamo la lista attuale\r\n        this.emptyListImpegniTrainer();\r\n        if (response.PIANIFICAZIONECORSO) {\r\n          if (Array.isArray(response.PIANIFICAZIONECORSO)) {\r\n\r\n            /* Ciclo sull'Array ricevuto */\r\n            for (let index = 0; index < response.PIANIFICAZIONECORSO.length; index++) {\r\n              requestDecode = true;\r\n              const element = response.PIANIFICAZIONECORSO[index];\r\n              let docPianificazioneCorso = new PianificazioneCorso();\r\n              docPianificazioneCorso.setJSONProperty(element);\r\n\r\n              \r\n              //qui reupero anche il documento livello e me lo salvo nel repository\r\n              const addToRepository = false;\r\n\r\n              //Chiedo altri dati\r\n              this.docStructureService.getRelDoc(docPianificazioneCorso, ['IDCORSO', 'IDLIVELLOENTRATA'],1,docPianificazioneCorso);\r\n                            \r\n              this.addImpegnotrainer(docPianificazioneCorso);\r\n              \r\n            }\r\n\r\n            if (requestDecode) {\r\n              //Recupero la lista Impegni\r\n              let listPianificazioni:PianificazioneCorso[] = this._listImpegniTrainer.getValue();\r\n\r\n              //Chiamo la decodifica collection della lista\r\n              this.docStructureService.decodeCollection(listPianificazioni)\r\n                .then(() => {\r\n                  //Riemetto Observable\r\n                  this._listImpegniTrainer.next(listPianificazioni);\r\n                  //Riemetto la resolve\r\n                  resolve(this._listImpegniTrainer.getValue());\r\n                })\r\n                .catch(error => {\r\n                  console.log(error);\r\n                  reject(error);\r\n                });\r\n\r\n            }\r\n            else {\r\n              //Risolvere con la lista attuale (che sarà vuota)\r\n              resolve(this._listImpegniTrainer.getValue());\r\n            }\r\n          }\r\n          else {\r\n              //Risolvere con la lista attuale (che sarà vuota)\r\n              resolve(this._listImpegniTrainer.getValue());\r\n          }\r\n        }\r\n        else {\r\n          //Risolvere con la lista attuale (che sarà vuota)\r\n          resolve(this._listImpegniTrainer.getValue());\r\n        }\r\n\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        reject(error);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Recupera un elemento \"impegno del trainer\" con l'id specificato. ATTENZIONE: devo prima aver eseguito il metodo requestImpegniTrainer\r\n   * @param idPianificazione l'id della pianificazione da recuperare\r\n   */\r\n  getPianificazioneTrainerById(idPianificazione): PianificazioneCorso{\r\n    let elem: PianificazioneCorso = this._listImpegniTrainer\r\n      .getValue()\r\n        .find((elem:PianificazioneCorso) => {\r\n          return elem.ID == idPianificazione;\r\n        })\r\n\r\n    return elem;\r\n  }\r\n\r\n  /**\r\n   * Richiede al server le presenze della pianificazione passata e le inserisce all'interno della stessa\r\n   * @param docPianificazione IL documento in cui inserire le presenze\r\n   */\r\n  insertPresenze(docPianificazione: PianificazioneCorso){\r\n    \r\n    return new Promise<PianificazioneCorso>((resolve, reject) => {\r\n\r\n      const collName = 'CORSOPRESENZE';\r\n\r\n      this.docStructureService.loadCollection(docPianificazione, collName)\r\n      .then(() => {\r\n        resolve(docPianificazione);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      })\r\n    })\r\n  }\r\n\r\n  updatePresenze(docPianificazione: PianificazioneCorso): Promise<PostResponse>{\r\n    return new Promise ((res, rej) => {\r\n\r\n      let myPostParams : PostParams = new PostParams();\r\n\r\n      myPostParams.key = 'docPianificazione';\r\n      myPostParams.value = docPianificazione;\r\n      myPostParams.exportOnlyPropertyModified = true;\r\n      myPostParams.exportOnlyDocModified = true;\r\n      \r\n      \r\n      this.docStructureService.requestForFunction(docPianificazione, 'updatePresenze', null, myPostParams)\r\n      .then((response:PostResponse) => {\r\n        res(response);\r\n      })\r\n      .catch(error => {\r\n        rej(error);\r\n      })\r\n    })\r\n  }\r\n}\r\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { AttivitaChiusura, TipoChiusura } from './valuelist.model';\r\n\r\nexport class DataChiusura extends IDDocument{\r\n\r\n    TIPOCHIUSURA: TipoChiusura;\r\n    ATTIVITACHIUSURA: AttivitaChiusura;\r\n    DATADAL: Date;\r\n    DATAAL: Date;\r\n    IDAREA: string;\r\n    IDLOCATION: string;\r\n    IDCAMPO: string;\r\n    NOTES:  string;\r\n    MOTIVAZIONE: string;\r\n\r\n\r\n\r\n      /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDAREA',\r\n                        'IDLOCATION',\r\n                        'IDCAMPO',\r\n                        'NOTES',\r\n                        'MOTIVAZIONE'\r\n                        ];\r\n        let arNumber = ['TIPOCHIUSURA','ATTIVITACHIUSURA'];\r\n        let arBoolean = [];\r\n        let arDate = ['DATADAL','DATAAL'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n\r\n        objDescriptor.className = 'DataChiusura';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'DATACHIUSURA';\r\n        objDescriptor.describeField = 'MOTIVAZIONE';\r\n\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        objDescriptor.setRelation('IDCAMPO','Campo');\r\n\r\n\r\n        return objDescriptor;\r\n    }    \r\n\r\n    constructor(onlyInstance: boolean = false){\r\n        super(onlyInstance);\r\n    }\r\n\r\n}","import { Descriptor, TypeDefinition } from \"../library/models/descriptor.model\";\r\nimport { IDDocument } from \"../library/models/iddocument.model\";\r\n\r\nexport class CorsoValutazioneLivello extends IDDocument {\r\n    IDCORSOVALUTAZIONE:     string;\r\n    IDCORSO:                string;\r\n    IDUTENTE:               string;\r\n    NOMINATIVO:             string;\r\n    IDSPORT:                string;\r\n    IDLIVELLOENTRATA:       string;\r\n    IDLIVELLOFINALE:        string;\r\n    \r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDCORSO',\r\n            'IDCORSOVALUTAZIONE',\r\n            'IDUTENTE',\r\n            'NOMINATIVO',\r\n            'IDSPORT',\r\n            'IDLIVELLOENTRATA',\r\n            'IDLIVELLOFINALE'\r\n        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'CorsoValutazioneLivello';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CORSOVALUTAZIONELIVELLO';\r\n        \r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDCORSO', 'Corso');\r\n        objDescriptor.setRelation('IDUTENTE', 'Utente');\r\n        objDescriptor.setRelation('IDSPORT', 'Sport');\r\n        objDescriptor.setRelation('IDLIVELLOENTRATA', 'Livello');\r\n        objDescriptor.setRelation('IDLIVELLOFINALE', 'Livello');\r\n       \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n    constructor(onlyInstance?: boolean){\r\n        super(onlyInstance);\r\n    }    \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { PageType } from './valuelist.model';\r\n\r\nexport class AreaLink extends IDDocument {\r\n    IDAREAOPERATIVA: string;\r\n    TIPOURL: PageType;\r\n    REFERURL: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDAREAOPERATIVA',\r\n                    'REFERURL'];\r\n    let arNumber = ['TIPOURL'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'AreaLink';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'AREALINK';\r\n    objDescriptor.describeField = 'REFERURL';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    //Aggiungo le relazioni\r\n    objDescriptor.setRelation('IDAREAOPERATIVA', 'Area');\r\n    \r\n    return objDescriptor;\r\n    }\r\n\r\n    /**\r\n     * Sovrascrive il metodo IDDOcument, lo richiama e sistema le collection\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setOriginal();\r\n    }\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { AmbitoNews } from './valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class NewsEvento extends IDDocument {\r\n    AMBITO: AmbitoNews;\r\n    TITLE: string;\r\n    SUBTITLE: string;\r\n    SHORTTEXT: string;\r\n    PUBBLICATADAL: Date;\r\n    LINKNEWS: string;\r\n    LINKIMAGE: string;\r\n    IDLOCATION: string;\r\n    IDAREAOPERATIVA: string;\r\n    _NAMEICON: string;\r\n    _COLOR: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n\r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n\r\n            this._NAMEICON = 'newspaper-outline';\r\n            this._COLOR = 'secondary';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Imposta le proprietà della classe\r\n     * @param data JSON Data\r\n     */\r\n    setJSONProperty(data: any) {        \r\n        super.setJSONProperty(data);\r\n    } \r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['TITLE',\r\n                        'SUBTITLE',\r\n                        'SHORTTEXT',\r\n                        'LINKNEWS',\r\n                        'LINKIMAGE',\r\n                        'IDLOCATION',\r\n                        'IDAREAOPERATIVA'];\r\n        let arNumber = ['AMBITO'];\r\n        let arNumberDecimal = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =['PUBBLICATADAL'];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'NewsEvento';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'NEWSEVENTO';\r\n        objDescriptor.describeField = 'TITLE';\r\n\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        \r\n        return objDescriptor;\r\n    } \r\n    \r\n    /**\r\n     * Torna un oggetto News per indicare che non ci sono News\r\n     */\r\n    static getNoNews(): NewsEvento {\r\n        let objNews = new NewsEvento();\r\n\r\n        objNews.TITLE = 'Nessun evento in programma';\r\n        objNews.SUBTITLE = 'Torna a trovarci per scoprire le prossime novità';\r\n        objNews.do_loaded = false;\r\n        objNews.do_deleted = false;\r\n\r\n        return objNews;\r\n    }\r\n}","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\nexport class ArticoloTaglieMisura extends IDDocument{\r\n    IDARTICOLO: string;\r\n    DESCRIZIONE: string;\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDARTICOLO',\r\n            'DESCRIZIONE',\r\n        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'ArticoloTaglieMisura';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'ARTICOLOTAGLIEMISURA';\r\n        objDescriptor.describeField = 'DESCRIZIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n    \r\n        objDescriptor.setRelation('IDARTICOLO','Articolo');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { PrenotazionePianificazione } from './prenotazionepianificazione.model';\r\nimport { PaymentChannel } from './valuelist.model';\r\n\r\nexport class Prenotazione extends IDDocument {\r\n    DATA: Date; \r\n    IDAREAOPERATIVA: string;\r\n    IDUTENTE: string;\r\n    NOMINATIVO: string;\r\n    MOBILENUMBER: string;\r\n    IDTIPOPAGAMENTO: string;\r\n    IMPORTO: number;\r\n    INCASSATO: number;\r\n    RESIDUO: number;\r\n    IMPOSTA: number;\r\n    TOTALE: number;\r\n    MSGINVALID: string;\r\n    PRENOTAZIONEPIANIFICAZIONE: PrenotazionePianificazione[];\r\n    IDTRANSACTION: string;\r\n    IDORDER: string;\r\n    CHANNELPAYMENT: PaymentChannel;\r\n\r\n    ISVALID: boolean; //Parametro indica che tutti i conteggi sono effettuati, \r\n                     //si puo' procedere al pagamento finale\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n\r\n            this.IMPORTO = 0;\r\n            this.INCASSATO = 0;\r\n            this.RESIDUO = 0;\r\n            this.TOTALE = 0;\r\n            this.IMPOSTA = 0;\r\n            this.ISVALID = false;\r\n            this.MSGINVALID = '';\r\n            this.IDTRANSACTION = '';\r\n            this.IDORDER = '';\r\n        }\r\n\r\n\r\n        this.PRENOTAZIONEPIANIFICAZIONE = [];\r\n        \r\n    }\r\n\r\n    //#region INIZIALIZZAZIONE NUOVA PRENOTAZIONE\r\n\r\n    /**\r\n     * Inizializza per una nuova prenotazione\r\n     */\r\n    initNewPrenotazione(idArea: string) {\r\n        \r\n        //Imposta i parametri nell'oggetto\r\n        this.IDAREAOPERATIVA = idArea;\r\n        this.DATA = new Date();\r\n    }\r\n\r\n    /**\r\n     * UTILIZZATA\r\n     * Imposta come oggetto di Pianificazione, quello passato\r\n     * @param docPianificazione Nuovo oggetto di pianificazione\r\n     */\r\n    setPianificazioneSingola(docPianificazione) {\r\n        if (docPianificazione) {\r\n            if (this.PRENOTAZIONEPIANIFICAZIONE.length !== 0) {\r\n                this.PRENOTAZIONEPIANIFICAZIONE[0] = docPianificazione;\r\n            }\r\n            else {\r\n                this.PRENOTAZIONEPIANIFICAZIONE.push(docPianificazione);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Impostazione Area\r\n     * @param idArea Area da applicare\r\n     */\r\n    SetArea(idArea: string) {\r\n        \r\n        this.IDAREAOPERATIVA = idArea;\r\n\r\n        if (this.PRENOTAZIONEPIANIFICAZIONE) {\r\n            this.PRENOTAZIONEPIANIFICAZIONE.forEach(element => {\r\n                element.IDAREAOPERATIVA = idArea;\r\n            }); \r\n        }\r\n        \r\n    }\r\n\r\n\r\n     \r\n    /**\r\n     * Impostazione Utente \r\n     * @param idUtente Utente che prenota\r\n     */\r\n    setUtente(idUtente: string, _nominativo: string) {\r\n        this.IDUTENTE = idUtente;\r\n        if (_nominativo) {\r\n            this.NOMINATIVO = _nominativo;\r\n        }\r\n        else {\r\n            this.NOMINATIVO = '';\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * ritorna il docPianificazione con id specificato; se id non è specificato, ritorna il primo documento di pianificazione presente\r\n     */\r\n    getPianificazione(idPianificazione?: string) {\r\n        let docPianificazione: PrenotazionePianificazione;\r\n        let index: number;\r\n\r\n        if (this.PRENOTAZIONEPIANIFICAZIONE.length !== 0) {\r\n\r\n            if(idPianificazione && idPianificazione.length > 0){\r\n                index = this.getIndexPianificazione(idPianificazione);\r\n            }   \r\n            else{\r\n                index = 0;\r\n            }\r\n            docPianificazione = this.PRENOTAZIONEPIANIFICAZIONE[index];\r\n        }\r\n        return docPianificazione;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n\r\n        //Imposto che il documento è originale\r\n        this.setOriginal();\r\n    }\r\n\r\n    setCollection(data: any) {\r\n\r\n        this.PRENOTAZIONEPIANIFICAZIONE = [];\r\n\r\n        if (data.PRENOTAZIONEPIANIFICAZIONE) {\r\n            this.setCollectionPianificazioni(data);\r\n        }\r\n    }\r\n\r\n    setCollectionPianificazioni(data: any) {\r\n        data.PRENOTAZIONEPIANIFICAZIONE.forEach(element => {\r\n            let newPianificazione = new PrenotazionePianificazione();\r\n\r\n            newPianificazione.setJSONProperty(element);\r\n            this.PRENOTAZIONEPIANIFICAZIONE.push(newPianificazione);\r\n            \r\n        })\r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Prenotazione\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDAREAOPERATIVA',\r\n                        'IDUTENTE',\r\n                        'NOMINATIVO',\r\n                        'MOBILENUMBER',\r\n                        'IDTIPOPAGAMENTO',\r\n                        'MSGINVALID',\r\n                        'IDTRANSACTION',\r\n                        'IDORDER'];\r\n        let arNumber = ['CHANNELPAYMENT'];\r\n        let arNumberDecimal = ['IMPORTO','INCASSATO','RESIDUO','IMPOSTA','TOTALE'];\r\n        let arBoolean = ['ISVALID'];\r\n        let arDate = ['DATA'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'Prenotazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'PRENOTAZIONE';\r\n        objDescriptor.describeField = 'NOMINATIVO';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDUTENTE','Utente');\r\n        \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Converte il JSON ricevuto e ritorna una Prenotazione\r\n     * @param JsonData Dati JSON ricevuti\r\n     */\r\n    static getPrenotazioneFromJson(JsonData: string): Prenotazione {\r\n        let newPrenotazione = new Prenotazione();\r\n        newPrenotazione.setJSONProperty(JsonData);\r\n  \r\n        return newPrenotazione;\r\n      }\r\n\r\n      /**\r\n       * Ritorna l'indice dell'oggetto pianificazione con id specificato\r\n       * @param id l'id dell'oggetto pianificazione\r\n       */\r\n      getIndexPianificazione(id: string):number\r\n      {\r\n        for (let index = 0; index < this.PRENOTAZIONEPIANIFICAZIONE.length; index++) {\r\n            const element = this.PRENOTAZIONEPIANIFICAZIONE[index];\r\n            if (element.ID==id)\r\n            {\r\n                return index;\r\n            }  \r\n        }\r\n      }\r\n\r\n      /**\r\n       * Ritorna il valore che è necessario pagare\r\n       */\r\n      get amountPayment(): number {\r\n        let myAmount: number = 0;\r\n        if(this.INCASSATO < this.IMPORTO) {\r\n            myAmount = this.IMPORTO - this.INCASSATO;\r\n        }\r\n\r\n        return myAmount;\r\n      }\r\n\r\n\r\n      /**\r\n       * Stato del pagamento in formato testo\r\n       * @param showForPay: se TRUE verrà restituito un messaggio per effettuare il pagamento\r\n       */\r\n      getCaptionStatePayment(showForPay: boolean = false): string {\r\n        let caption = '';\r\n\r\n        if (this.amountPayment != 0) {\r\n            if (showForPay) {\r\n                caption = 'Paga Ora';\r\n            }\r\n            else {\r\n                caption = 'Prenotazione da pagare';\r\n            }\r\n        }\r\n        else {\r\n\r\n            caption = 'Prenotazione pagata';\r\n        }\r\n        return caption;\r\n      }\r\n\r\n\r\n      \r\n    \r\n}","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t\"dUtr\",\n\t\t\"common\",\n\t\t0\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t\"Q8AI\",\n\t\t\"common\",\n\t\t1\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t\"hgI1\",\n\t\t\"common\",\n\t\t2\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t\"CfoV\",\n\t\t\"common\",\n\t\t3\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t\"Nt02\",\n\t\t\"common\",\n\t\t4\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t\"Q2Bp\",\n\t\t5\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t\"0Pbj\",\n\t\t\"common\",\n\t\t6\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t\"ydQj\",\n\t\t\"common\",\n\t\t7\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t\"4fMi\",\n\t\t\"common\",\n\t\t8\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t\"czK9\",\n\t\t\"common\",\n\t\t9\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t\"/CAe\",\n\t\t10\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t\"WgF3\",\n\t\t\"common\",\n\t\t11\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t\"uQcF\",\n\t\t\"common\",\n\t\t12\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t\"wHD8\",\n\t\t13\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t\"2lz6\",\n\t\t14\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t\"ercB\",\n\t\t\"common\",\n\t\t15\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t\"MGMP\",\n\t\t\"common\",\n\t\t16\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t\"9bur\",\n\t\t\"common\",\n\t\t17\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t\"cABk\",\n\t\t\"common\",\n\t\t18\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t\"kyFE\",\n\t\t\"common\",\n\t\t19\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t\"TvZU\",\n\t\t\"common\",\n\t\t20\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t\"vnES\",\n\t\t\"common\",\n\t\t21\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t\"qCuA\",\n\t\t\"common\",\n\t\t22\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t\"0tOe\",\n\t\t\"common\",\n\t\t23\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t\"h11V\",\n\t\t\"common\",\n\t\t24\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t\"XGij\",\n\t\t\"common\",\n\t\t25\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t\"nYbb\",\n\t\t\"common\",\n\t\t26\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t\"smMY\",\n\t\t\"common\",\n\t\t27\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t\"STjf\",\n\t\t28\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t\"k5eQ\",\n\t\t\"common\",\n\t\t29\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t\"OR5t\",\n\t\t\"common\",\n\t\t30\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t\"fSgp\",\n\t\t\"common\",\n\t\t31\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t\"lfGF\",\n\t\t\"common\",\n\t\t32\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t\"5xYT\",\n\t\t33\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t\"nI0H\",\n\t\t\"common\",\n\t\t34\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t\"NAQR\",\n\t\t35\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t\"knkW\",\n\t\t\"common\",\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t\"TpdJ\",\n\t\t\"common\",\n\t\t37\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t\"ISmu\",\n\t\t\"common\",\n\t\t38\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t\"U7LX\",\n\t\t\"common\",\n\t\t39\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t\"L3sA\",\n\t\t\"common\",\n\t\t40\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t\"IUOf\",\n\t\t\"common\",\n\t\t41\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t\"8Mb5\",\n\t\t42\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"kLfG\";\nmodule.exports = webpackAsyncContext;","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\nexport class UnitaMisura extends IDDocument{\r\n    CODICE: string;\r\n    DESCR: string;\r\n    PREDEFINITA: boolean;\r\n    ICONPREF: string;\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['CODICE', 'DESCR', 'PREDEFINITA', 'ICONPREF'];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'UnitaMisura';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'UNITAMISURA';\r\n        objDescriptor.describeField = 'DESCR';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n                            \r\n        return objDescriptor;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, of, from } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { ApicallService } from './apicall.service';\r\n\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { UtentePrenotazione } from '../models/utenteprenotazione.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtenteprenotazioneService {\r\n\r\n  private _listUtentePrenotazione = new BehaviorSubject<UtentePrenotazione[]>([]);\r\n\r\n  //Ritorna la Lista delle prenotazioni di un utente\r\n  get listUtentePrenotazione() {\r\n    return this._listUtentePrenotazione.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n  /**\r\n   * Effettua la richiesta dell'elenco Prenotazioni di un utente\r\n   * @param config Dati configurazione\r\n   * @param idUtente Utente che effettua richiesta\r\n   * @param maxRecord Max Record da recuperare\r\n   */\r\n  request(config: StartConfiguration, idUtente: string, maxRecord: number = 0) {\r\n    return new Promise((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      myHeaders = myHeaders.append('order-by','desc');\r\n      \r\n\r\n      const doObject = 'UTENTEPRENOTAZIONE';\r\n      const filterDateTime = this.getFilterDateTime();\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto l'area richiesta\r\n      let myParams = new HttpParams().set('IDUTENTE',idUtente);\r\n      myParams = myParams.append('DATAORAINIZIO',filterDateTime);\r\n      myParams = myParams.append('$top', (maxRecord + '') );\r\n  \r\n      //Elimino gli attuali\r\n      this._listUtentePrenotazione.next([]);\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n            \r\n              let arReturn = [];\r\n              if (data.UTENTEPRENOTAZIONE) {\r\n                arReturn = data.UTENTEPRENOTAZIONE;\r\n              }\r\n  \r\n              return arReturn;\r\n            \r\n        }))\r\n        .subscribe (resultData => {\r\n  \r\n            resultData.forEach(element => {\r\n              let newUtentePrenotazione = new UtentePrenotazione();\r\n              newUtentePrenotazione.setJSONProperty(element);\r\n              this.addUtentePrenotazione(newUtentePrenotazione);\r\n            });\r\n\r\n            //Al termine ritorno la nuova lista\r\n            resolve(this._listUtentePrenotazione);\r\n\r\n        }, error=>{\r\n          reject (error);\r\n        })\r\n      \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Aggiunge all'elenco una prenotazione dell'utente\r\n   * @param objUtentePrenotazione Prenotazione da aggiungere\r\n   */\r\n  addUtentePrenotazione(objUtentePrenotazione: UtentePrenotazione) {\r\n    this.listUtentePrenotazione\r\n      .pipe(take(1))\r\n      .subscribe (collUtentePrenotazione => {\r\n        let findElement = collUtentePrenotazione.find(element => {\r\n          return element.ID == objUtentePrenotazione.ID\r\n        });\r\n\r\n        if (!findElement) {\r\n          this._listUtentePrenotazione.next( collUtentePrenotazione.concat(objUtentePrenotazione));\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n    /**\r\n   * Crea il Parametro Filtro per il campo\r\n   */\r\n  getFilterDateTime(): string {\r\n    let adesso = new Date();\r\n    let newDoc = new IDDocument();\r\n    let startDate = new Date(adesso.getFullYear(),0,1);\r\n    let strAdesso = '';\r\n    if (adesso.getMonth() < 6) {\r\n      startDate = new Date((adesso.getFullYear()) - 1, 5, 1);\r\n    }\r\n\r\n    strAdesso = newDoc.formatDateTimeISO(startDate);\r\n\r\n    strAdesso = '>' + strAdesso;\r\n\r\n    return strAdesso;\r\n  }\r\n}\r\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { FileType } from './valuelist.model';\r\n\r\nexport class CorsoAllegato extends IDDocument{\r\n    IDCORSO: string;\r\n    IDTIPODOCUMENTAZIONE: string;\r\n    DESCRIZIONE: string;\r\n    FILENAMEESTENSIONE: string;\r\n    FILETYPE: FileType;\r\n    \r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDCORSO',\r\n            'IDTIPODOCUMENTAZIONE',\r\n            'DESCRIZIONE',\r\n            'FILENAMEESTENSIONE',\r\n            'FILETYPE',\r\n        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'CorsoAllegato';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CORSOALLEGATO';\r\n        objDescriptor.describeField = 'DESCRIZIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        \r\n    \r\n    \r\n        objDescriptor.setRelation('IDTIPODOCUMENTAZIONE','TipoDocumentazione');\r\n        objDescriptor.setRelation('IDCORSO','Corso');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n    get fileTypeIconName(){\r\n        let iconName = '';\r\n\r\n        switch (this.FILETYPE){\r\n            case FileType.audio:\r\n                iconName = 'musical-notes-outline';\r\n            break;\r\n            case FileType.excel:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.immagini:\r\n                iconName = 'image-outline';\r\n            break;\r\n            case FileType.indefinito:\r\n                iconName = 'document-outline';\r\n            break;\r\n            case FileType.pdf:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.powerpoint:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.text:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.video:\r\n                iconName = 'film-outline';\r\n            break;\r\n            case FileType.word:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.zip:\r\n                iconName = 'library-outline';\r\n            break;\r\n\r\n        }\r\n\r\n        return iconName\r\n    }\r\n\r\n\r\n}","import { isDate } from 'moment';\r\nimport { TypeDefinition } from './descriptor.model';\r\nimport { IDDocument, ParamsExport } from './iddocument.model';\r\nimport { MyDateTime } from './mydatetime.model';\r\n\r\nexport class IDLibrary {\r\n\r\n    /**\r\n     * Converte e formatta un valore in stringa\r\n     * Usato per scriverlo nei parametri di chiamata\r\n     * @param tipo Tipo del dato\r\n     * @param value Valore\r\n     * @param onlyPropertyModified In caso di Valore documento, esporta solo i modificati o tutto\r\n     */\r\n    static exportJSONValue(value: any, onlyPropertyModified = false, onlyDocModified= false): string {\r\n        let tipo:TypeDefinition;\r\n        let strValue = '';\r\n\r\n        \r\n\r\n        tipo = this.getValueType(value);\r\n\r\n        switch (tipo) {\r\n          case TypeDefinition.char:\r\n              strValue = `\\\"${value}\\\"`;\r\n          break;\r\n        \r\n          case TypeDefinition.date:\r\n              strValue = MyDateTime.formatDateISO(value);\r\n          break;\r\n  \r\n          case TypeDefinition.dateTime:\r\n              strValue = MyDateTime.formatDateTimeISO(value);\r\n          break;\r\n  \r\n          case TypeDefinition.time:\r\n              strValue = MyDateTime.formatTime(value);\r\n          break;\r\n  \r\n          case TypeDefinition.boolean:\r\n              if (value) {\r\n                strValue = '-1'\r\n              }\r\n              else {\r\n                strValue = '0';\r\n              }\r\n          break;\r\n          \r\n          case TypeDefinition.number:\r\n          case TypeDefinition.numberDecimal:\r\n              strValue = value + '';\r\n            break;\r\n        \r\n          case TypeDefinition.collection:\r\n              let arValues: [];\r\n              arValues = value;\r\n\r\n              strValue = '[';\r\n              for (let index = 0; index < arValues.length; index++) {\r\n                  const element = arValues[index];\r\n                  const elStr = IDLibrary.exportJSONValue(element, onlyPropertyModified, onlyDocModified);\r\n\r\n                  if (elStr && elStr.trim().length !== 0) {\r\n                      //Se la stringa è diversa da 0 aggiungo la virgola\r\n                      if (strValue.length != 0) {\r\n                          strValue += ', ';\r\n                      }\r\n                      strValue += elStr;\r\n                  }\r\n              }\r\n              strValue += ']';\r\n            break;\r\n\r\n          case TypeDefinition.document:\r\n              let paramExport: ParamsExport = new ParamsExport;\r\n              paramExport.clearDOProperty = true;\r\n              paramExport.clearPKProperty = false;\r\n              paramExport.clearPrivateProperty = true;\r\n              paramExport.onlyPropertyModified = onlyPropertyModified;\r\n              paramExport.onlyDocModified = onlyDocModified;\r\n              paramExport.numLivelli = 999;\r\n\r\n              let document:IDDocument = value;\r\n              strValue = document.exportToJSON(paramExport);\r\n              break;\r\n        case TypeDefinition.undefined:\r\n            strValue = 'null';\r\n            break;\r\n\r\n        default:\r\n            strValue = 'null';\r\n            break;\r\n        }\r\n  \r\n        return strValue;\r\n      }\r\n\r\n    /**\r\n     * Ritorna il tipo di un valore passato\r\n     * @param value Valore da controllare\r\n     */\r\n    static getValueType(value: any): TypeDefinition {\r\n        let typeVar: TypeDefinition;\r\n\r\n        switch (typeof value) {\r\n          case \"undefined\":\r\n            typeVar = TypeDefinition.undefined;\r\n            break;\r\n          case \"number\":\r\n            typeVar = TypeDefinition.number;\r\n            break;\r\n\r\n          case \"string\":\r\n            typeVar = TypeDefinition.char;\r\n            break;\r\n\r\n          case \"boolean\":\r\n            typeVar = TypeDefinition.boolean;\r\n            break;\r\n\r\n          case \"bigint\":\r\n            typeVar = TypeDefinition.number;\r\n            break;\r\n\r\n          case \"object\":\r\n            try {\r\n              \r\n              if (isDate(value)) {\r\n                typeVar = TypeDefinition.dateTime\r\n              }\r\n              else if (Array.isArray(value)) {\r\n                typeVar = TypeDefinition.collection;\r\n              }\r\n              else {\r\n                typeVar = TypeDefinition.document;\r\n              }\r\n            } \r\n            catch (error) {\r\n                typeVar = TypeDefinition.undefined;\r\n            }\r\n\r\n            break;\r\n        \r\n          default:\r\n            typeVar = TypeDefinition.undefined;\r\n            break;\r\n        }\r\n    \r\n        return typeVar;\r\n      }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { RequestPincodeUse } from './valuelist.model';\r\n\r\n//Documento inviato in POST nella fase di richiesta Codici\r\nexport class AccountRequestCode extends IDDocument {\r\n    \r\n    USE: RequestPincodeUse;\r\n    IDAREA: string;\r\n    IDREFER: string;\r\n    REQUESTEMAILCODE: boolean;\r\n    EMAIL: string;\r\n    REQUESTSMSCODE: boolean;\r\n    TELEPHONE: string;\r\n    TOKEN: string;\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        this.REQUESTEMAILCODE = false;\r\n        this.REQUESTSMSCODE = false;\r\n        \r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDAREA',\r\n                        'IDREFER',\r\n                        'EMAIL',\r\n                        'TELEPHONE',\r\n                        'TOKEN'\r\n                        ];\r\n        let arNumber = ['USE'];\r\n        let arBoolean = ['REQUESTEMAILCODE', 'REQUESTSMSCODE'];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'AccountRequestCode';\r\n        objDescriptor.doRemote = false;\r\n        objDescriptor.classWebApiName = '';\r\n        objDescriptor.describeField  = '';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        return objDescriptor;\r\n    }\r\n    \r\n}\r\n\r\n//Documento inviato in POST nella fase di Verifica codici\r\nexport class AccountVerifyCode extends IDDocument {\r\n    IDAREA: string;\r\n    IDREFER: string;\r\n    EMAILPINCODE: string;\r\n    SMSPINCODE: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.EMAILPINCODE = '';\r\n        this.SMSPINCODE = '';\r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDAREA',\r\n                        'IDREFER',\r\n                        'EMAILPINCODE',\r\n                        'SMSPINCODE'\r\n                        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'AccountVerifyCode';\r\n        objDescriptor.doRemote = false;\r\n        objDescriptor.classWebApiName = '';\r\n        objDescriptor.describeField  = '';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\n//Risposta ottenuta dal server \r\nexport class AccountOperationResponse {\r\n    idRefer: string;\r\n    descrRefer:string;\r\n    result: boolean;\r\n    message: string;\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\n\r\nexport class CampoSport extends IDDocument {\r\n    IDCAMPO: string;\r\n    IDSPORT: string;\r\n    _DESCRSPORT: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n            this._DESCRSPORT = '';\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDCAMPO',\r\n                        'IDSPORT',\r\n                        '_DESCRSPORT'];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        let arCollection = [];\r\n\r\n        objDescriptor.className = 'CampoSport';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CAMPOSPORT';\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n        \r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDCAMPO','Campo');\r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class CorsoProgramma extends IDDocument {\r\n    IDCORSO: string;\r\n    TESTOHTML: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDCORSO',\r\n                        'TESTOHTML'\r\n                        ];\r\n        let arNumber = [];\r\n        let arDecimal = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        let arCollection = [];\r\n\r\n        objDescriptor.className = 'CorsoProgramma';\r\n        objDescriptor.classWebApiName = 'CORSOPROGRAMMA';\r\n        objDescriptor.doRemote = true;\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n        objDescriptor.setRelation('IDCORSO','Corso');\r\n        \r\n        return objDescriptor;\r\n    }\r\n}","export class PostResponse {\r\n    //Risposta ottenuta dal server \r\n    private _document: string;\r\n    result: boolean;\r\n    message: string; \r\n    code: string; //Eventuale codice ritornato dal server\r\n\r\n    public set document(value:string) {\r\n        this._document = value;\r\n    }\r\n\r\n    public get document(): string {\r\n        return this._document;\r\n    }\r\n\r\n\r\n    setFromResponse(response){\r\n        if(response){\r\n            this.result = response['result'];\r\n            this.message = response['message'];\r\n            this.code = response['code'];\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getDocument(): any {\r\n        let doc: any;\r\n\r\n        if (this._document && this._document.length != 0) {\r\n            doc = JSON.parse(this._document);\r\n        }\r\n\r\n        return doc;\r\n    }\r\n    \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Location } from '../models/location.model';\r\nimport { TipoArea, PageType, SettorePagamentiAttivita } from '../models/valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { AreaLink } from './arealink.model';\r\nimport { AreaPaymentSetting } from './areapaymentsetting.model';\r\nimport { GeolocationPosition } from '@capacitor/core';\r\n\r\n\r\nexport class Area extends IDDocument {\r\n    IDGRUPPOSPORTIVO: string;\r\n    TIPO: TipoArea;\r\n    DENOMINAZIONE: string;\r\n    INDIRIZZO: string;\r\n    CAP: string;\r\n    COMUNE: string;\r\n    PROVINCIA: string;\r\n    ISOSTATO: string;\r\n    CONDVENDITACORSI: string;\r\n    CONDVENDPRENOTAZIONI: string;\r\n    LOCATIONS: Location[];\r\n    AREALINKS: AreaLink[];\r\n    AREAPAYMENTSETTINGS: AreaPaymentSetting[];\r\n    APPSHOW: boolean;\r\n    APPISCRIZIONI: boolean;\r\n    APPPRENOTAZIONI: boolean;\r\n    APPGAPOREPRESENZE: number; //Indica per quanto tempo (ore) dal termine di una data di corso, il trainer può inserire/aggiornare le presenze\r\n    LATITUDINE: number;\r\n    LONGITUDINE: number;\r\n    constructor(onlyInstance?:boolean) {\r\n      \r\n      super(onlyInstance);\r\n      this.AREALINKS=[];\r\n      this.LOCATIONS = [];\r\n      this.AREAPAYMENTSETTINGS=[];\r\n      \r\n      //0 indica che è sempre possibile aggiornare le presenze (dal server non arriva nulla)\r\n      if (!onlyInstance){\r\n\r\n        this.APPGAPOREPRESENZE = 0;\r\n      }\r\n\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n      let objDescriptor = new Descriptor();\r\n      let arString = ['IDGRUPPOSPORTIVO',\r\n                      'DENOMINAZIONE',\r\n                      'INDIRIZZO',\r\n                      'CAP',\r\n                      'COMUNE',\r\n                      'PROVINCIA',\r\n                      'ISOSTATO',\r\n                      'CONDVENDITACORSI',\r\n                      'CONDVENDPRENOTAZIONI'];\r\n      let arNumber = ['TIPOAREA','APPGAPOREPRESENZE','LATITUDINE','LONGITUDINE'];\r\n      let arBoolean = ['APPSHOW','APPISCRIZIONI','APPPRENOTAZIONI'];\r\n      let arDate = [];\r\n      let arDateTime =[];\r\n      let arTime = [];\r\n      let arCollection = ['LOCATIONS','AREALINKS','AREAPAYMENTSETTINGS'];\r\n\r\n      objDescriptor.className = 'Area';\r\n      objDescriptor.doRemote = true;\r\n      objDescriptor.classWebApiName = 'AREAOPERATIVA';\r\n      objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n      objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n      objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n      objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n      objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n      objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n      objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n      objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n      \r\n\r\n\r\n      return objDescriptor;\r\n  }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Sovrascrive il metodo IDDOcument, lo richiama e sistema le collection\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n      super.setJSONProperty(data);\r\n      this.setCollection(data);\r\n\r\n      this.setOriginal();\r\n    }\r\n\r\n    /**\r\n     * Reimposta l'Array delle location creando veri oggetti di tipo Location\r\n     * @param resultData Json Information\r\n     */\r\n    setCollection(data: any) {\r\n      if (data) {\r\n\r\n        if (data.LOCATION) {\r\n          data.LOCATION.forEach(element => {\r\n            let objLocation = this.findLocationByID(element.ID);\r\n            if (!objLocation) {\r\n              //Nuova Location\r\n              objLocation = new Location();\r\n              //Aggiungo all'Array\r\n              this.LOCATIONS.push(objLocation);\r\n            }\r\n\r\n            objLocation.setJSONProperty(element);\r\n          });\r\n        }\r\n\r\n        if (data.AREALINK) {\r\n          data.AREALINK.forEach(element => {\r\n            let objAreaLink = this.findAreaLinkByID(element.ID);\r\n\r\n            if (!objAreaLink) {\r\n              //Nuova Area Link\r\n              objAreaLink = new AreaLink();\r\n              //Aggiungo all'Array\r\n              this.AREALINKS.push(objAreaLink);\r\n            }\r\n\r\n            objAreaLink.setJSONProperty(element);\r\n          });\r\n        }\r\n        \r\n        //se nell'oggetto any che mi arriva è presente il campo AREAPAYMENTSETTING[]\r\n        if (data.AREAPAYMENTSETTING){\r\n          //ne scorro gli elementi\r\n          data.AREAPAYMENTSETTING.forEach(element => {\r\n            //cerco se tra gli elementi che ho in memoria è già prsente l'elemento che mi è arrivato\r\n            let objPaymentSetting= this.findPaymentSettingById(element.ID)\r\n            //se non è presente\r\n            if (!objPaymentSetting){\r\n              //ne creo uno nuovo\r\n              objPaymentSetting= new AreaPaymentSetting();\r\n              //e lo inserisco nell'array\r\n              this.AREAPAYMENTSETTINGS.push(objPaymentSetting);\r\n            }\r\n            //ora valorizzo il nuovo oggetto (che ci fosse già o no è indifferente) con le proprietà dell'oggetto che mi è arrivato\r\n            objPaymentSetting.setJSONProperty(element);\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Cerca nell'array Location e torna la location se trovata\r\n     * @param idLocation Location cercata\r\n     */\r\n    findLocationByID(idLocation: string) {\r\n      return this.LOCATIONS.find(element => {\r\n        return element.ID == idLocation;\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca nella colletion Area Link e ritorna il Link\r\n     * @param idLink Link desiderato\r\n     */\r\n    findAreaLinkByID(idLink: string) {\r\n      return this.AREALINKS.find(element => {\r\n        return element.ID == idLink;\r\n      });\r\n    }\r\n\r\n     /**\r\n     * Cerca nella colletion areapaymentsettings  e ritorna l'elemeto desiderato\r\n     * @param id id dell'elemento eesiderato\r\n     */\r\n    findPaymentSettingById(id: string) {\r\n      return this.AREAPAYMENTSETTINGS.find(element => {\r\n        return element.ID == id;\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca e ritorna un link con il tipo pagina passato\r\n     * @param tipo Tipo pagina richiesto\r\n     */\r\n    findAreaLinkByPageType(tipo: PageType) {\r\n      return this.AREALINKS.find(element => {\r\n        return element.TIPOURL == tipo;\r\n      });\r\n    }\r\n\r\n\r\n    distanceFrom(position: GeolocationPosition) {\r\n      if (this.LATITUDINE && this.LONGITUDINE){\r\n        let lat = position.coords.latitude\r\n        let lon = position.coords.longitude\r\n        var radlat1 = Math.PI * this.LATITUDINE/180\r\n        var radlat2 = Math.PI * lat/180\r\n        var theta = this.LONGITUDINE-lon\r\n        var radtheta = Math.PI * theta/180\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n            dist = 1;\r\n        }\r\n        dist = Math.acos(dist)\r\n        dist = dist * 180/Math.PI\r\n        dist = dist * 60 * 1.1515\r\n        dist = dist * 1.609344\r\n        return dist\r\n      }\r\n  }\r\n\r\n\r\n  /**\r\n   * Dato un settore di pagamento, torna i pagamenti che supportano il settore\r\n   * @param Settore Settore dove si richiedono i pagamenti\r\n   */\r\n  getPaymentFor(settore: SettorePagamentiAttivita):AreaPaymentSetting[] {\r\n    let arSetting: AreaPaymentSetting[] = [];\r\n\r\n    \r\n\r\n    if (this.AREAPAYMENTSETTINGS && this.AREAPAYMENTSETTINGS.length != 0) {\r\n\r\n      //Ciclo sui modi di pagamento\r\n      for (let index = 0; index < this.AREAPAYMENTSETTINGS.length; index++) {\r\n\r\n          const elPaymentSetting = this.AREAPAYMENTSETTINGS[index];\r\n\r\n          /* Se il pagamento è adatto al settore */\r\n          if (elPaymentSetting && elPaymentSetting.isFor(settore)) {\r\n            arSetting.push(elPaymentSetting);\r\n          }\r\n          \r\n      }\r\n    }    \r\n    \r\n    return arSetting;\r\n  }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { RequestDecode, RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { CorsoAllegato } from '../models/corsoallegato.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CorsoallegatoService {\r\n\r\n  constructor(\r\n    private docStructureService: DocstructureService\r\n  ) { }\r\n\r\n\r\n  requestByIdCorso(idCorso: string):Promise<CorsoAllegato[]>{\r\n    return new Promise((resolve, reject) => {\r\n\r\n    //filtro per la richiesta\r\n    let myFilter = new CorsoAllegato(true);\r\n    myFilter.IDCORSO = idCorso;\r\n\r\n     //Parametri per la richiesta\r\n     let myParams = new RequestParams();\r\n     myParams.decode = new RequestDecode();\r\n     myParams.decode.active = true;\r\n\r\n     this.docStructureService.requestNew(myFilter, myParams)\r\n     .then((listAllegati: CorsoAllegato[]) => {\r\n       resolve(listAllegati);\r\n     })\r\n\r\n     .catch(error => {\r\n       reject(error);\r\n     })\r\n\r\n\r\n\r\n    })\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  /* ORIGINALI*/\r\n  //{ path: '', redirectTo: 'home', pathMatch: 'full' },\r\n  //{ path: 'home', loadChildren: () => import('./pages/home/home.module').then( m => m.HomePageModule)},\r\n  \r\n  // Ho provato a cambiare e mandare home al path vuoto (che carica la pagina Home)\r\n  { path: 'home', redirectTo: '', pathMatch: 'full' },\r\n  { path: '', loadChildren: () => import('./pages/home/home.module').then( m => m.HomePageModule)},\r\n  {\r\n    path: 'historylist',\r\n    children: [\r\n      {\r\n        path: '',\r\n        loadChildren: () => import('./pages/history/historylist/historylist.module').then( m => m.HistorylistPageModule)\r\n      },\r\n      {\r\n        path: 'booking/:historyId',\r\n        loadChildren: () => import('./pages/history/historybook/historybook.module').then( m => m.HistorybookPageModule)\r\n      },\r\n      {\r\n        path: 'course/:historyId',\r\n        loadChildren: () => import('./pages/history/historycourse/historycourse.module').then( m => m.HistorycoursePageModule)\r\n      }\r\n\r\n    ]\r\n  },\r\n  {\r\n    path: 'account',\r\n    loadChildren: () => import('./pages/account/account.module').then( m => m.AccountPageModule)\r\n  },\r\n  {\r\n    path: 'location/:locationId',\r\n    loadChildren: () => import('./pages/location/location.module').then( m => m.LocationPageModule)\r\n  },\r\n  {\r\n    path: 'location',\r\n    redirectTo: 'home', pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'listcourses/:locationId',\r\n    loadChildren: () => import('./pages/location/course/listcourses/listcourses.module').then( m => m.ListcoursesPageModule)\r\n  },\r\n  {\r\n    path: 'listcourses',\r\n    redirectTo: 'home', pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'detailcourse',\r\n    redirectTo: 'home', pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'detailcourse/:courseId',\r\n    loadChildren: () => import('./pages/location/course/detailcourse/course.module').then( m => m.CoursePageModule)\r\n  },\r\n  {\r\n    path: 'news/:newsId',\r\n    loadChildren: () => import('./pages/newsdetail/newsdetail.module').then( m => m.NewsdetailPageModule)\r\n  },\r\n  {\r\n    path: 'news',\r\n    loadChildren: () => import('./pages/news/news.module').then( m => m.NewsPageModule)\r\n  },  \r\n  {\r\n    path: 'verify',\r\n    loadChildren: () => import('./pages/auth/verify/verify.module').then( m => m.VerifyPageModule)\r\n  },\r\n  {\r\n    path: 'test',\r\n    loadChildren: () => import('./pages/test/test.module').then( m => m.TestPageModule)\r\n  },\r\n  \r\n  {\r\n    path: 'agenda',\r\n    loadChildren: () => import('./pages/agenda/agenda.module').then( m => m.AgendaPageModule)\r\n  },\r\n  {\r\n    path: 'agenda-trainer',\r\n    loadChildren: () => import('./pages/agenda-trainer/agenda-trainer.module').then( m => m.AgendaTrainerPageModule)\r\n  },\r\n  {\r\n    path: 'agenda-custode',\r\n    loadChildren: () => import('./pages/agenda-custode/agenda-custode.module').then( m => m.AgendaCustodePageModule)\r\n  },\r\n\r\n  {\r\n    // ** dovrebbe rappresentare tutti i percorsi che non vengono intercettati dalle rotte precedenti\r\n    path: '**',\r\n    redirectTo: ''\r\n  }\r\n\r\n  \r\n  // {\r\n  //   path: 'agenda-custode/:idImpegno',\r\n  // },  \r\n\r\n  //questo lo lascio commentato, perchè in teoria ci si arriva solo da modale\r\n  // {\r\n  //   path: 'psw-recovery',\r\n  //   loadChildren: () => import('./pages/auth/psw-recovery/psw-recovery.module').then( m => m.PswRecoveryPageModule)\r\n  // }\r\n \r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules, relativeLinkResolution: 'legacy' })\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { StatoIscrizione } from './valuelist.model';\r\n\r\nexport class CorsoPresenze extends IDDocument {\r\n\r\n    IDPIANIFICAZIONECORSO: string;\r\n    IDUTENTE: string;\r\n    NOMINATIVO: string;\r\n    PRESENTE: boolean;\r\n    NOTES: string;\r\n    IDUSERSETTING: string;\r\n    DATAORASETTING: Date;\r\n    DATACERTIFICATOMEDICO: Date;\r\n    STATOISCRIZIONE: StatoIscrizione;\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDPIANIFICAZIONECORSO',\r\n            'IDUTENTE',\r\n            'NOMINATIVO',\r\n            'NOTE',\r\n            'IDUSERSETTING'\r\n        ];\r\n        let arNumber = ['STATOISCRIZIONE'];\r\n        let arBoolean = ['PRESENTE'];\r\n        let arDate = ['DATACERTIFICATOMEDICO'];\r\n        let arDateTime =['DATAORASETTING'];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'CorsoPresenze';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CORSOPRESENZE';\r\n        objDescriptor.describeField  = 'NOMINATIVO';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDPIANIFICAZIONECORSO', 'PianificazioneCorso');\r\n        objDescriptor.setRelation('IDUTENTE', 'Utente');\r\n        objDescriptor.setRelation('IDUSERSETTING', 'Utente');\r\n        \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n    constructor(onlyInstance?: boolean){\r\n        super(onlyInstance);\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { CodiceFiscale } from '../models/codicefiscale.model';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { ApicallService } from './apicall.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CodicefiscaleService {\r\n\r\n  //Per ottenere i dati del comune dal codice catastale\r\n  //chiamare https://api.cavallinipietro.com/codicefiscale/api/comuni/codicecatastale/L872\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n  /**\r\n   * Effettua il controllo di un codice fiscale e torna TRUE se corretto o FALSE se non corretto\r\n   * Nel caso fosse corretto puo' essere richiesta la decodifica del codice in Comune, Provincia, DataNascita etc.\r\n   * @param docCF Documento Codice Fiscale\r\n   * @param decode Decodifica il Codice Fiscale se corretto\r\n   * @param userMsg I testi dei messaggi di errore sono rivolti all'utente finale\r\n   */\r\n  checkCodiceFiscale(codiceFiscale: string, decode?:boolean, userMsg=false): Promise<CodiceFiscale> {\r\n    return new Promise ((resolve, reject)=>{\r\n              let check = false;\r\n              let resDecode = false;\r\n              let docCF: CodiceFiscale;\r\n\r\n              if (codiceFiscale && codiceFiscale.length !== 0) {\r\n                docCF = new CodiceFiscale(codiceFiscale);\r\n                //Valido il codice\r\n                check = docCF.validate();\r\n\r\n              }\r\n              else {\r\n                docCF = new CodiceFiscale('');\r\n                docCF.msgValidate = 'Codice non specificato';\r\n                docCF.checkValidate = false;\r\n                check = false;\r\n              }\r\n\r\n              //Check passato correttamente\r\n              if (check) {\r\n                  if (decode) {\r\n\r\n                    //Effettuo la decodifica base\r\n                    resDecode = docCF.basicDecode();\r\n  \r\n                    //Effettuo la chiamata per ottenere i dati del comune dal codice catastale\r\n                    if (resDecode) {\r\n                      //Con il codice del comune cerco di recuperare tutto\r\n                      let myHeaders = new HttpHeaders({'Content-type':'text/plain'});\r\n                      \r\n\r\n                      //In Testata c'e' sempre l'AppId\r\n                      //myHeaders = myHeaders.set('appid',config.appId);\r\n                      let myUrl = 'https://api.cavallinipietro.com/codicefiscale/api/comuni/codicecatastale' + '/' + docCF.codiceCatastale;  \r\n                  \r\n                      this.apiService\r\n                          .httpGet(myUrl, myHeaders)\r\n                          .subscribe(data => {\r\n\r\n                            //In teoria mi ha risposto correttamente\r\n                            if (data.hasOwnProperty('codiceCatastale')) {\r\n                              //Nome comune\r\n                              if (data.hasOwnProperty('nome')) {\r\n                                docCF.comune = data['nome'];\r\n\r\n                                //se ho il comune, significa che il cf è italiano\r\n                                docCF.stato = 'Italia'\r\n                              }\r\n\r\n                              //Regione\r\n                              if (data.hasOwnProperty('regione')) {\r\n                                docCF.regione = data['regione'];\r\n                              }\r\n                              \r\n                              //Provincia\r\n                              if (data.hasOwnProperty('provincia')) {\r\n                                docCF.provincia = data['provincia'];\r\n                              }\r\n\r\n                              //CAP\r\n                              if (data.hasOwnProperty('cap')) {\r\n                                docCF.cap = data['cap'];\r\n                              }\r\n\r\n                              if(data.hasOwnProperty('stato')){\r\n                                docCF.stato = data['stato']\r\n                              }\r\n\r\n                            }\r\n\r\n\r\n\r\n                            resolve(docCF);\r\n\r\n                          } , error => {\r\n                            docCF.checkValidate = false;\r\n                            docCF.msgValidate = error;\r\n                            resolve(docCF);\r\n                          });\r\n                    }\r\n                    else {\r\n                      \r\n                      resolve(docCF);\r\n                    }\r\n\r\n                  }\r\n                  else {\r\n                    resolve(docCF);\r\n                  }\r\n\r\n              }\r\n              else {\r\n                //Check Codice Fiscale fallito\r\n\r\n                //Se i messaggi sono per l'utente cambio con\r\n                if (userMsg) {\r\n                  docCF.msgValidate = 'Codice fiscale non valido';\r\n                }\r\n\r\n                reject(docCF);\r\n              }\r\n              \r\n            });\r\n\r\n  }\r\n\r\n\r\n  \r\n\r\n\r\n\r\n  \r\n}\r\n","import { Language, Giorni } from './valuelist.model';\r\n\r\nexport class Settimana {\r\n    index: number;\r\n\r\n    label: string;\r\n    smallLabel: string;\r\n    xsLabel: string;\r\n\r\n    selected: boolean;\r\n    color: string;\r\n\r\n    constructor(indexDay: number, language?: Language) {\r\n\r\n        this.index = indexDay;\r\n        this.selected = false;\r\n        this.color = 'primary';\r\n\r\n        this.setAllLabel(language);\r\n    }\r\n\r\n    /**\r\n     * Imposto tutte le etichette\r\n     * @param language Lingua\r\n     */\r\n    private setAllLabel(language?: Language) {\r\n\r\n        //Prima determino la Label principale\r\n        switch (language) {\r\n            case Language.italiano:\r\n                this.setItalianLabel();\r\n                break;\r\n            case Language.inglese:\r\n                this.setEnglishLabel();\r\n                break;\r\n            case Language.spagnolo:\r\n                this.setSpanishLabel();\r\n                break;\r\n            default:\r\n                this.setItalianLabel();\r\n                break;\r\n        }\r\n\r\n        //Ora costruisco le altre label\r\n        this.smallLabel = this.label.substring(0, 3);\r\n        this.xsLabel = this.label.substring(0, 1);\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta le etichette dei giorni in italiano\r\n     */\r\n    private setItalianLabel() {\r\n        \r\n        switch (this.index) {\r\n        case Giorni.domenica:\r\n            this.label = 'domenica';\r\n            break;\r\n        case Giorni.lunedi:\r\n            this.label = 'lunedi\\'';\r\n            break;\r\n        case Giorni.martedi:\r\n            this.label = 'martedi\\'';\r\n            break;\r\n        case Giorni.mercoledi:\r\n            this.label = 'mercoledi\\'';\r\n            break;\r\n        case Giorni.giovedi:\r\n            this.label = 'giovedi\\'';\r\n            break;        \r\n        case Giorni.venerdi:\r\n            this.label = 'venerdi\\'';\r\n            break;        \r\n        case Giorni.sabato:\r\n            this.label = 'sabato';\r\n            break;                \r\n        }\r\n    }\r\n\r\n    /**\r\n    * Imposta le etichette dei giorni in italiano\r\n    */\r\n    private setEnglishLabel() {\r\n        \r\n        switch (this.index) {\r\n        case Giorni.domenica:\r\n            this.label = 'sunday';\r\n            break;\r\n        case Giorni.lunedi:\r\n            this.label = 'monday';\r\n            break;\r\n        case Giorni.martedi:\r\n            this.label = 'tuesday';\r\n            break;\r\n        case Giorni.mercoledi:\r\n            this.label = 'wednesday';\r\n            break;\r\n        case Giorni.giovedi:\r\n            this.label = 'thursday';\r\n            break;        \r\n        case Giorni.venerdi:\r\n            this.label = 'friday';\r\n            break;        \r\n        case Giorni.sabato:\r\n            this.label = 'saturday';\r\n            break;                \r\n        }\r\n    }\r\n\r\n    private setSpanishLabel() {\r\n        \r\n        switch (this.index) {\r\n        case Giorni.domenica:\r\n            this.label = 'domingo';\r\n            break;\r\n        case Giorni.lunedi:\r\n            this.label = 'lunes';\r\n            break;\r\n        case Giorni.martedi:\r\n            this.label = 'martes';\r\n            break;\r\n        case Giorni.mercoledi:\r\n            this.label = 'miercoles';\r\n            break;\r\n        case Giorni.giovedi:\r\n            this.label = 'jueve';\r\n            break;        \r\n        case Giorni.venerdi:\r\n            this.label = 'viernes';\r\n            break;        \r\n        case Giorni.sabato:\r\n            this.label = 'sabado';\r\n            break;                \r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Ritorna un Array di Giornate\r\n     * @param startSunday Calendario Inizia alla Domenica ?\r\n     * @param language    Lingua Opzionale\r\n     */\r\n    static getArray(startSunday?: boolean, language?:Language): Settimana[] {\r\n        let myWeek: Settimana[] = [];\r\n        let startIndex = Giorni.lunedi;\r\n\r\n        if (startSunday) {\r\n            startIndex = Giorni.domenica;\r\n        }\r\n\r\n        // Ciclo dallo Start Index a 7\r\n        for (let indice = startIndex; indice <= Giorni.sabato; indice++) {\r\n            let newDay = new Settimana(indice, language);\r\n            myWeek.push(newDay);\r\n        }\r\n\r\n        //Se ho iniziato al Lunedi, devo aggiungere in fondo la domenica\r\n        if (startIndex == 1) {\r\n            let newDay = new Settimana(Giorni.domenica, language);\r\n            myWeek.push(newDay);\r\n        }\r\n\r\n\r\n        return myWeek;\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta a selected un determinato giorno della settimana presente nell'array\r\n     * @param indexDay Indice del Giorno da selezionare\r\n     * @param myWeek Array Settimanale\r\n     */\r\n    static selectDayArray(indexDay: number, myWeek: Settimana[]) {\r\n        if (myWeek) {\r\n            myWeek.forEach(element => {\r\n                if (element.index == indexDay) {\r\n                    element.selected = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna in modalità rapida la label del Giorno\r\n     * @param indexDay Numero del Giorno\r\n     * @param language Lingua Opzionale\r\n     */\r\n    static getLabel(indexDay: number, language?: Language) {\r\n        let newDay = new Settimana(indexDay, language);\r\n\r\n        return newDay.label;\r\n    }\r\n\r\n    /**\r\n     * Ritorna in modalità rapida la smallLabel del Giorno\r\n     * @param indexDay Numero del Giorno\r\n     * @param language Lingua Opzionale\r\n     */\r\n    static getsmallLabel(indexDay: number, language?: Language) {\r\n        let newDay = new Settimana(indexDay, language);\r\n\r\n        return newDay.smallLabel;\r\n    } \r\n\r\n    /**\r\n     * Ritorna in modalità rapida la xsLabel del Giorno\r\n     * @param indexDay Numero del Giorno\r\n     * @param language Lingua Opzionale\r\n     */\r\n    static getXsLabel(indexDay: number, language?: Language) {\r\n        let newDay = new Settimana(indexDay, language);\r\n\r\n        return newDay.xsLabel;\r\n    }     \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Language } from './valuelist.model';\r\nimport { Settimana } from './settimana.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class AperturaLocation extends IDDocument {\r\n    GIORNO: number; //Da scemo ho messo da 1 a 7\r\n    APERTOCHIUSO: boolean;\r\n    DALLE1: Date;\r\n    ALLE1: Date;\r\n    DALLE2: Date;\r\n    ALLE2: Date;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [];\r\n        let arNumber = ['GIORNO'];\r\n        let arBoolean = ['APERTOCHIUSO'];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = ['DALLE1','DALLE2','ALLE1','ALLE2'];\r\n\r\n        objDescriptor.className = 'AperturaLocation';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'APERTURALOCATION';\r\n        \r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n\r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Sovrascrive metodo di IDDocument e lo amplia\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n        \r\n\r\n        super.setJSONProperty(data);\r\n\r\n        //Il Giorno che arriva base 1 lo sposto a base 0\r\n        this.GIORNO = this.GIORNO - 1;\r\n\r\n        this.setOriginal();\r\n    }\r\n\r\n\r\n\r\n    getDateFromTimeString(timeString: string): Date {\r\n        const splitTime = timeString.split(':');\r\n        let ore = 0;\r\n        let minuti = 0;\r\n        let secondi = 0;\r\n        let returnDate = new Date();\r\n\r\n        for (let index = 0; index < splitTime.length; index++) {\r\n            switch(index) {\r\n                case 0: \r\n                    ore = Number.parseInt(splitTime[index]);\r\n                    \r\n                break;\r\n                case 1: \r\n                    minuti = Number.parseInt(splitTime[index]);\r\n                    \r\n                break;\r\n                case 2: \r\n                    secondi = Number.parseInt(splitTime[index]);\r\n                break;\r\n\r\n            }\r\n                        \r\n        }\r\n\r\n        returnDate.setHours(ore,minuti,secondi);\r\n        \r\n        return returnDate;\r\n    }\r\n\r\n\r\n\r\n    /** Ritorna l'etichetta del giorno */\r\n    getLabel(language?: Language) {\r\n\r\n        let label = Settimana.getLabel(this.GIORNO, language);\r\n\r\n        return label;\r\n    }\r\n\r\n    isOpen() {\r\n        return this.APERTOCHIUSO;\r\n    }\r\n\r\n    get isAlwaysOpen(){\r\n        if (this.isOpen() && !this.DALLE1 && !this.DALLE2){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ritorna l'orario impostato minore o maggiore di apertura o chiusura\r\n     * UNDEFINED se non trovato oppure se la Location è chiusa\r\n     * @param type min || max a seconda se su vuole l'orario inferiore o superiore\r\n     */\r\n    getOrario(type: string) {\r\n        let value: Date;\r\n        if (this.APERTOCHIUSO) {\r\n            if (type == 'min') {\r\n                if (this.DALLE1) {\r\n                    value = this.DALLE1;\r\n                }\r\n                else if (this.DALLE2) {\r\n                    value = this.DALLE2;\r\n                }\r\n            }\r\n            else if (type == 'max') {\r\n                if (this.ALLE2) {\r\n                    value = this.ALLE2;\r\n                }\r\n                else if (this.ALLE1) {\r\n                    value = this.ALLE1;\r\n                }\r\n            }\r\n            else if (type == 'middleMin'){\r\n\r\n                if (this.ALLE1){\r\n                    value = this.ALLE1;\r\n                }\r\n            }\r\n            else if (type == 'middleMax'){\r\n                if (this.DALLE2){\r\n                    value = this. DALLE2;\r\n                }\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class CategoriaEta extends IDDocument {\r\n    CODICE: string;\r\n    ETAMINIMA: number;\r\n    ETAMASSIMA: number;\r\n    DESCTOOLTIP: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n          /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['CODICE',\r\n                    'DESCTOOLTIP'\r\n                    ];\r\n    let arNumber = ['ETAMINIMA','ETAMASSIMA'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'CategoriaEta';\r\n    objDescriptor.classWebApiName = 'CATEGORIEETA';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.describeField = 'DESCTOOLTIP';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n\r\n    \r\n    return objDescriptor;\r\n}\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setOriginal();\r\n    }\r\n\r\n\r\n    /**\r\n     * Verifica se l'eta rientra nel range\r\n     * @param eta Eta da controllare\r\n     */\r\n    isValid(eta: number):boolean {\r\n\r\n        let isValid = false;\r\n        if (!this.ETAMINIMA && !this.ETAMASSIMA) {\r\n            isValid = true;\r\n        }\r\n        else if (!this.ETAMASSIMA) {\r\n            //Non c'e' eta massima solo la minima\r\n            if (eta >= this.ETAMINIMA) {\r\n                isValid = true;\r\n            }\r\n        }\r\n        else if (!this.ETAMINIMA) {\r\n            //Non c'e' eta minima solo la massima\r\n            if (eta <= this.ETAMASSIMA) {\r\n                isValid = true;\r\n            }\r\n        }\r\n        else {\r\n            //Ci sono entrambi le eta\r\n            if (eta >= this.ETAMINIMA && eta <= this.ETAMASSIMA) {\r\n                isValid = true;\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n   \r\n}","import { Descriptor, TypeDefinition } from \"../library/models/descriptor.model\";\r\nimport { IDDocument } from \"../library/models/iddocument.model\";\r\nimport { PaymentChannel, TipoRigoIncasso } from \"./valuelist.model\";\r\n\r\nexport class IscrizioneIncasso extends IDDocument {\r\n    IDISCRIZIONECORSO:               string;\r\n    DATASCADENZA:                    Date;\r\n    MODALITA:                        PaymentChannel;\r\n    DATAOPERAZIONE:                  Date;\r\n    IMPORTO:                         number;\r\n    NOTES:                           string;\r\n    TIPORIGO:                        TipoRigoIncasso;\r\n    ZORDER:                          number;\r\n    DICITURADOC:                     string;\r\n    IDCONTO:                         string;\r\n    IDTRANSACTION:                   string;\r\n    IDORDER:                         string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);         \r\n    } \r\n\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n     getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDISCRIZIONECORSO',\r\n                        'NOTES',\r\n                        'DICITURADOC',\r\n                        'IDCONTO',\r\n                        'IDTRANSACTION',\r\n                        'IDORDER'\r\n                        ];\r\n        let arNumber = ['ZORDER',\r\n                        'MODALITA',\r\n                        'TIPORIGO',\r\n                        'TIPOPREZZO'\r\n                       ];\r\n        let arDecimal = ['IMPORTO'\r\n                        ];\r\n        let arBoolean = [];\r\n        let arDate = ['DATAOPERAZIONE'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n    \r\n        objDescriptor.className = 'IscrizioneIncasso';\r\n        objDescriptor.classWebApiName = 'ISCRIZIONEINCASSO';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.describeField = 'DENOMINAZIONE';\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    \r\n        \r\n    \r\n        return objDescriptor;\r\n    }    \r\n    \r\n    \r\n\r\n/**\r\n * Imposta le proprietà nell'oggetto\r\n * @param data JSON Received\r\n */\r\n    setJSONProperty(data: any) {\r\n        //Chiamo IDDOcument\r\n        super.setJSONProperty(data);\r\n\r\n        this.setOriginal();\r\n\r\n    }     \r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take, max } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { Location } from '../models/location.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { Sport } from '../models/sport.model';\r\nimport { CampoSport } from '../models/camposport.model';\r\nimport { SlotWeek } from '../models/imdb/slotweek.model';\r\nimport { LoadingController } from '@ionic/angular';\r\nimport { error } from 'protractor';\r\nimport { LogApp } from '../models/log.model';\r\nimport { RequestDecode, RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { LocationAppVisibility } from '../models/valuelist.model';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocationService {\r\n\r\n  private _listLocation = new BehaviorSubject<Location[]>([]);\r\n  private _decodeListSport: Sport[]; //Lista di Decodifica degli Sport\r\n  private _activeLocation = new BehaviorSubject<Location>(new Location());\r\n  //VARIABILI PER PRENOTAZIONI\r\n\r\n\r\n  get listLocation() {\r\n    return this._listLocation.asObservable();\r\n  }\r\n\r\n  set decodeListSport(value: Sport[]) {\r\n    this._decodeListSport = value;\r\n  }\r\n\r\n  get activeLocation() {\r\n    return this._activeLocation.asObservable();\r\n  }\r\n\r\n  constructor(\r\n                private apiService:ApicallService,\r\n                private loadingCtrl: LoadingController,\r\n                private docStructureService: DocstructureService\r\n              ) { }\r\n\r\n\r\n\r\n  /**\r\n   * Recupero delle Location di un'area\r\n   * @param config Parametri di configurazione\r\n   * @param idArea Area di riferimento\r\n   */\r\n  requestByIdArea(config: StartConfiguration, idArea: string): Promise<Location[]> {\r\n    return new Promise((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'LOCATION';\r\n      const locVisTutti = LocationAppVisibility.tutti; //Queste sono le location pubbliche\r\n      \r\n\r\n      // Nei parametri imposto l'Area Operativa\r\n      let myParams = new HttpParams().set('IDAREAOPERATIVA', idArea);\r\n  \r\n      //Chiedo solo le location Pubbliche (In teoria qui bisognerà gestire il caso di Location legate a una azienda a cui l'utente è collegato)\r\n      myParams = myParams.append('APPVISIBILITY', (locVisTutti + ''));\r\n\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      this.apiService\r\n          .httpGet(myUrl, myHeaders, myParams)\r\n          .pipe(map(fullData => {\r\n            return fullData.LOCATION\r\n          }))\r\n          .subscribe(resultData => {\r\n  \r\n            //Cancello le Location\r\n            this._listLocation.next([]);\r\n  \r\n            //Inserisco le location\r\n            this._addMultipleLocation(resultData);\r\n            resolve(resultData);\r\n  \r\n          },error=>{\r\n            reject(error);\r\n          });\r\n      \r\n    })\r\n  }\r\n\r\n  /**\r\n   * Richiede un elenco di location con idArea passato, e lo risolve direttamente, senza passare da nessun'altra parte (usa il nuovo docstructure per fare la richiesta)\r\n   * @param idArea l'id dell'area\r\n   */\r\n  newRequestByIdArea(idArea: string): Promise<Location[]>{\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let myFilter = new Location(true);\r\n      myFilter.IDAREAOPERATIVA = idArea;\r\n  \r\n      let myParams = new RequestParams();\r\n      myParams.decode = new RequestDecode();\r\n      myParams.decode.active = true;\r\n  \r\n      this.docStructureService.requestNew(myFilter, myParams)\r\n      .then(listLocation => {\r\n        resolve (listLocation);\r\n      })\r\n      .catch(error => {\r\n        reject (error);\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n\r\n    /** Effettua la richiesta al server di una Location precisa\r\n   * @param idLocation Location scelta \r\n   * \r\n   */\r\n  requestLocationByID(config: StartConfiguration, idLocation: string, _numLivelli?:number) {\r\n    return new Promise<Location>((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'LOCATION';\r\n  \r\n      if (!_numLivelli) {\r\n        _numLivelli = 3;\r\n      }\r\n  \r\n\r\n      myHeaders = myHeaders.set('child-level',_numLivelli + '');\r\n  \r\n      // Nei parametri imposto l'Area Operativa\r\n      let myParams = new HttpParams().set('ID', idLocation);\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n        this.apiService\r\n                    .httpGet(myUrl, myHeaders, myParams)\r\n                    .pipe(map(fullData => {                \r\n                      return fullData.LOCATION;\r\n                    }))\r\n                    .subscribe(resultData => {\r\n                      let locReturn: Location;\r\n                      \r\n                      if (resultData && resultData.length !== 0) {\r\n                        \r\n                        locReturn = new Location();\r\n                        locReturn.setJSONProperty(resultData[0]);\r\n                        \r\n                        //Emetto evento di cambio\r\n                        this._activeLocation.next(locReturn);\r\n                        resolve(locReturn);\r\n                      }     \r\n                      else\r\n                      {\r\n                        reject('location non trovata');\r\n                      }             \r\n                    }, error=>{\r\n                      reject (error);\r\n                    });      \r\n    })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge un insieme di elementi all'array delle Location\r\n   * @param dataJSON JSON Received\r\n  */\r\n  private _addMultipleLocation(dataJSON: any) {\r\n    \r\n    if (dataJSON) {\r\n      dataJSON.forEach(element => {\r\n        let newLocation = new Location();\r\n        newLocation.setJSONProperty(element);\r\n\r\n        this.listLocation\r\n          .pipe(take(1))\r\n          .subscribe( collLocation => {\r\n            this._listLocation.next( collLocation.concat(newLocation));\r\n          });\r\n      });\r\n    }\r\n  }\r\n\r\n  //#region SINCRONIZZAZIONE CON CAMPI SPORT\r\n\r\n  /**\r\n   * Richiede al Server le informazioni sulle tipologie dei Campi (e Attività Svolte)\r\n   * @param config Parametri di configurazione\r\n   * @param docLocation Location da Completare con i campi Sport\r\n   */\r\n  syncInfoCampi(config: StartConfiguration, \r\n                docLocation: Location\r\n                ) {\r\n    //Elimino le informazioni precedenti dei Campi Sport\r\n    docLocation.emptyCampiSport();\r\n\r\n    //Creo un Observable\r\n    let myLocation = new BehaviorSubject<Location>(docLocation);\r\n\r\n    docLocation.CAMPO.forEach(elCampo => {\r\n      this.syncInfoCampoSport(config, elCampo.ID)\r\n        .subscribe(resultData => {\r\n\r\n          resultData.forEach(elCampoSport => {\r\n\r\n            let docCampoSport = new CampoSport();\r\n            docCampoSport.setJSONProperty(elCampoSport);\r\n            docCampoSport.lookup('IDSPORT',this._decodeListSport, 'DENOMINAZIONE');\r\n            \r\n            myLocation\r\n            .pipe(take(1))\r\n            .subscribe( docLocation => {\r\n              docLocation.addCampoSport(docCampoSport, elCampo.ID);\r\n\r\n              myLocation.next(docLocation);\r\n            }\r\n\r\n            );\r\n\r\n          });\r\n\r\n        })\r\n    });\r\n\r\n    return myLocation.asObservable();\r\n\r\n  }\r\n\r\n  /**\r\n   * Sincronizzo le informazioni degli sport dei campi\r\n   */\r\n  syncInfoCampoSport(config: StartConfiguration, idCampo: string) {\r\n    let myHeaders = config.getHttpHeaders();\r\n    //new HttpHeaders({'Content-type':'text/plain'});\r\n    const doObject = 'CAMPOSPORT';\r\n\r\n    // Nei parametri imposto il Campo\r\n    let myParams = new HttpParams().set('IDCAMPO', idCampo);\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n\r\n    return this.apiService\r\n                .httpGet(myUrl, myHeaders, myParams)\r\n                .pipe(map(fullData => {\r\n                  return fullData.CAMPOSPORT\r\n                }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Ritorna la Location presente in memoria\r\n   * @param idLocation Location cercata\r\n   */\r\n  findLocationByID(idLocation: string) {\r\n    let arLocation = this._listLocation.getValue();\r\n    \r\n    return arLocation.find(element => {\r\n      return element.ID == idLocation\r\n    });\r\n  }\r\n  //#endregion\r\n\r\n\r\n  //#region PRENOTAZIONE\r\n\r\n  /**\r\n   * Data la Location, ritorna il template settimanale con gli slot time da applicare \r\n   * (Default Slot Time)\r\n   * Andranno poi attualizzati ulteriormente\r\n   * @param docLocation Location da utilizzare\r\n   */\r\n  getTemplateSlotWeek(docLocation: Location): SlotWeek {\r\n    let weekTemplate = new SlotWeek();\r\n    \r\n    weekTemplate.IDAREAOPERATIVA = docLocation.IDAREAOPERATIVA;\r\n    weekTemplate.IDLOCATION = docLocation.ID;\r\n\r\n    if (docLocation.MINUTISLOTPRENOTAZIONE) {\r\n      weekTemplate.SLOTMINUTES = docLocation.MINUTISLOTPRENOTAZIONE;\r\n    }\r\n\r\n    //Inizializzo con i giorni\r\n    weekTemplate.initDays();\r\n\r\n    //Ciclo sulle Aperture Location per poter impostare l'orario minimo e massimo per ogni giorno\r\n    docLocation.APERTURALOCATION.forEach(elApertura => {\r\n      \r\n      let daySlot = weekTemplate.getSlotDay(elApertura.GIORNO);\r\n      let minDateTime: Date;\r\n      let maxDateTime: Date;\r\n\r\n      let middleMinTime: Date;\r\n      let middleMaxTime: Date;\r\n\r\n      //APERTO\r\n      if (elApertura.APERTOCHIUSO) {\r\n\r\n        daySlot.APERTOCHIUSO = true;\r\n        \r\n        //Imposto orari standard di apertura\r\n        daySlot.setStandardTime();\r\n\r\n        //Ora devo recuperare ora iniziale e finale definite \r\n        //sulla apertura location\r\n        minDateTime = elApertura.getOrario('min');\r\n        maxDateTime = elApertura.getOrario('max');\r\n\r\n        middleMinTime = elApertura.getOrario('middleMin');\r\n        middleMaxTime = elApertura.getOrario('middleMax');\r\n\r\n        //Imposto gli orari di inizio e fine se ci sono\r\n        if (minDateTime && maxDateTime) {\r\n          daySlot.STARTTIME = minDateTime;\r\n          daySlot.ENDTIME = maxDateTime;\r\n\r\n          //se ci sono gli orari intermedi, li imposto\r\n          if (middleMaxTime && middleMinTime){\r\n           daySlot.setChiusuraIntermedia(middleMinTime, middleMaxTime);\r\n          }\r\n  \r\n\r\n        }\r\n        else {\r\n          //Vuol dire che è aperto tutto il giorno\r\n          let adesso = new Date();\r\n          daySlot.STARTTIME = new Date(adesso.getFullYear(), adesso.getMonth(), adesso.getDate(), 0,0,0);\r\n          daySlot.ENDTIME = new Date(adesso.getFullYear(), adesso.getMonth(), adesso.getDate(), 23,59,59);\r\n          \r\n        }\r\n\r\n      }\r\n      else {\r\n        daySlot.APERTOCHIUSO = false;\r\n      }\r\n      \r\n    });\r\n\r\n    //Ora per tutti i giorni del template devo creare tutti gli slottime\r\n    weekTemplate.createSlotTimeDays();\r\n\r\n    return weekTemplate;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { IDDocument } from './iddocument.model';\r\n\r\nexport class CacheListElement {\r\n    className: string;\r\n    list: IDDocument[];\r\n\r\n    constructor(className: string) {\r\n\r\n        //Nome della classe\r\n        this.className = className;\r\n        //Lista elementi\r\n        this.list = [];\r\n        \r\n    }\r\n\r\n    /**\r\n     * Elemento\r\n     * @param element Elemento da aggiungere\r\n     * @param updateExist Prima di aggiungere controlla se presente e in caso aggiorna\r\n     */\r\n    addElement(element: IDDocument, updateExist=true) {\r\n\r\n        let findEl: IDDocument;\r\n        let actionAdd = false;\r\n\r\n        if (element) {\r\n            //Prima di aggiungerlo controllo se è presente\r\n            if (updateExist) {\r\n                findEl = this.findElementById(element['ID']);\r\n                if (!findEl) {\r\n                    actionAdd = true;\r\n                }\r\n                else {\r\n                    //Aggiornare le proprietà\r\n                    findEl = element;\r\n                }\r\n\r\n            }\r\n            else {\r\n                //Non devo guardare se esiste aggiungi e taci\r\n                actionAdd = true;\r\n            }\r\n\r\n            if (actionAdd) {\r\n                this.list.push(element);\r\n            }\r\n    }\r\n    }\r\n\r\n    /**\r\n     * Ricerca un elemento\r\n     * @param id Chiave primaria\r\n     */\r\n    findElementById(id: string) {\r\n        \r\n        return this.list.find(el => {\r\n            return el.ID == id;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ricerca un elemento nella lista per nome campo <-> valore\r\n     * @param fieldName Nome del campo\r\n     * @param value Valore cercato\r\n     */\r\n    findElementByFieldName(fieldName: string, value: any) {\r\n        return this.list.find(el => {\r\n            return el[fieldName] == value;\r\n        });\r\n    }\r\n\r\n\r\n}","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\r\n\r\n// Call the element loader after the platform has been bootstrapped\r\ndefineCustomElements(window);\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}