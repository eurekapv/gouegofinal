{"version":3,"sources":["webpack:///src/app/services/apicall.service.ts","webpack:///src/app/models/occupazionecampi.model.ts","webpack:///src/app/services/livello.service.ts","webpack:///src/app/models/articolocolore.model.ts","webpack:///src/app/services/area.service.ts","webpack:///src/app/library/services/crypto.service.ts","webpack:///src/app/services/prenotazione.service.ts","webpack:///src/app/services/iscrizionecorso.service.ts","webpack:///src/app/library/models/iddocument.model.ts","webpack:///src/app/services/photo.service.ts","webpack:///src/app/library/models/structure.model.ts","webpack:///src/app/models/gruppo.model.ts","webpack:///src/app/models/iscrizionecorso.model.ts","webpack:///src/app/models/sport.model.ts","webpack:///src/app/models/utente.model.ts","webpack:///src/app/models/log.model.ts","webpack:///src/environments/environment.ts","webpack:///src/app/services/corso-valutazione.service.ts","webpack:///src/app/models/articolo.model.ts","webpack:///src/app/services/invoices.service.ts","webpack:///src/app/models/codicefiscale.model.ts","webpack:///src/app/services/start.service.ts","webpack:///src/app/library/models/cache.model.ts","webpack:///src/app/models/corso.model.ts","webpack:///src/app/models/prenotazionepianificazione.model.ts","webpack:///src/app/library/services/docstructure.service.ts","webpack:///src/app/services/custom-encription.service.ts","webpack:///src/app/services/categoriaeta.service.ts","webpack:///src/app/services/data-chiusura.service.ts","webpack:///src/app/services/course.service.ts","webpack:///src/app/models/corsovalutazione.model.ts","webpack:///src/app/library/models/mydatetime.model.ts","webpack:///src/app/services/sport.service.ts","webpack:///src/app/models/account.model.ts","webpack:///node_modules/@ionic/pwa-elements/dist/esm lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","webpack:///src/app/models/imdb/slotweek.model.ts","webpack:///src/app/services/occupazioni.service.ts","webpack:///src/app/models/locaton-image.model.ts","webpack:///src/app/models/impegno.model.ts","webpack:///src/app/models/utentelivello.model.ts","webpack:///src/app/models/areapaymentsetting.model.ts","webpack:///src/app/services/slotoccupazione.service.ts","webpack:///src/app/models/filtercorsi.model.ts","webpack:///src/app/models/imdb/slotday.model.ts","webpack:///src/app/models/start-configuration.model.ts","webpack:///src/app/models/privateimage.model.ts","webpack:///src/app/models/dateslotlock.model.ts","webpack:///src/app/models/documentazione.model.ts","webpack:///src/app/library/models/requestParams.model.ts","webpack:///src/app/models/campo.model.ts","webpack:///node_modules/moment/locale sync ^\\.\\/.*$","webpack:///src/app/models/utenteiscrizione.model.ts","webpack:///src/app/services/utenteiscrizione.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/models/livello.model.ts","webpack:///src/app/models/imdb/slottime.model.ts","webpack:///src/app/models/utenteprenotazione.model.ts","webpack:///src/app/services/posizione.service.ts","webpack:///src/app/models/location.model.ts","webpack:///src/app/services/documento.service.ts","webpack:///src/app/models/valuelist.model.ts","webpack:///src/app/models/valuta.model.ts","webpack:///src/app/services/utente.service.ts","webpack:///src/app/library/models/descriptor.model.ts","webpack:///src/app/models/ricevuta.model.ts","webpack:///src/app/services/newseventi.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/models/pianificazionecorso.model.ts","webpack:///src/app/models/tipodocumentazione.model.ts","webpack:///src/app/services/coursescheduler.service.ts","webpack:///src/app/models/datachiusura.model.ts","webpack:///src/app/models/corsovalutazionelivello.model.ts","webpack:///src/app/models/arealink.model.ts","webpack:///src/app/models/newsevento.model.ts","webpack:///src/app/models/articolotagliemisura.model.ts","webpack:///src/app/models/prenotazione.model.ts","webpack:///node_modules/@ionic/core/dist/esm lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","webpack:///src/app/models/unitamisura.model.ts","webpack:///src/app/services/utenteprenotazione.service.ts","webpack:///src/app/models/corsoallegato.model.ts","webpack:///src/app/library/models/idlibrary.model.ts","webpack:///src/app/models/accountregistration.model.ts","webpack:///src/app/models/camposport.model.ts","webpack:///src/app/models/corsoprogramma.model.ts","webpack:///src/app/library/models/postResult.model.ts","webpack:///src/app/models/area.model.ts","webpack:///src/app/services/corsoallegato.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/models/corsopresenze.model.ts","webpack:///src/app/services/codicefiscale.service.ts","webpack:///src/app/models/settimana.model.ts","webpack:///src/app/models/aperturalocation.model.ts","webpack:///src/app/models/categoriaeta.model.ts","webpack:///src/app/models/iscrizioneincasso.model.ts","webpack:///src/app/services/location.service.ts","webpack:///src/app/library/models/cachelistelement.model.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["ApicallService","httpClient","customEncriptionService","url","header","params","_httpGet","body","_httpPost","_httpPut","reqHeaders","reqParams","consoleLog","append","getB64EncryptedSignature","get","headers","pipe","handleError","reqBody","post","put","observe","error","ErrorEvent","console","message","status","responseType","OccupazioneCampi","onlyInstance","objDescriptor","arString","arNumber","arBoolean","arDate","arDateTime","arTime","arCollection","className","doRemote","classWebApiName","describeField","addMultiple","number","date","dateTime","time","collection","setRelation","TIPO","settorePrenotazione","settoreCorso","iconName","LivelloService","apiService","docService","_listLivelli","_loaded","asObservable","getValue","config","Promise","resolve","reject","myHeaders","getHttpHeaders","doObject","myParams","set","myUrl","urlBase","httpGet","data","LIVELLO","subscribe","resultData","index","length","element","newLivello","setJSONProperty","addLivello","actualListLivelli","objLivello","listLivelli","collLivelli","next","concat","idSport","filterLivello","IDSPORT","requestNew","then","collData","ArticoloColore","AreaService","_listAree","_areaSelected","_childLevel","gruppo","ID","fullData","AREAOPERATIVA","_addMultipleAree","dataJSON","firstSelect","count","forEach","newArea","listAree","collAree","idArea","arElement","elSelected","find","CryptoService","keys","value","key","CryptoJS","enc","Utf8","parse","iv","encrypted","AES","encrypt","toString","keySize","mode","CBC","padding","pad","Pkcs7","decrypted","decrypt","SHA256","pwd","result","arFirst","arSecond","strFirst","strSecond","elArray","token","substr","push","replace","reverse","PrenotazioneService","sportService","_listPrenotazioni","_activePrenotazione","_selectedCampo","activePrenotazione","elPrenotazione","initNewPrenotazione","docPianificazione","setPianificazioneSingola","docUtente","setUtente","NOMINATIVO","PRENOTAZIONE","docPrenotazione","add2ListPrenotazioni","objPrenotazione","listSport","actualListSport","listPrenotazioni","collLocation","idPrenotazione","numLivelli","hasOwnProperty","collPrenotazioni","PRENOTAZIONEPIANIFICAZIONE","elPianificazione","lookup","paramName","paramExport","clearDOProperty","clearPKProperty","clearPrivateProperty","myBodyJSON","exportToJSON","myBody","httpPost","noExportDO","noExportPK","noExportPrivate","receivedPrenotazione","getPrenotazioneFromJson","ISVALID","errMessage","MSGINVALID","log","idPianificazione","method","response","setFromResponse","err","IscrizionecorsoService","docStructureService","idCorso","myPostParams","myReturn","docToCall","requestForFunction","risposta","docIscrizione","IDDocument","_filterConditions","_original","IDOriginal","_repositoryRelDoc","_tags","newID","do_inserted","selected","do_deleted","valueIcon","getDescriptor","foreignKeys","type","propName","retValue","primaryKeyFieldName","strValue","guid","c","parseInt","crypto","getRandomValues","Uint8Array","toUpperCase","add","tipo","formatDateISO","formatDateTimeISO","formatTime","numberDecimal","_this","arProperty","Object","strJSON","doProperty","propExclud","row","skipAll","ParamsExport","getPrimaryKey","onlyDocModified","isModified","useElement","startsWith","onlyPropertyModified","propertyIsModified","Array","isArray","arElements","strArray","strElArray","trim","skip","includes","tipoCampo","getType","undefined","valore","arKeys","Date","JSON","stringify","dataObject","stringToDateObject","setOriginal","format","final","do_updated","do_loaded","setAsOriginal","PropertyName","fieldName","getByFieldName","contain","inDoc","propertyInDoc","empty","propertyName","modified","typeProp","getTypeReflectorByFieldName","fieldType","arList","elDoc","retModified","fields","document","seqFields","docExist","identity","getDocInRepository","newRep","IDRepository","relDoc","pkOrSeq","docReturn","identifier","valRet","docActual","docModify","hasModifiche","field","serviceField","nativeField","propertyToDecode","listDecode","propertyLookup","namePropertyIDX","namePropertyDESCR","substring","operator","listOrValue","objCondition","FilterCondition","objFilter","OperatorCondition","uguale","getFilterConditionByFieldName","idTag","_findTag","IDTag","isNaN","Number","propValue","ident","primaryKey","FieldOrCondition","_listOrValue","_propOriginals","name","prop","findPropertyByName","IDProperty","propOriginal","clearPropOriginal","elField","setOriginalProperty","_value","v","_name","Camera","Filesystem","Storage","PhotoService","PHOTO_STORAGE","typePhoto","idPhoto","getPhoto","resultType","DataUrl","source","Prompt","quality","myImageDataUrl","dataUrl","storageSave","dataUrlPhoto","keyStorage","myPhoto","PhotoType","Structure","Sport","Corso","Area","AreaLink","AreaPaymentSetting","Gruppo","CampoSport","AperturaLocation","Account","Campo","CategoriaEta","CorsoProgramma","Livello","Location","LocationImage","NewsEvento","PianificazioneCorso","Prenotazione","PrenotazionePianificazione","Utente","UtenteIscrizione","UtenteLivello","UtentePrenotazione","Impegno","AccountOperationResponse","AccountRequestCode","AccountVerifyCode","TipoDocumentazione","Documentazione","CorsoPresenze","MasterDocumento","Articolo","ArticoloTaglieMisura","Valuta","UnitaMisura","DataChiusura","CorsoAllegato","DynamicClass","opts","Error","PRIVATEIMAGE","setCollection","setCollectionprivateImage","newPrivateImage","APPTIPOVERIFICA","verificaemail","verificaemailsms","verificasms","IscrizioneCorso","ISCRIZIONEINCASSO","arDecimal","addCollection","ISCRIZIONIINCASSI","setCollectionIscrizioniIncassi","arIncassi","newIscrizioneIncasso","getIncassoByID","idIscrizioneIncasso","existIscrizioneIncasso","elIscrizioneIncasso","setCollectionLivello","dataLivello","elLivello","UTENTILIVELLI","DOCUMENTAZIONI","PROFILAZIONEESTERNA","PROFILAZIONEINTERNA","VERIFICATAMAIL","VERIFICATAMOBILE","num","oggi","NATOIL","durataAnni","UTENTELIVELLO","setCollectionLivelli","DOCUMENTAZIONE","setCollectionDocumentazione","newLevel","NewDoc","labelReturn","EMAIL","MOBILENUMBER","idLivello","isValid","findIndex","IDLIVELLO","target","SESSO","maschile","maschileFemminile","maschio","femminile","femmina","COGNOME","NOME","INDIRIZZO","CAP","COMUNE","PROVINCIA","ISOSTATO","NATOA","NATOPROV","NATOISOSTATO","CODICEFISCALE","docGruppo","needVerifyMail","needVerifyTel","needUpdateProfile","anagraficaOk","ParamsVerifica","tipoVerifica","noverifica","updateDocUtente","isTrainer","LISTMANSIONI","trainer","assistenteTrainer","isCustode","custode","storageUtente","user","loginUser","pwdUser","cripted","crypt","strReturn","myObj","stringaJSON","LogApp","showDebug","environment","production","version","CorsoValutazioneService","myDocScheda","docScheda","InvoicesService","_listaDocumentiFiscali","listaDocumentiFiscali","utente","anno","filterDocuement","IDANAGRAFICA","ANNO","listDocuments","documento","b64Data","contentType","fullB64","fetch","res","blob","CodiceFiscale","codFisc","codiceFiscale","checkValidate","msgValidate","cf","normalize","test","s","even_map","i","n","charCodeAt","check","msg","PRIVATE_validate_regular","PRIVATE_validate_temporary","basicDecode16","chDay","chMonth","chYear","day","month","year","secolo","adesso","codiceControllo","codiceCatastale","getMonthFromLetter","getFullYear","sesso","dataNascita","letter","arMesi","el","StartService","platformService","storageAccess","categoriaEtaService","corsoService","utenteService","livelloService","areaService","locationService","corsoCalendarioService","prenotazioniService","newsEventiService","slotOccupazioneService","utentePrenotazioneService","utenteIscrizioneService","codFiscService","occupazioniService","documentoService","invoicesService","posizioneService","dataChiusuraService","urlLocation","corsoAllegatoService","iscrizioneCorsoService","corsoValutazioneService","photoService","_startConfig","_appReady","_localConnection","_forceIdAreaOnLogin","startConfig","elConfig","setConfig","is","areaSelectedValue","myAppId","arUrl","prefixDomain","myConfig","isOnWeb","hostname","split","setUrlLocation","settingStartStepTwo","PREFIXDOMAIN","collGruppo","appIdReceived","myList","myGruppo","APPID","settingStartStepThree","appId","requestStartAuthorization","actualStartConfig","objAuth","authcode","onAuthorizationGrant","elStartConfig","setGruppoAuthorization","GRUPPOSPORTIVO","authorizationAppCode","requestAree","onChangeAreaSelezionata","onAfterAuthorization","request","listChiusure","loadStorageUtente","areaSelected","selectAreaByID","newAreaSelected","inserted","requestLocation","actualAppReady","listenLocation","listLocation","unsubscribe","activeLocation","requestByIdArea","newRequestByIdArea","idLocation","_numLivelli","requestLocationByID","findLocationByID","selectedLocation","decodeListSport","syncInfoCampi","docLocation","getTemplateSlotWeek","getIconaSport","withLivelli","listLocationSport","requestLocationSport","requestLivelliForSport","listCategorieEta","idCategoria","eta","listCorsi","listCorsiTrainer","filterCorsi","newFilterCorsi","requestById","idcorso","newRequestById","idTrainer","timeState","requestTimeTrainerCourse","calendarioCorso","requestCalendario","idRef","dataInizio","dataFine","requestImpegniTrainer","getPianificazioneTrainerById","insertPresenze","updatePresenze","selectedCorso","getPostiDisponibiliCorso","requestSaveIscrizione","requestSchedaValutazioneCorso","requestForSave","utenteLoggato","actualLoggato","actualUtente","username","passwd","account","strAccount","saveJSON","updateClientData","val","savedUser","loadJSON","userLogin","myStartConfig","logoff","authorizationUserCode","saveStorageUtente","password","onChangeAreaFavListener","login","idAreaFAV","docUtenteUpdate","requestUpdate","oldPsw","newPsw","requestChangePassword","userPicture","photoType","utenteLogged","elutente","takePicure","setUserPicture","storageLoad","docRequestCode","registrationSendCodici","docVerifyCode","registrationVerifyCodici","registrationFinalize","recoverySendCodici","recoveryVerifyCodici","recoveryFinalize","validationSendCodici","validationVerifyCodici","setActivePrenotazione","initActivePrenotazione","setIDUtenteActivePrenotazione","requestImporto","requestSave","selectedCampo","requestDelete","idUtente","listUtentePrenotazione","listUtenteIscrizione","idIscrizione","listNews","guidArea","nElementi","idNews","getNewsById","docOccupazione","templateSlotDay","docCampo","dataGiorno","decode","userMsg","checkCodiceFiscale","image","base64","top","fromTime","filter","requestByFilter","idOccupazione","getRelReservation","urlDocumento","requestInvoices","downloadInvoice","base64toBlob","getCurrentPosition","getNearestArea","idCampo","idFestivita","requestByIdCorso","Cache","list","doc","elCacheList","updateIfExist","findByClassName","addElement","_DESCRCATEGORIEETA","_DESCRLIVELLOENTRATA","_DESCRSPORT","CORSOPROGRAMMA","PIANIFICAZIONECORSO","setSettimana","italiano","setCollectionCorsoProgramma","setCollectionPianificazioneCorso","arPROGRAMMA","newProgramma","getCorsoProgrammaByID","idCorsoProgramma","elProgramma","arPianificazioni","newPianificazione","getPianificazioneCorsoByID","idPianificazioneCorso","findPianificazioneCorso","language","myWeek","getArray","arGiorni","GIORNIPREVISTI","charGiorno","domenica","sabato","selectDayArray","_SETTIMANA","onlyDays","DATAINIZIO","DATAFINE","flag","STATODINAMICO","iscrizioniAperte","nameIcon","corso","prova","flagPagamento","PREZZOLORDO","exist","TESTOHTML","txtReturn","NUMPARTECIPANTI","_DESCRCAMPO","arNumberDecimal","arRequest","objForeign","addDescribeField","DocstructureService","structureDocuments","objCache","useCache","fieldsExclude","executePromise","arForeign","ForeignKeys","use","all","fieldDecode","newDecodeField","definition","queryServer","goToDecode","isForeignKey","propertyIsEmpty","_decodeInCache","_decodeWithServer","docFilter","relFieldDoc","relFieldName","serverElement","addTo","_setNewDecodeField","elementList","findElement","nameField","findElementByFieldName","docRel","useFields","nameDescribe","nameNewProperty","elFieldDecode","collectionName","prosegui","defCollection","namePrimaryKey","getByCollectionName","filterDocument","collReceived","elDocument","exPromise","loadCollection","childLevel","orderBy","nElem","requestAndDecode","foreignFields","child_level","active","_getHttpParamsFromDoc","listElement","elData","newClass","decodeCollection","iField","elForeign","describeFields","decodeAll","nameProperty","getPropertyType","operatoreSpecial","filterCondition","getFilterOperatorByFieldName","valoreProperty","formatValue","cloneObj","attribut","docStart","seqField","docRepository","indexSeq","objFieldType","idDocFilter","setPrimaryKey","getRelDoc","addToRepositoryRelDoc","elPromise","documentCall","jsonBodyOrDoc","postParams","myJsonBody","postBasicType","getBasicTypeFrom","elParam","getJsonFrom","onlyPropModified","fieldNamePK","fieldValuePK","jsonBody","httpPut","CustomEncriptionService","privateKey","table","_initTable","utc","now","getTime","str","encryptedStr","keyPointer","initialValue","keyValue","finalValue","decryptedStr","encryptedChar","myRow","decryptedChar","currentTimestamp","_getUTCTimestamp","time1","time2","time3","_encrypt","_decrypt","signature","_getSignatureToEncrypt","window","btoa","CategoriaetaService","_listCategorieEta","CATEGORIEETA","newCategoria","addCategoriaEta","objCategoriaEta","collEta","idCategoriaEta","objCategoria","listaCat","elCat","findCategoriaEtaById","DataChiusuraService","_listChiusure","addFilterCondition","affittoStrutture","tutte","rawListChiusure","aperto","elemChiusura","IDAREA","IDLOCATION","IDCAMPO","TIPOCHIUSURA","rangeDate","DATADAL","DATAAL","getFesta","CourseService","_listCorsi","_selectedCorso","_listCorsiTrainer","_filterCorsi","_decodeListSport","_decodeListLivelli","_decodeListEta","CORSO","objCorso","filtroCorso","myCorso","arPostParams","docCall","collDataCorso","newElement","_CONDITIONDATAFINE","collCorsi","CorsoValutazione","DATAORAVALUTAZIONE","TESTOVALUTAZIONE","CORSOVALUTAZIONELIVELLO","setCollectionCorsoValutazioneLivello","arValutazioni","newValutazione","getCorsoValutazioneLivelloByID","idCorsoValutazioneLivello","findRecord","elvalutazioneLivello","MyDateTime","intMese","getMonth","intGiorno","getDate","mese","giorno","join","prefixDate","ore","getHours","minuti","getMinutes","secondi","getSeconds","withSeconds","maskFormat","strInput","strDate","strTime","timeZone","strComplete","dataReturn","splitDateTime","toDate","strDateTime","strTimeZone","arReturn","nuovaData","applyDataOra","strDataOra","newReturn","startCheck","endCheck","minDateTime","maxDateTime","isBetween","isSameOrBefore","isSameOrAfter","startDate","endDate","mStart","mEnd","diff","inferiorDate","superiorDate","anni","addOrSub","period","dReturn","mDate","subtract","tipoChiusura","meseGiorno","dataAngelo","maskAngelo","dataPasqua","maskPasqua","calcolaPasqua","calcola","TypePeriod","days","aprile25","dicembre8","ferragosto","giugno2","maggio1","natale","santoStefano","pasquaCattolica","a","b","d","e","m","Math","floor","myDate","based","where","resultDate","startOf","endOf","myDateTime","dateResult","SportService","_listSport","_listLocationSport","SPORT","newSport","add2ListSport","objSport","collSport","add2ListLocationSport","icona","docSport","htmlIconHex","map","webpackAsyncContext","req","__webpack_require__","o","code","ids","id","webpackAsyncContextKeys","module","exports","SlotWeek","SLOTDAYS","SLOTMINUTES","daySlot","WEEKDAY","weekDayRequest","changeTimeDate","weekDay","getDay","myCopySlot","mySlot","copyFrom","changeDateInSlotTime","createSlotTime","OccupazioniService","_listOccupazioni","filterTipo","ORAFINE","maggiore","genericListElements","listElements","sort","ORAINIZIO","splice","myFilter","arPromises","elOccupazione","requestRelatedReservation","resultList","IDREF","reqForeign","getReqForeignKeys","collOccupazione","shortList","settore","arSettori","mySettore","incluso","SETTORI","TIPOPAYMENT","applePay","bonifico","googlePay","stripe","paypal","onSite","etichetta","inApp","arPaymentSettings","withBonifico","electronicPay","myElList","pagaStruttura","itemIcon","pagaBonifico","pagaAdesso","SlotoccupazioneService","apiCall","_docOccupazione","gapHour","gapMinutes","strData","IDAREAOPERATIVA","setGapMinutes","MINUTIPREAVVISOPRENOTAZIONE","syncResult","resultDataServer","templateSlot","srvResult","nowMoment","isSlotOccupato","RESULT","_TEMPLATELOCK","APERTOCHIUSO","SLOTTIMES","elSlotTime","STATO","chiuso","START","slotInServerSlotLock","occupato","disponibileDa","isAfter","libero","contattare","inSlot","docSlot","serverSlotLock","findInSlotLock","TIMELOCK","elLock","dateTimeInside","END","FilterCorsi","idLoc","_CHECKISCRIZIONEAPERTA","SlotDay","setStandardTime","oldObject","STARTTIME","ENDTIME","slot","STARTMIDDLE","ENDMIDDLE","chiusura","riapertura","minutiSlot","oreStart","minutiStart","oreEnd","minutiEnd","myData","myStart","myEnd","getArrayStandardSlot","disableClosedSlots","actualSlot","newState","contaSelected","findSlot","findStart","lastIndex","getPrenotazionePianificazione","elSlot","DATAORAFINE","DURATAORE","durataOre","DATAORAINIZIO","idSlotTime","StartConfiguration","_urlComponent","_ready","_titleApp","_companyName","_appUrlLogo","_companyUrlLogo","_appUrlIcon","_companyUrlIcon","_appId","_idAreaSelected","testingMode","_urlProtocol","_urlDomain","_urlFileServer","responseData","_gruppo","elImage","FILENAMEESTENSIONE","icon","logo","DENOMINAZIONE","_errorMessage","_authorizationAppCode","_authorizationUserCode","content","StartAuthorization","PrivateImage","DateSlotLock","newTl","TimeLock","InvioDocumentazione","PostParams","exportOnlyPropertyModified","exportOnlyDocModified","basic","typeVar","arBasicType","getValueType","jsonReturn","jsonValue","exportJSONValue","isBasicType","jsonSingle","exportJSON","RequestParams","RequestDecode","docForeign","RequestForeign","CAMPOSPORT","setCollectionCampoSport","elCampoSport","newCampoSport","docCampoSport","webpackContext","webpackContextResolve","webpackContextKeys","TIPOCORSO","myAmount","RESIDUO","showForPay","caption","amountPayment","myStato","daPagare","pagato","IMPORTO","pagatoInParte","UtenteiscrizioneService","_listUtenteIscrizione","maxRecord","filterDateTime","getFilterDateTime","UTENTEISCRIZIONE","newUtenteIscrizione","addUtenteIscrizione","arrData","objUtenteIscrizione","collUtenteIscrizione","newDoc","strAdesso","AppComponent","platform","splashScreen","statusBar","startService","showSplash","initializeApp","ready","listenAppReady","appReady","valueReady","listenStartConfig","settingStartStepOne","SlotTime","inizioTime","fineTime","changeDateInTime","start","end","minuteSlot","arSlots","countWrapper","endWrapper","isBefore","endSlotWrapper","slotBlock","Geolocation","PosizioneService","nearestArea","currentPosition","distanceFrom","_LISTOCCUPAZIONI","LOCATIONIMAGE","CAMPO","APERTURALOCATION","ENABLEPRENOTAZIONI","MINUTISLOTPRENOTAZIONE","setStandardCover","standardImage","IMAGEURL","newImage","COVERIMAGE","tipoSocieta","returnImage","sportiva","formazione","numCampi","setCollectionLocationImage","setCollectionAperturaLocation","setCollectionCampo","setAllDeleting","elCampo","getCampoByID","elApertura","newDay","addCampoSport","myCampo","isNext","indexZeroBase","shortVersion","arCampi","trovato","iterator","DocumentoService","apiCallService","fileUrl","urlFileServer","httpGetFile","toPromise","TipoArea","SettoreAttivita","SettorePagamentiAttivita","TipoCampo","TipoCorso","StatoCorso","TipoSocieta","TipoSport","Mansione","Ruolo","TargetSesso","Sesso","Language","Giorni","StrutturaCampo","StatoSlot","TipoPrivateImage","StatoPrenotazione","AmbitoNews","PageType","TipoVerificaAccount","RequestPincodeUse","TipoArticolo","TipoPrezzo","TipoMasterDocumento","TipoChiusura","AttivitaChiusura","StatoPagamento","TipoRigoIncasso","PaymentChannel","PaymentEnvironment","PaymentMode","PaypalStatus","FileType","LocationAppVisibility","ModalitaFruizione","ValueList","descrizione","description","label","objEnum","convert","retLabel","car","retElements","isNumber","decodifica","Condition","RequestState","SegmentCorsi","StatoIscrizione","Mesi","TimeTrainerCourse","RangeSearch","UtenteService","_utente","_utenteLoggato","_idAreaFAV","_userPicture","forceIdArea","myUtente","paramExp","myAccount","startConf","WEBLOGIN","INPUTPASSWORD","myUserAuthCode","docInResponse","setTagValue","newUtente","metodo","rawResponse","update","myResponse","objDocument","getDocument","bodyRequest","received","activation","bodyUtente","bodyFinal","recovery","paramReqExport","paramUteExport","validation","TypeDefinition","TypeReflector","campoName","campoType","relName","_fieldName","_fieldType","_relFieldDoc","_relFieldName","_primaryKey","_forceIfPrimaryKey","arServizi","Descriptor","_doRemote","_className","_classWebApiName","_describeField","isForeign","relField","typeR","hasFieldName","findField","arrayCampoName","newField","hasCollection","retType","elType","collFind","fieldFind","NewseventiService","_listNews","objNews","collNews","news","NEWSEVENTO","myListReceived","myListNews","objElement","newsEvento","AppModule","provide","useClass","useValue","forRoot","CORSOPRESENZE","setCollectionCorsoPresenze","arPresenze","gapOre","canUpdate","hours","formatDate","canUpdatePresenze","scadenza","strScadenza","ClasseDocumento","SorgenteFile","CourseschedulerService","_calendarioCorso","_listImpegniTrainer","emptyCalendario","newCorsoCalendario","addCorsoCalendario","objCorsoScheduler","collCalendario","listImpegniTrainer","collListImpegni","methodName","requestDecode","emptyListImpegniTrainer","docPianificazioneCorso","addToRepository","addImpegnotrainer","listPianificazioni","elem","collName","rej","CorsoValutazioneLivello","_NAMEICON","_COLOR","TITLE","SUBTITLE","INCASSATO","TOTALE","IMPOSTA","IDTRANSACTION","IDORDER","DATA","_nominativo","IDUTENTE","getIndexPianificazione","setCollectionPianificazioni","JsonData","newPrenotazione","slice","UtenteprenotazioneService","_listUtentePrenotazione","UTENTEPRENOTAZIONE","newUtentePrenotazione","addUtentePrenotazione","objUtentePrenotazione","collUtentePrenotazione","FILETYPE","audio","excel","immagini","indefinito","pdf","powerpoint","text","video","word","zip","IDLibrary","arValues","elStr","REQUESTEMAILCODE","REQUESTSMSCODE","EMAILPINCODE","SMSPINCODE","PostResponse","_document","AREALINKS","LOCATIONS","AREAPAYMENTSETTINGS","APPGAPOREPRESENZE","LOCATION","objLocation","AREALINK","objAreaLink","findAreaLinkByID","AREAPAYMENTSETTING","objPaymentSetting","findPaymentSettingById","idLink","TIPOURL","position","LATITUDINE","LONGITUDINE","lat","coords","latitude","lon","longitude","radlat1","PI","radlat2","theta","radtheta","dist","sin","cos","acos","arSetting","elPaymentSetting","isFor","CorsoallegatoService","IDCORSO","listAllegati","routes","path","redirectTo","pathMatch","loadChildren","HomePageModule","children","HistorylistPageModule","HistorybookPageModule","HistorycoursePageModule","AccountPageModule","LocationPageModule","ListcoursesPageModule","CoursePageModule","NewsdetailPageModule","NewsPageModule","VerifyPageModule","TestPageModule","AgendaPageModule","AgendaTrainerPageModule","AgendaCustodePageModule","AppRoutingModule","preloadingStrategy","relativeLinkResolution","CodicefiscaleService","resDecode","docCF","validate","basicDecode","comune","stato","regione","provincia","cap","Settimana","indexDay","color","setAllLabel","setItalianLabel","inglese","setEnglishLabel","spagnolo","setSpanishLabel","smallLabel","xsLabel","lunedi","martedi","mercoledi","giovedi","venerdi","startSunday","startIndex","indice","GIORNO","timeString","splitTime","returnDate","setHours","getLabel","isOpen","DALLE1","DALLE2","ALLE2","ALLE1","ETAMINIMA","ETAMASSIMA","IscrizioneIncasso","LocationService","loadingCtrl","_listLocation","_activeLocation","locVisTutti","tutti","_addMultipleLocation","locReturn","newLocation","emptyCampiSport","myLocation","syncInfoCampoSport","arLocation","weekTemplate","initDays","getSlotDay","middleMinTime","middleMaxTime","getOrario","setChiusuraIntermedia","createSlotTimeDays","CacheListElement","updateExist","findEl","actionAdd","findElementById","bootstrapModule","webpackEmptyAsyncContext"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { LogApp } from '../models/log.model';\r\n\r\nimport { CustomEncriptionService } from './custom-encription.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApicallService {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private customEncriptionService: CustomEncriptionService\r\n    ) { }\r\n\r\n  \r\n  /**\r\n   * Effettua una chiamata GET verso un server e ritorna un Observable\r\n   * @param url Url da contattare\r\n   * @param header Dati di Testata\r\n   * @param params Parametri di Testata\r\n   */\r\n  httpGet(url: string, header: HttpHeaders, params?: HttpParams) {\r\n    return this._httpGet(url, header, params)\r\n  }\r\n\r\n  /**\r\n   * Effettua una chiamata POST verso un server e ritorna un Observable\r\n   * Utilizzata per Inserimento di Risorse\r\n   * @param url Url da contattare\r\n   * @param header Dati di Testata\r\n   * @param params Parametri\r\n   * @param body Body\r\n   */\r\n  httpPost(url: string, \r\n            header: HttpHeaders, \r\n            params: HttpParams, \r\n            body: any\r\n            ) {\r\n    return this._httpPost(url, header, params, body);\r\n  }\r\n\r\n\r\n  /**\r\n   * Effettua una chiamata PUT verso un server e ritorna un Observable\r\n   * Utilizzata per Modifica di Risorse\r\n   * @param url Url da contattare\r\n   * @param header Dati di Testata\r\n   * @param body Body\r\n   */\r\n  httpPut(url: string, \r\n            header: HttpHeaders,\r\n            params: HttpParams,\r\n            body: any) {\r\n    return this._httpPut(url, header, params,body);\r\n  }\r\n\r\n    /**\r\n   * Esegue una chiamata GET al'Url specificato, controllando l'errore\r\n   * @param url Url da contattare\r\n   * @param reqHeaders Testata\r\n   * @param reqParams  Parametri\r\n   */\r\n  private _httpGet(url: string, reqHeaders: HttpHeaders, reqParams?: HttpParams) {\r\n    LogApp.consoleLog('Chiamata GET a ' + url);\r\n        \r\n    reqHeaders = reqHeaders.append('authsign', this.customEncriptionService.getB64EncryptedSignature());\r\n    //ritorno la get controllando l'errore\r\n    return this.httpClient.get<any>(url, {\r\n      headers: reqHeaders,\r\n      params: reqParams\r\n    })\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Esegue una chiamata POST al'Url specificato, controllando l'errore\r\n   * @param url Url da contattare\r\n   * @param reqHeaders Testata\r\n   * @param reqParams  Parametri\r\n   * @param reqBody    Body\r\n   */\r\n  private _httpPost(url: string, \r\n                    reqHeaders: HttpHeaders, \r\n                    reqParams: HttpParams, \r\n                    reqBody: any\r\n                    ) {\r\n\r\n    reqHeaders = reqHeaders.append('authsign', this.customEncriptionService.getB64EncryptedSignature());\r\n    LogApp.consoleLog('Chiamata POST a ' + url);\r\n\r\n    return this.httpClient.post<any>(url, reqBody, {\r\n                                        headers: reqHeaders,\r\n                                        params: reqParams\r\n                                })\r\n                          .pipe(\r\n                            catchError(this.handleError)\r\n                          );\r\n\r\n  }\r\n\r\n  /**\r\n   * Esegue una chiamata PUT al'Url specificato, controllando l'errore\r\n   * @param url Url da contattare\r\n   * @param reqHeaders Testata\r\n   * @param reqParams  Parametri\r\n   * @param reqBody    Body\r\n   */\r\n  private _httpPut(url: string, \r\n                   reqHeaders: HttpHeaders,\r\n                   reqParams: HttpParams,\r\n                   reqBody: any) {\r\n    \r\n    LogApp.consoleLog('Chiamata PUT a ' + url);\r\n\r\n    reqHeaders = reqHeaders.append('authsign', this.customEncriptionService.getB64EncryptedSignature());\r\n\r\n    return this.httpClient.put(url, reqBody, {\r\n                                        headers: reqHeaders,\r\n                                        params: reqParams,\r\n                                        observe: 'response'\r\n                              })\r\n                              .pipe(\r\n                                catchError(this.handleError)\r\n                              );\r\n  }\r\n\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('Errore di chiamata:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Errore Backend Codice ${error.status}, ` +\r\n        `Body: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError(\r\n      'Si sono verificati errori. Riprovare.');\r\n  };\r\n\r\n\r\n    /**\r\n   * Esegue una chiamata GET al'Url specificato, controllando l'errore\r\n   * @param url Url da contattare\r\n   * @param reqHeaders Testata\r\n   * @param reqParams  Parametri\r\n   */\r\n  httpGetFile(url: string, reqHeaders: HttpHeaders) {\r\n    LogApp.consoleLog('Chiamata GET a ' + url);\r\n    \r\n    \r\n    //ritorno la get controllando l'errore\r\n    return this.httpClient.get(url, {\r\n     headers: reqHeaders,\r\n     responseType: 'blob'\r\n    })\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n}\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { SettoreAttivita } from './valuelist.model';\r\nimport { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { Time } from '@angular/common';\r\n\r\nexport class OccupazioneCampi extends IDDocument {\r\n\r\n    IDREF: string;\r\n    TIPO: SettoreAttivita;\r\n    IDAREA: string;\r\n    IDLOCATION: string;\r\n    IDCAMPO: string;\r\n    DATAORAINIZIO: Date;\r\n    DATAORAFINE: Date;\r\n    DATAINIZIO: Date;\r\n    DATAFINE: Date;\r\n    ORAINIZIO: Date;\r\n    ORAFINE: Date;\r\n\r\n\r\n    //a Seconda di TIPO cambiano le logiche di ID e IDREF\r\n    //Tipo = SettoreAttivita.Corso -> ID = IDPianificazioneCorso IDREF = IDCorso \r\n    //Tipo = SettoreAttivita.Prenotazione -> ID = IDPianificazionePrenotazione e IDREF = IDPrenotazione\r\n    \r\n    constructor(onlyInstance?:boolean) {\r\n      \r\n        super(onlyInstance);\r\n        \r\n    }\r\n  \r\n  \r\n     /**\r\n      * Ritorna il descrittore della Struttura Campi\r\n     */\r\n     getDescriptor(): Descriptor {\r\n      let objDescriptor = new Descriptor();\r\n      let arString = ['IDAREA',\r\n                      'IDREF',\r\n                      'IDLOCATION',\r\n                      'IDCAMPO'\r\n                      ];\r\n      let arNumber = ['TIPO'];\r\n      let arBoolean = [];\r\n      let arDate = ['DATAINIZIO','DATAFINE'];\r\n      let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\r\n      let arTime = ['ORAINIZIO','ORAFINE'];\r\n      let arCollection = [];\r\n  \r\n      objDescriptor.className = 'OccupazioneCampi';\r\n      objDescriptor.doRemote = true;\r\n      objDescriptor.classWebApiName = 'OCCUPAZIONECAMPI';\r\n      objDescriptor.describeField = '';\r\n  \r\n      objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n      objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n      objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n      objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n      objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n      objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n      objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n  \r\n      objDescriptor.setRelation('IDAREA','Area');\r\n      objDescriptor.setRelation('IDLOCATION','Location');\r\n      objDescriptor.setRelation('IDCAMPO','Campo');\r\n\r\n      if(this.TIPO == SettoreAttivita.settorePrenotazione){\r\n          objDescriptor.setRelation('IDREF', 'Prenotazione');\r\n      }\r\n      else if (this.TIPO == SettoreAttivita.settoreCorso){\r\n        objDescriptor.setRelation('IDREF', 'Corso');\r\n      }\r\n      \r\n      return objDescriptor;\r\n  }\r\n\r\n  get iconName(): string{\r\n    let iconName: string = '';\r\n    switch(this.TIPO){\r\n        case SettoreAttivita.settoreCorso:\r\n            iconName = 'school';\r\n            break;\r\n\r\n        case SettoreAttivita.settorePrenotazione:\r\n            iconName = 'calendar-outline';\r\n            break;\r\n    }\r\n\r\n    return iconName;\r\n  }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take, tap} from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { Livello } from '../models/livello.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LivelloService {\r\n\r\n  private _listLivelli = new BehaviorSubject<Livello[]>([]);\r\n  private _loaded: boolean; //Sport sono stati richiesti al server e sono caricati in memoria\r\n\r\n  constructor(private apiService: ApicallService,\r\n              private docService: DocstructureService) { \r\n    this._loaded = false;\r\n  }\r\n\r\n  get listLivelli() {\r\n    return this._listLivelli.asObservable();\r\n  }\r\n  \r\n    /**\r\n   * Ritorna la lista non in modalità Observable\r\n   */\r\n  get actualListLivelli() {\r\n    return this._listLivelli.getValue();\r\n  }  \r\n\r\n\r\n\r\n  /**\r\n   * Richiede al server l'elenco dei Livelli\r\n   * @param config Parametri configurazione chiamata\r\n   */\r\n  request(config: StartConfiguration) {\r\n    return new Promise<Livello[]>((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      \r\n      const doObject = 'LIVELLO';\r\n  \r\n      \r\n      //Nei Parametri imposto il LivelloAutorizzazione\r\n      let myParams = new HttpParams().set('LivelloAutorizzazione','0');\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n          return data.LIVELLO\r\n        }))\r\n        .subscribe(resultData => {\r\n  \r\n          if (resultData) {\r\n\r\n            //Arrivati dal server\r\n            this._loaded = true;\r\n    \r\n            for (let index = 0; index < resultData.length; index++) {\r\n              const element = resultData[index];\r\n              let newLivello = new Livello();\r\n              newLivello.setJSONProperty(element);\r\n              this.addLivello(newLivello);\r\n            }\r\n\r\n            resolve(this.actualListLivelli);\r\n\r\n          }\r\n          else {\r\n            reject('No data Livello retrieved');\r\n          }\r\n  \r\n        }, error=>{\r\n          reject(error);\r\n        });\r\n    })\r\n\r\n  }\r\n\r\n  \r\n\r\n  //Aggiunge un livello\r\n  addLivello(objLivello: Livello) {\r\n\r\n    this.listLivelli\r\n      .pipe(take(1))\r\n      .subscribe( collLivelli => {\r\n        this._listLivelli.next( collLivelli.concat(objLivello))\r\n      });\r\n    \r\n      \r\n  }\r\n\r\n  /**\r\n   * Richiede al server l'elenco dei Livelli per lo Sport\r\n   * @param idSport Sport da utilizzare\r\n   * @returns Promise Array Livelli Ordinati \r\n   * \r\n   */\r\n  requestLivelliForSport(idSport: string):Promise<Livello[]> {\r\n    let collLivelli: Livello[] = [];\r\n\r\n    return new Promise<Livello[]>((resolve) => {\r\n\r\n      if (idSport && idSport.length != 0) {\r\n\r\n        //Devo effettuare la chiamata al server\r\n        let filterLivello: Livello = new Livello(true);\r\n        filterLivello.IDSPORT = idSport;\r\n        \r\n        //Effettuo la richiesta\r\n        this.docService.requestNew(filterLivello)\r\n                       .then((collData:Livello[]) => {\r\n                         collLivelli = collData;\r\n                         resolve(collLivelli);\r\n                       })\r\n                       .catch(error => {\r\n\r\n                        resolve(collLivelli);\r\n                        \r\n                       })\r\n\r\n      }\r\n      else {\r\n        resolve(collLivelli);\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\nexport class ArticoloColore extends IDDocument {\r\n    IDARTICOLO: string;\r\n    DESCRIZIONE: string;\r\n    \r\n       \r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDARTICOLO',\r\n            'DESCRIZIONE',\r\n        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'ArticoloColore';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'ARTICOLOCOLORE';\r\n        objDescriptor.describeField = 'DESCRIZIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n    \r\n        objDescriptor.setRelation('IDARTICOLO','Articolo');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { Area } from '../models/area.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AreaService {\r\n\r\n  //Elenco Aree\r\n  private _listAree = new BehaviorSubject<Area[]>([]);\r\n  private _areaSelected = new BehaviorSubject<Area>(new Area);\r\n\r\n  get listAree() {\r\n    return this._listAree.asObservable();\r\n  }\r\n\r\n  get areaSelected() {\r\n    return this._areaSelected.asObservable();\r\n  }\r\n\r\n  /** Ritorna il valore attuale dell'area selezionata */\r\n  get areaSelectedValue() {\r\n    return this._areaSelected.getValue();\r\n  }\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n\r\n  /**\r\n   * Richiede le Aree legate al Gruppo, ed imposta \r\n   * sia la Lista delle Aree che un Area Selezionata\r\n   * \r\n   * @param config Parametri di configurazione\r\n   */\r\n  request(config: StartConfiguration, _childLevel?:number) {\r\n    return new Promise<void>((resolve, reject)=>{\r\n        let myHeaders = config.getHttpHeaders();\r\n\r\n        const doObject = 'AREAOPERATIVA';\r\n        \r\n        if (!_childLevel){\r\n          _childLevel = 2;\r\n        }\r\n\r\n        myHeaders=myHeaders.set('child-level',_childLevel+'');\r\n\r\n        // Nei parametri imposto il gruppo Sportivo\r\n        let myParams = new HttpParams().set('IDGRUPPOSPORTIVO',config.gruppo.ID);\r\n    \r\n        let myUrl = config.urlBase + '/' + doObject;\r\n    \r\n        this.apiService\r\n          .httpGet(myUrl, myHeaders, myParams)\r\n          .pipe(map(fullData => {\r\n            \r\n            return fullData.AREAOPERATIVA;\r\n          }))\r\n          .subscribe(resultData => {\r\n              \r\n              //Ricreo l'array di Aree\r\n              this._listAree.next([]);\r\n    \r\n              //Aggiungo i valori\r\n              this._addMultipleAree(resultData, true);\r\n\r\n              resolve();\r\n          },\r\n          error=>{\r\n            reject(error);\r\n          });\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Aggiunge un insieme di elementi all'array delle aree\r\n   * @param dataJSON JSON Received\r\n   * @param firstSelect Seleziona il primo elemento e rendilo come Area Selezionata\r\n   */\r\n  private _addMultipleAree(dataJSON: any, firstSelect: boolean) {\r\n    let count = 0;\r\n\r\n    if (dataJSON) {\r\n      dataJSON.forEach(element => {\r\n        let newArea = new Area();\r\n        newArea.setJSONProperty(element);\r\n\r\n        //Primo Giro e mi richiede di selezionare\r\n        if (firstSelect && count == 0) {\r\n          this._areaSelected.next(newArea);\r\n        }\r\n\r\n        this.listAree\r\n          .pipe(take(1))\r\n          .subscribe( collAree => {\r\n            this._listAree.next( collAree.concat(newArea));\r\n          });\r\n\r\n        count++;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Seleziona l'area richiesta per ID\r\n   * @param idArea ID Area da Selezionare\r\n   */\r\n  selectAreaByID(idArea: string) {\r\n    let arElement = this._listAree.getValue();\r\n\r\n    let elSelected = arElement.find(element => {\r\n      return element.ID == idArea;\r\n    });\r\n\r\n    if (elSelected) {\r\n      //Ememtto la modifica\r\n      this._areaSelected.next(elSelected);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\ndeclare var CryptoJS;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CryptoService {\r\n\r\n  constructor() { }\r\n\r\n  //Example here: https://cryptojs.gitbook.io/docs/#hashing\r\n\r\n  //The set method is use for encrypt the value.\r\n  setAES(keys: string, value: string): string\r\n  {\r\n    var key = CryptoJS.enc.Utf8.parse(keys);\r\n    var iv = CryptoJS.enc.Utf8.parse(keys);\r\n    var encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(value.toString()), key,\r\n    {\r\n        keySize: 128 / 8,\r\n        iv: iv,\r\n        mode: CryptoJS.mode.CBC,\r\n        padding: CryptoJS.pad.Pkcs7\r\n    });\r\n\r\n    return encrypted.toString();\r\n  }\r\n\r\n  //The get method is use for decrypt the value.\r\n  getAES(keys: string, value: string): string\r\n  {\r\n    var key = CryptoJS.enc.Utf8.parse(keys);\r\n    var iv = CryptoJS.enc.Utf8.parse(keys);\r\n    var decrypted = CryptoJS.AES.decrypt(value, key, {\r\n        keySize: 128 / 8,\r\n        iv: iv,\r\n        mode: CryptoJS.mode.CBC,\r\n        padding: CryptoJS.pad.Pkcs7\r\n    });\r\n\r\n    return decrypted.toString(CryptoJS.enc.Utf8);\r\n  }\r\n\r\n  setSHA256(keys: string, value: string): string {\r\n    var key = CryptoJS.enc.Utf8.parse(keys);\r\n    var iv = CryptoJS.enc.Utf8.parse(keys);\r\n    var encrypted = CryptoJS.SHA256(CryptoJS.enc.Utf8.parse(value.toString()));\r\n\r\n    return encrypted.toString();\r\n  }\r\n\r\n  \r\n  getBCrypt(value: string):string {\r\n    let encrypted = '';\r\n\r\n    encrypted = value;\r\n\r\n    return encrypted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Prende una stringa che corrisponde a una password e la splitta con questa logica\r\n   * Divide in 2 Array i caratteri in posizione Dispari e in posizione Pari\r\n   * Array Dispari lo ritrasforma in stringa da 0...n \r\n   * Array Pari lo ritrasforma in stringa da n..0\r\n   * Mette le 2 stringhe in elArray per tornarle\r\n   * \r\n   * @param pwd Password da splittare\r\n   * @param elArray Array con le 2 porzioni splittate\r\n   */\r\n  mySplitPassword(pwd:string): string[] {\r\n    let result = false;\r\n    let arFirst: string [] = [];\r\n    let arSecond: string[] = [];\r\n    let strFirst: string;\r\n    let strSecond: string;\r\n    let elArray:string[] = [];\r\n\r\n\r\n    if (pwd && pwd.length !== 0)  {\r\n      result = true;\r\n\r\n      for (let index = 0; index < pwd.length; index++) {\r\n        const token = pwd.substr(index, 1);\r\n\r\n        if ( (index + 1) % 2 == 0) {\r\n          arSecond.push(token);\r\n        }\r\n        else {\r\n          arFirst.push(token);\r\n        }\r\n      }\r\n\r\n      strFirst = arFirst.toString();\r\n      strFirst = strFirst.replace(/,/g,'');\r\n\r\n      strSecond = arSecond.reverse().toString();\r\n      strSecond = strSecond.replace(/,/g,'');\r\n\r\n      elArray = [];\r\n      elArray.push(strFirst);\r\n      elArray.push(strSecond);\r\n    }\r\n\r\n    return elArray;\r\n  }\r\n\r\n}\r\n","import { Injectable, ɵConsole } from '@angular/core';\r\nimport { BehaviorSubject, from, Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { ApicallService } from './apicall.service';\r\nimport { Prenotazione } from '../models/prenotazione.model';\r\nimport { Utente } from '../models/utente.model';\r\nimport { LogApp } from '../models/log.model';\r\nimport { Campo } from '../models/campo.model';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { PrenotazionePianificazione } from '../models/prenotazionepianificazione.model';\r\nimport { SportService } from './sport.service';\r\nimport { ParamsExport } from '../library/models/iddocument.model';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PrenotazioneService {\r\n\r\n\r\n  private _listPrenotazioni = new BehaviorSubject<Prenotazione[]>([]);\r\n  private _activePrenotazione = new BehaviorSubject<Prenotazione>(new Prenotazione());\r\n  private _selectedCampo: Campo;\r\n\r\n  constructor(private apiService: ApicallService, private sportService: SportService) { }\r\n\r\n  /** Prenotazione */\r\n  get activePrenotazione() {\r\n    return this._activePrenotazione.asObservable();\r\n  }\r\n\r\n  get listPrenotazioni() {\r\n    return this._listPrenotazioni.asObservable();\r\n  }\r\n\r\n  //Memorizzo il campo selezionato\r\n  set selectedCampo(value: Campo) {\r\n    this._selectedCampo = value;\r\n  }\r\n\r\n  get selectedCampo() {\r\n    return this._selectedCampo;\r\n  }\r\n\r\n  // Imposta come attiva la Prenotazione passata\r\n  setActivePrenotazione(value: Prenotazione) {\r\n    this._activePrenotazione.next(value);\r\n  }\r\n\r\n  \r\n  /**\r\n   * Inizializza la prenotazione con l'AREA\r\n   * @param idArea Area Operativa\r\n   */\r\n  initActivePrenotazione(idArea: string) {\r\n    this.activePrenotazione\r\n      .pipe(take(1))\r\n      .subscribe( elPrenotazione => {\r\n        elPrenotazione = new Prenotazione();\r\n        elPrenotazione.initNewPrenotazione(idArea);\r\n\r\n        this._activePrenotazione.next(elPrenotazione);\r\n      });\r\n      \r\n  }\r\n\r\n  /**\r\n   * Imposta la Pianificazione Singola\r\n   * @param docPianificazione Pianificazione da impostare\r\n   */\r\n  setPianificazioneSingola(docPianificazione: PrenotazionePianificazione) {\r\n    this.activePrenotazione\r\n      .pipe(take(1))\r\n      .subscribe( elPrenotazione => {\r\n          elPrenotazione.setPianificazioneSingola(docPianificazione);\r\n          this._activePrenotazione.next(elPrenotazione);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  setIDUtenteActivePrenotazione(docUtente: Utente) {\r\n    this.activePrenotazione\r\n    .pipe(take(1))\r\n    .subscribe( elPrenotazione => {\r\n        elPrenotazione.setUtente(docUtente.ID, docUtente.NOMINATIVO);\r\n\r\n        this._activePrenotazione.next(elPrenotazione);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Richiesta elenco Prenotazioni\r\n   * @param config Parametri di configurazione\r\n   * @param idUtente idUtente\r\n   */\r\n  request(config: StartConfiguration) {\r\n    return new Promise((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'PRENOTAZIONE';\r\n      \r\n\r\n\r\n      // Nei parametri imposto il gruppo Sportivo\r\n      let myParams = new HttpParams().set('IDGRUPPOSPORTIVO',config.gruppo.ID);\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(fullData => {\r\n          return fullData.PRENOTAZIONE\r\n        }))\r\n        .subscribe( resultData => {\r\n  \r\n          for (let index = 0; index < resultData.length; index++) {\r\n            const element = resultData[index];\r\n\r\n            let docPrenotazione = new Prenotazione();\r\n            docPrenotazione.setJSONProperty(element);\r\n            this.add2ListPrenotazioni(docPrenotazione);\r\n          }\r\n\r\n          resolve(this._listPrenotazioni.getValue());\r\n\r\n        }, error=>{\r\n          reject (error);\r\n        });\r\n    })\r\n  }\r\n\r\n  //Aggiunge una attivita alla lista globale\r\n  add2ListPrenotazioni(objPrenotazione: Prenotazione) {\r\n\r\n    let listSport = this.sportService.actualListSport;\r\n\r\n    this.listPrenotazioni\r\n      .pipe(take(1))\r\n      .subscribe( collLocation => {\r\n        this._listPrenotazioni.next( collLocation.concat(objPrenotazione));\r\n      });\r\n    \r\n  }\r\n\r\n\r\n  /**\r\n   * Richiede una prenotazione al server\r\n   * @param config Dati configurazione\r\n   * @param idPrenotazione IdPrenotazione \r\n   */\r\n  requestById(config: StartConfiguration, idPrenotazione: string, numLivelli: number) {\r\n    //let myHeaders = new HttpHeaders({'Content-type':'text/plain'}).append('child-level', numLivelli + '');\r\n    let myHeaders = config.getHttpHeaders();\r\n    const doObject = 'PRENOTAZIONE';\r\n    \r\n    \r\n    myHeaders = myHeaders.append('child-level', numLivelli + '');\r\n    // Nei parametri imposto idPrenotazion richiesto\r\n    let myParams = new HttpParams().set('ID',idPrenotazione);\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n    return this.apiService\r\n      .httpGet(myUrl, myHeaders, myParams)\r\n      .pipe(map(fullData => {\r\n\r\n        let docPrenotazione: Prenotazione;\r\n\r\n        if (fullData) {\r\n          if (fullData.hasOwnProperty('PRENOTAZIONE')) {\r\n            let collPrenotazioni = fullData.PRENOTAZIONE;\r\n            if (collPrenotazioni.length !== 0) {\r\n\r\n              let listSport = this.sportService.actualListSport;\r\n              docPrenotazione = new Prenotazione();\r\n              docPrenotazione.setJSONProperty(collPrenotazioni[0]);\r\n\r\n              \r\n              docPrenotazione.PRENOTAZIONEPIANIFICAZIONE.forEach(elPianificazione => {\r\n                  elPianificazione.lookup('IDSPORT', listSport, \"DENOMINAZIONE\");\r\n              });\r\n\r\n            }\r\n          }\r\n        }\r\n        return docPrenotazione;\r\n      }));\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Richiesta al Server il calcolo dell'importo\r\n   * Metodo Statico: MOBBOOKINGTOTALE\r\n   * Body contiene il JSON del documento\r\n   * @param config Parametri di Configurazione\r\n   */\r\n  requestImporto(config: StartConfiguration) {\r\n    let docPrenotazione = this._activePrenotazione.getValue();\r\n\r\n    let myParams = new HttpParams();\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override','MOBBOOKINGTOTALE');\r\n    myHeaders = myHeaders.append('child-level','999');\r\n\r\n    const paramName = 'docPrenotazione'; //Nome del parametro in entrata della funzione WebApi\r\n\r\n    const doObject = 'PRENOTAZIONE';\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramExport = new ParamsExport();\r\n    paramExport.clearDOProperty = false;\r\n    paramExport.clearPKProperty = false;\r\n    paramExport.clearPrivateProperty = true;\r\n    \r\n    //Creo il JSON del documento , eliminando le proprietà private (clear = true) ed inviando le proprietà do e le chiavi primarie(clear = false)\r\n    let myBodyJSON = docPrenotazione.exportToJSON(paramExport);\r\n\r\n    //Il parametro inviato nel body deve essere strutturato cosi\r\n    // { \"nomeParametro\" : { oggetto exportato JSON } }\r\n    let myBody = '{' + '\\\"' + paramName + '\\\"' + ':' + myBodyJSON + '}';\r\n\r\n   \r\n\r\n    return this.apiService\r\n          .httpPost(myUrl,myHeaders, myParams, myBody)\r\n          .pipe(map(fullData => {\r\n            //fulldata è già l'oggetto Prenotazione\r\n            return fullData;\r\n          }));\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna una Promise per salvare il documento\r\n     * @param config Configurazione\r\n     */\r\n    requestSave(config: StartConfiguration): Promise<Prenotazione> {\r\n\r\n      return new Promise((resolve, reject)=>{\r\n          let docPrenotazione = this._activePrenotazione.getValue();\r\n\r\n          let myHeaders = config.getHttpHeaders();                                            \r\n          let myParams = new HttpParams(); \r\n          const paramName = 'docPrenotazione'; //Nome del parametro in entrata della funzione WebApi\r\n          //Imposto gli header aggiuntivi\r\n          myHeaders = myHeaders.append('X-HTTP-Method-Override','MOBBOOKINGSAVE');\r\n          myHeaders = myHeaders.append('child-level','999');\r\n          //Quali proprietà non voglio esportare\r\n          const noExportDO = false;\r\n          const noExportPK = true;\r\n          const noExportPrivate = true;\r\n          const doObject = 'PRENOTAZIONE';\r\n          let myUrl = config.urlBase + '/' + doObject;\r\n\r\n          //Questi sono i parametri per l'esportazione\r\n          let paramExport = new ParamsExport();\r\n          paramExport.clearDOProperty = false;\r\n          paramExport.clearPKProperty = true;\r\n          paramExport.clearPrivateProperty = true;\r\n          \r\n          //Creo il JSON del documento , eliminando le proprietà do e private (true) e le chiavi primarie(true)\r\n          \r\n          let myBodyJSON = docPrenotazione.exportToJSON(paramExport);\r\n          //Il parametro inviato nel body deve essere strutturato cosi\r\n          \r\n          let myBody = '{' + '\\\"' + paramName + '\\\"' + ':' + myBodyJSON + '}';\r\n      \r\n          //Chiamo per il salvataggio                      \r\n          this.apiService\r\n                .httpPost(myUrl,myHeaders, myParams, myBody)\r\n                .subscribe(elPrenotazione => {\r\n\r\n                  let receivedPrenotazione = Prenotazione.getPrenotazioneFromJson(elPrenotazione);\r\n                  \r\n                  if (receivedPrenotazione.ISVALID == true) {\r\n                    resolve(receivedPrenotazione);\r\n                  }\r\n                  else {\r\n                    let errMessage = '';\r\n                    if (receivedPrenotazione.MSGINVALID && receivedPrenotazione.MSGINVALID.length != 0) {\r\n                      errMessage = receivedPrenotazione.MSGINVALID;\r\n                    }\r\n                    else {\r\n                      errMessage = 'Salvataggio Fallito';\r\n                    }\r\n\r\n                    reject(errMessage);\r\n                  }\r\n\r\n                }, error => {\r\n                  console.log(error);\r\n                  let errMessage = 'Errore di connessione';\r\n                  reject(errMessage);\r\n                  \r\n                });\r\n\r\n      });\r\n\r\n      }\r\n\r\n    \r\n    /**\r\n     * Richiede al server la cancellazione di una pianificazione\r\n     * @param idPianificazione \r\n     */\r\n    requestDelete(idPianificazione: string, config: StartConfiguration): Promise<PostResponse>{\r\n\r\n      return new Promise<PostResponse>((resolve, reject) => {\r\n        const method: string = 'MOBBOOKINGDELETE';\r\n        const doObject = 'PRENOTAZIONE';\r\n        const myUrl = config.urlBase + '/' + doObject;\r\n\r\n        //headers\r\n        let myHeaders = config.getHttpHeaders();\r\n        myHeaders = myHeaders.append('X-HTTP-Method-Override', method);\r\n\r\n\r\n        //params\r\n        let myParams = new HttpParams().set('idPianificazione', idPianificazione);\r\n      \r\n        //abbiamo tutto, faccio la richiesta\r\n        this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .subscribe(data => {\r\n          //creo l'oggetto con la risposta\r\n          let response = new PostResponse();\r\n          response.setFromResponse(data);\r\n          resolve(response);\r\n\r\n        },\r\n        err => {\r\n          //creo comunque un postResponse fittizio\r\n          let response = new PostResponse();\r\n          response.result = false\r\n          response.message = \"Connessione non riuscita\";\r\n          reject(response);\r\n        })\r\n        \r\n\r\n      })\r\n\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { PostResponse } from '../library/models/postResult.model';\nimport { PostParams } from '../library/models/requestParams.model';\nimport { DocstructureService } from '../library/services/docstructure.service';\nimport { IscrizioneCorso } from '../models/iscrizionecorso.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IscrizionecorsoService {\n\n  constructor(private docStructureService: DocstructureService\n              ) { }\n\n\n  \n\n  /**\n   * Contatta il server per conoscere se sono ancora \n   * disponibili posti per l'iscrizione a un corso\n   * \n   * Ritorna un oggetto di tipo =>  PostResponse\n   * Result = TRUE (Posti diponibili) / FALSE (Posti Esauriti)\n   * @param idCorso idCorso da interrrogare\n   */\n  getPostiDisponibiliCorso(idCorso: string):Promise<PostResponse> {\n\n    return new Promise<PostResponse>((resolve) => {\n      \n      let myPostParams : PostParams = new PostParams();\n      let myReturn: PostResponse;\n      let docToCall: IscrizioneCorso = new IscrizioneCorso();\n\n\n      if (idCorso && idCorso.length != 0) {\n        myPostParams.key = 'idCorso';\n        myPostParams.value = idCorso;\n\n        this.docStructureService.requestForFunction(docToCall,'getPostiDisponibili','',myPostParams)\n                        .then((risposta: PostResponse) => {\n                          resolve(risposta);\n                        })\n                        .catch(error => {\n                          myReturn = new PostResponse();\n                          myReturn.result = false;\n                          myReturn.message = 'Nessun posto disponibile';\n                          resolve(myReturn);                          \n                        })\n\n\n      }\n      else {\n        myReturn = new PostResponse();\n        myReturn.result = false;\n        myReturn.message = 'Nessun posto disponibile';\n        resolve(myReturn);\n      }\n\n      \n            \n    })\n  }\n\n\n  /**\n   * Chiama il server e richiede una nuova iscrizione corso\n   * PostResponse.result => TRUE Salvataggio Corretto\n   * PostResponse.code => Id Iscrizione salvata\n   * \n   * @param docIscrizione Iscrizione Corso\n   * @returns PostResponse \n   */\n  requestSaveIscrizione(docIscrizione: IscrizioneCorso):Promise<PostResponse> {\n    return new Promise<PostResponse>((resolve, reject) => {\n      let myPostParams : PostParams = new PostParams();\n      let myReturn: PostResponse;\n\n\n\n      if (docIscrizione) {\n        myPostParams.key = 'docIscrizione';\n        myPostParams.value = docIscrizione;\n\n        this.docStructureService.requestForFunction(docIscrizione,'mobBookingSave',docIscrizione,myPostParams)\n                        .then((risposta: PostResponse) => {\n                          resolve(risposta);\n                        })\n                        .catch(error => {\n                          myReturn = new PostResponse();\n                          myReturn.result = false;\n                          myReturn.message = error.message;\n                          resolve(myReturn);                          \n                        })\n\n\n      }\n      else {\n        myReturn = new PostResponse();\n        myReturn.result = false;\n        myReturn.message = 'Errore preparazione Iscrizione';\n        resolve(myReturn);\n      }\n\n    })\n  }\n\n}\n","import { TypeDefinition, Descriptor, TypeReflector } from './descriptor.model';\r\nimport { MyDateTime } from './mydatetime.model';\r\n\r\n\r\n \r\n  export class IDDocument {\r\n    ID: string;\r\n    \r\n    do_updated: boolean;\r\n    do_loaded: boolean;\r\n    do_inserted: boolean;\r\n    do_deleted: boolean;\r\n    selected: boolean;\r\n\r\n\r\n    //Condizioni di filtro\r\n    _filterConditions:FilterCondition[];\r\n\r\n    //Valori originali\r\n    _original:IDOriginal;\r\n\r\n    //Repository per aggiungere documenti di riferimento con quello in esame\r\n    _repositoryRelDoc: IDRepository[];\r\n\r\n    //Tag documentali\r\n    _tags: IDTag[];\r\n  \r\n    /**\r\n     * \r\n     * @param onlyInstance Non inizializzare con valori predefiniti il documento, crea solo l'istanza\r\n     */\r\n    constructor(onlyInstance?:boolean) {\r\n\r\n        this._filterConditions = [];\r\n        this._original = new IDOriginal();\r\n        this._repositoryRelDoc = [];\r\n        this._tags = [];\r\n\r\n       if (!onlyInstance) {\r\n          this.ID = this.newID();\r\n          this.do_inserted = true;\r\n          this.selected = false;\r\n       }\r\n    }\r\n\r\n    \r\n\r\n    get inserted(): boolean {\r\n      return this.do_inserted;\r\n    }\r\n\r\n    get deleted(): boolean {\r\n      return this.do_deleted;\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca nel documento la proprietà icone o iconasport e ne calcola \r\n     * la stringa esadecimale\r\n     */\r\n    get htmlIconHex() {\r\n      let value = '';\r\n      let valueIcon = '';\r\n      if (this.hasOwnProperty('IDSPORT')) {\r\n        if (this.hasOwnProperty('ICONASPORT')) {\r\n          value = this['ICONASPORT'];\r\n        }\r\n      }\r\n      else if (this.hasOwnProperty('ICONA')) {\r\n        value = this['ICONA'];\r\n      }\r\n\r\n      if (value.length == 0) {\r\n        value = 'e830'\r\n      }\r\n\r\n      valueIcon = '&#x' + value + ';'\r\n  \r\n      return valueIcon;\r\n    }\r\n\r\n    /**\r\n     * Ritorna un array di Type Reflector dei campi \r\n     * che formano l'insieme delle ForeignKeys\r\n     */\r\n    get ForeignKeys(): TypeReflector[] {\r\n      let objDescriptor = this.getDescriptor();\r\n\r\n      return objDescriptor.foreignKeys;\r\n    }\r\n  \r\n    /**\r\n     * Imposta il valore nella chiave primaria\r\n     * @param value Valore Chiave Primaria\r\n     */\r\n    setPrimaryKey(value:any) {\r\n      this.ID = value;\r\n    }\r\n\r\n    /**\r\n     * Ritorna la PrimaryKey del documento\r\n     * @param type = 'value' Torna il fieldValue\r\n     * @param type = 'name' Torna il fieldName\r\n     */\r\n    getPrimaryKey(type:string = 'value'): any {\r\n      \r\n      let objDescriptor: Descriptor;\r\n      let propName = '';\r\n      let retValue = '';\r\n\r\n      objDescriptor = this.getDescriptor();\r\n        if (objDescriptor) {\r\n          propName = objDescriptor.primaryKeyFieldName;\r\n          if (propName) {\r\n\r\n            if (type == 'value') {\r\n\r\n              try {            \r\n                retValue = this[propName];\r\n              } catch (error) {\r\n                retValue = ''  ;\r\n                console.log(error);\r\n              }\r\n            }\r\n            else if (type == 'name') {\r\n              retValue = propName;\r\n            }\r\n\r\n          }\r\n        }\r\n           \r\n        return retValue;\r\n    \r\n    }\r\n\r\n    \r\n    //Generazione GUID\r\n    newID() {\r\n      let strValue = '10000000-1000-4000-8000-100000000000';\r\n      let guid = strValue.replace(/[018]/g, c =>\r\n        (parseInt(c) ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> parseInt(c) / 4).toString(16));\r\n\r\n      guid = guid.toUpperCase();\r\n\r\n      \r\n      return guid;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Metodo Overrable\r\n     */\r\n    getDescriptor(): Descriptor {\r\n      let objDescriptor = new Descriptor();\r\n      objDescriptor.add('ID',TypeDefinition.char);\r\n      return objDescriptor;\r\n    }\r\n\r\n\r\n    /**\r\n     * Converte e formatta un valore in stringa\r\n     * Usato per scriverlo nei parametri di chiamata\r\n     * @param tipo Tipo del dato\r\n     * @param value Valore\r\n     */\r\n    formatValue(tipo: TypeDefinition, value: any): string {\r\n      let strValue = '';\r\n      switch (tipo) {\r\n        case TypeDefinition.char:\r\n            strValue = value;\r\n        break;\r\n      \r\n        case TypeDefinition.date:\r\n            strValue = MyDateTime.formatDateISO(value);\r\n        break;\r\n\r\n        case TypeDefinition.dateTime:\r\n            strValue = MyDateTime.formatDateTimeISO(value);\r\n        break;\r\n\r\n        case TypeDefinition.time:\r\n            strValue = MyDateTime.formatTime(value);\r\n        break;\r\n\r\n        case TypeDefinition.boolean:\r\n            if (value) {\r\n              strValue = '-1'\r\n            }\r\n            else {\r\n              strValue = '0';\r\n            }\r\n        break;\r\n        \r\n        case TypeDefinition.number:\r\n        case TypeDefinition.numberDecimal:\r\n            strValue = value + '';\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return strValue;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Esporta l'oggetto in JSON\r\n     * @param paramExport Oggetto con le caratteristiche esportazione\r\n     * contiene \r\n     *  clearDOProperty Non esporta le proprietà tipiche del documento (selected, do_insert etc)\r\n     *  clearPKProperty Non esporta la Chiave primaria\r\n     *  clearPrivateProperty Non esporta le proprietà private\r\n     *  onlyModified Esporta solo le proprietà diverse dalle original\r\n     *  numLivelli Numero livelli da esportare\r\n     */\r\n    exportToJSON(paramExport: ParamsExport) {\r\n      let _this = this;\r\n      let arProperty = Object.keys(_this);\r\n      //Chiedo il Descrittore della classe\r\n      let objDescriptor = _this.getDescriptor();\r\n      let strJSON = '';\r\n      let doProperty = ['do_updated',' do_loaded','do_inserted','do_deleted','selected'];\r\n      let propExclud = [];\r\n      let row = '';\r\n      let skipAll = false;\r\n      \r\n      if (!paramExport) {\r\n        paramExport = new ParamsExport();\r\n      }\r\n\r\n      // Vuole eliminare le doProperty, le aggiungo all'Array\r\n      if (paramExport.clearDOProperty) {\r\n        //Popolo l'array propExclud con le doProperty\r\n        doProperty.forEach(element => {\r\n          propExclud.push(element);\r\n        });\r\n      }\r\n\r\n      //Se vuole non esportare la chiave primaria la aggiungo all'Array esclusioni\r\n      if (paramExport.clearPKProperty) {\r\n        propExclud.push(this.getPrimaryKey('name'));\r\n      }\r\n\r\n      //Devo esportare solo i documenti modificati e non ci sono modifiche\r\n      if (paramExport.onlyDocModified && !this.isModified(999)) {\r\n        skipAll = true;\r\n      }\r\n\r\n      if (!skipAll) {\r\n        \r\n        //Ciclo sulle proprietà\r\n        arProperty.forEach(element => {\r\n          \r\n          let useElement = true;\r\n          \r\n          //Se devo togliere le proprietà private le elimino\r\n          if (paramExport.clearPrivateProperty && element.startsWith('_')) {\r\n            \r\n            useElement = false;\r\n          \r\n          }\r\n  \r\n          //Controlliamo se il valore è diverso dal valore original\r\n          if (paramExport.onlyPropertyModified) {\r\n            //Chiave primaria devo passarla anche se non modificata\r\n            if (element != this.getPrimaryKey('name')) {\r\n              //Controllo se la proprietà risulta modificata o no\r\n              if (_this.propertyIsModified(element) == false) {\r\n                useElement = false;\r\n              }\r\n            }\r\n          }\r\n  \r\n          if (useElement) {\r\n  \r\n            //Inizio la riga con l'elemento\r\n            row = '\\\"' + element + '\\\"' + ':';\r\n    \r\n            //Proprietà di tipo Array\r\n            if (Array.isArray(_this[element]) == true) {\r\n              //Qui gestisco l'Array\r\n              let arElements = _this[element];\r\n              let strArray = '';\r\n              let strElArray = '';\r\n              \r\n              //Ciclo sugli elementi\r\n              for (let index = 0; index < arElements.length; index++) {\r\n                let element: IDDocument;\r\n                 element = arElements[index];\r\n                 strElArray = element.exportToJSON(paramExport);\r\n\r\n                 if (strElArray && strElArray.trim().length != 0) {\r\n                   if (strArray.length !== 0) {\r\n                      strArray += ', '\r\n                   }\r\n                   strArray += strElArray;\r\n                 }\r\n              }\r\n    \r\n              row += '[' + strArray + ']';\r\n    \r\n              if (strJSON.length !== 0) {\r\n                strJSON += ', ';\r\n              }\r\n    \r\n              strJSON += row;\r\n            }\r\n            else {\r\n              let skip = false;\r\n              //Vuole eliminare le proprietà DO e private e/o le chiavi primarie\r\n              if (propExclud.length !== 0) {\r\n                if (propExclud.includes(element)) {\r\n                  skip = true;\r\n                }\r\n              }\r\n    \r\n              //Proseguo con l'esportazione\r\n              if (!skip) {\r\n    \r\n                  //Chiedo il Tipo del Campo con il descriptor\r\n                  let tipoCampo = objDescriptor.getType(element);\r\n    \r\n                  if (tipoCampo !== TypeDefinition.undefined && (_this[element]!== undefined)) {\r\n    \r\n                    switch (tipoCampo) {\r\n    \r\n                      case TypeDefinition.boolean:\r\n                        row += _this[element];\r\n                        break;\r\n                    \r\n                      case TypeDefinition.number:\r\n                        row += _this[element]; \r\n                        break;\r\n    \r\n                      case TypeDefinition.numberDecimal:\r\n                        row += _this[element]; \r\n                        break;\r\n    \r\n                      case TypeDefinition.time:\r\n                        //E' un orario\r\n                        row += '\\\"' + this.formatDateTimeISO(_this[element]) + '\\\"';\r\n                        break;\r\n    \r\n                      case TypeDefinition.date:\r\n                        //E' una data\r\n                        row += '\\\"' + this.formatDateISO(_this[element]) + '\\\"';\r\n                        break;\r\n    \r\n                      case TypeDefinition.dateTime:\r\n                        //Campo di tipo DATAORA\r\n                        row += '\\\"' + this.formatDateTimeISO(_this[element]) + '\\\"' ;\r\n                        break;\r\n                      case TypeDefinition.char:\r\n                        let valore = _this[element];\r\n                        //Se la stringa contenesse all'interno simboli di \" devono essere esportati come \\\"\r\n                        //Esempio: \"ciao\";\"tuo\" => \\\"ciao\\\";\\\"tuo\\\"\r\n                        valore = valore.replace(/\"/g, \"\\\\\\\"\");\r\n                        row += '\\\"' + valore + '\\\"';\r\n                        \r\n                        break;\r\n    \r\n                      default:\r\n                        row += _this[element];\r\n                        break;\r\n                    }\r\n    \r\n                  } \r\n                  else {\r\n                    row += 'null';\r\n                  }   \r\n                  \r\n                  \r\n                  if (strJSON.length !== 0) {\r\n                    strJSON += ', ';\r\n                  }\r\n    \r\n                  strJSON += row;\r\n              }\r\n    \r\n            }\r\n  \r\n          }\r\n        });\r\n  \r\n        strJSON = '{' + strJSON + '}';\r\n\r\n      }\r\n\r\n      return strJSON;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Ritorna il documento in Stringa JSON\r\n     */\r\n    toJSON() {\r\n      let strJSON = '';\r\n      let _this = {...this};\r\n      let arKeys = Object.keys(_this);\r\n\r\n      /** Ciclo sulle proprietà */\r\n      /* Ho il problema di formattazione Data/Ora che INDE lo vuole come YYYY-MM-DD hh:nn:ss */\r\n      arKeys.forEach(element => {\r\n        if (_this[element] instanceof Date) {\r\n          //Se è di tipo data lo cambio formattandolo in ISODATETIME\r\n          _this[element] = this.formatDateTimeISO(_this[element]);\r\n        }\r\n      });\r\n\r\n      // Ora eseguo lo stringify\r\n      strJSON = JSON.stringify(_this);\r\n\r\n      return strJSON;\r\n    }\r\n\r\n  \r\n     // Imposta le proprietà basiche dell'oggetto via JSON\r\n     setJSONProperty(dataObject: any) {\r\n      let _this = this;\r\n      let arProperty = Object.keys(dataObject);      \r\n\r\n      //Chiedo il Descrittore della classe\r\n      let objDescriptor = _this.getDescriptor();\r\n  \r\n      // Gli elementi di tipo Array non li copio\r\n      arProperty.forEach(element => {\r\n          if (Array.isArray(dataObject[element]) == false) {\r\n\r\n              //Chiedo il Tipo del Campo con il descriptor\r\n              let tipoCampo = objDescriptor.getType(element);\r\n\r\n              if (tipoCampo !== TypeDefinition.undefined) {\r\n                switch (tipoCampo) {\r\n\r\n                  case TypeDefinition.boolean:\r\n                    let value = parseInt(dataObject[element],10);\r\n                    \r\n                    if (value === -1) {\r\n                      _this[element] = true;  \r\n                    }\r\n                    else {\r\n                      _this[element] = false;\r\n                    }\r\n\r\n                    \r\n                    break;\r\n                \r\n                  case TypeDefinition.number:\r\n                    _this[element] = +dataObject[element]; \r\n                    break;\r\n\r\n                  case TypeDefinition.numberDecimal:\r\n                    _this[element] = +dataObject[element]; \r\n                    break;\r\n\r\n                  case TypeDefinition.time:\r\n                    _this[element] = MyDateTime.stringToDateObject(dataObject[element]);\r\n                    break;\r\n\r\n                  case TypeDefinition.date:\r\n                    //E' una data\r\n                    _this[element] = MyDateTime.stringToDateObject(dataObject[element]);\r\n                    break;\r\n\r\n                  case TypeDefinition.dateTime:\r\n                    _this[element] = MyDateTime.stringToDateObject(dataObject[element]);\r\n                    break;\r\n\r\n                  default:\r\n                    _this[element] = dataObject[element] + '';\r\n                    break;\r\n                }\r\n\r\n              }\r\n              \r\n             \r\n          }\r\n          \r\n\r\n      });\r\n\r\n      //Imposto che il documento è originale\r\n      this.setOriginal();\r\n\r\n    }\r\n\r\n    //Formatta una data passata in ISO (Solo la parte data)\r\n    formatDateISO(data: Date) {\r\n      \r\n      let format = MyDateTime.formatDateISO(data);\r\n\r\n      return format;\r\n    }\r\n\r\n    //Formatta una data passata in ISO (Data e Ora)\r\n    formatDateTimeISO(data: Date) {\r\n      let final = MyDateTime.formatDateTimeISO(data);\r\n      return final;\r\n    }\r\n\r\n    /** Imposta il documento Originale come se fosse sul database */\r\n    setOriginal() {\r\n      \r\n      this.do_updated = false;\r\n      this.do_inserted = false;\r\n      this.do_deleted = false;\r\n      this.do_loaded = true;\r\n\r\n      //Imposta il documento come originale\r\n      this._original.setAsOriginal(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Imposta tutti gli elementi come cancellati\r\n     * @param arElements Array di ELementi IDDOcument o che estendono IDDocument\r\n     */\r\n    static setAllDeleting(arElements: IDDocument[]) {\r\n      if (arElements) {\r\n        arElements.forEach(element => {\r\n          element.do_deleted = true;\r\n        });\r\n      }\r\n    }\r\n\r\n    //#region FUNZIONI STATICHE\r\n    \r\n    /**\r\n     * Ritorna TRUE / FALSE a seconda se un elemento è Numerico o No\r\n     * @param value Valore da controllare\r\n     */\r\n    static isNumber(value: string | number): boolean\r\n    {\r\n      return ((value != null) &&\r\n              (value !== '') &&\r\n              !isNaN(Number(value.toString())));\r\n    }\r\n    \r\n    //#endregion\r\n\r\n    //#region REFLECTOR PROPRIETA'\r\n\r\n    /**\r\n     * Tipo della proprietà\r\n     * @param PropertyName Nome della proprietà\r\n     */\r\n    getPropertyType(PropertyName: string): TypeDefinition {\r\n      \r\n      let objDescriptor = this.getDescriptor();\r\n\r\n      return objDescriptor.getType(PropertyName);\r\n\r\n    }\r\n\r\n    /**\r\n     * Ritorna TypeReflector del campo passato come parametro\r\n     * @param fieldName Nome del campo\r\n     */\r\n    getTypeReflectorByFieldName(fieldName: string): TypeReflector {\r\n      let objDescriptor = this.getDescriptor();\r\n\r\n      return objDescriptor.getByFieldName(fieldName);\r\n\r\n    }\r\n\r\n    /**\r\n     * Controlla se il campo è presente nell'istanza\r\n     * @param fieldName Nome del campo richiesto\r\n     */\r\n    propertyInDoc(fieldName: string): boolean {\r\n      let arProperty = Object.keys(this);\r\n      let contain = false;\r\n      if (fieldName && fieldName.length !== 0) {\r\n        contain = arProperty.includes(fieldName);\r\n      }\r\n\r\n      return contain;\r\n\r\n    }\r\n    //#endregion\r\n\r\n\r\n\r\n    /**\r\n     * Controlla se un campo contiene dei dati oppure è vuoto\r\n     * considerando qualsiasi valore undefined, null, nullstring\r\n     * @param fieldName Nome del campo\r\n     */\r\n    propertyIsEmpty(fieldName:string): boolean {\r\n      let inDoc = this.propertyInDoc(fieldName);\r\n      let empty = false;\r\n\r\n      if (inDoc) {\r\n        if (this[fieldName]==undefined || this[fieldName]== null) {\r\n          empty = true;\r\n        }\r\n        else {\r\n          empty = (this[fieldName] + '').length==0?true:false;\r\n        }\r\n      }\r\n      else {\r\n        empty = true;\r\n      }\r\n\r\n      return empty;\r\n    }\r\n\r\n    //#region CONTROLLO MODIFICHE DOCUMENTO\r\n\r\n    /**\r\n     * Controlla se una proprietà risulta modificata\r\n     * @param propertyName Nome Proprietà\r\n     */\r\n    propertyIsModified(propertyName: string): boolean {\r\n      let modified = false;\r\n      let typeProp = this.getTypeReflectorByFieldName(propertyName);\r\n      //Proprietà presente\r\n      if (this.propertyInDoc(propertyName)&&typeProp) {\r\n        if (typeProp.fieldType != TypeDefinition.collection) {\r\n          modified = this._original.propertyIsModified(this, propertyName);\r\n        }\r\n        else {\r\n          //E' una collection\r\n          let arList:IDDocument[] = this[propertyName];\r\n          for (let index = 0; index < arList.length; index++) {\r\n            const elDoc = arList[index];\r\n            modified = elDoc.isModified(10);\r\n            if (modified) {\r\n              //Se modificato esco\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return modified;\r\n    }\r\n\r\n    /**\r\n     * Controlla se il documento è in stato modificato (il documento o i documenti delle sue collection)\r\n     * @param numLivelli NumLivelli = 0 Controlla solo il documento, 1 il documento e il primo livello etc..\r\n     */ \r\n    isModified(numLivelli = 0): boolean {\r\n      let objDescriptor: Descriptor;\r\n      let retModified = false;\r\n\r\n      //Chiedo il descrittore dei campi\r\n      objDescriptor = this.getDescriptor();\r\n\r\n      if (objDescriptor) {\r\n        //Ciclo su tutte le proprietà non di tipo collection\r\n        for (let index = 0; index < objDescriptor.fields.length; index++) {\r\n          const element = objDescriptor.fields[index];\r\n          if (element.fieldType !== TypeDefinition.collection) {\r\n            //Chiedo alla proprietà se è modificata\r\n            retModified = this.propertyIsModified(element.fieldName);\r\n            if (retModified) {\r\n              //Basta che un valore sia modificato e tutto il documento \r\n              //è modificato\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        //Il documento nelle sue proprietà non è modificato\r\n        if (!retModified) {\r\n          //Devo scendere di livello e controllare se sono \r\n          //modificati i figli\r\n          if (numLivelli > 0) {\r\n            //Ciclo ancora sul descrittore\r\n            for (let index = 0; index < objDescriptor.fields.length; index++) {\r\n              const element = objDescriptor.fields[index];\r\n              //Cerco le collection\r\n              if (element.fieldType == TypeDefinition.collection) {\r\n                //il Documento contiene questa collection ?\r\n                if (this.propertyInDoc(element.fieldName)) {\r\n                  if (Array.isArray(this[element.fieldName])) {\r\n                    //Prendo l'array di elementi e ciclo alla ricerca\r\n                    let arElements:IDDocument[] = this[element.fieldName];\r\n\r\n                    //Ciclo sugli elementi dell'array\r\n                    for (let index = 0; index < arElements.length; index++) {\r\n                      const elDoc = arElements[index];\r\n                      retModified = elDoc.isModified(numLivelli - 1);\r\n                      if (retModified) {\r\n                        //Ne basta uno e il documento è modificato\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              \r\n              if (retModified) {\r\n                //Ne basta uno per renderlo modificato\r\n                break;\r\n              }\r\n\r\n            }\r\n          }\r\n        }\r\n        \r\n      }\r\n\r\n\r\n      return retModified;\r\n      \r\n\r\n    }\r\n    //#endregion\r\n\r\n    //#region REPOSITORY REL DOC\r\n    /*\r\n    *  Con il _repositoryRelDoc si consente di includere nell'oggetto altri documenti che hanno un nesso con l'attuale\r\n    *  Documenti arrivati da una operazione di getRelDoc ad esempio\r\n    *  \r\n    * addToRepositoryRelDoc(document: IDDocument) => Si aggiunge un documento al repository (se il documento per chiave primaria esiste gia aggiorna)\r\n    * findInRepositoryRelDoc(prOrSeq: string || []) => Torna il documento del repository cercandolo per chiave primaria, oppure per sequenza campi\r\n    * getRelDocProperty(prOrSeq: string || [], fieldName: string) => Torna il valore della proprietà richiesta del documento con primaryKey passata o sequenza campi\r\n    */\r\n\r\n    /**\r\n     * Aggiunge, se non presente il documento alla repositoryRelDoc\r\n     * @param document Documento da includere\r\n     * @param seqFields Array con la sequenza dei campi usati per il recupero documentale\r\n     */\r\n    addToRepositoryRelDoc(document: IDDocument, seqFields?:string[]): void {\r\n      let docExist: IDDocument;\r\n      let identity = '';\r\n\r\n      //Documento da aggiungere\r\n      if (document) {\r\n        //Aggiungo con una sequenza \r\n        if (seqFields && seqFields.length != 0) {\r\n          identity = seqFields.toString();\r\n        }\r\n        else {\r\n          //Aggiungo per primaryKey\r\n          //Chiedo la PrimaryKey\r\n          identity = document.getPrimaryKey();  \r\n        }\r\n\r\n        //Cerco se è già nel repository\r\n        if (identity && identity.length != 0) {\r\n          docExist = this.getDocInRepository(identity);\r\n        }\r\n\r\n        //Esiste lo aggiorno\r\n        if (docExist) {\r\n          docExist = document;\r\n        }\r\n        else {\r\n\r\n          let newRep = new IDRepository();\r\n          newRep.relDoc = document;\r\n\r\n          if (seqFields && seqFields.length != 0) {\r\n              newRep.seqFields = seqFields;\r\n          }\r\n\r\n          this._repositoryRelDoc.push(newRep);\r\n        }\r\n        \r\n      }\r\n    }\r\n\r\n    /**\r\n     * Cerca un documento nel repository o per sequenza di campi o per chiave primaria\r\n     * @param pkOrSeq String PrimaryKey oppure Array con la Sequenza\r\n     */\r\n    getDocInRepository(pkOrSeq:any):IDDocument {\r\n\r\n      let docReturn: IDDocument;\r\n      let identity: string;\r\n\r\n      if (pkOrSeq) {\r\n        if (Array.isArray(pkOrSeq)) {\r\n          identity = pkOrSeq.toString();\r\n        }\r\n        else {\r\n          identity = pkOrSeq;\r\n        }\r\n\r\n        if (identity && identity.length != 0) {\r\n          //Ricerchiamo all'interno del repository\r\n          for (let index = 0; index < this._repositoryRelDoc.length; index++) {\r\n            const element = this._repositoryRelDoc[index];\r\n            \r\n            //Documento trovato lo ritorno\r\n            //FIXME aggiunta seconda condizione, da vedere se va tutto bnene\r\n            if (identity == element.identifier || identity == element.relDoc.ID) {\r\n                docReturn = element.relDoc;\r\n                break;\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n      return docReturn;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ricerca tra i documenti nel repository, il documento con la primaryKey passata e ritorna il valore della proprietà indicata\r\n     * @param pkOrSeq  Chiave Primaria documento oppure Array con la SeqFields esempio ['IDLOCATION','IAREA']\r\n     * @param fieldName Nome della proprietà da decodificare\r\n     */\r\n    getDocPropertyInRepository(pkOrSeq: any, fieldName: string): any {\r\n      let relDoc: IDDocument;\r\n      let valRet: any;\r\n      let identity = '';\r\n\r\n      if (pkOrSeq && fieldName && fieldName.length != 0) {\r\n        //Identita di un Documento Correlato è o la chiave primaria o la sequenza dei campi di ricerca\r\n        if (Array.isArray(pkOrSeq)) {\r\n          identity = pkOrSeq.toString();\r\n        }\r\n        else {\r\n          identity = pkOrSeq;\r\n        }\r\n\r\n        //Con una identity cerco il documento\r\n        if (identity) {\r\n          relDoc = this.getDocInRepository(identity);\r\n\r\n        }\r\n\r\n        //Se è presente il documento, ricavo la proprietà\r\n        if (relDoc) {\r\n          let inDoc = relDoc.propertyInDoc(fieldName);\r\n\r\n          if (inDoc) {\r\n            valRet = relDoc[fieldName];\r\n          }\r\n        }\r\n      }\r\n\r\n      return valRet;\r\n    }\r\n\r\n\r\n    //#endregion\r\n\r\n    //#region JSON MODIFICHE\r\n    /**\r\n     * UTILIZZATO PRIMA DELLE CREAZIONE DELLA LOGICA ORIGINAL\r\n     * \r\n     * L'istanza documento viene popolata con la CHIAVE PRIMARIA \r\n     * e tutte le proprietà che risultano presenti in docActual ma con un valore modificato in docModify\r\n     * L'istanza del documento puo' essere usata per costruire un JSON di Aggiornamento verso il server\r\n     * da includere nel body\r\n     * Documento Attuale e Documento Modificato non verranno alterati dall'operazione\r\n     * Ritorna TRUE se ci sono proprietà modificate\r\n     * @param docActual Documento Attuale\r\n     * @param docModify Documento Modificato\r\n     */\r\n    setWithChanges(docActual: IDDocument, docModify: IDDocument): boolean {\r\n      let hasModifiche = false;\r\n      let _this = this;\r\n\r\n      // La chiave primaria viene sempre copiata\r\n      _this.ID = docActual.ID;\r\n\r\n      //Chiedo il Descrittore della classe\r\n      let objDescriptor = _this.getDescriptor();\r\n\r\n      /**\r\n       * Ciclo sui campi del documento\r\n       */\r\n      objDescriptor.fields.forEach(field => {\r\n        \r\n        // Per includere il campo \r\n        // 1) Non deve essere una collection\r\n        // 2) Non deve essere un campo di Servizio documentale ID, do_deleted etc \r\n        // 3) Deve esistere sul server\r\n        if (field.fieldType !== TypeDefinition.collection && !field.serviceField() && field.nativeField()) {\r\n          // Il documento con le modifiche possiede il campo\r\n          if (docModify.hasOwnProperty(field.fieldName)) {\r\n            // Il valore è differente\r\n            if (docActual[field.fieldName] !== docModify[field.fieldName]) {\r\n              //Applico la modifica\r\n              _this[field.fieldName] = docModify[field.fieldName];\r\n              hasModifiche = true;\r\n            }\r\n          }\r\n        }\r\n      })\r\n      \r\n \r\n\r\n      return hasModifiche;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Modificatore dell'esportazione JSON per le Date\r\n     * @param key Chiave\r\n     * @param value Valore\r\n     */\r\n    JSONReplacer(key: any, value: any) {\r\n      if (value instanceof Date ) {\r\n        return this.formatDateTimeISO(value);\r\n      }\r\n\r\n      return value;\r\n    }\r\n    //#endregion\r\n\r\n\r\n    //#region DECODIFICA PROPRIETA\r\n\r\n    //Esegue la decodifica della proprieta\r\n    //Tutte le proprietà hanno la chiave \r\n    //in un campo denominato IDXYZ \r\n    //e decodificate in campi _DESCRXYZ\r\n\r\n    /**\r\n     * \r\n     * @param propertyToDecode Nome della proprietà da decodificare\r\n     * @param listDecode Lista con gli elementi\r\n     * @param propertyLookup Nome della proprieta a cui attingere la decodifica\r\n     */\r\n    lookup(propertyToDecode: string, listDecode: any[], propertyLookup: string) {\r\n      let namePropertyIDX = propertyToDecode;\r\n      let namePropertyDESCR = '_DESCR' +  namePropertyIDX.substring(2, namePropertyIDX.length);\r\n      let _this = this;\r\n      \r\n\r\n      //Proprieta Indice e Descrizione presenti\r\n      if (_this.hasOwnProperty(namePropertyIDX) && _this.hasOwnProperty(namePropertyDESCR)) {\r\n        if (listDecode && propertyLookup) {\r\n\r\n          let element = listDecode.find(value => {\r\n            return value.ID == _this[namePropertyIDX]\r\n          });\r\n\r\n          if (element) {\r\n            if (element.hasOwnProperty(propertyLookup)) {\r\n              _this[namePropertyDESCR] = element[propertyLookup];\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n      \r\n\r\n    }\r\n    //#endregion\r\n\r\n    //#region CONDITION\r\n\r\n    /**\r\n     * Aggiunge una condizione di filtro differente dalla semplice uguaglianza\r\n     * @param operator    Operatore = > <\r\n     * @param fieldName   Nome Campo\r\n     * @param listOrValue Solo per uguaglianza è possibile indicare un array con i valori da mettere in OR\r\n     */\r\n    addFilterCondition(operator: OperatorCondition, fieldName: string, listOrValue?:any[]) {\r\n      if (fieldName) {\r\n\r\n        let objCondition = new FilterCondition(operator, fieldName, listOrValue);\r\n        this._filterConditions.push(objCondition);\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca se nelle Condizioni di Filtro è presente il campo e ne ritorna l'oggetto FilterCondition\r\n     * @param fieldName Nome del campo\r\n     */\r\n    getFilterConditionByFieldName(fieldName: string): FilterCondition {\r\n      let objFilter: FilterCondition;\r\n\r\n      //Cerchiamo nell'array delle condizioni\r\n      objFilter = this._filterConditions.find(element => {\r\n        return element.fieldName == fieldName;\r\n      });\r\n\r\n      return objFilter;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna l'operatore della condizione di Filtro impostata nel campo\r\n     * Di Default viene tornata sempre l'uguaglianza\r\n     * @param fieldName Nome del campo\r\n     */\r\n    getFilterOperatorByFieldName(fieldName: string): OperatorCondition {\r\n      let objFilter: FilterCondition;\r\n      let operator: OperatorCondition = OperatorCondition.uguale;\r\n\r\n\r\n      if (fieldName && fieldName.length !== 0) {\r\n\r\n        //Chiedo la condizione di filtro se presente\r\n        objFilter = this.getFilterConditionByFieldName(fieldName);\r\n        //Se presente recupero l'operatore della condizione\r\n        if (objFilter) {\r\n          operator = objFilter.operator;\r\n        }\r\n      }\r\n      \r\n\r\n      return operator;\r\n    }\r\n    \r\n    //#endregion\r\n\r\n    \r\n    //#region TAG DOCUMENTALI\r\n    public setTagValue(key:string, value:any) {\r\n      let idTag: IDTag;\r\n      if (key && key.length !== 0) {\r\n        idTag = this._findTag(key);\r\n        if (idTag) {\r\n          idTag.value = value;\r\n        }\r\n        else {\r\n          idTag = new IDTag();\r\n          idTag.key = key;\r\n          idTag.value = value;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getTagValue(key:string): any {\r\n      let idTag: IDTag;\r\n      let retValue: any;\r\n\r\n      if (key && key.length !== 0) {\r\n        idTag = this._findTag(key);\r\n        if (idTag) {\r\n          retValue = idTag.value;\r\n        }\r\n      }\r\n\r\n      return retValue;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param key Chiave ricercata\r\n     */\r\n    private _findTag(key:string):IDTag {\r\n      let idTag: IDTag;\r\n      if (this._tags && key && key.length !== 0) {\r\n\r\n        idTag = this._tags.find(element => {\r\n          return element.key == key;\r\n        });\r\n\r\n      }\r\n      return idTag;\r\n    }\r\n    //#endregion\r\n\r\n  }\r\n\r\n  export class ParamsExport {\r\n    clearDOProperty: boolean; //Non esporta le proprietà do_inserted, do_deleted\r\n    clearPKProperty: boolean; //Non esporta la chiave primaria \r\n    clearPrivateProperty: boolean; //Non esporta le proprietà private identificate da _ \r\n    onlyDocModified: boolean; //Esporta solo i documenti modificati\r\n    onlyPropertyModified: boolean;     //Esporta solo le proprietà modificate oppure tutte\r\n    numLivelli: number; //Numero livello di esportazione\r\n\r\n\r\n\r\n    constructor() {\r\n      this.numLivelli = 999;\r\n      this.onlyPropertyModified = false;\r\n      this.onlyDocModified = false;\r\n      this.clearDOProperty = false;\r\n      this.clearPKProperty = false;\r\n      this.clearPrivateProperty = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Classe repository per i documenti correlati\r\n   */\r\n  export class IDRepository {\r\n    \r\n    seqFields: string[];\r\n    relDoc: IDDocument;\r\n\r\n    constructor() {\r\n      this.seqFields = [];\r\n      \r\n    }\r\n\r\n    /**\r\n     * Ritorna la primary Key del documento contenuto\r\n     */\r\n    get primaryKey(): string {\r\n      let propValue = '';\r\n      if (this.relDoc) {\r\n        propValue = this.relDoc.getPrimaryKey()\r\n      }\r\n      \r\n      return propValue;\r\n    }\r\n\r\n    //Ritorna l'identificatore del documento\r\n    get identifier(): string {\r\n      let ident = '';\r\n      //Se è presente una sequenza, l'identificatore è la sequenza\r\n      if (this.seqFields && this.seqFields.length !== 0) {\r\n        ident = this.seqFields.toString();\r\n      }\r\n      else {\r\n        ident = this.primaryKey;\r\n      }\r\n\r\n      return ident;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifica alcune condizioni multiple\r\n   */\r\n  export class FieldOrCondition {\r\n    fieldName: string;\r\n    value: any[];\r\n  }\r\n\r\n  /**\r\n   * Classe di Condizioni di filtro\r\n   */\r\n  export class FilterCondition {\r\n    operator: OperatorCondition;\r\n    fieldName: string;\r\n    //Valori da mettere in OR (viene applicato sempre con operatore di uguaglianza)\r\n    private _listOrValue: any[];\r\n    \r\n    get listOrValue(): any[] {\r\n      return this._listOrValue;\r\n    }\r\n\r\n    set listOrValue(value: any[]) {\r\n      this._listOrValue = value;\r\n    }\r\n\r\n    constructor(operator: OperatorCondition, fieldName: string, listOrValue: any[]) {\r\n      this.fieldName = fieldName;\r\n      this.operator = operator;\r\n      this._listOrValue = [];\r\n\r\n      //Se ho valori li imposto\r\n      if (listOrValue) {\r\n        this._listOrValue = listOrValue;\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Insieme delle Proprietà Originali di un documento\r\n   */\r\n  export class IDOriginal {\r\n    private _propOriginals: IDProperty[];\r\n\r\n    \r\n    public get propOriginals() : IDProperty[] {\r\n      return this._propOriginals\r\n    }\r\n\r\n    constructor () {\r\n      this._propOriginals = [];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param name Nome Proprieta\r\n     * @param value Valore\r\n     */\r\n    private setOriginalProperty(name: string, value: any): void {\r\n      let prop: IDProperty;\r\n      if (name) {\r\n        prop = this.findPropertyByName(name);\r\n\r\n        //Se non lo trovo, creo la proprieta e aggiuno\r\n        if (!prop) {\r\n          prop = new IDProperty();\r\n          prop.name = name;\r\n          this._propOriginals.push(prop);\r\n        }\r\n\r\n        //Modifico il valore\r\n        prop.value = value;\r\n\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Reinizializza l'array originals\r\n     */\r\n    private clearPropOriginal(): void {\r\n      this._propOriginals = [];\r\n    }\r\n\r\n    /**\r\n     * Cerca una proprietà per nome\r\n     */\r\n    private findPropertyByName(name: string): IDProperty {\r\n      let prop: IDProperty;\r\n\r\n      if (name) {\r\n        prop = this._propOriginals.find(element => {\r\n          return element.name == name;\r\n        });\r\n      }\r\n\r\n      return prop;\r\n    }\r\n\r\n    /**\r\n     * Controlla se una proprietà risulta modificata\r\n     * @param propertyName Nome Proprietà\r\n     */\r\n    propertyIsModified(document:IDDocument, propertyName: string): boolean {\r\n      let modified = false;\r\n      let propOriginal: IDProperty;\r\n      if (document && propertyName && propertyName.length != 0) {\r\n        propOriginal = this.findPropertyByName(propertyName);\r\n        //Se ho original posso controllare\r\n        if (propOriginal) {\r\n          try {\r\n            if (document[propertyName] != propOriginal.value) {\r\n              modified = true;\r\n            }\r\n          } catch (error) {\r\n              console.error(error);\r\n          }\r\n        }\r\n      }\r\n\r\n      return modified;\r\n    }\r\n\r\n    /**\r\n     * Richiesta di rendere original un documento\r\n     * @param document Documento\r\n     */\r\n    public setAsOriginal(document: IDDocument): void {\r\n      let objDescriptor: Descriptor;\r\n\r\n      if (document) {\r\n\r\n        this.clearPropOriginal();\r\n\r\n        objDescriptor = document.getDescriptor();\r\n\r\n        if (objDescriptor) {\r\n\r\n          //Ciclo sui campi del documento\r\n          objDescriptor.fields.forEach (elField => {\r\n            //Se non sono collection\r\n            if (elField.fieldType != TypeDefinition.collection) {\r\n              //Controllo che il documento contenga la proprietà\r\n              if (document.propertyInDoc(elField.fieldName)) {\r\n                //Contiene la proprietà me la segno come Original\r\n                this.setOriginalProperty(elField.fieldName, document[elField.fieldName]);\r\n              }\r\n              else {\r\n                //Non la contiene metto null come original\r\n                this.setOriginalProperty(elField.fieldName, null);\r\n              }\r\n            }\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  /**\r\n   * Proprietà di un documento\r\n   */\r\n  export class IDProperty {\r\n    private _name: string;\r\n    private _value: any;\r\n\r\n    \r\n    public get value() : any {\r\n      return this._value;\r\n    }\r\n\r\n    \r\n    public set value(v : any) {\r\n      this._value = v;\r\n    }\r\n    \r\n    \r\n    public get name() : string {\r\n      return this._name;\r\n    }\r\n\r\n    \r\n    public set name(v : string) {\r\n      this._name = v;\r\n    }\r\n    \r\n    \r\n    \r\n  }\r\n\r\n  /**\r\n   * Classe dei tag documentali\r\n   */\r\n  export class IDTag {\r\n    key: string;\r\n    value: any;\r\n  }\r\n\r\n  /**\r\n   * Operatori delle condizioni\r\n   */\r\n  export enum OperatorCondition {\r\n    uguale = '',\r\n    minore = '<',\r\n    maggiore = '>'\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  ","import { Injectable } from '@angular/core';\r\nimport {Plugins, CameraResultType, CameraPhoto, CameraSource } from '@capacitor/core';\r\n\r\n\r\nconst {Camera, Filesystem, Storage} = Plugins;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PhotoService {\r\n\r\n  private PHOTO_STORAGE: string = 'photos';\r\n  \r\n  constructor() { }\r\n\r\n\r\n\r\n   /**\r\n    * \r\n    * @param typePhoto Tipo della foto\r\n    * @param idPhoto Nel caso di foto profilo è IDUtente\r\n    * @return DataUrl memorizzato\r\n    */\r\n   public takePicure(typePhoto: PhotoType, idPhoto: string):Promise<string>{\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n      \r\n      Camera.getPhoto({\r\n        resultType: CameraResultType.DataUrl,\r\n        source: CameraSource.Prompt,\r\n        quality: 100\r\n      })\r\n      .then((data:CameraPhoto) => {\r\n  \r\n        let myImageDataUrl:string  = data.dataUrl;\r\n  \r\n        //Salvo nello Storage\r\n        this.storageSave(myImageDataUrl, typePhoto, idPhoto)\r\n                .then(() => {\r\n                  //Salvataggio corretto, ritorno il dataUrl\r\n                  resolve(myImageDataUrl);\r\n                })\r\n                .catch(error => {\r\n                  reject(error);\r\n                })\r\n      })\r\n    })\r\n    \r\n\r\n   }\r\n\r\n   /**\r\n    * Salvataggio di un DataURL nello storage\r\n    * @param typePhoto Tipo della foto\r\n    * @param idPhoto Identificativo\r\n    */\r\n   storageSave(dataUrlPhoto: string, typePhoto:PhotoType, idPhoto:string):Promise<void> {\r\n    let keyStorage = this.PHOTO_STORAGE + '_' + typePhoto + '_' + idPhoto;\r\n    return new Promise<void>((resolve, reject) => {\r\n      \r\n      let myPhoto: IPhoto = {\r\n        type: typePhoto,\r\n        dataUrl: dataUrlPhoto\r\n      }\r\n\r\n      \r\n      Storage.set({\r\n        key: keyStorage,\r\n        value: JSON.stringify(myPhoto)\r\n      })\r\n      .then(() => {\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      })\r\n    })\r\n   }\r\n\r\n   /**\r\n    * Recupero di un DATAURL dallo storage\r\n    * @param typePhoto Tipo della foto\r\n    * @param idPhoto Identificativo\r\n    * @returns \r\n    */\r\n   storageLoad(typePhoto:PhotoType, idPhoto:string):Promise<string> {\r\n    let keyStorage = this.PHOTO_STORAGE + '_' + typePhoto + '_' + idPhoto;\r\n\r\n\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n      Storage.get({\r\n        key: keyStorage\r\n      })\r\n      .then(data => {\r\n\r\n        let myPhoto:IPhoto = JSON.parse(data.value)\r\n\r\n        resolve(myPhoto.dataUrl);\r\n\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      })\r\n\r\n    })\r\n   }\r\n\r\n  \r\n}\r\n\r\nexport interface IPhoto {\r\n  type: PhotoType;\r\n  dataUrl: string;\r\n}\r\n\r\nexport enum PhotoType {\r\n  account = 10\r\n}\r\n\r\n\r\n","import {Sport} from '../../models/sport.model';\r\nimport {Corso} from '../../models/corso.model';\r\nimport { Area } from 'src/app/models/area.model';\r\nimport { Gruppo } from 'src/app/models/gruppo.model';\r\nimport { CampoSport } from 'src/app/models/camposport.model';\r\nimport { AperturaLocation } from 'src/app/models/aperturalocation.model';\r\nimport { Account } from 'src/app/models/account.model';\r\nimport { AreaLink } from 'src/app/models/arealink.model';\r\nimport { Campo } from 'src/app/models/campo.model';\r\nimport { CategoriaEta } from 'src/app/models/categoriaeta.model';\r\nimport { CorsoProgramma } from 'src/app/models/corsoprogramma.model';\r\nimport { Livello } from 'src/app/models/livello.model';\r\nimport { Location } from 'src/app/models/location.model';\r\nimport { LocationImage } from 'src/app/models/locaton-image.model';\r\nimport { NewsEvento } from 'src/app/models/newsevento.model';\r\nimport { PianificazioneCorso } from 'src/app/models/pianificazionecorso.model';\r\nimport { Prenotazione } from 'src/app/models/prenotazione.model';\r\nimport { PrenotazionePianificazione } from 'src/app/models/prenotazionepianificazione.model';\r\nimport { Utente } from 'src/app/models/utente.model';\r\nimport { UtenteIscrizione } from 'src/app/models/utenteiscrizione.model';\r\nimport { UtenteLivello } from 'src/app/models/utentelivello.model';\r\nimport { UtentePrenotazione } from 'src/app/models/utenteprenotazione.model';\r\nimport { Impegno } from 'src/app/models/impegno.model';\r\nimport { AreaPaymentSetting } from 'src/app/models/areapaymentsetting.model';\r\nimport { AccountOperationResponse, AccountRequestCode, AccountVerifyCode } from 'src/app/models/accountregistration.model';\r\nimport { OccupazioneCampi } from 'src/app/models/occupazionecampi.model';\r\nimport { TipoDocumentazione } from 'src/app/models/tipodocumentazione.model';\r\nimport { Documentazione } from 'src/app/models/documentazione.model';\r\nimport { CorsoPresenze } from 'src/app/models/corsopresenze.model';\r\nimport { MasterDocumento } from 'src/app/models/ricevuta.model';\r\nimport { Articolo } from 'src/app/models/articolo.model';\r\nimport { ArticoloColore } from 'src/app/models/articolocolore.model';\r\nimport { ArticoloTaglieMisura } from 'src/app/models/articolotagliemisura.model';\r\nimport { UnitaMisura } from 'src/app/models/unitamisura.model';\r\nimport { Valuta } from 'src/app/models/valuta.model';\r\nimport { DataChiusura } from 'src/app/models/datachiusura.model';\r\nimport { CorsoAllegato } from 'src/app/models/corsoallegato.model';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//https://medium.com/@buddhi.amigo/how-to-create-typescript-classes-dynamically-b29ca7767ee5\r\n\r\nexport const Structure: any = {\r\n    Sport,\r\n    Corso,\r\n    Area,\r\n    AreaLink,\r\n    AreaPaymentSetting,\r\n    Gruppo,\r\n    CampoSport,\r\n    AperturaLocation,\r\n    Account,\r\n    Campo,\r\n    CategoriaEta,\r\n    CorsoProgramma,\r\n    Livello,\r\n    Location, \r\n    LocationImage,\r\n    NewsEvento,\r\n    PianificazioneCorso,\r\n    Prenotazione,\r\n    PrenotazionePianificazione,\r\n    Utente,\r\n    UtenteIscrizione,\r\n    UtenteLivello,\r\n    UtentePrenotazione,\r\n    Impegno,\r\n    AccountOperationResponse , \r\n    AccountRequestCode, \r\n    AccountVerifyCode,\r\n    OccupazioneCampi,\r\n    TipoDocumentazione,\r\n    Documentazione,\r\n    CorsoPresenze,\r\n    MasterDocumento,\r\n    Articolo,\r\n    ArticoloColore,\r\n    ArticoloTaglieMisura,\r\n    Valuta,\r\n    UnitaMisura,\r\n    DataChiusura,\r\n    CorsoAllegato\r\n}\r\n\r\nexport class DynamicClass {\r\n\r\n    constructor(className: string, opts?: any) {\r\n        if (Structure[className] === undefined || Structure[className] === null) {\r\n            throw new Error(`Class type of \\'${className}\\' is not in the store`);\r\n        }\r\n        return new Structure[className](opts);\r\n\r\n        \r\n        \r\n    }\r\n\r\n    \r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoSocieta, TipoVerificaAccount } from '../models/valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { PrivateImage } from './privateimage.model';\r\nimport { DataChiusura } from './datachiusura.model';\r\n\r\n\r\n\r\n\r\nexport class Gruppo extends IDDocument {\r\n\r\n    DENOMINAZIONE: string;\r\n    INDIRIZZO: string;\r\n    CAP: string;\r\n    COMUNE: string;\r\n    PROVINCIA: string;\r\n    ISOSTATO: string;\r\n    CODICEFISCALE: string;\r\n    PARTITAIVA: string;\r\n    APPID: string;\r\n    PREFIXDOMAIN: string;\r\n    TIPOGRUPPO: TipoSocieta;\r\n    URLPRIVACY: string;\r\n    PRIVATEIMAGE: PrivateImage[];\r\n    APPFLAGREGISTRAZIONE: boolean;\r\n    APPTIPOVERIFICA: TipoVerificaAccount;\r\n    FLAGAPPSHOPONLINE: boolean;\r\n    DATECHIUSURE: DataChiusura[];\r\n    \r\n  \r\n    constructor(onlyInstance?:boolean) {\r\n      super(onlyInstance);\r\n      \r\n      this.PRIVATEIMAGE = [];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta le proprietà del documento\r\n     * @param data JSON Ricevuto\r\n     */\r\n    setJSONProperty(data: any) {\r\n      super.setJSONProperty(data);\r\n      \r\n      //Imposto le collection\r\n      this.setCollection(data);\r\n\r\n      //Imposto che il documento è originale\r\n      this.setOriginal();\r\n    }\r\n\r\n    /**\r\n     * Imposto le collection del doumento\r\n     * @param data JSON Ricevuto \r\n     */\r\n    setCollection(data: any) {\r\n      this.PRIVATEIMAGE = [];\r\n\r\n      /** Ho delle immagini */\r\n      if (data.PRIVATEIMAGE) {\r\n        this.setCollectionprivateImage(data);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Collection PRIVATEIMAGE\r\n     * @param data JSON Ricevuto\r\n     */\r\n    setCollectionprivateImage(data: any) {\r\n      data.PRIVATEIMAGE.forEach(element => {\r\n\r\n        let newPrivateImage = new PrivateImage();\r\n        newPrivateImage.setJSONProperty(element);\r\n        this.PRIVATEIMAGE.push(newPrivateImage);\r\n      });\r\n\r\n    }\r\n\r\n        /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['DENOMINAZIONE',\r\n                    'INDIRIZZO',\r\n                    'CAP',\r\n                    'COMUNE',\r\n                    'PROVINCIA',\r\n                    'ISOSTATO',\r\n                    'CODICEFISCALE',\r\n                    'PARTITAIVA',\r\n                    'APPID',\r\n                    'PREFIXDOMAIN',\r\n                    'URLPRIVACY'                   \r\n                    ];\r\n    let arNumber = ['TIPOGRUPPO','APPTIPOVERIFICA'];\r\n    let arBoolean = ['APPFLAGREGISTRAZIONE','FLAGAPPSHOPONLINE'];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = ['PRIVATEIMAGE'];\r\n\r\n    objDescriptor.className = 'Gruppo';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'GRUPPOSPORTIVO';\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n    \r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    return objDescriptor;\r\n  }\r\n\r\n  isClosedFromCalendar(){\r\n    \r\n  }\r\n\r\n  get needEmailVerify(){\r\n    if(this.APPTIPOVERIFICA == TipoVerificaAccount.verificaemail || this.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n\r\n  get needMobileVerify(){\r\n    if(this.APPTIPOVERIFICA == TipoVerificaAccount.verificasms || this.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms){\r\n      return true;\r\n    }\r\n    else{\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n","import { Descriptor, TypeDefinition } from \"../library/models/descriptor.model\";\r\nimport { IDDocument } from \"../library/models/iddocument.model\";\r\nimport { IscrizioneIncasso } from \"./iscrizioneincasso.model\";\r\nimport { Sesso, StatoIscrizione, TipoPrezzo } from \"./valuelist.model\";\r\n\r\nexport class IscrizioneCorso extends IDDocument {\r\n\r\n    IDCORSO:               string; //\r\n    IDUTENTE:              string; //\r\n    DATAISCRIZIONE:        Date;\r\n    ANNOISCRIZIONE:        number;\r\n    NOMINATIVO:            string;\r\n    EMAIL:                 string;\r\n    MOBILENUMBER:          string;\r\n    NOTES:                 string;\r\n    IDSPORT:               string;\r\n    IDAREAOPERATIVA:       string; //\r\n    IDLOCATION:            string; //\r\n    IDCAMPO:               string;\r\n    DATAINIZIO:            Date;\r\n    CODICEALFA:            string;\r\n    CODICEINT:             number;\r\n    NATOIL:                Date;\r\n    SESSO:                 Sesso;\r\n    DATAFINEISCRIZIONE:    Date;    \r\n    STATOISCRIZIONE:       StatoIscrizione;\r\n    IDTIPOPAGAMENTO:       string;\r\n    \r\n    TIPOPREZZO:            TipoPrezzo;\r\n    IMPORTO:               number;\r\n    IDCODICEIMPOSTA:       string;\r\n    IDVALUTA:              string;\r\n    IMPOSTA:               number;\r\n    TOTALE:                number;\r\n    RESIDUO:               number;\r\n    INCASSATO:             number;\r\n\r\n\r\n    ISCRIZIONEINCASSO:     IscrizioneIncasso[];\r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n\r\n        this.ISCRIZIONEINCASSO = [];\r\n  \r\n    } \r\n      \r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDCORSO',\r\n                        'IDUTENTE',\r\n                        'NOMINATIVO',\r\n                        'EMAIL',\r\n                        'MOBILENUMBER',\r\n                        'NOTES',\r\n                        'IDSPORT',\r\n                        'IDAREAOPERATIVA',\r\n                        'IDLOCATION',\r\n                        'IDCAMPO',\r\n                        'CODICEALFA',\r\n                        'IDTIPOPAGAMENTO',\r\n                        'IDCODICEIMPOSTA',\r\n                        'IDVALUTA'\r\n                        ];\r\n        let arNumber = ['ANNOISCRIZIONE',\r\n                        'CODICEINT',\r\n                        'SESSO',\r\n                        'STATOISCRIZIONE',\r\n                        'TIPOPREZZO'\r\n                       ];\r\n        let arDecimal = ['IMPORTO',\r\n                        'IMPOSTA',\r\n                        'TOTALE',\r\n                        'RESIDUO',\r\n                        'INCASSATO'];\r\n        let arBoolean = [];\r\n        let arDate = ['DATAISCRIZIONE','DATAFINEISCRIZIONE','DATAINIZIO'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n    \r\n        objDescriptor.className = 'IscrizioneCorso';\r\n        objDescriptor.classWebApiName = 'ISCRIZIONECORSO';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.describeField = 'DENOMINAZIONE';\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    \r\n        objDescriptor.addCollection('ISCRIZIONEINCASSO','IscrizioneIncasso','IDISCRIZIONECORSO');\r\n        \r\n    \r\n    \r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        objDescriptor.setRelation('IDCAMPO','Campo');\r\n   \r\n    \r\n        \r\n    \r\n        return objDescriptor;\r\n    }    \r\n    \r\n    \r\n\r\n/**\r\n * Imposta le proprietà nell'oggetto\r\n * @param data JSON Received\r\n */\r\n    setJSONProperty(data: any) {\r\n        //Chiamo IDDOcument\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n\r\n        this.setOriginal();\r\n\r\n    }  \r\n    \r\n    \r\n    /**\r\n     * Sistema le collection se presenti\r\n     * @param data JSON Ricevuto\r\n     */\r\n     setCollection(data: any) {\r\n        this.ISCRIZIONEINCASSO = [];\r\n  \r\n        if (data.ISCRIZIONIINCASSI) {\r\n          this.setCollectionIscrizioniIncassi(data.ISCRIZIONIINCASSI);\r\n        }\r\n  \r\n\r\n        \r\n      }   \r\n      \r\n    /**\r\n     * Imposta la collection ISCRIZIONIINCASSI\r\n     * @param arIncassi JSON Ricevuti\r\n     */\r\n    setCollectionIscrizioniIncassi(arIncassi: any[]) {\r\n\r\n        this.ISCRIZIONEINCASSO = [];\r\n  \r\n        if (arIncassi) {\r\n\r\n          arIncassi.forEach(element => {\r\n            \r\n            //Ricerco se esiste già\r\n            let newIscrizioneIncasso = this.getIncassoByID(element.ID);\r\n  \r\n            //Non esiste lo creo nuovo\r\n            if (!newIscrizioneIncasso) {\r\n  \r\n              newIscrizioneIncasso = new IscrizioneIncasso();\r\n              newIscrizioneIncasso.setJSONProperty(element);\r\n              this.ISCRIZIONEINCASSO.push(newIscrizioneIncasso);\r\n  \r\n            }\r\n            else {\r\n              //Reimposto i valori\r\n              newIscrizioneIncasso.setJSONProperty(element);\r\n            }\r\n  \r\n  \r\n          })\r\n        }\r\n      }    \r\n      \r\n      \r\n    /**\r\n     * Ritorna l'elemento di IscrizioneIncasso che corrisponde con ID\r\n     */\r\n     getIncassoByID(idIscrizioneIncasso: string): IscrizioneIncasso {\r\n\r\n        //Ricerco l'elemento richiesto\r\n        let existIscrizioneIncasso = this.ISCRIZIONEINCASSO.find(elIscrizioneIncasso => {\r\n          return elIscrizioneIncasso.ID == idIscrizioneIncasso\r\n        });\r\n\r\n\r\n        return existIscrizioneIncasso;\r\n    }      \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoSport} from '../models/valuelist.model';\r\nimport { Livello } from '../models/livello.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\n\r\n\r\nexport class Sport extends IDDocument {\r\n    \r\n    DENOMINAZIONE:  string;\r\n    TIPOLOGIA:      TipoSport;\r\n    PARTECIPANTI:   number;\r\n    ICONA:          string; // Formato Icon-Sport non Ionic Icon\r\n    LIVELLO:        Livello[]; //Livelli dello sport\r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n\r\n        this.LIVELLO = [];\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['DENOMINAZIONE',\r\n                    'ICONA'\r\n                    ];\r\n    let arNumber = ['TIPOLOGIA','PARTECIPANTI'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = ['LIVELLO'];\r\n\r\n    objDescriptor.className = 'Sport';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'SPORT';\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n    \r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    return objDescriptor;\r\n}    \r\n\r\n    \r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n        //Imposto che il documento è originale\r\n        this.setOriginal();\r\n    }\r\n\r\n    /**\r\n     * Imposta le collection\r\n     * @param data JSON Received\r\n     */\r\n    setCollection(data:any) {\r\n\r\n        this.LIVELLO = [];\r\n\r\n        if (data.LIVELLO) {\r\n            this.setCollectionLivello(data.LIVELLO);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta la collection dei Livelli\r\n     * @param data JSON Received\r\n     */\r\n    setCollectionLivello(dataLivello: any) {\r\n\r\n        dataLivello.forEach(elLivello => {\r\n\r\n            let newLivello = new Livello();\r\n            newLivello.setJSONProperty(dataLivello);\r\n\r\n            this.LIVELLO.push(newLivello);\r\n\r\n        });\r\n    };\r\n\r\n}\r\n\r\n/*\r\n    Le icone di tipo Stringa sono icone Sportsfont\r\n\r\n    INSTALLARE IL MODULO CON:\r\n    > npm install sportsfont\r\n    \r\n    UTILIZZO HTML\r\n    per inserire le icone usare il tag i con la classe opportuna tra quelle disponibili.\r\n\r\n    ESEMPI:\r\n    <i class=\"icon-soccer\"></i>\r\n    Usare Style per modificare Colore o Dimensione\r\n    <i class=\"icon-soccer\" style=\"font-size:20pt;color:red;\"></i>\r\n\r\n    Class Possibili:\r\n        icon-cricket\r\n        icon-bicycle\r\n        icon-baseball\r\n        icon-golf\r\n        icon-skiing\r\n        icon-soccer\r\n        icon-swimming\r\n        icon-tennis\r\n        icon-theatre\r\n        icon-football\r\n        icon-basketball-1\r\n        icon-pitch\r\n        icon-badminton\r\n        icon-rowing\r\n        icon-rugby\r\n        icon-archery\r\n        icon-baking\r\n        icon-dance\r\n        icon-bouldering\r\n        icon-canoe\r\n        icon-shooting\r\n        icon-climbing\r\n        icon-bowl\r\n        icon-cycling\r\n        icon-volleyball\r\n        icon-unichallenge\r\n        icon-trampoline\r\n        icon-tabletennis\r\n        icon-squash\r\n        icon-sail\r\n        icon-run\r\n        icon-pool\r\n        icon-goal\r\n        icon-lacrosse\r\n        icon-martial\r\n        icon-hockey\r\n        icon-frisbee\r\n        icon-handball\r\n        icon-fencing\r\n        icon-horse\r\n        icon-netball\r\n        icon-darts\r\n        icon-fulltime\r\n        icon-halftime\r\n        icon-kickoff\r\n        icon-debate\r\n        icon-starttime\r\n        icon-cheerleader\r\n        icon-pokemon\r\n        icon-computer\r\n        icon-boxing\r\n        icon-croquet\r\n        icon-cinema\r\n*/","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Mansione, Sesso, TargetSesso, TipoVerificaAccount } from './valuelist.model';\r\nimport { UtenteLivello } from './utentelivello.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { Gruppo } from './gruppo.model';\r\nimport { Documentazione } from './documentazione.model';\r\nimport { MasterDocumento } from './ricevuta.model';\r\n\r\n\r\nexport class Utente extends IDDocument {\r\n    COGNOME: string;\r\n    NOME: string;\r\n    NOMINATIVO: string;\r\n    EMAIL: string; \r\n    WEBLOGIN: string;\r\n    WEBPASSWORD:string;\r\n    SHAPASSWORD: string;\r\n    INPUTPASSWORD: string;\r\n    MOBILENUMBER: string;\r\n    TELEFONO1: string;\r\n    TELEFONO2: string;\r\n    INDIRIZZO: string;\r\n    CAP: string;\r\n    COMUNE: string;\r\n    PROVINCIA: string;\r\n    ISOSTATO: string;\r\n    NATOIL: Date;\r\n    NATOA: string;\r\n    NATOCAP: string;\r\n    NATOPROV: string;\r\n    NATOISOSTATO: string;\r\n    SESSO: Sesso;\r\n    CODICEFISCALE: string;\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    AVATAR: string;\r\n    NEWSLETTER: boolean;\r\n    PROFILAZIONEINTERNA: boolean;\r\n    PROFILAZIONEESTERNA: boolean;\r\n    VERIFICATAMAIL: boolean;\r\n    VERIFICATAMOBILE: boolean;\r\n    RUOLO: number;\r\n    MANSIONE: number;\r\n    LISTMANSIONI: string;\r\n    UTENTILIVELLI: UtenteLivello[];\r\n    DOCUMENTAZIONI: Documentazione[];\r\n\r\n    /**\r\n     * \r\n     * @param onlyInstance Non inizializzare il documento, ma crea solo istanza\r\n     */\r\n    constructor(onlyInstance?:boolean) {\r\n        \r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n            this.UTENTILIVELLI = [];\r\n            this.DOCUMENTAZIONI = [];\r\n            this.PROFILAZIONEESTERNA = false;\r\n            this.PROFILAZIONEINTERNA = false;\r\n        }\r\n\r\n        this.VERIFICATAMAIL = false;\r\n        this.VERIFICATAMOBILE = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna l'eta del partecipante\r\n     */\r\n    public get eta(): number {\r\n        let num = 0;\r\n        let oggi = new Date();\r\n\r\n        if (this.NATOIL) {\r\n            if (this.NATOIL < oggi) {\r\n                num = MyDateTime.durataAnni(this.NATOIL, oggi);\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['COGNOME',\r\n                    'NOME',\r\n                    'NOMINATIVO',\r\n                    'EMAIL',\r\n                    'WEBLOGIN',\r\n                    'MOBILENUMBER',\r\n                    'INDIRIZZO',\r\n                    'CAP',\r\n                    'COMUNE',\r\n                    'PROVINCIA',\r\n                    'ISOSTATO',\r\n                    'NATOA',\r\n                    'NATOCAP',\r\n                    'NATOPROV',\r\n                    'NATOISOSTATO',\r\n                    'CODICEFISCALE',\r\n                    'IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'AVATAR',\r\n                    'SHAPASSWORD',\r\n                    'INPUTPASSWORD',\r\n                    'TELEFONO1',\r\n                    'TELEFONO2',\r\n                    'LISTMANSIONI'\r\n                    ];\r\n    let arNumber = ['SESSO','RUOLO'];\r\n    let arBoolean = ['NEWSLETTER','PROFILAZIONEINTERNA','PROFILAZIONEESTERNA','VERIFICATAMAIL','VERIFICATAMOBILE'];\r\n    let arDate = ['NATOIL'];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    \r\n\r\n    objDescriptor.className = 'Utente';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'UTENTE';\r\n    objDescriptor.describeField = 'NOMINATIVO';\r\n\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    \r\n                \r\n    //Aggiungo le collection\r\n    objDescriptor.addCollection('UTENTILIVELLI','UtenteLivello','IDUTENTE');\r\n    objDescriptor.addCollection('DOCUMENTAZIONI','Documentazione','IDUTENTE');\r\n\r\n\r\n    \r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n\r\n    \r\n    return objDescriptor;\r\n}\r\n\r\n\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.UTENTILIVELLI = [];\r\n\r\n        //Sistemo le collection\r\n        this.setCollection(data);\r\n        \r\n        //Imposto che il documento è originale\r\n        this.setOriginal();\r\n\r\n    }\r\n\r\n    /**\r\n     * Imposta le collection dell'oggetto\r\n     * @param data JSON Received\r\n     */\r\n    setCollection(data: any) {\r\n\r\n        if (data.hasOwnProperty('UTENTELIVELLO') && data.UTENTELIVELLO !== undefined) {\r\n            this.setCollectionLivelli(data);\r\n        }\r\n\r\n        if (data.hasOwnProperty('DOCUMENTAZIONE') && data.DOCUMENTAZIONE !== undefined) {\r\n            this.setCollectionDocumentazione(data);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * Crea gli oggetti UTENTILIVELLI\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionLivelli(data: any) {\r\n        \r\n\r\n        data.UTENTELIVELLO.forEach(element => {\r\n            let newLevel = new UtenteLivello();\r\n\r\n            newLevel.setJSONProperty(element);\r\n            this.UTENTILIVELLI.push(newLevel);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Crea gli oggetti DOCUMENTAZIONE\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionDocumentazione(data: any) {\r\n        \r\n\r\n        data.DOCUMENTAZIONE.forEach(element => {\r\n            let NewDoc = new Documentazione();\r\n\r\n            NewDoc.setJSONProperty(element);\r\n            this.DOCUMENTAZIONI.push(NewDoc);\r\n        });\r\n    }    \r\n\r\n\r\n    /**\r\n     * Ritorna una label per indicare se la Mail è verificata oppure no\r\n     */\r\n    getLabelVerificaMail() {\r\n        let labelReturn = '';\r\n\r\n        //Mail verificata\r\n        if (this.VERIFICATAMAIL) {\r\n\r\n            //Se c'e' la mail dico che è verificata\r\n            if (this.EMAIL && this.EMAIL.length !== 0) {\r\n                labelReturn = 'VERIFICATA';\r\n            }\r\n            else {\r\n                //Se non c'e' la mail non dico nulla\r\n                labelReturn = '';\r\n            }\r\n        }\r\n        else {\r\n            //Se c'e' la mail dico che non è verificata\r\n            if (this.EMAIL && this.EMAIL.length !== 0) {\r\n                labelReturn = 'NON VERIFICATA';\r\n            }\r\n            else {\r\n                //Se non c'e' la mail non dico nulla\r\n                labelReturn = '';\r\n            }\r\n        }\r\n\r\n        return labelReturn;\r\n    }\r\n\r\n    /**\r\n     * Ritorna una label per indicare se il telefono è verificato oppure no\r\n     */\r\n    getLabelVerificaMobile() {\r\n        let labelReturn = '';\r\n\r\n        //Mobile verificato\r\n        if (this.VERIFICATAMOBILE) {\r\n\r\n            //Se c'e' la mail dico che è verificata\r\n            if (this.MOBILENUMBER && this.MOBILENUMBER.length !== 0) {\r\n                labelReturn = 'VERIFICATO';\r\n            }\r\n            else {\r\n                //Se non c'e' la mail non dico nulla\r\n                labelReturn = '';\r\n            }\r\n        }\r\n        else {\r\n            //Se c'e' la mail dico che non è verificata\r\n            if (this.MOBILENUMBER && this.MOBILENUMBER.length !== 0) {\r\n                labelReturn = 'NON VERIFICATO';\r\n            }\r\n            else {\r\n                //Se non c'e' la mail non dico nulla\r\n                labelReturn = '';\r\n            }\r\n        }\r\n\r\n        return labelReturn;\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca dentro a Utente Livelli se presente uno sport e un determinato livello\r\n     * @param idLivello Livello richiesto\r\n     * @param idSport Sport richiesto\r\n     */\r\n    isForLevelSport(idLivello:string, idSport: string): boolean {\r\n        let isValid = false;\r\n        let index = -1;\r\n\r\n        if (this.UTENTILIVELLI && this.UTENTILIVELLI.length != 0) {\r\n            index = this.UTENTILIVELLI.findIndex (elLivello => {\r\n                return (elLivello.IDLIVELLO == idLivello && elLivello.IDSPORT == idSport)\r\n            });\r\n        }\r\n\r\n        if (index != -1) {\r\n            isValid = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Confronta il target Sesso con il Sesso dell'utente\r\n     * @param target Target di confronto\r\n     */\r\n    isForTargetSesso(target: TargetSesso) {\r\n        let isValid = false;\r\n\r\n        if (target && this.SESSO) {\r\n            if ((target == TargetSesso.maschile || target == TargetSesso.maschileFemminile) && this.SESSO == Sesso.maschio) {\r\n                isValid = true;\r\n            }\r\n            else if ((target == TargetSesso.femminile || target == TargetSesso.maschileFemminile) && this.SESSO == Sesso.femmina) {\r\n                isValid = true;\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n\r\n    get anagraficaOk() {\r\n        let error = false;\r\n        if (!(\r\n            this.COGNOME\r\n            &&this.NOME\r\n            &&this.INDIRIZZO\r\n            &&this.CAP\r\n            &&this.COMUNE\r\n            &&this.PROVINCIA\r\n            &&this.ISOSTATO\r\n            &&this.SESSO\r\n            &&this.NATOIL\r\n            &&this.NATOA\r\n            //&&this.NATOCAP\r\n            &&this.NATOPROV\r\n            &&this.NATOISOSTATO\r\n            &&this.CODICEFISCALE\r\n        )){\r\n            error = true;\r\n        }\r\n        if (\r\n            !error \r\n            &&this.NOME != ''\r\n            &&this.INDIRIZZO!= ''\r\n            &&this.CAP!= ''\r\n            &&this.COMUNE!= ''\r\n            &&this.PROVINCIA!= ''\r\n            &&this.ISOSTATO!= ''\r\n            &&this.NATOA!= ''\r\n            //&&this.NATOCAP!= ''\r\n            &&this.NATOPROV!= ''\r\n            &&this.NATOISOSTATO!= ''\r\n            &&this.CODICEFISCALE!= ''\r\n        )\r\n\r\n        return !error;\r\n    }\r\n\r\n\r\n    /**\r\n     * la funzione restituisce i parametri da passare alla verifyPage, per eseguire tutte le verifiche ancora necessarie\r\n     * secondo quanto richiesto dal docGruppo. se non ci sono verifiche necessarie, restituisce undefined\r\n     * @param docGruppo il gruppo sportivo per il quale eseguire l'operazione\r\n     */\r\n    getParamsVerifica(docGruppo : Gruppo) : ParamsVerifica{\r\n        let needVerifyMail: boolean = false;\r\n        let needVerifyTel: boolean = false;\r\n        let needUpdateProfile: boolean = false;\r\n\r\n        if (docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemail || docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms){\r\n            //il gruppo richiede la verifica della mail\r\n\r\n            if (!this.VERIFICATAMAIL){\r\n                //non ho verificato la mail, devo farlo\r\n                needVerifyMail=true;\r\n            }\r\n            \r\n        }\r\n        if (docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificasms || docGruppo.APPTIPOVERIFICA == TipoVerificaAccount.verificaemailsms){\r\n            //il gruppo richiede la verifica del telefono\r\n\r\n            if (!this.VERIFICATAMOBILE){\r\n                //non ho verificato il telefono, devo farlo\r\n                needVerifyTel=true;\r\n            }\r\n            \r\n        }\r\n\r\n        if (!this.anagraficaOk){\r\n\r\n            //devo aggiornare l'anagrafica\r\n            needUpdateProfile = true;\r\n        }\r\n\r\n        //ora creo i parametri\r\n        let params = undefined;\r\n\r\n        if (needVerifyMail || needVerifyTel || needUpdateProfile){\r\n\r\n            //se c'è qualcosa da fare, istanzio params e lo valorizzo\r\n            params = new ParamsVerifica();\r\n            if (needVerifyMail && needVerifyTel){\r\n                //devo verificare sia mail che telefono\r\n                params.tipoVerifica = TipoVerificaAccount.verificaemailsms\r\n            }\r\n            else if (needVerifyMail){\r\n                //devo verificare solo la mail\r\n                params.tipoVerifica = TipoVerificaAccount.verificaemail;\r\n            }\r\n            else if (needVerifyTel){\r\n                //devo verificare solo il tel\r\n                params.tipoVerifica = TipoVerificaAccount.verificasms;\r\n            }\r\n            else{\r\n                //non devo verificare niente\r\n                params.tipoVerifica = TipoVerificaAccount.noverifica\r\n            }\r\n            //segno nei params se aggionare o meno l'anagrafica\r\n            params.updateDocUtente = needUpdateProfile;\r\n        }\r\n        \r\n        //ritorno i parametri. se non c'è nulla da verificare, params sarà UNDEFINED    \r\n        return params;\r\n    }\r\n\r\n    get isTrainer(){\r\n        let isTrainer: boolean =false;\r\n        if(this.LISTMANSIONI && this.LISTMANSIONI.length > 0){\r\n\r\n            if (this.LISTMANSIONI.includes(`\"${Mansione.trainer.toString()}\"`)){\r\n                isTrainer = true;\r\n            }\r\n        }\r\n        return isTrainer;\r\n    }\r\n\r\n    get isAssistenteTrainer(){\r\n        let isTrainer: boolean =false;\r\n        if(this.LISTMANSIONI && this.LISTMANSIONI.length > 0){\r\n\r\n            if (this.LISTMANSIONI.includes(`\"${Mansione.assistenteTrainer.toString()}\"`)){\r\n                isTrainer = true;\r\n            }\r\n        }\r\n        return isTrainer;\r\n    }\r\n\r\n    get isCustode(): boolean{\r\n        let isCustode: boolean =false;\r\n        if(this.LISTMANSIONI && this.LISTMANSIONI.length > 0){\r\n\r\n            if (this.LISTMANSIONI.includes(`\"${Mansione.custode.toString()}\"`)){\r\n                isCustode = true;\r\n            }\r\n        }\r\n        return isCustode;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class storageUtente {\r\n    loginUser: string;\r\n    pwdUser: string;\r\n    cripted: boolean;\r\n\r\n    constructor(user: string, pwd: string) {\r\n        this.loginUser = user;\r\n        this.pwdUser = pwd;\r\n        this.cripted = false;\r\n    }\r\n\r\n    /**\r\n     * Salvo in Stringa JSON l'oggetto\r\n     */\r\n    saveJSON(crypt?: boolean): string {\r\n        let strReturn = '';\r\n        let myObj = new storageUtente(this.loginUser, this.pwdUser);\r\n\r\n        if (crypt) {\r\n            //Qui devo criptare utente e password\r\n            myObj.cripted = true;\r\n\r\n        }\r\n\r\n        strReturn = JSON.stringify(myObj);\r\n\r\n        return strReturn;\r\n    }\r\n\r\n    loadJSON(stringaJSON: string) {\r\n        let myObj = new storageUtente('','');\r\n        myObj = JSON.parse(stringaJSON);\r\n\r\n        if (myObj) {\r\n            if (myObj.cripted) {\r\n                //Devo decriptare username e password\r\n            }\r\n\r\n            this.loginUser = myObj.loginUser;\r\n            this.pwdUser = myObj.pwdUser;\r\n            this.cripted = myObj.cripted;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class ParamsVerifica{\r\n\r\n    tipoVerifica : TipoVerificaAccount;\r\n    updateDocUtente : boolean;\r\n}\r\n","export class LogApp {\r\n\r\n    /**\r\n     * Visualizza in console i dati\r\n     * @param data Dati da stampare in console\r\n     */\r\n    static consoleLog(data: any) {\r\n        let showDebug = false;\r\n\r\n        if (showDebug) {\r\n            console.log(data);\r\n        }\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  version: \"1.4\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\nimport { PostResponse } from '../library/models/postResult.model';\nimport { PostParams } from '../library/models/requestParams.model';\nimport { DocstructureService } from '../library/services/docstructure.service';\nimport { CorsoValutazione } from '../models/corsovalutazione.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CorsoValutazioneService {\n\n  constructor(private docStructureService: DocstructureService) { }\n\n  /**\n   * Il metodo effettua una chiamata al server per recuperare la scheda\n   * \n   * @param idCorso idCorso richiesto\n   * @returns CorsoValutazione \n   * @returns Reject Message\n   */\nrequestSchedaValutazioneCorso(idCorso: string):Promise<CorsoValutazione> {\n      let myPostParams : PostParams = new PostParams();\n      let method = 'getSchedaForTrainer';\n      let docToCall: CorsoValutazione = new CorsoValutazione();\n\n    return new Promise<CorsoValutazione>((resolve, reject) => {\n      if (idCorso && idCorso.length != 0) {\n\n        //Preparo i parametri della chiamata\n        myPostParams.key = 'idCorso';\n        myPostParams.value = idCorso;\n\n        this.docStructureService.requestForFunction(docToCall,method,'',myPostParams)\n                                .then((risposta: PostResponse) => {\n\n                                  //Non si puo' richiedere la scheda\n                                  if (!risposta.result) {\n\n                                    reject(risposta.message);\n\n                                  }\n                                  else if (risposta.document) {\n                                    //Ho un documento e lo trasformo in CorsoValutazione\n                                    let myDocScheda = new CorsoValutazione();\n                                    myDocScheda.setJSONProperty(risposta.document);\n\n                                    resolve(myDocScheda);\n                                  }\n                                  else {\n                                    reject('Scheda non ricevuta');\n                                  }\n                                })\n                                .catch(error => {\n                                  reject(error);\n                                })\n      }\n      else {\n        reject('Nessun corso richiesto');\n      }\n    })\n  }\n\n\n  /**\n   * Richiede al server il salvataggio della scheda\n   * @param docScheda Scheda in salvataggio\n   */\nrequestForSave(docScheda: CorsoValutazione):Promise<PostResponse> {\n\n  let myPostParams : PostParams = new PostParams();\n  let method = 'mobSaveValutazione';\n  let docToCall: CorsoValutazione = new CorsoValutazione();\n\n  return new Promise<PostResponse>((resolve, reject) => {\n    if (docScheda) {\n      myPostParams.key = 'docScheda';\n      myPostParams.value = docScheda;\n\n      this.docStructureService.requestForFunction(docToCall, method,'',myPostParams)\n                              .then((risposta:PostResponse) => {\n                                if (!risposta.result) {\n                                  reject(risposta.message);\n                                }\n                                else {\n                                  resolve(risposta);\n                                }\n                              })\n    }\n    else {\n      reject('Nessuna scheda da memorizzare');\n    }\n  })\n}\n\n}\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { ArticoloColore } from './articolocolore.model';\r\nimport { ArticoloTaglieMisura } from './articolotagliemisura.model';\r\nimport { TipoArticolo, TipoPrezzo } from './valuelist.model';\r\n\r\nexport class Articolo extends IDDocument{\r\n    TIPOARTICOLO: TipoArticolo;\r\n    CODICE: string;\r\n    CODICEBARRE: string;\r\n    DESCR: string;\r\n    IDUNITAMISURA: string;\r\n    VALIDOFINO: Date;\r\n    PREZZONETTO: number;\r\n    PREZZOLORDO: number;\r\n    SCONTOTEXT: string;\r\n    CATEGORIA: string;\r\n    DESCRHTML: string;\r\n    TIPOPREZZO: TipoPrezzo;\r\n    FLAGTAGLIEMISURE: boolean;\r\n    FLAGCOLORI: boolean;\r\n    FLAGSHOPONLINE: boolean;\r\n    IDVALUTA: string;\r\n    ARTICOLITAGLIEMISURE: ArticoloTaglieMisura[];\r\n    ARTICOLICOLORI: ArticoloColore[];\r\n\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'CODICE',\r\n            'CODICEBARRE',\r\n            'DESCR',\r\n            'IDUNTAMISURA',\r\n            'SCONTOTEXT',\r\n            'CATEGORIA',\r\n            'DESCRHTML',\r\n            'IDVALUTA',\r\n        ];\r\n        let arNumber = ['PREZZONETTO', 'PREZZOLORDO', 'TIPOARTICOLO', 'TIPOPREZZO'];\r\n        let arBoolean = ['FLAGTAGLIEMISURE', 'FLAGCOLORI', 'FLAGSHOPONLINE'];\r\n        let arDate = [];\r\n        let arDateTime =['VALIDOFINO'];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'Articolo';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'ARTICOLO';\r\n        objDescriptor.describeField = 'DESCR';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n                    \r\n        //Aggiungo le collection\r\n        objDescriptor.addCollection('ARTICOLITAGLIEMISURE','ArticoloTaglieMisura','IDARTICOLO');\r\n        objDescriptor.addCollection('ARTICOLICOLORI','ArticoloColore','IDARTICOLO');\r\n    \r\n    \r\n        objDescriptor.setRelation('IDUNITAMISURA','UnitaMisura');\r\n        objDescriptor.setRelation('IDVALUTA','Valuta');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\nimport { PostParams, RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { MasterDocumento } from '../models/ricevuta.model';\r\nimport { storageUtente, Utente } from '../models/utente.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InvoicesService {\r\n\r\n  private _listaDocumentiFiscali: MasterDocumento[] = [];\r\n  listaDocumentiFiscali = new BehaviorSubject<MasterDocumento[]>([])\r\n\r\n  constructor(private docStructureService: DocstructureService) { }\r\n\r\n \r\n\r\n  /**\r\n   * la funzione richede al server l'elenco delle ricevute per l'utente passato\r\n   * @param utente l'untete per cui si richiedono le fatture\r\n   */\r\n  requestInvoices(utente: Utente, anno?: number):Promise<MasterDocumento[]>{  \r\n    return new Promise((resolve, reject) => {\r\n\r\n      //creo il filtro\r\n      let filterDocuement: MasterDocumento = new MasterDocumento(true);\r\n      filterDocuement.IDANAGRAFICA = utente.ID;\r\n\r\n      //se c'è l'anno, lo inserisco nel filtro\r\n      if (anno){\r\n        filterDocuement.ANNO = anno;\r\n      }      \r\n\r\n      //faccio la richiesta\r\n      this.docStructureService.requestNew(filterDocuement)\r\n      .then(listDocuments => {\r\n        \r\n        //salvo la lista in memoria e scateno l'bservable\r\n        this._listaDocumentiFiscali = listDocuments;\r\n        this.listaDocumentiFiscali.next(this._listaDocumentiFiscali);\r\n        resolve(this._listaDocumentiFiscali);\r\n\r\n      })\r\n      .catch(error => {\r\n        //errore di connessione\r\n        reject (error);\r\n      })\r\n    })    \r\n  }\r\n\r\n\r\n  /**\r\n   * Dato un elemento MasterDocumento, la funzione lo scarica e restituisce la postResponse contenente il B64\r\n   * @param documento elemento MasterDocumento che si vuole scaricare\r\n   */\r\n  downloadInvoice(documento: MasterDocumento):Promise<PostResponse>{\r\n    return new Promise ((resolve, reject) => {\r\n\r\n      //metodo statico da richiamare\r\n      const method = 'getFile';\r\n\r\n      //creo il mio parametro\r\n      let myParams: PostParams = new PostParams();\r\n      myParams.key = 'primaryKey';\r\n      myParams.value = documento.ID;\r\n\r\n      this.docStructureService.requestForFunction(documento, method, null, myParams)\r\n      .then((response: PostResponse) => {\r\n        resolve (response);\r\n      })\r\n      .catch(error => {\r\n        reject (error);\r\n      })\r\n\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * la funzione, presa una stringa b64 e il content-type, restituisce il blob\r\n   * @param b64Data stringa B64 SENZA tipo di file\r\n   * @param contentType stringa tipo file (default: application/pdf)\r\n   */\r\n  base64toBlob(b64Data, contentType='application/pdf'):Promise<Blob>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n      let fullB64 = 'data:'+contentType + ';base64,'+ b64Data;\r\n    \r\n              fetch(fullB64).then(res => {\r\n                res.blob().then(blob => {\r\n                  resolve(blob);\r\n                })\r\n              })\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          \r\n}\r\n","import { Sesso } from './valuelist.model';\r\n\r\nexport class CodiceFiscale {\r\n\r\n    codiceFiscale: string;\r\n    dataNascita: Date;\r\n    sesso: Sesso;\r\n    codiceControllo: string;\r\n\r\n    codiceCatastale: string;\r\n    comune: string;\r\n    provincia: string;\r\n    regione: string;\r\n    codice: string;\r\n    cap: string;\r\n    checkValidate: boolean;\r\n    msgValidate: string;\r\n    stato: string;\r\n\r\n    constructor(codFisc: string) {\r\n        this.codiceFiscale = codFisc;\r\n        this.checkValidate = false;\r\n        this.msgValidate = '';\r\n    }\r\n\r\n    /**\r\n\t * Normalizes a CF by removing white spaces and converting to upper-case.\r\n\t * @param string cf Raw CF, possibly with spaces.\r\n\t * @return string Normalized CF.\r\n\t */\r\n\tprivate normalize(cf: string): string\r\n\t{\r\n\t\treturn cf.replace(/\\s/g, \"\").toUpperCase();\r\n    }\r\n  \r\n  /**\r\n\t * Returns the formatted CF. Currently does nothing but normalization.\r\n\t * @param string cf Raw CF, possibly with spaces.\r\n\t * @return string Formatted CF.\r\n\t */\r\n\tprivate format(cf: string): string\r\n\t{\r\n\t\treturn this.normalize(cf);\r\n    }\r\n  \r\n  /**\r\n\t * Validates a regular CF.\r\n\t * @param string cf Normalized, 16 characters CF.\r\n\t * @return string Null if valid, or string describing why this CF must be\r\n\t * rejected.\r\n\t */\r\n\tprivate PRIVATE_validate_regular(cf: string): string\r\n\t{\r\n\t\tif( ! /^[0-9A-Z]{16}$/.test(cf) )\r\n\t\t\treturn \"Invalid characters.\";\r\n\t\tvar s = 0;\r\n\t\tvar even_map = \"BAFHJNPRTVCESULDGIMOQKWZYX\";\r\n\t\tfor(var i = 0; i < 15; i++){\r\n\t\t\tvar c = cf[i];\r\n\t\t\tvar n = 0;\r\n\t\t\tif( \"0\" <= c && c <= \"9\" )\r\n\t\t\t\tn = c.charCodeAt(0) - \"0\".charCodeAt(0);\r\n\t\t\telse\r\n\t\t\t\tn = c.charCodeAt(0) - \"A\".charCodeAt(0);\r\n\t\t\tif( (i & 1) === 0 )\r\n\t\t\t\tn = even_map.charCodeAt(n) - \"A\".charCodeAt(0);\r\n\t\t\ts += n;\r\n\t\t}\r\n\t\tif( s%26 + \"A\".charCodeAt(0) !== cf.charCodeAt(15) )\r\n\t\t\treturn \"Invalid checksum.\";\r\n\t\treturn null;\r\n    }\r\n  \r\n  /**\r\n\t * Validates a temporary CF.\r\n\t * @param string cf Normalized, 11 characters CF.\r\n\t * @return string Null if valid, or string describing why this CF must be\r\n\t * rejected.\r\n\t */\r\n\tprivate PRIVATE_validate_temporary(cf: string): string\r\n\t{\r\n\t\tif( ! /^[0-9]{11}$/.test(cf) )\r\n\t\t\treturn \"Invalid characters.\";\r\n\t\tvar s = 0;\r\n\t\tfor(var i = 0; i < 11; i++ ){\r\n\t\t\tvar n = cf.charCodeAt(i) - \"0\".charCodeAt(0);\r\n\t\t\tif( (i & 1) === 1 ){\r\n\t\t\t\tn *= 2;\r\n\t\t\t\tif( n > 9 )\r\n\t\t\t\t\tn -= 9;\r\n\t\t\t}\r\n\t\t\ts += n;\r\n\t\t}\r\n\t\tif( s % 10 !== 0 )\r\n\t\t\treturn \"Invalid checksum.\";\r\n\t\treturn null;\r\n    }\r\n  \r\n  /**\r\n\t * Verifies the basic syntax, length and control code of the given CF.\r\n\t * @param string cf Raw CF, possibly with spaces.\r\n\t * @return string Null if valid, or string describing why this CF must be\r\n\t * rejected.\r\n\t */\r\n\tvalidate(): boolean\t{\r\n        let check = false;\r\n        let msg = '';\r\n\r\n        if (this.codiceFiscale.length !==0) {\r\n            this.codiceFiscale = this.normalize(this.codiceFiscale);\r\n\r\n            if( this.codiceFiscale.length === 0 ) {\r\n                msg = 'Empty'\r\n            }\r\n            else if( this.codiceFiscale.length === 16 ) {\r\n                msg = this.PRIVATE_validate_regular(this.codiceFiscale);\r\n            }\r\n            else if( this.codiceFiscale.length === 11 ) {\r\n    \r\n                msg = this.PRIVATE_validate_temporary(this.codiceFiscale);\r\n            }\r\n            else {\r\n                msg = \"Invalid length.\";\r\n            }\r\n        }\r\n        else {\r\n            msg = \"Invalid length.\";\r\n        }\r\n\r\n        //Se c'e' un messaggio, check non passato\r\n        if (msg) {\r\n            check=false;\r\n        }\r\n        else {\r\n            check = true;\r\n        }\r\n\r\n        this.msgValidate = msg;\r\n        this.checkValidate = check;\r\n        return check;\r\n    }\r\n\r\n    /**\r\n     * Decodifica il codice fiscale nelle sue parti\r\n     */\r\n    basicDecode(): boolean {\r\n        let result = false;\r\n\r\n        if (this.codiceFiscale.length == 16) {\r\n            result = this.basicDecode16();\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * Effettua una prima e semplice decodifica dei dati contenuti nel codice fiscale\r\n     */\r\n    private basicDecode16(): boolean {\r\n        let chDay = '';\r\n        let chMonth = '';\r\n        let chYear = '';\r\n        let day = 0;\r\n        let month = 0;\r\n        let year = 0;\r\n        let secolo = 2000;\r\n        let result = true;\r\n        let adesso = new Date();\r\n\r\n        //0123456789  10 11 12 13 14 15\r\n        //CVLPTR72P0  9  G  3  8  8   D\r\n        \r\n\r\n        //CODICE CONTROLLO\r\n        this.codiceControllo = this.codiceFiscale.substr(15,1);\r\n        \r\n        //CODICE CATASTALE\r\n        this.codiceCatastale = this.codiceFiscale.substr(11,4);\r\n\r\n        chDay = this.codiceFiscale.substr(9,2);\r\n        chMonth = this.codiceFiscale.substr(8,1);\r\n        chYear = this.codiceFiscale.substr(6,2);\r\n\r\n        try {\r\n            day = parseInt(chDay,10);\r\n            year = parseInt(chYear, 10);\r\n\r\n        } catch (error) {\r\n            result = false;\r\n        }\r\n        \r\n        if (result) {\r\n\r\n            //Determino il mese\r\n            month = this.getMonthFromLetter(chMonth);\r\n            if (month == -1) {\r\n                //errore\r\n                result = false;\r\n            }\r\n        }\r\n\r\n        //Sistemazione Year\r\n        if (result) {\r\n            secolo = 2000;\r\n            if ((secolo + year) > adesso.getFullYear() ) {\r\n                //Cambio secolo e metto il 1900\r\n                secolo = 1900;\r\n            }\r\n\r\n            year = secolo + year;\r\n\r\n        }\r\n\r\n        //Sistemazione Day\r\n        if (result) {\r\n            if (day > 40 ) {\r\n                day = day - 40;\r\n\r\n                //SESSO\r\n                this.sesso = Sesso.femmina;\r\n            }\r\n            else {\r\n\r\n                //SESSO\r\n                this.sesso = Sesso.maschio;\r\n            }\r\n\r\n            //DATA NASCITA\r\n            this.dataNascita = new Date(year, month, day);\r\n        }\r\n        \r\n\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n    private getMonthFromLetter(letter: string): number {\r\n        let arMesi = [];\r\n        let index = -1;\r\n        arMesi.push('A');\r\n        arMesi.push('B');\r\n        arMesi.push('C');\r\n        arMesi.push('D');\r\n        arMesi.push('E');\r\n        arMesi.push('H');\r\n        arMesi.push('L');\r\n        arMesi.push('M');\r\n        arMesi.push('P');\r\n        arMesi.push('R');\r\n        arMesi.push('S');\r\n        arMesi.push('T');\r\n\r\n        index = arMesi.findIndex(el => {\r\n            return el == letter;\r\n        });\r\n\r\n        //Questo e' il numero del mese in javascript\r\n        return index;        \r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\nimport { Storage } from '@ionic/storage';\r\n\r\nimport { ApicallService } from './apicall.service';\r\nimport { SportService } from './sport.service';\r\nimport { CategoriaetaService } from './categoriaeta.service';\r\nimport { CourseService } from './course.service';\r\nimport { FilterCorsi } from '../models/filtercorsi.model';\r\nimport { UtenteService } from './utente.service';\r\nimport { LivelloService } from './livello.service';\r\nimport { AreaService } from './area.service';\r\nimport { LocationService } from './location.service';\r\nimport { CourseschedulerService } from './coursescheduler.service';\r\n\r\nimport { PrenotazioneService } from './prenotazione.service';\r\nimport { NewseventiService } from './newseventi.service';\r\nimport { SlotoccupazioneService } from './slotoccupazione.service';\r\n\r\n\r\nimport { StartConfiguration, StartAuthorization } from '../models/start-configuration.model';\r\n\r\nimport { Location } from '../models/location.model';\r\nimport { Utente, storageUtente } from '../models/utente.model';\r\nimport { LogApp } from '../models/log.model';\r\nimport { SlotDay } from '../models/imdb/slotday.model';\r\nimport { Campo } from '../models/campo.model';\r\nimport { PrenotazionePianificazione } from '../models/prenotazionepianificazione.model';\r\nimport { Prenotazione } from '../models/prenotazione.model';\r\nimport { UtenteprenotazioneService } from './utenteprenotazione.service';\r\nimport { UtenteiscrizioneService } from './utenteiscrizione.service';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nimport { CodicefiscaleService } from './codicefiscale.service';\r\nimport { CodiceFiscale } from '../models/codicefiscale.model';\r\nimport { TimeTrainerCourse, TipoPrivateImage } from 'src/app/models/valuelist.model'\r\nimport { AccountRequestCode, AccountOperationResponse, AccountVerifyCode } from '../models/accountregistration.model';\r\nimport { OccupazioniService } from './occupazioni.service';\r\n\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { OccupazioneCampi } from '../models/occupazionecampi.model';\r\nimport { RequestParams } from '../library/models/requestParams.model';\r\nimport { DocumentoService } from './documento.service';\r\nimport { PianificazioneCorso } from '../models/pianificazionecorso.model';\r\nimport { InvoicesService } from './invoices.service';\r\nimport { PosizioneService } from './posizione.service';\r\nimport { Area } from '../models/area.model';\r\nimport { MasterDocumento } from '../models/ricevuta.model';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\nimport { DataChiusuraService } from './data-chiusura.service';\r\nimport { DataChiusura } from '../models/datachiusura.model';\r\n\r\nimport { PlatformLocation } from '@angular/common';\r\nimport { Gruppo } from '../models/gruppo.model';\r\nimport { CorsoallegatoService } from './corsoallegato.service';\r\n\r\nimport { CorsoAllegato } from '../models/corsoallegato.model';\r\nimport { IscrizionecorsoService } from './iscrizionecorso.service';\r\nimport { IscrizioneCorso } from '../models/iscrizionecorso.model';\r\nimport { CorsoValutazioneService } from './corso-valutazione.service';\r\nimport { CorsoValutazione } from '../models/corsovalutazione.model';\r\nimport { Livello } from '../models/livello.model';\r\nimport { PhotoService, PhotoType } from './photo.service';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StartService {\r\n\r\n  //Oggetto contentente la configurazione\r\n  private _startConfig = new BehaviorSubject<StartConfiguration>(new StartConfiguration());\r\n\r\n  /* Valorizzata a TRUE quando l'app è pronta a partire */\r\n  private _appReady = new BehaviorSubject<boolean>(false);\r\n  private listenLocation: Subscription;\r\n  \r\n  //Determina se la connessione sarà a un database locale, o al server\r\n  private _localConnection = false;\r\n\r\n  private _forceIdAreaOnLogin = ''; //Se impostato è l'area da mantenere a seguito del login (Usata quando nella booking non sono loggatto, e al termine devo rimanere sull'area)\r\n  \r\n  get appReady() {\r\n    return this._appReady.asObservable();\r\n  }\r\n\r\n  get startConfig() {\r\n    return this._startConfig.asObservable();\r\n  }\r\n\r\n  get actualStartConfig(){\r\n    return this._startConfig.getValue();\r\n  }\r\n\r\n  //Ritorna se l'applicazione sta girando su desktop\r\n  get isDesktop() {\r\n    return !this.platformService.is('hybrid');\r\n  }\r\n\r\n  //Ritorna se l'applicazione sta girando dentro al web, quindi non in capacitor o cordova\r\n  get isOnWeb() {\r\n    let result = true;\r\n    if (this.platformService.is(\"cordova\") || this.platformService.is(\"capacitor\")) {\r\n      result = false;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Controlla l'esecuzione su IOS\r\n   */\r\n  get isOnAppleSystem() {\r\n    let result = true;\r\n    if (this.platformService.is(\"ios\")) {\r\n      result = false;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Controlla l'esecuzione su IOS\r\n   */\r\n   get isOnAndroidSystem() {\r\n    let result = true;\r\n    if (this.platformService.is(\"android\")) {\r\n      result = false;\r\n    }\r\n\r\n    return result;\r\n  }  \r\n\r\n  /**\r\n   * Prende l'Area Attiva e la imposta nella proprietà\r\n   * _forceIdAreaOnLogin \r\n   * Quando il valore della proprietàè settato, a seguito del Login bisogna rimanere su questa area\r\n   */\r\n  setIdAreaForcedForLogin() {\r\n    if (this.areaService.areaSelectedValue) {\r\n      this._forceIdAreaOnLogin = this.areaService.areaSelectedValue.ID;\r\n    }\r\n    else {\r\n      this._forceIdAreaOnLogin = '';\r\n    }\r\n  }\r\n\r\n\r\n  constructor(private platformService: Platform,\r\n    private apiService: ApicallService,\r\n    private storageAccess: Storage,\r\n    private sportService: SportService,\r\n    private categoriaEtaService: CategoriaetaService,\r\n    private corsoService: CourseService,\r\n    private utenteService: UtenteService,\r\n    private livelloService: LivelloService,\r\n    private areaService: AreaService,\r\n    private locationService: LocationService,\r\n    private corsoCalendarioService: CourseschedulerService,\r\n    private prenotazioniService: PrenotazioneService,\r\n    private newsEventiService: NewseventiService,\r\n    private slotOccupazioneService: SlotoccupazioneService,\r\n    private utentePrenotazioneService: UtenteprenotazioneService,\r\n    private utenteIscrizioneService: UtenteiscrizioneService,\r\n    private codFiscService: CodicefiscaleService,\r\n    private occupazioniService: OccupazioniService,\r\n    private docStructureService: DocstructureService,\r\n    private documentoService: DocumentoService,\r\n    private invoicesService: InvoicesService,\r\n    private posizioneService: PosizioneService,\r\n    private dataChiusuraService: DataChiusuraService,\r\n    private urlLocation: PlatformLocation,\r\n    private corsoAllegatoService: CorsoallegatoService,\r\n    private iscrizioneCorsoService: IscrizionecorsoService,\r\n    private corsoValutazioneService: CorsoValutazioneService,\r\n    private photoService: PhotoService\r\n    ) { \r\n\r\n      //Ogni volta che cambia la configurazione la invio \r\n      //al servizio docStructure\r\n      this.startConfig.subscribe(elConfig => {\r\n        this.docStructureService.setConfig(elConfig);\r\n      });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * PRIMO STEP DI CONFIGURAZIONE\r\n   * \r\n   * //TODO: QUESTO METODO E' IMPORTANTE PERCHE' INSTRADA L'APPLICAZIONE \r\n   * A SECONDA SE SIAMO SU CAPACITOR/CORDOVA AL CORRETTO APP ID\r\n   * In caso di Capacitor/Cordova bisogna impostare il valore myAppId a mano\r\n   * Negli altri casi, l'appid viene recuperato grazie all URL di chiamata\r\n   * \r\n   * Impostazioni iniziali\r\n   * 1) _localConnection -> TRUE per modalità di debug e punta ai database in locale\r\n   * 2) prefixDomain -> prefisso letto sull'url\r\n   * 3) myAppId -> Application id da utilizzare (modo automatico o manuale)\r\n   */\r\n  settingStartStepOne() {\r\n    let myUrl = '';\r\n    let myAppId = '';    \r\n    let arUrl = [];\r\n    let prefixDomain = '';\r\n\r\n    //Recupero lo StartConfig, cosi da modificarlo al termine\r\n    let myConfig = this._startConfig.getValue();\r\n\r\n    //Modalità Web\r\n    if (this.isOnWeb) {\r\n\r\n        //Qui posso cambiare strategia per puntare localmente\r\n        //this._localConnection = true;\r\n        this._localConnection = false;\r\n\r\n        if (this._localConnection) {\r\n          //Modalità di Test metto un AppId di test\r\n          myAppId = '00F15A91-5395-445C-B7F4-5BA594E55D2F';\r\n        }\r\n        else {\r\n\r\n          //Recupero URL del browser\r\n          myUrl = this.urlLocation.hostname;\r\n  \r\n          //Simulazione URL\r\n          //myUrl = 'demo.gouego.com';\r\n  \r\n          //Sto aprendo in localhost ma voglio far puntare al server\r\n          //ancora una volta metto un appId fisso\r\n          if (myUrl == 'localhost') {\r\n\r\n            // myAppId = '00F15A91-5d395-445C-B7F4-5BA594E55D2F'; //Demo AppId\r\n            myAppId ='CCBA34A5-24F5-4C22-8485-D891823E3434'; //OpenBeach AppId\r\n            // myAppId = 'FD291600-D873-49CF-A90C-525926CA2CDC'; //Key Element\r\n\r\n          }\r\n          else {\r\n            //Prendo URL e lo separo\r\n            arUrl = myUrl.split('.');\r\n\r\n            if (arUrl.length != 0) {\r\n\r\n              //Prendo il prefisso e sulla base di questo ricavo l'AppID\r\n              prefixDomain = arUrl[0];\r\n\r\n            }\r\n          }\r\n\r\n        }\r\n    }\r\n    else {\r\n\r\n      //Non è mai in localconnection\r\n      this._localConnection = false;\r\n\r\n      //VALORIZZARE L'APP ID PER CAPACITOR\r\n      //TODO: VALORIZZARE APPID PER INSTALLAZIONE CAPACITOR\r\n      myAppId = 'CCBA34A5-24F5-4C22-8485-D891823E3434';\r\n      \r\n\r\n      //Sono su capacitor o cordova\r\n      prefixDomain = '';\r\n    }\r\n\r\n    //Imposto URL di chiamata\r\n    myConfig.setUrlLocation(this._localConnection);\r\n\r\n    //Reimposto Observable\r\n    this._startConfig.next(myConfig);\r\n\r\n    //Il secondo step si preoccupa di ricavare l'app id se mancante, \r\n    //Impostare i dati nell'oggetti startConfiguration\r\n    //ed iniziare la comunicazione server\r\n    this.settingStartStepTwo(prefixDomain, myAppId);\r\n\r\n  }\r\n\r\n  /**\r\n   * SECONDO STEP DI CONFIGURAZIONE\r\n   * Il metodo tenta il recupero di un appId se non ne possiede già uno, e se prefixdomain vale qualcosa\r\n   */\r\n  settingStartStepTwo(prefixDomain: string, myAppId: string) {\r\n\r\n    let docGruppo = new Gruppo(true);\r\n    let params = new RequestParams();\r\n\r\n    if (myAppId.length == 0) {\r\n\r\n      if (prefixDomain.length != 0) {\r\n        //Chiedo al server \r\n        //Preparo il documento di filtro\r\n        docGruppo.PREFIXDOMAIN = prefixDomain;\r\n\r\n        //Effettuo la chiamata\r\n        this.docStructureService.requestNew(docGruppo)\r\n          .then(collGruppo => {\r\n            //Vediamo appId ricevuto\r\n            let appIdReceived = '';\r\n\r\n            if (collGruppo) {\r\n\r\n              let myList: Gruppo[] = collGruppo;\r\n              let myGruppo: Gruppo; \r\n\r\n              //Se riesco recupero appID\r\n              if (myList && myList.length != 0) {\r\n                myGruppo = myList[0];\r\n                appIdReceived = myGruppo.APPID;\r\n\r\n              }  \r\n            }\r\n\r\n            //Step 3 (Se il valore passato è '' siamo in errore)\r\n            this.settingStartStepThree(appIdReceived);\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n\r\n            //Vado allo Step 3 in errore passando stringa vuota\r\n            this.settingStartStepThree('');\r\n          })\r\n\r\n      }\r\n      else {\r\n        //Non ho AppId e non ho trovato modo di leggere URL\r\n\r\n        //Vado allo Step 3 in errore passando stringa vuota\r\n        this.settingStartStepThree('');\r\n\r\n      }\r\n    }\r\n    else {\r\n      //Sono già in possesso dell'AppId\r\n      this.settingStartStepThree(myAppId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fase finale di Start\r\n   * Se il valore di myAppID = '', siamo in errore\r\n   */\r\n  settingStartStepThree(myAppId: string) {\r\n\r\n    //Recupero lo StartConfig, cosi da modificarlo al termine\r\n    let myConfig = this._startConfig.getValue();\r\n\r\n    myConfig.appId = myAppId;\r\n    \r\n    //Reimposto Observable\r\n    this._startConfig.next(myConfig);\r\n\r\n    this.requestStartAuthorization();\r\n\r\n  }\r\n\r\n\r\n    /** Effettua la chiamata WebAPI al Server per richiedere l'autorizzazione */\r\n  requestStartAuthorization() {\r\n\r\n      const doObject = 'AUTHORIZATION';\r\n      const method = 'requestAuthorization';\r\n\r\n      const actualStartConfig = this._startConfig.getValue();\r\n      //Ricavo gli Header da impostare\r\n      let myHeaders = actualStartConfig.getHttpHeaders();\r\n      myHeaders = myHeaders.append('X-HTTP-Method-Override', method);\r\n\r\n      //Aggiungo i parametri di chiamata\r\n      let myParams = new HttpParams().set('withimages', '1');\r\n      myParams = myParams.append('withoptions','1');\r\n\r\n      //Url da chiamare\r\n      let myUrl = actualStartConfig.urlBase + '/' + doObject;\r\n  \r\n      \r\n      // Effettuo la chiamata per l'autorizzazione\r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .subscribe(resultData => {\r\n\r\n          let objAuth: StartAuthorization = resultData;\r\n\r\n          if (objAuth.result == -1 && objAuth.authcode && objAuth.authcode.length != 0) {\r\n\r\n            // Sistemo l'oggetto di configurazione \r\n            // ed emetto un evento di Cambio\r\n            this.onAuthorizationGrant(objAuth);\r\n\r\n          }\r\n          else {\r\n            console.log('Authorization failed');\r\n          }\r\n        },error => {\r\n          console.log('Comunication Error');\r\n        });\r\n        \r\n  \r\n        \r\n    }\r\n\r\n  //Autorizzazione ricevuta\r\n  onAuthorizationGrant(objAuth: StartAuthorization) {\r\n\r\n    let elStartConfig = this._startConfig.getValue();\r\n\r\n    //Scrivo in console\r\n    LogApp.consoleLog('Autorizzazione ricevuta');\r\n\r\n\r\n    //Sistemazione del Gruppo nell'oggetto di configurazione\r\n    elStartConfig.setGruppoAuthorization(objAuth.GRUPPOSPORTIVO);\r\n    //Sistemazione dell'authorization code da usare\r\n    elStartConfig.authorizationAppCode = objAuth.authcode;\r\n\r\n    //Emetto l'evento di cambio\r\n    this._startConfig.next(elStartConfig);\r\n\r\n    //Passo a richiedere le Aree\r\n    this.requestAree();\r\n\r\n    // Mi iscrivo alle modifiche dell'Area Selezionata\r\n    this.onChangeAreaSelezionata();\r\n\r\n    //Operazioni ulteriori a seguito dell'autorizzazione\r\n    this.onAfterAuthorization();\r\n  }    \r\n\r\n\r\n\r\n  /**\r\n   * Alcune operazioni a seguito dell'autorizzazioni\r\n   */\r\n  onAfterAuthorization() {\r\n\r\n    //0- RECUPERO LE CHIUSURE DEL GRUPPO\r\n    this.dataChiusuraService.request()\r\n                  .then((listChiusure: DataChiusura[]) => {\r\n                  });\r\n\r\n    // 1- CHIEDO ELENCO SPORT, LIVELLI, CATEGORIEETA che mi servono sempre\r\n    let elStartConfig = this._startConfig.getValue();\r\n\r\n    this.sportService\r\n      .request(elStartConfig, false)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    this.livelloService\r\n      .request(elStartConfig)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    this.categoriaEtaService\r\n        .request(elStartConfig)\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n\r\n    // 2 - TENTO L'ACCESSO AUTOMATICO\r\n    this.loadStorageUtente();\r\n\r\n  }\r\n\r\n\r\n\r\n  //#region AREE\r\n    \r\n    /**\r\n     * Area Selezionata, in versione Observable\r\n     */\r\n    get areaSelected() {\r\n      return this.areaService.areaSelected;\r\n    }\r\n\r\n    /** Area Selezionata non Observable */\r\n    get areaSelectedValue() {\r\n      return this.areaService.areaSelectedValue;\r\n    }\r\n\r\n    /**\r\n     * Elenco delle Aree\r\n     */\r\n    get listAree() {\r\n      return this.areaService.listAree;\r\n    }\r\n\r\n    /**\r\n     * Effettua la connessione al server per la richiesta delle Aree\r\n     * e seleziona la prima area disponibile\r\n     */\r\n    requestAree() {\r\n      const actualStartConfig = this._startConfig.getValue();\r\n\r\n      return this.areaService.request(actualStartConfig);\r\n    }\r\n\r\n    /**\r\n     * Effettua la selezione di una Area\r\n     * l'oggetto Observable areaSelected verrà emesso con un nuovo valore\r\n     * @param idArea IDArea da selezionare\r\n     */\r\n    selectAreaByID(idArea: string) {\r\n      this.areaService.selectAreaByID(idArea);\r\n    }\r\n\r\n\r\n    /**\r\n     * Metodo per sottoscriversi al cambiamento dell'area selezionata\r\n     */\r\n    onChangeAreaSelezionata() {\r\n\r\n      this.areaService.areaSelected\r\n          .subscribe(newAreaSelected => {\r\n            //Cambiando Area selezionata\r\n            //Devo necessariamente recuperare le Location\r\n\r\n            //Se il documento è in stato inserted non è ancora arrivato dal server\r\n            if (!newAreaSelected.inserted) {\r\n              \r\n              //Richiedo al server le Location\r\n              this.requestLocation(newAreaSelected.ID);\r\n\r\n              //Chiedo la situazione dell' AppReady\r\n              let actualAppReady = this._appReady.getValue();\r\n              if (!actualAppReady) {\r\n                //Applicazione non ancora pronta\r\n\r\n                //Mi sottoscrivo per capire quando posso partire\r\n                //appena sono arrivate le location\r\n                this.listenLocation = this.locationService.listLocation\r\n                      .subscribe(data => {\r\n                        if (data.length !== 0) {\r\n                          //App entra in stato pronto\r\n                          this._appReady.next(true);\r\n\r\n\r\n                          LogApp.consoleLog('Avvio AppReady');\r\n\r\n                          //Dopo che l'app è partita in questo contento non \r\n                          //mi serve piu sapere lo state Location\r\n                          this.listenLocation.unsubscribe();\r\n                        }\r\n                });\r\n              }\r\n\r\n            }\r\n          })\r\n    }\r\n\r\n\r\n\r\n  //#endregion\r\n\r\n  //#region LOCATIONS\r\n  \r\n\r\n  get listLocation() {\r\n    return this.locationService.listLocation;\r\n  }\r\n\r\n  /**\r\n   * Ritorna la location attiva\r\n   */\r\n  get activeLocation() {\r\n    return this.locationService.activeLocation;\r\n  }\r\n\r\n  /**\r\n   * Richiesta al server di tutte le location dell'area\r\n   * @param idArea Area selezionata\r\n   */\r\n  requestLocation(idArea: string) {\r\n    const actualStartConfig = this._startConfig.getValue();\r\n    \r\n    return this.locationService.requestByIdArea(actualStartConfig, idArea);\r\n  }\r\n\r\n  newRequestLocation(idArea: string){\r\n    return this.locationService.newRequestByIdArea(idArea);\r\n  }\r\n\r\n  /** Effettua la richiesta al server di una Location precisa\r\n   * @param idLocation Location scelta \r\n   * \r\n   */\r\n  requestLocationByID(idLocation: string, _numLivelli?:number):Promise<Location> {\r\n    const actualStartConfig = this._startConfig.getValue();\r\n    \r\n    return this.locationService.requestLocationByID(actualStartConfig, idLocation, _numLivelli);\r\n  }\r\n\r\n  /**\r\n   * Cerca nel servizio la Location desiderata\r\n   * NON OBSERVABLE\r\n   * @param idLocation IDLocation cercata\r\n   */\r\n  findLocationByID(idLocation: string) {\r\n    return this.locationService.findLocationByID(idLocation);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param selectedLocation Location richiesta\r\n   */\r\n  requestLocationCampiSport(selectedLocation: Location) {\r\n    const listSport = this.sportService.actualListSport;\r\n    const actualStartConfig = this._startConfig.getValue();\r\n\r\n    //Inietto nel servizio la decodifica della Lista Sport\r\n    this.locationService.decodeListSport = listSport;\r\n\r\n    return this.locationService\r\n               .syncInfoCampi(actualStartConfig, selectedLocation);\r\n  }\r\n\r\n\r\n  /**\r\n   * Ritorna il template Week con tutti i giorni della settimana e gli SlotTime da applicare\r\n   * in una prenotazione\r\n   * (Schema di Default che andrà successivamente attualizzato con le info di occupazione e\r\n   * chiusura specifica per festività etc)\r\n   * @param docLocation Location richiesta\r\n   */\r\n  getTemplateSlotWeek(docLocation: Location) {\r\n\r\n    return this.locationService.getTemplateSlotWeek(docLocation);\r\n\r\n  }\r\n  \r\n  //#endregion\r\n\r\n\r\n//#region SPORT SERVICE\r\n\r\n/**\r\n * Richiede in modalità Observable l'elenco degli sport\r\n */\r\nget listSport() {\r\n  return this.sportService.listSport;\r\n}\r\n\r\n/**\r\n * Lista degli sport in modalità non observable\r\n */\r\nget actualListSport() {\r\n  return this.sportService.actualListSport;\r\n}\r\n\r\n\r\n/**\r\n * Dato l'id di uno sport, ritorna l'icona\r\n * @param idSport l'id dello sport\r\n */\r\ngetSportIcon(idSport:string){\r\n  return this.sportService.getIconaSport(idSport);\r\n}\r\n\r\n/**\r\n * Richiedo al servizio gli Sport\r\n * @param withLivelli Scaricamento con Livelli \r\n */\r\nrequestSport(withLivelli?:boolean) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  this.sportService\r\n      .request(actualStartConfig, withLivelli);\r\n            \r\n}\r\n\r\n/**\r\n * Proprietà per gli Sport di una Location\r\n */\r\nget listLocationSport() {\r\n  return this.sportService.listLocationSport;\r\n}\r\n\r\n/**\r\n * Richiede al server i dati degli Sport in una location\r\n * @param config Dati configurazione\r\n * @param idLocation idLocation selezionata\r\n */\r\nrequestLocationSport(idLocation: string) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  //Effettuo la chiamata\r\n  return this.sportService.requestLocationSport(actualStartConfig, idLocation);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//#endregion\r\n\r\n//#region LIVELLI\r\nget listLivelli() {\r\n  return this.livelloService.listLivelli;\r\n}\r\n\r\n/**\r\n * Richiedo al servizio i Livelli\r\n */\r\nrequestLivelli() {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  return this.livelloService\r\n    .request(actualStartConfig);\r\n}\r\n\r\n\r\n/**\r\n * Richiede al server l'elenco dei Livelli per lo sport\r\n * @param idSport Sport da analizzare\r\n */\r\nrequestLivelliForSport(idSport: string):Promise<Livello[]> {\r\n  return this.livelloService.requestLivelliForSport(idSport);\r\n}\r\n\r\n//#endregion\r\n\r\n//#region CATEGORIAETA\r\n\r\nget listCategoriaEta() {\r\n  return this.categoriaEtaService.listCategorieEta;\r\n}\r\n\r\n/**\r\n * Richiede al server le Categorie Eta\r\n */\r\nrequestCategorieEta() {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  this.categoriaEtaService\r\n      .request(actualStartConfig);\r\n            \r\n}\r\n\r\nisValidCategorieEta(idCategoria: string, eta: number): boolean {\r\n  return this.categoriaEtaService.isValid(idCategoria, eta);\r\n}\r\n//#endregion\r\n\r\n\r\n//#region CORSO\r\n/**\r\n * Elenco Corsi \r\n */\r\nget listCorsi() {\r\n  return this.corsoService.listCorsi;\r\n}\r\n\r\n/**\r\n * Elenco Corsi richiesti da un trainer\r\n */\r\n get listCorsiTrainer() {\r\n  return this.corsoService.listCorsiTrainer;\r\n}\r\n\r\n/**\r\n * Ritorno il filtro corsi impostato nel servizio\r\n */\r\nget filterCorsi() {\r\n  return this.corsoService.filterCorsi;\r\n}\r\n\r\n/**\r\n * Imposta i filtri corsi nel servizio\r\n */\r\nset filterCorsi(value: FilterCorsi) {\r\n  this.corsoService.filterCorsi = value;\r\n}\r\n\r\n/**\r\n * Inizializza e ritorna nuovi Filtri con l'impostazione della location\r\n * @param idLocation ID Location \r\n */\r\nnewFilterCorsi(idLocation: string) {\r\n  return this.corsoService.newFilterCorsi(idLocation);\r\n}\r\n\r\n\r\n\r\nrequestCorsoById(idCorso: string){\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.corsoService.requestById(actualStartConfig, idCorso);\r\n}\r\n\r\nnewRequestCorsoById(idcorso: string){\r\n  return this.corsoService.newRequestById(idcorso);\r\n}\r\n\r\n/**\r\n * Effettua la chiamata al server per ottenere i corsi riferiti al trainer\r\n * Risultato nell'Observable listCorsiTrainer\r\n * \r\n * @param idTrainer Trainer\r\n * @param timeState Corsi richiesti\r\n */\r\n requestTimeTrainerCourse(idTrainer: string, timeState: TimeTrainerCourse):void {\r\n   this.corsoService.requestTimeTrainerCourse(idTrainer, timeState);\r\n }\r\n\r\n//#region coursescheduler\r\n\r\n  /**\r\n   * Ritorna il calendario di un corso\r\n   */\r\n  get calendarioCorso() {\r\n    return this.corsoCalendarioService.calendarioCorso;\r\n  }\r\n\r\n  /**\r\n   * Richiesto il calendario del corso\r\n   * @param idCorso Corso richiesto\r\n   */\r\n  requestCalendarioCorso(idCorso: string) {\r\n    const actualStartConfig = this._startConfig.getValue();\r\n\r\n    return this.corsoCalendarioService.requestCalendario(actualStartConfig, idCorso);\r\n  }\r\n\r\n  requestImpegniTrainer(idRef: string, dataInizio: Date, dataFine?: Date){\r\n    return this.corsoCalendarioService.requestImpegniTrainer(idRef,dataInizio,dataFine);\r\n  }\r\n\r\n  /**\r\n   * Recupera un elemento \"impegno del trainer\" con l'id specificato. ATTENZIONE: devo prima aver eseguito il metodo requestImpegniTrainer\r\n   * @param idPianificazione l'id della pianificazione da recuperare\r\n  */\r\n  getPianificazioneTrainerById(idPianificazione: string){\r\n    return this.corsoCalendarioService.getPianificazioneTrainerById(idPianificazione);\r\n  }\r\n\r\n  insertPresenzeIntoPianificazione(docPianificazione: PianificazioneCorso){\r\n    return this.corsoCalendarioService.insertPresenze(docPianificazione);\r\n  }\r\n\r\n  requestUpdatePresenze(docPianificazione: PianificazioneCorso){\r\n    return this.corsoCalendarioService.updatePresenze(docPianificazione);\r\n  }\r\n\r\n\r\n//#endregion\r\n\r\n////#region corsi\r\n\r\n\r\n\r\n//Ritorna il corso selezionato nel servizio\r\nget selectedCorso() {\r\n  return this.corsoService.selectedCorso;\r\n}\r\n\r\n\r\n//#endregion\r\n\r\n\r\n//#region ISCRIZIONE CORSO\r\n\r\n/**\r\n* Contatta il server per conoscere se sono ancora \r\n* disponibili posti per l'iscrizione a un corso\r\n* \r\n* Ritorna un oggetto di tipo =>  PostResponse\r\n* Result = TRUE (Posti diponibili) / FALSE (Posti Esauriti)\r\n*  \r\n * @param idCorso \r\n * @returns Promise (Resolve)\r\n */\r\ngetPostiDisponibiliCorso(idCorso: string):Promise<PostResponse> {\r\n  return this.iscrizioneCorsoService.getPostiDisponibiliCorso(idCorso);\r\n}\r\n\r\n/**\r\n * Chiama il server per il salvataggio di una nuova iscrizione\r\n * @param docIscrizione Documento Iscrizione da creare\r\n */\r\nrequestSaveIscrizione(docIscrizione: IscrizioneCorso):Promise<PostResponse> {\r\n  return this.iscrizioneCorsoService.requestSaveIscrizione(docIscrizione);\r\n}\r\n//#endregion\r\n\r\n\r\n//#region CORSO VALUTAZIONE\r\n\r\n/**\r\n * Chiede al server una Scheda di Valutazione finale Corso\r\n * \r\n * @param idCorso idCorso richiesto\r\n * @returns resolve con la Scheda di Valutazione\r\n * @return  reject Messaggio Errore\r\n */\r\nrequestSchedaValutazioneCorso(idCorso: string):Promise<CorsoValutazione> {\r\n  return this.corsoValutazioneService.requestSchedaValutazioneCorso(idCorso);\r\n}\r\n\r\n/**\r\n * Richiede al server il salvataggio della scheda di valutazione\r\n * @param docScheda Scheda in salvataggio\r\n */\r\nrequestForSaveSchedaValutazioneCorso(docScheda: CorsoValutazione):Promise<PostResponse> {\r\n  \r\n  return this.corsoValutazioneService.requestForSave(docScheda);\r\n\r\n}\r\n//#endregion\r\n\r\n//#region UTENTE\r\n\r\n\r\nget utente() {\r\n  return this.utenteService.utente;\r\n}\r\n\r\n// Espone se l'utente è loggato \r\nget utenteLogged() {\r\n  return this.utenteService.utenteLoggato;\r\n}\r\n\r\nget actualUtenteLogged() {\r\n  return this.utenteService.actualLoggato;\r\n}\r\n\r\n/**\r\n * recupera l'utente loggato (non Obs)\r\n */\r\nget actualUtente() {\r\n  return this.utenteService.actualUtente;\r\n}\r\n/**\r\n * Memorizza nello storage username e password\r\n * @param username Username da memorizzare\r\n * @param pwd Password da memorizzare\r\n */\r\nsaveStorageUtente(username: string, passwd: string) {\r\n  let account = new storageUtente(username, passwd);\r\n  \r\n  //salvo le informazioni criptate\r\n  let strAccount = account.saveJSON(true);\r\n\r\n  this.storageAccess.set('gouegoser',strAccount);\r\n  LogApp.consoleLog('Saved credential');\r\n}\r\n\r\nupdateClientUtenteData(){\r\n  return this.utenteService.updateClientData();\r\n}\r\n\r\n/**\r\n * Carica dallo Storage le credenziali utente memorizzate\r\n * Se il recupero è corretto tenta anche il login\r\n */\r\nloadStorageUtente() {\r\n  LogApp.consoleLog('Trying autologin');\r\n\r\n  //Chiedo di caricare l'impostazione\r\n  this.storageAccess\r\n      .get('gouegoser')\r\n      .then ((val) => {\r\n        //Credenziali memorizzate\r\n        if (val) {\r\n          let savedUser = new storageUtente('','');\r\n          savedUser.loadJSON(val);\r\n\r\n          if (savedUser.loginUser && savedUser.pwdUser) {\r\n            //Devo tentare di accedere\r\n            \r\n            //Faccio la richiesta al server\r\n            this.userLogin(savedUser.loginUser, savedUser.pwdUser)\r\n                .then(() => {\r\n                  LogApp.consoleLog('AutoLogin passed: ');\r\n                })\r\n                .catch(error => {\r\n                  LogApp.consoleLog('AutoLogin failed: ' + error);\r\n                });\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        //Failed load Storage\r\n      });\r\n      \r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Disconnessione utente richiesta\r\n */\r\nuserLogoff() {\r\n  let myStartConfig = this._startConfig.getValue();\r\n\r\n  // Avviso del logoff\r\n  this.utenteService.logoff();\r\n\r\n  //Tolgo il codice di autorizzazione utente\r\n  myStartConfig.authorizationUserCode = '';\r\n  //Riemetto l'Observable\r\n  this._startConfig.next(myStartConfig);\r\n\r\n  //Tolgo le credenziali memorizzate dallo storage\r\n  this.saveStorageUtente('','');\r\n  \r\n}\r\n\r\n/**\r\n * Effettua la richiesta \r\n * @param username Username Utente\r\n * @param password Password Utente\r\n */\r\nuserLogin(username: string, \r\n          password: string) {\r\n\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  //Mi metto in ascolto per i cambi di Area Favorite a seguito della login\r\n  this.onChangeAreaFavListener();\r\n\r\n  //Chiamo il servizio Utente passando username, password, la configurazione e\r\n  //l'eventuale area da Impostare come attiva dopo il login\r\n  \r\n  return this.utenteService\r\n            .login( username, \r\n                    password,\r\n                    this._startConfig,\r\n                    this._forceIdAreaOnLogin);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Ascolta il cambio dell'idAreaChange \r\n */\r\nonChangeAreaFavListener() {\r\n  this.utenteService.idAreaFAV.subscribe(value => {\r\n    //Se arriva un'area favorita, procedo con il cambio\r\n    if (value) {\r\n      //Cambio dell'area\r\n      this.selectAreaByID(value);\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n/**\r\n * Richiedere al server l'operazione di Update Utente\r\n * @param docUtenteUpdate Documento Utente con le modifiche da inviare\r\n */\r\nupdateUtente(docUtenteUpdate: Utente) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  return this.utenteService.requestUpdate(actualStartConfig, docUtenteUpdate);\r\n}\r\n\r\n/**\r\n * Effettua la richiesta al server per il cambio della password\r\n * Ritorna un Observable\r\n * con {RESULT: 0/1, MESSAGE:''}\r\n * @param oldPsw Password Attuale\r\n * @param newPsw Nuova Password\r\n */\r\nrequestChangePassword(oldPsw:string, newPsw:string) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  return this.utenteService.requestChangePassword(actualStartConfig, oldPsw, newPsw);\r\n}\r\n\r\n\r\n/**\r\n * Foto utente presente nel servizio utente\r\n */\r\nget userPicture():Observable<string> {\r\n  return this.utenteService.userPicture;\r\n}\r\n/**\r\n * Apre la fotocamera per la foto utente\r\n */\r\ntakePictureUtente():Promise<string> {\r\n\r\n  let photoType: PhotoType = PhotoType.account;\r\n  let idPhoto: string = '';\r\n\r\n  return new Promise<string>((resolve, reject) => {\r\n    \r\n    if (this.utenteLogged) {\r\n  \r\n      //Identificativo della foto\r\n      this.utente.subscribe(elutente => {\r\n\r\n        idPhoto = elutente.ID;\r\n    \r\n        //Apro la fotocamera per il caricamento\r\n        this.photoService.takePicure(photoType, idPhoto)\r\n                        .then(dataUrl => {\r\n\r\n                          //Foto memorizzata, la imposto nel servizio utente\r\n                          this.utenteService.setUserPicture(dataUrl);\r\n                          //Risolvo la Promise\r\n                          resolve(dataUrl);\r\n\r\n                        })\r\n                        .catch(error => {\r\n                          reject(error);\r\n                        })\r\n      }, error => {\r\n        reject(error);\r\n      })\r\n\r\n    }\r\n    else {\r\n      reject('No user logged');\r\n    }\r\n  })\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * \r\n * @returns DataURL con la foto profilo\r\n */\r\nloadPictureUtente():Promise<string> {\r\n  let photoType: PhotoType = PhotoType.account;\r\n  let idPhoto: string = '';\r\n\r\n  return new Promise<string>((resolve) => {\r\n\r\n    if (this.utenteLogged) {\r\n  \r\n      this.utente.subscribe(elutente => {\r\n        //Identificativo della foto\r\n        idPhoto = elutente.ID;\r\n    \r\n\r\n        //Apro la fotocamera per il caricamento\r\n        this.photoService.storageLoad(photoType, idPhoto)\r\n                        .then(dataUrl => {\r\n\r\n                          //Foto memorizzata, la imposto nel servizio utente\r\n                          this.utenteService.setUserPicture(dataUrl);\r\n\r\n                          resolve(dataUrl);\r\n                        })\r\n                        .catch(error => {\r\n                          resolve('');\r\n                        })\r\n      }, error => {\r\n        resolve('');\r\n      })\r\n\r\n    }\r\n    else {\r\n      resolve('');\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//#endregion\r\n\r\n//#region REGISTRAZIONE ACCOUNT\r\n\r\n/**\r\n * Chiama il server e chiede l'invio dei PINCODE di registrazione\r\n * @param docRequestCode Dati per la richiesta da inviare al server\r\n */\r\nregistrationSendCodici(docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\n    const actualStartConfig = this._startConfig.getValue();\r\n    return this.utenteService.registrationSendCodici(actualStartConfig, docRequestCode);\r\n}\r\n\r\n/**\r\n * Chiama il server inviando i codici inseriti dall'utente per chiederne il controllo\r\n * @param docVerifyCode Dati per la verifica dei codici inseriti\r\n */\r\nregistrationVerifyCodici(docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.registrationVerifyCodici(actualStartConfig, docVerifyCode);\r\n}\r\n\r\n/**\r\n * Invia al server la richiesta per la registrazione di un nuovo account\r\n * @param docUtente Nuovo Utente da registrare\r\n * @param docRequestCode Documento richiesta codici presentato in precedenza\r\n */\r\nregistrationFinalize(docUtente: Utente, \r\n                     docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\n    const actualStartConfig = this._startConfig.getValue();\r\n    return this.utenteService.registrationFinalize(actualStartConfig,docUtente, docRequestCode);\r\n  }\r\n\r\n//#endregion\r\n\r\n//#region PSW RECOVERY\r\n\r\nrecoverySendCodici(docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.recoverySendCodici(actualStartConfig, docRequestCode);\r\n}\r\n\r\nrecoveryVerifyCodici(docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.recoveryVerifyCodici(actualStartConfig, docVerifyCode);\r\n}\r\n\r\n\r\n/**\r\n * Invia al server la richiesta per la registrazione di un nuovo account\r\n * @param docUtente Nuovo Utente da registrare\r\n * @param docRequestCode Documento richiesta codici presentato in precedenza\r\n */\r\nrecoveryFinalize(docUtente: Utente, \r\n  docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\nconst actualStartConfig = this._startConfig.getValue();\r\nreturn this.utenteService.recoveryFinalize(actualStartConfig,docUtente, docRequestCode);\r\n}\r\n\r\n\r\n//#endregion\r\n\r\n//#region VALIDATION CONTATTI\r\n\r\nvalidationSendCodici(docRequestCode: AccountRequestCode, docUtente: Utente):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.validationSendCodici(actualStartConfig, docUtente, docRequestCode );\r\n}\r\n\r\nvalidationVerifyCodici(docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteService.validationVerifyCodici(actualStartConfig, docVerifyCode);\r\n}\r\n\r\n//#region PRENOTAZIONE\r\n\r\n/**\r\n * Prenotazione Attiva\r\n */\r\nget activePrenotazione() {\r\n  return this.prenotazioniService.activePrenotazione;\r\n}\r\n\r\n//Passo al servizio una prenotazione e la imposto nel servizio\r\nsetActivePrenotazione(value: Prenotazione) {\r\n  this.prenotazioniService.setActivePrenotazione(value);\r\n}\r\n\r\n/**\r\n * Chiede al servizio di inizializzare una nuova Prenotazione\r\n * @param idArea IDArea da impostare\r\n */\r\ninitActivePrenotazione(idArea: string) {\r\n  this.prenotazioniService.initActivePrenotazione(idArea);\r\n}\r\n\r\n/**\r\n * Chiede al servizio di impostare la pianificazione\r\n * @param docPianificazione Pianificazione da impostare\r\n */\r\nsetPianificazioneSingola(docPianificazione: PrenotazionePianificazione) {\r\n  this.prenotazioniService.setPianificazioneSingola(docPianificazione);\r\n}\r\n\r\n/**\r\n * Chiede al servizio di impostare l'utente\r\n * @param idUtente Utente da applicare\r\n */\r\nsetIDUtenteActivePrenotazione(docUtente: Utente) {\r\n  this.prenotazioniService.setIDUtenteActivePrenotazione(docUtente);\r\n}\r\n\r\n/**\r\n * Richiede al servizio il calcolo \r\n * della Prenotazione\r\n * \r\n */\r\nrequestImportoPrenotazione() {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.prenotazioniService.requestImporto(actualStartConfig);\r\n}\r\n\r\n/**\r\n * Ritorna Observable da analizzare con subscribe relativo alla richiesta di salvataggio\r\n * della prenotazione\r\n */\r\nrequestSavePrenotazione() {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.prenotazioniService.requestSave(actualStartConfig);\r\n}\r\n\r\n\r\n\r\n//Mantiene nel servizio il campo per una rilettura futura\r\nsetSelectedCampoPrenotazione(value: Campo) {\r\n  this.prenotazioniService.selectedCampo = value;\r\n}\r\n\r\n//Recupera nel servizio Prenotazione il campo salvato in precedenza\r\ngetSelectedCampoPrenotazione() {\r\n  return this.prenotazioniService.selectedCampo;\r\n}\r\n\r\n/**\r\n * Richiede al server una Prenotazione\r\n * @param idPrenotazione idPrenotazione Padre\r\n */\r\nrequestPrenotazioneById(idPrenotazione: string, numLivelli: number) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.prenotazioniService.requestById(actualStartConfig, idPrenotazione, numLivelli);\r\n}\r\n\r\n\r\nrequestDeletePianificazione(idPianificazione){\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.prenotazioniService.requestDelete(idPianificazione, actualStartConfig);\r\n\r\n}\r\n\r\n//#endregion\r\n\r\n\r\n//#region UtentePrenotazione\r\n\r\n\r\n/**\r\n * Richiede al server elenco di prenotazioni di un utente\r\n * @param idUtente IDUtente Prenotazione\r\n */\r\nrequestUtentePrenotazioni(idUtente: string) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  \r\n  //Richiedo i dati al servizio\r\n  return this.utentePrenotazioneService.request(actualStartConfig, idUtente);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Lista Prenotazioni di tipo Observable\r\n */\r\nget listUtentePrenotazioni() {\r\n  return this.utentePrenotazioneService.listUtentePrenotazione;\r\n}\r\n\r\n//#endregion\r\n\r\n\r\n//#region UtenteIscrizione\r\n\r\n\r\n/**\r\n * Richiede al server elenco di Iscrizioni ai corsi di un utente\r\n * @param idUtente IDUtente\r\n */\r\nrequestUtenteIscrizioni(idUtente: string) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  \r\n  //Richiedo i dati al servizio\r\n  return this.utenteIscrizioneService.request(actualStartConfig, idUtente);\r\n}\r\n\r\n\r\n/**\r\n * Lista Iscrizioni Corsi di tipo Observable\r\n */\r\nget listUtenteIscrizioni() {\r\n  return this.utenteIscrizioneService.listUtenteIscrizione;\r\n}\r\n\r\nrequestIscrizioneById(idIscrizione){\r\n  const actualStartConfig = this._startConfig.getValue();\r\n  return this.utenteIscrizioneService.requestById(actualStartConfig, idIscrizione);\r\n}\r\n\r\n//#endregion\r\n\r\n//#region NEWS EVENTI\r\nget listNews() {\r\n  return this.newsEventiService.listNews;\r\n}\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Recupera le news relative ad un'area\r\n   * @param guidArea il guid dell'area \r\n   * @param nElementi il numero di elementi richiesti\r\n   */\r\n  requestNews(guidArea: string, nElementi: number){\r\n    const actualStartConfig= this._startConfig.getValue();\r\n    return this.newsEventiService.request(actualStartConfig,guidArea,nElementi);\r\n  }\r\n\r\n  /** Effettua la richiesta al servizio di una news\r\n   * @param idNews News scelta \r\n   * \r\n   */\r\n  requestNewsByID(idNews: string) {\r\n    \r\n    \r\n    return this.newsEventiService.getNewsById(idNews);\r\n    \r\n  }\r\n//#endregion\r\n\r\n//#region OCCUPAZIONE CAMPI\r\nget docOccupazione() {\r\n  return this.slotOccupazioneService.docOccupazione;\r\n}\r\n\r\n/**\r\n * Il servizio prende il template dello Slot, richiede al server i dati di occupazione, \r\n * corregge il templateSlotDay e lo ripropone come Observable\r\n * @param templateSlotDay Template della Giornata \r\n * @param idLocation Location\r\n * @param idCampo Campo\r\n * @param dataGiorno Giorno richiesto\r\n */\r\nrequestSlotOccupazioni(templateSlotDay: SlotDay,\r\n                       docLocation: Location, \r\n                       docCampo: Campo, \r\n                       dataGiorno: Date) {\r\n  const actualStartConfig = this._startConfig.getValue();\r\n\r\n  //Faccio la richiesta dei dati al servizio\r\n  return this.slotOccupazioneService.request(actualStartConfig, templateSlotDay, docLocation, docCampo, dataGiorno);\r\n\r\n}\r\n\r\n//#endregion\r\n\r\n//#region PAGAMENTI\r\n\r\n\r\n\r\n//#endregion\r\n\r\n\r\n//#region CODICE FISCALE\r\n/**\r\n * Promise per il controllo e la decodifica del codice fiscale\r\n * Puo' essere usata solo per controllare il Codice Controllo con il resto, oppure per decodificare tutti i campi\r\n * @param codiceFiscale Codice Fiscale da anallizare\r\n * @param decode \r\n */\r\ncheckCodiceFiscale(codiceFiscale: string, \r\n                   decode?:boolean,\r\n                   userMsg?:boolean): Promise<CodiceFiscale> {\r\n  return this.codFiscService.checkCodiceFiscale(codiceFiscale, decode, userMsg);\r\n}\r\n\r\n//#endregion\r\n\r\n/**\r\n * dato un tipo di immagine, la funzione restituisce la stringa in B64\r\n * @param tipo il tipo di immagine richiesta \r\n */\r\nrequestBase64Image(tipo: TipoPrivateImage):Promise<string>{\r\n  return new Promise((resolve,reject)=>{\r\n    const doObject='GRUPPOSPORTIVO'\r\n    let config=this._startConfig.getValue();\r\n    \r\n    let myUrl = config.urlBase + '/' + doObject;  \r\n    \r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override','getBase64PrivateImage');\r\n\r\n    // =new HttpHeaders({\r\n    //   'Content-Type': 'text/plain',\r\n    //   'appid': config.appId,\r\n    //   'X-HTTP-Method-Override':'getBase64PrivateImage'\r\n    // });\r\n    \r\n    let myParams= new HttpParams().set('Tipo', tipo+'');\r\n\r\n    this.apiService.httpGet(myUrl,myHeaders, myParams)\r\n    .pipe(map(data=>{\r\n      return data.image;\r\n    }))\r\n    .subscribe(base64=>{\r\n      resolve(base64);\r\n    },error=>{\r\n      reject(error);\r\n    });\r\n  });\r\n  //#region image\r\n}\r\n\r\n\r\n//#endregion\r\n\r\n\r\n//#region OCCUPAZIONICAMPI\r\n\r\n\r\nrequestOccupazioni(idArea: string, idLocation?: string, top?, params?: RequestParams, fromTime?: Date) {\r\n  return this.occupazioniService.request(idArea, idLocation, params, top, fromTime);\r\n}\r\n\r\nrequestOccupazioniByFilter(filter: OccupazioneCampi, params?: RequestParams){\r\n  return this.occupazioniService.requestByFilter(filter, params);\r\n}\r\n\r\nrequestOccupazioneById(idOccupazione: string, getRelReservation = false){\r\n  return this.occupazioniService.requestById(idOccupazione, getRelReservation);\r\n}\r\n//#endregion\r\n\r\n\r\n////#region DOCUMENTO\r\nrequestDocumento(urlDocumento: string){\r\n  return this.documentoService.request(this.actualStartConfig, urlDocumento);\r\n}\r\n\r\n////#endregion\r\n\r\n\r\n//#region INVOICES\r\n\r\n\r\n/**\r\n * Richiede l'elenco delle ricevute per l'utente passato\r\n * @param utente il documento utente\r\n */\r\n  requestInvoices(utente: Utente, anno: number){\r\n    return this.invoicesService.requestInvoices(utente, anno);\r\n}\r\n\r\n /**\r\n   * Dato un elemento MasterDocumento, la funzione lo scarica e restituisce la postResponse contenente il B64\r\n   * @param documento elemento MasterDocumento che si vuole scaricare\r\n   */\r\n  downloadInvoice(documento: MasterDocumento):Promise<PostResponse>{\r\n    return this.invoicesService.downloadInvoice(documento);\r\n  }\r\n\r\n    /**\r\n   * la funzione, presa una stringa b64 e il content-type, restituisce il blob\r\n   * @param b64Data stringa B64 SENZA tipo di file\r\n   * @param contentType stringa tipo file (default: application/pdf)\r\n   */\r\n  base64toBlob(b64Data, contentType='application/pdf'){\r\n    return this.invoicesService.base64toBlob(b64Data, contentType);\r\n  }\r\n\r\n\r\n\r\n//#endregion\r\n\r\n\r\n//#region posizione\r\n\r\n/**\r\n * La funzione restituisce una promise con la posizione attuale\r\n */\r\ngetCurrentPosition(){\r\n  return this.posizioneService.getCurrentPosition();\r\n}\r\n\r\n/**\r\n * data in input una lista di aree, la funzione restituisce l'oggetto area più vicino alla posizione attuale\r\n * @param listAree la lista delle aree tra cui cercare\r\n */\r\ngetNearestArea(listAree: Area[]){\r\n  return this.posizioneService.getNearestArea(listAree);\r\n}\r\n\r\n//#endregion\r\n\r\n//#region DATECHIUSURE\r\nisFestivita(data: Date, idArea: string, idLocation: string, idCampo: string) {\r\n  return this.dataChiusuraService.idFestivita(idArea, idLocation, idCampo, data);\r\n}\r\n//#endregion\r\n\r\n//#region CORSOALLEGATO\r\n\r\n  requestListAllegatiByIdCorso(idCorso: string): Promise<CorsoAllegato[]>{\r\n    return this.corsoAllegatoService.requestByIdCorso(idCorso);\r\n  }\r\n\r\n//#endregion\r\n\r\n\r\n}\r\n\r\n\r\n","import { CacheListElement } from './cachelistelement.model';\r\nimport { IDDocument } from './iddocument.model';\r\nimport { Descriptor } from './descriptor.model';\r\n\r\nexport class Cache {\r\n    list: CacheListElement[]\r\n\r\n    constructor() {\r\n        this.list = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca nell'Array list se è presente un oggetto della stessa className\r\n     * @param className Nome della classe cercato\r\n     */\r\n    findByClassName(className:string): CacheListElement {\r\n\r\n        return this.list.find(el => {\r\n            return el.className == className;\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Aggiunge alla cache un documento\r\n     * @param doc Documento da aggiungere alla cache\r\n     */\r\n    addTo(doc: IDDocument) {\r\n        //Step 1: Cercare nella lista il CacheListElement corretto con il nome classe \r\n        let objDescriptor: Descriptor;\r\n        let elCacheList: CacheListElement;\r\n        let updateIfExist = false;\r\n\r\n        if (doc) {\r\n            objDescriptor = doc.getDescriptor();\r\n\r\n            if (objDescriptor) {\r\n                //Mi son fatto restituire l'elemento cache\r\n                elCacheList = this.findByClassName(objDescriptor.className);\r\n\r\n                //Non ho nessuna cache lista dell'oggetto specificato\r\n                if (!elCacheList) {\r\n                    //Non ce l'abbiamo ancora in cache\r\n                    elCacheList = new CacheListElement(objDescriptor.className);\r\n                    this.list.push(elCacheList);\r\n\r\n                    updateIfExist = false;\r\n                    elCacheList.addElement(doc, updateIfExist);\r\n\r\n                }\r\n                else {\r\n\r\n                    //L'oggetto specificato possiede gia una lista di cache\r\n                    updateIfExist = true;\r\n                    elCacheList.addElement(doc, updateIfExist );\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport {  TipoCorso, StatoCorso, TargetSesso, Language, Giorni, ModalitaFruizione } from '../models/valuelist.model';\r\nimport { Settimana } from './settimana.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { CorsoProgramma } from './corsoprogramma.model';\r\nimport { PianificazioneCorso } from './pianificazionecorso.model';\r\n\r\nexport class Corso extends IDDocument {\r\n\r\n    DENOMINAZIONE: string;\r\n    SIGLACALENDARIO: string;\r\n    TIPO: TipoCorso;\r\n    IDLIVELLOENTRATA: string;\r\n    _DESCRLIVELLOENTRATA: string;\r\n    IDLIVELLOFINALE: string;\r\n    IDSPORT: string;\r\n    _DESCRSPORT: string;\r\n    NUMEROLEZIONI: number;\r\n    NUMPARTECIPANTI: number;\r\n    MAXPARTECIPANTI: number;\r\n    DATAINIZIO: Date;\r\n    DATAFINE: Date;\r\n    ORELEZIONE: number;\r\n    ORAINIZIO: Date;\r\n    STATO: StatoCorso;\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    IDCAMPO: string;\r\n    GIORNIPREVISTI: string; //Stringa separata da ; con indice dei giorni\r\n    ISCRIZIONEDAL: Date;\r\n    ISCRIZIONEAL: Date;\r\n    TARGETSESSO: TargetSesso;\r\n    IDCATEGORIEETA: string;\r\n    _DESCRCATEGORIEETA: string;\r\n    _SETTIMANA: Settimana[]; //Giorni della Settimana del Corso\r\n    DURATA: number;\r\n    CORSOPROGRAMMA: CorsoProgramma[];\r\n    PIANIFICAZIONECORSO: PianificazioneCorso[];\r\n    MODFRUIZIONE: ModalitaFruizione;\r\n    STATODINAMICO: StatoCorso;\r\n    PREZZOLORDO: number;\r\n    \r\n    \r\n\r\n    constructor(onlyInstance?:boolean) {\r\n      super(onlyInstance);\r\n\r\n      if (!onlyInstance) {\r\n\r\n        this._DESCRCATEGORIEETA = ''\r\n        this._DESCRLIVELLOENTRATA = '';\r\n        this._DESCRSPORT = '';\r\n      }\r\n\r\n\r\n      this.CORSOPROGRAMMA = [];\r\n      this.PIANIFICAZIONECORSO = [];\r\n\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['DENOMINAZIONE',\r\n                    'SIGLACALENDARIO',\r\n                    'IDLIVELLOENTRATA',\r\n                    '_DESCRLIVELLOENTRATA',\r\n                    'IDLIVELLOFINALE',\r\n                    'IDSPORT',\r\n                    '_DESCRSPORT',\r\n                    'IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'IDCAMPO',\r\n                    'GIORNIPREVISTI',\r\n                    'IDCATEGORIEETA',\r\n                    '_DESCRCATEGORIEETA'\r\n                    ];\r\n    let arNumber = ['TIPO',\r\n                    'NUMEROLEZIONI',\r\n                    'NUMPARTECIPANTI',\r\n                    'MAXPARTECIPANTI',\r\n                    'STATO',\r\n                    'STATODINAMICO',\r\n                    'TARGETSESSO',\r\n                    'DURATA'\r\n                   ];\r\n    let arDecimal = ['ORELEZIONE','PREZZOLORDO'];\r\n    let arBoolean = [];\r\n    let arDate = ['DATAINIZIO','DATAFINE','ISCRIZIONEDAL','ISCRIZIONEAL'];\r\n    let arDateTime =[];\r\n    let arTime = ['ORAINIZIO'];\r\n\r\n    objDescriptor.className = 'Corso';\r\n    objDescriptor.classWebApiName = 'CORSO';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n    \r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arDecimal, TypeDefinition.numberDecimal);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n    objDescriptor.addCollection('CORSOPROGRAMMA','CorsoProgramma','IDCORSO');\r\n    objDescriptor.addCollection('PIANIFICAZIONECORSO','PianificazioneCorso','IDCORSO');\r\n\r\n\r\n    objDescriptor.setRelation('IDSPORT','Sport');\r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n    objDescriptor.setRelation('IDCAMPO','Campo');\r\n    objDescriptor.setRelation('IDLIVELLOENTRATA','Livello');\r\n    objDescriptor.setRelation('IDLIVELLOFINALE','Livello');\r\n    objDescriptor.setRelation('IDCATEGORIEETA','CategoriaEta');\r\n    \r\n    \r\n\r\n\r\n    \r\n\r\n    return objDescriptor;\r\n}    \r\n\r\n   \r\n\r\n    /**\r\n     * Imposta le proprietà nell'oggetto\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n      //Chiamo IDDOcument\r\n      super.setJSONProperty(data);\r\n\r\n      //Sistemo la Settimana in italiano\r\n      this.setSettimana(Language.italiano);\r\n\r\n      this.setCollection(data);\r\n\r\n      this.setOriginal();\r\n\r\n    }\r\n\r\n    /**\r\n     * Sistema le collection se presenti\r\n     * @param data JSON Ricevuto\r\n     */\r\n    setCollection(data: any) {\r\n      this.CORSOPROGRAMMA = [];\r\n      this.PIANIFICAZIONECORSO = [];\r\n\r\n      if (data.CORSOPROGRAMMA) {\r\n        this.setCollectionCorsoProgramma(data.CORSOPROGRAMMA);\r\n      }\r\n\r\n      if (data.PIANIFICAZIONECORSO) {\r\n        this.setCollectionPianificazioneCorso(data.PIANIFICAZIONECORSO);\r\n      }\r\n      \r\n    }\r\n\r\n    /**\r\n     * Imposta la collection CorsoProgramma\r\n     * @param arPROGRAMMA JSON Ricevuti\r\n     */\r\n    setCollectionCorsoProgramma(arPROGRAMMA: any[]) {\r\n\r\n      this.CORSOPROGRAMMA = [];\r\n\r\n      if (arPROGRAMMA) {\r\n        arPROGRAMMA.forEach(element => {\r\n          \r\n          // Ricerco se esiste già\r\n          let newProgramma = this.getCorsoProgrammaByID(element.ID);\r\n\r\n          //Non esiste lo creo nuovo\r\n          if (!newProgramma) {\r\n\r\n            newProgramma = new CorsoProgramma();\r\n            newProgramma.setJSONProperty(element);\r\n            this.CORSOPROGRAMMA.push(newProgramma);\r\n\r\n          }\r\n          else {\r\n            //Reimposto i valori\r\n            newProgramma.setJSONProperty(element);\r\n          }\r\n\r\n\r\n        })\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Ritorna l'elemento di Corso Programma che corrisponde con ID\r\n     */\r\n    getCorsoProgrammaByID(idCorsoProgramma): CorsoProgramma {\r\n        // Ricerco se esiste già\r\n        let newProgramma = this.CORSOPROGRAMMA.find(elProgramma => {\r\n          return elProgramma.ID == idCorsoProgramma\r\n        });\r\n\r\n        return newProgramma;\r\n    }\r\n\r\n    /**\r\n     * Imposta la collection Pianificazioni Corso\r\n     * @param arPianificazioni JSON Ricevuti\r\n     */\r\n    setCollectionPianificazioneCorso(arPianificazioni: any[]) {\r\n\r\n      this.PIANIFICAZIONECORSO = [];\r\n\r\n      if (arPianificazioni) {\r\n        arPianificazioni.forEach(element => {\r\n          \r\n          // Ricerco se esiste già\r\n          let newPianificazione = this.getPianificazioneCorsoByID(element.ID);\r\n\r\n          //Non esiste lo creo nuovo\r\n          if (!newPianificazione) {\r\n\r\n            newPianificazione = new PianificazioneCorso();\r\n            newPianificazione.setJSONProperty(element);\r\n            this.PIANIFICAZIONECORSO.push(newPianificazione);\r\n\r\n          }\r\n          else {\r\n            //Reimposto i valori\r\n            newPianificazione.setJSONProperty(element);\r\n          }\r\n\r\n\r\n        })\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Ritorna l'elemento di Pianificazione Corso che corrisponde con ID\r\n     */\r\n    getPianificazioneCorsoByID(idPianificazioneCorso): PianificazioneCorso {\r\n        // Ricerco se esiste già\r\n        let findPianificazioneCorso = this.PIANIFICAZIONECORSO.find(elPianificazione => {\r\n          return elPianificazione.ID == idPianificazioneCorso\r\n        });\r\n\r\n        return findPianificazioneCorso;\r\n    }\r\n\r\n    /**\r\n     * Ritorna un'altra Settimana in un'altra lingua\r\n     * @param language Lingua\r\n     */\r\n    getTranslateSettimana(language?: Language): Settimana[] {\r\n      let myWeek = Settimana.getArray(true, language);\r\n      let arGiorni = this.GIORNIPREVISTI.split(';');\r\n\r\n      //GIORNIPREVISTI contiene 1 Dom, 2 Lun, 3 Mart\r\n\r\n      //Ciclo nei giorni\r\n      arGiorni.forEach(charGiorno => {\r\n\r\n        let index = parseInt(charGiorno.trim());\r\n        //Vado indietro \r\n        index = index -1;\r\n        if (index >= Giorni.domenica && index <= Giorni.sabato) {\r\n            Settimana.selectDayArray(index, myWeek);\r\n        }\r\n      });\r\n\r\n\r\n      return myWeek;\r\n    }\r\n\r\n    /**\r\n     * Crea un Array di tipo Settimana con le giornate previste per il corso\r\n     * @param language Lingua\r\n     */\r\n    setSettimana(language?: Language) {\r\n      //Chiedo un Array Settimana con inizio Domenica\r\n      this._SETTIMANA = Settimana.getArray(true, language);\r\n      let arGiorni = this.GIORNIPREVISTI.split(';');\r\n\r\n      //In giorni previsti c'e' Dom 1, Lun 2 etc\r\n\r\n      //Ciclo nei giorni\r\n      arGiorni.forEach(charGiorno => {\r\n\r\n        let index = parseInt(charGiorno.trim());\r\n        //Porto a base 0 cosi' Domenica è 0 Lun 1 etc\r\n        index = index -1;\r\n        if (index >= Giorni.domenica && index <= Giorni.sabato) {\r\n            Settimana.selectDayArray(index, this._SETTIMANA);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Partendo dall'Array _SETTIMANA crea un array solo per le Giornate selezionate\r\n     */\r\n    getArrayGiorniCorso(): Settimana[] {\r\n      let onlyDays:Settimana[] = [];\r\n\r\n      onlyDays = this._SETTIMANA.filter(element => {\r\n        return element.selected == true\r\n      });\r\n\r\n      return onlyDays;\r\n    }\r\n\r\n    /**\r\n     * Serve per capire sulla card cosa scrivere e quale data mettere\r\n     * next -> Inizia il DATAINIZIO\r\n     * during -> Termina il DATAFINE\r\n     * stop -> Concluso il DATAFINE\r\n     */\r\n    tempoCorso() {\r\n      let adesso = new Date();\r\n      let value = \"\";\r\n\r\n      if (this.DATAINIZIO > adesso) {\r\n        value = \"next\";\r\n      }\r\n      else if (this.DATAFINE > adesso) {\r\n        value = \"during\";\r\n      }\r\n      else {\r\n        value = \"stop\";\r\n      }\r\n\r\n      return value;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna TRUE se Oggi è possibile iscriversi al corso\r\n     */\r\n    flagIscrizioniAperte(): boolean {\r\n      let flag: boolean = false;\r\n\r\n      if (this.STATODINAMICO == StatoCorso.iscrizioniAperte) {\r\n        flag = true;\r\n      }\r\n\r\n      return flag;\r\n    }\r\n\r\n    /**\r\n     * Ritorna una icona a seconda del tipo Corso\r\n     */\r\n    getIcon() {\r\n      let nameIcon= 'ribbon';\r\n\r\n      switch (this.TIPO) {\r\n        case TipoCorso.corso:\r\n          nameIcon = 'ribbon';\r\n          break;\r\n        \r\n        case TipoCorso.prova: \r\n          nameIcon = 'trail-sign';\r\n          break;\r\n      \r\n        default:\r\n          nameIcon = 'ribbon';\r\n          break;\r\n      }\r\n\r\n      return nameIcon;\r\n      \r\n    }\r\n\r\n    /**\r\n     * Controllando il valore del PREZZOLORDO indica se il Corso è Gratuito o a Pagamento\r\n     */\r\n    isAPagamento(): boolean {\r\n      let flagPagamento: boolean;\r\n      flagPagamento = false;\r\n      if (this.PREZZOLORDO && this.PREZZOLORDO != 0) {\r\n        flagPagamento = true;\r\n      }\r\n\r\n\r\n      return flagPagamento;\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * Controlla se esiste un programma del corso\r\n     * @returns TRUE se esiste testo come programma del corso\r\n     */\r\n    existProgrammaCorso(): boolean {\r\n      let exist:boolean = false;\r\n      if (this.CORSOPROGRAMMA) {\r\n        if (this.CORSOPROGRAMMA.length != 0) {\r\n          for (let index = 0; index < this.CORSOPROGRAMMA.length; index++) {\r\n            const element = this.CORSOPROGRAMMA[index];\r\n            if (element.TESTOHTML && element.TESTOHTML.length != 0) {\r\n              exist = true;\r\n              break;\r\n            }\r\n            \r\n          }\r\n        }\r\n      }\r\n\r\n      return exist;\r\n    }\r\n\r\n    /**\r\n     * Anche se ci sono piu record li combina con un <BR>\r\n     * @returns Testo HTML Programma corso completo\r\n     */\r\n    getFullProgrammaHTML(): string {\r\n      \r\n      let txtReturn = '';\r\n      if (this.CORSOPROGRAMMA) {\r\n        if (this.CORSOPROGRAMMA.length != 0) {\r\n          for (let index = 0; index < this.CORSOPROGRAMMA.length; index++) {\r\n            const element = this.CORSOPROGRAMMA[index];\r\n            if (element.TESTOHTML && element.TESTOHTML.length != 0) {\r\n              if (txtReturn.length != 0) {\r\n                txtReturn += '<BR>';\r\n              }\r\n              txtReturn += element.TESTOHTML;\r\n            }\r\n            \r\n          }\r\n        }\r\n      }\r\n\r\n      return txtReturn;\r\n    }\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\nimport { PaymentChannel, StatoPrenotazione } from './valuelist.model';\nimport { RequestForeign } from '../library/models/requestParams.model';\n\nexport class PrenotazionePianificazione extends IDDocument {\n    IDPRENOTAZIONE: string;\n    IDAREAOPERATIVA: string;\n    IDLOCATION: string;\n    IDSPORT: string;\n    _DESCRSPORT: string;\n    IDCAMPO: string;\n    _DESCRCAMPO: string;\n    DATAORAINIZIO: Date;\n    ANNO: number;\n    DATAORAFINE: Date;\n    DURATAORE: number; \n    IMPONIBILE: number;\n    IMPOSTA: number;\n    INCASSATO: number;\n    RESIDUO: number;\n    STATO: StatoPrenotazione;\n    NUMPARTECIPANTI: number;\n    TOTALE: number;\n    GUIDSERIE: string;\n    PROGRESSIVO: string;\n    // IDTRANSACTION: string;\n    // CHANNELPAYMENT: PaymentChannel;\n\n    _INCASSOCUSTODE: number;\n\n    constructor(onlyInstance?:boolean) {\n        super(onlyInstance);\n\n        if (!onlyInstance) {\n            this.NUMPARTECIPANTI = 1;\n            this._DESCRCAMPO = '';\n            this._DESCRSPORT = '';\n        }\n    }\n\n    setJSONProperty(data: any) {\n        super.setJSONProperty(data);\n\n        this.setCollection(data);\n\n        //Imposto che il documento è originale\n        this.setOriginal();\n    }\n\n    setCollection(data: any) {\n\n    }\n\n    /**\n     * Ritorna il descrittore della Struttura Campi\n     */\n    getDescriptor(): Descriptor {\n        let objDescriptor = new Descriptor();\n        let arString = ['IDPRENOTAZIONE',\n                        'IDAREAOPERATIVA',\n                        'IDLOCATION',\n                        'IDSPORT',\n                        'IDCAMPO',\n                        'GUIDSERIE',\n                        'PROGRESSIVO'];\n        let arNumber = ['ANNO','NUMPARTECIPANTI'];\n        let arNumberDecimal = ['DURATAORE',\n                               'IMPONIBILE',\n                               'INCASSATO',\n                               'RESIDUO',\n                               'IMPOSTA',\n                               'TOTALE',\n                               'STATO'];\n        let arBoolean = [];\n        let arDate = [];\n        let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\n        let arTime = [];\n\n        objDescriptor.className = 'PrenotazionePianificazione';\n        objDescriptor.doRemote = true;\n        objDescriptor.classWebApiName = 'PRENOTAZIONEPIANIFICAZIONE';\n        objDescriptor.describeField = 'DATAORAINIZIO';\n\n\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\n\n        objDescriptor.setRelation('IDPRENOTAZIONE','Prenotazione');\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\n        objDescriptor.setRelation('IDLOCATION','Location');\n        objDescriptor.setRelation('IDSPORT','Sport');\n        objDescriptor.setRelation('IDCAMPO','Campo');\n        \n        return objDescriptor;\n    }\n\n\n    static getReqForeignKeys(): RequestForeign[] {\n        let arRequest: RequestForeign[] = [];\n        let objForeign: RequestForeign;\n\n        objForeign = new RequestForeign('IDAREAOPERATIVA');\n        arRequest.push(objForeign);\n\n        objForeign = new RequestForeign('IDSPORT');\n        arRequest.push(objForeign);\n\n        objForeign = new RequestForeign('IDCAMPO');\n        arRequest.push(objForeign);\n\n        objForeign = new RequestForeign('IDLOCATION');\n        objForeign.addDescribeField('DENOMINAZIONE');\n        objForeign.addDescribeField('INDIRIZZO');\n        objForeign.addDescribeField('COMUNE');\n        objForeign.addDescribeField('EMAIL');\n\n        arRequest.push(objForeign);\n\n        return arRequest;\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { IDDocument, OperatorCondition, FilterCondition, IDRepository } from '../models/iddocument.model';\r\nimport {RequestParams, RequestDecode, RequestForeign, PostParams } from '../models/requestParams.model';\r\nimport { DynamicClass } from '../models/structure.model';\r\n\r\nimport { ApicallService } from '../../services/apicall.service';\r\nimport { StartConfiguration } from 'src/app/models/start-configuration.model';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Descriptor, TypeReflector } from '../models/descriptor.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { CacheListElement } from '../models/cachelistelement.model';\r\nimport { Cache } from '../models/cache.model';\r\nimport { LogApp } from 'src/app/models/log.model';\r\nimport { ParamsExport } from '../models/iddocument.model';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DocstructureService {\r\n\r\n  //Struttura documentale\r\n  structureDocuments = [];\r\n  myConfig: StartConfiguration;\r\n  \r\n  \r\n  //Oggetto con la cache\r\n  objCache = new Cache();\r\n  \r\n\r\n\r\n  constructor(private apiService: ApicallService) { \r\n\r\n  }\r\n\r\n  /**\r\n   * Partendo dal servizio Start Service c'e' un subscribe nel costruttore\r\n   * che serve a inviarmi la configurazione ad ogni cambiamento\r\n   * Impostare la configurazione prima delle chiamate\r\n   * @param configuration Configurazione di Partenza\r\n   */\r\n  setConfig(elConfig: StartConfiguration) {\r\n    this.myConfig = elConfig;\r\n    LogApp.consoleLog('New Configuration received');\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Decodifica tutte le Foreign Key presenti, eccetto quelle passate nell'array di esclusione\r\n   * @param doc Documento da decodificare\r\n   * @param fieldsExclude Campi di ForeignKeys da non decodificare\r\n   */\r\n  decodeAll(doc:IDDocument, useCache:boolean=true, fieldsExclude?:string[]){\r\n    \r\n    return new Promise<void>((resolve, reject)=>{       \r\n\r\n      let executePromise:Promise<any|void>[] = [];\r\n\r\n      if (doc) {\r\n        //Chiedo le ForeignKeys del documento\r\n        let arForeign = doc.ForeignKeys;\r\n        let _this = this;\r\n\r\n        /**Ciclo sulle foreignkey */\r\n        for (let index = 0; index < arForeign.length; index++) {\r\n          const element = arForeign[index];\r\n          let use = true;\r\n\r\n          if (fieldsExclude && fieldsExclude.length !== 0) {\r\n            //Utilizzo questa foreignkeys solo se non presente tra quelle da\r\n            //escludere\r\n            use = !(fieldsExclude.includes(element.fieldName));\r\n          }\r\n\r\n          if (use) {\r\n            //Richiedo la decodifica del campo\r\n            executePromise.push(_this.decode(doc, element.fieldName, useCache));\r\n          }\r\n          \r\n        }\r\n\r\n        //Ho dei campi che devo decodificare con le Promise\r\n        if (executePromise.length !== 0) {\r\n\r\n          Promise.all(executePromise).then(() => {\r\n            resolve();\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n\r\n        }\r\n        else {\r\n          //Non ho nulla da decodificare e va bene cosi\r\n          resolve();\r\n        }\r\n\r\n      }\r\n      else {\r\n        reject('Document null');\r\n      }\r\n\r\n\r\n\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param doc Documento\r\n   * @param fieldDecode Nome del campo da cui parte la decodifica\r\n   */\r\n  decode(doc:IDDocument, \r\n         fieldDecode: string, \r\n         useCache:boolean=true, \r\n         newDecodeField?:string[]) {\r\n\r\n    return new Promise<void>((resolve, reject)=>{          \r\n          //Step 1: field Decode esiste in doc\r\n          //Step 2: field Decode è in una relazione\r\n          let definition: TypeReflector;\r\n          let queryServer = true;\r\n          let result = false;\r\n          let goToDecode = false;\r\n\r\n          if (doc && fieldDecode) {\r\n            //Chiedo la definizione del campo, e controlla che\r\n            //n\r\n            definition = doc.getTypeReflectorByFieldName(fieldDecode);\r\n\r\n            //Definizione presente\r\n            if (definition) {\r\n              if (definition.isForeignKey) {  //  {relFieldDoc}\r\n\r\n              \r\n                //Decodifica se il campo  contiene un valore\r\n                goToDecode = !(doc.propertyIsEmpty(fieldDecode));\r\n                \r\n                //Il campo da decodificare contiene un valore\r\n                if (goToDecode) {\r\n\r\n                  //Step 3: Cercare nella cache \r\n                  //Se non lo trovo nella cache devo richiederlo al server\r\n                  if (useCache) {\r\n                    //Cerco nella cache se trovo la decodifica\r\n                    result = this._decodeInCache(doc, definition, newDecodeField);\r\n                    \r\n                    //Se non trovo in cache devo eseguire la query al server\r\n                    queryServer = !result;\r\n                  }\r\n  \r\n                  //Chiedo al server\r\n                  if (queryServer) {\r\n  \r\n                    this._decodeWithServer(doc, definition, newDecodeField)\r\n                        .then(() => {\r\n                          resolve();\r\n                        })\r\n                        .catch(errMessage => {\r\n                          reject(errMessage);\r\n                        });\r\n                  }\r\n                  else {\r\n                    //Ho usato la cache\r\n                    resolve();\r\n                  }\r\n\r\n                }\r\n                else {\r\n                  //Il campo non contiene valori e quini non lo decodifico\r\n                  resolve();\r\n                }\r\n\r\n              }\r\n              else {\r\n                reject('Field ' + fieldDecode + ' is not a foreingKey');\r\n              }\r\n            }\r\n            else {\r\n              reject('Field ' + fieldDecode + ' unknown in structure');\r\n            }\r\n          }\r\n          else {\r\n            reject('Field or Document null');\r\n          }\r\n\r\n        });\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Contatta il server per richiedere elementi \r\n   * in Definition come relFieldDoc e relFieldName\r\n   * @param doc \r\n   * @param definition \r\n   * @param newDecodeField \r\n   */\r\n  private _decodeWithServer(doc:IDDocument, \r\n                            definition: TypeReflector, \r\n                            newDecodeField?:string[]) {\r\n    \r\n    return new Promise<void>((resolve, reject)=>{\r\n\r\n          let docFilter: any = new DynamicClass(definition.relFieldDoc,true);\r\n          \r\n          //Valorizzo le proprietà del documento come filtro di caricamento\r\n          docFilter[definition.relFieldName] = doc[definition.fieldName];\r\n\r\n          this.requestNew(docFilter)\r\n              .then(serverElement => {\r\n                  //In teoria dovrei aver ricevuto qualcosa dal server\r\n                  if (serverElement.length !== 0) {\r\n                    //Step 1: Inserirlo in cache\r\n                    this.objCache.addTo(serverElement[0]);\r\n\r\n                    //Step 2: Valorizzare le proprietà\r\n                    this._setNewDecodeField(doc, serverElement[0], newDecodeField);\r\n\r\n                    \r\n                  }\r\n\r\n                  resolve();\r\n\r\n              })\r\n              .catch(errMessage => {\r\n                reject(errMessage);\r\n              });\r\n    });\r\n\r\n\r\n  } \r\n\r\n  /**\r\n   * \r\n   * @param doc Documento da decodificare\r\n   * @param definition Definitione del campo e sua relazione\r\n   * @param newDecodeField Se presenti vengono creati come campi di decodifica al posto del describeRowField\r\n   */\r\n  private _decodeInCache(doc:IDDocument, \r\n                         definition: TypeReflector, \r\n                         newDecodeField?:string[]): boolean {\r\n\r\n    let elementList: CacheListElement;\r\n    let result = false;\r\n    let findElement: IDDocument;\r\n    let nameField: string;\r\n\r\n\r\n    if (doc && definition) {\r\n      if (this.objCache) {\r\n\r\n        elementList = this.objCache.findByClassName(definition.relFieldDoc);\r\n\r\n        //Questa è la lista degli elementi della stessa tipologia del \r\n        //documento di riferimento che contiene le decodifiche\r\n        if (elementList) {\r\n\r\n          nameField = definition.relFieldName;\r\n\r\n          if (elementList.list) {\r\n            //Cerco nella lista della cache il valore presente nel documento e impostato come nameField nel documento correlato\r\n            findElement = elementList.findElementByFieldName(nameField, doc[definition.fieldName]);\r\n\r\n            //Questo e' il documento di Decodifica\r\n            //Devo conoscere il valore della proprietà eletta come describeRowField\r\n            if (findElement) {\r\n\r\n              //Passo il documento che devo modificare e il documento di decodifica\r\n              result = this._setNewDecodeField(doc, findElement, newDecodeField);\r\n              \r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n\r\n    return result;\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param doc Documento a cui applicare nuovi campi\r\n   * @param docRel Documento di riferimento\r\n   * @param useFields Se presente sono i campi usati per la decodifica, altrimenti viene usato il describeRowFields\r\n   */\r\n  private _setNewDecodeField(doc: IDDocument, \r\n                             docRel: IDDocument, \r\n                             useFields?:string[]): boolean {\r\n    let objDescriptor: Descriptor;\r\n    let result = false;\r\n    let nameDescribe = '';\r\n    let nameNewProperty = '';\r\n\r\n    if (doc && docRel) {\r\n      if (!useFields || useFields.length == 0) {\r\n        //doc è il documento a cui aggiungere proprietà\r\n        //in questo caso ne aggiungo 1 sola, che è il describeRowField del docRel\r\n        objDescriptor = docRel.getDescriptor();\r\n\r\n        if (objDescriptor && objDescriptor.describeField && objDescriptor.describeField.length !== 0) {\r\n\r\n          nameDescribe = objDescriptor.describeField;\r\n          nameNewProperty = \"_\" + objDescriptor.describeField + \"_\" + objDescriptor.className;\r\n\r\n          //Creo la nuova proprietà con il valore\r\n          doc[nameNewProperty] = docRel[nameDescribe];\r\n\r\n          result = true;\r\n        }\r\n  \r\n  \r\n      }\r\n      else {\r\n        //Nell'array useFields ho i nomi dei campi che voglio come nuovi campi di decodifica\r\n        objDescriptor = docRel.getDescriptor();\r\n        for (let index = 0; index < useFields.length; index++) {\r\n          const elFieldDecode = useFields[index];\r\n\r\n          nameDescribe = elFieldDecode;\r\n          nameNewProperty = \"_\" + elFieldDecode + \"_\" + objDescriptor.className;\r\n\r\n          //Creo la nuova proprietà con il valore\r\n          doc[nameNewProperty] = docRel[nameDescribe];\r\n\r\n          result = true;          \r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    return result;\r\n  }\r\n\r\n  \r\n\r\n\r\n   /**\r\n    * Carica una collection figlia del documento passato \r\n    * e la imposta nel documento\r\n    * @param document  Documento base da cui caricare\r\n    * @param collectionName Nome collection da caricare\r\n    * @param params parametri aggiuntivi\r\n    */\r\n  public loadCollection(document:IDDocument, collectionName: string, params?:RequestParams) {\r\n    return new Promise<IDDocument>((resolve, reject)=>{\r\n      let prosegui = true;\r\n      let objDescriptor: Descriptor;\r\n      let message: string = '';\r\n      let defCollection: TypeReflector;\r\n      let namePrimaryKey = '';\r\n\r\n      if (!document) {\r\n        message = 'Documento null';\r\n        prosegui = false;\r\n        reject(message);\r\n      }\r\n      else if (!collectionName || collectionName.length == 0) {\r\n        message = 'Collection non specificata';\r\n        prosegui = false;\r\n        reject(message);\r\n      }\r\n\r\n      if (prosegui) {\r\n        //Recupero il descrittore della classe\r\n        objDescriptor = document.getDescriptor();\r\n\r\n        if (!objDescriptor) {\r\n          prosegui = false;\r\n          message = \"Document descriptor not find\";\r\n          reject(message);\r\n        }\r\n      }\r\n\r\n      \r\n\r\n      //Controllo correttezza configurazione collection\r\n      if (prosegui) {\r\n        defCollection = objDescriptor.getByCollectionName(collectionName);\r\n\r\n        if (!defCollection) {\r\n          prosegui = false;\r\n          message = 'Collection ' + collectionName + 'not found';\r\n          reject(message);\r\n        }\r\n        else if (!defCollection.relFieldDoc || defCollection.relFieldDoc.length == 0) {\r\n          prosegui = false;\r\n          message = 'Document in collection ' + collectionName + ' not defined';\r\n          reject(message);\r\n        }\r\n        else if (!defCollection.relFieldName || defCollection.relFieldName.length == 0) {\r\n          prosegui = false;\r\n          message = 'Field in ' + defCollection.relFieldDoc + ' to loading collection ' + collectionName + ' not defined';\r\n          reject(message);\r\n        }\r\n      }\r\n\r\n      if (prosegui) {\r\n        namePrimaryKey = objDescriptor.primaryKeyFieldName;\r\n\r\n        if (namePrimaryKey.length == 0) {\r\n          prosegui = false;\r\n          message = 'Document Descriptor ' + objDescriptor.className + ' without primary key';\r\n          reject(message);\r\n        }\r\n\r\n      }\r\n\r\n      //Preparo il documento di filtro per la chiamata\r\n      if (prosegui) {\r\n\r\n        let filterDocument: any = new DynamicClass(defCollection.relFieldDoc,true);\r\n        filterDocument[defCollection.relFieldName] = document[namePrimaryKey];\r\n\r\n        this.requestNew(filterDocument, params)\r\n          .then(collReceived => {\r\n\r\n            //Devo eliminare i dati precedenti della collection del documento\r\n            //Svuoto la collection attuale\r\n            document[defCollection.fieldName] = [];\r\n\r\n            document[defCollection.fieldName] = collReceived;\r\n            resolve(document);\r\n\r\n\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Per ogni documento contenuto nella collection viene caricata la collection figlia richiesta\r\n   * @param collection Collection di Documenti\r\n   * @param collectionName Collection figlia da caricare\r\n   * @param params parametri aggiuntivi\r\n   */\r\n  public loadCollectionMulti(collection: IDDocument[], collectionName:string, params?:RequestParams) {\r\n    return new Promise<IDDocument[]>((resolve, reject)=>{\r\n      let executePromise:Promise<IDDocument>[] = [];\r\n      if (collection && collection.length !== 0) {\r\n\r\n        for (let index = 0; index < collection.length; index++) {\r\n          const elDocument = collection[index];\r\n\r\n          let exPromise = this.loadCollection(elDocument, collectionName, params);\r\n          executePromise.push(exPromise);\r\n\r\n        }\r\n\r\n        //Esecuzione di tutte le Promise se presenti\r\n        if (executePromise.length !== 0) {\r\n          //Eseguo tutte le Promise\r\n          Promise.all(executePromise)\r\n                  .then(() => {\r\n                    //Ritorno il tutto decodificato\r\n                    resolve(collection);\r\n                  })\r\n                  .catch(err => {\r\n                    reject(err);\r\n                  });\r\n          }\r\n          else {\r\n            //Non ho nulla da decodificare e va bene cosi\r\n            resolve(collection);\r\n          }\r\n      }\r\n      else {\r\n        reject('Collection not defined');\r\n      }\r\n    });\r\n  }  \r\n\r\n  /**\r\n   * Effettua chiamate al server \r\n   * il document dovrà essere istanziato con i parametri che si desiderano diventare filtri di caricamento\r\n   * @param filterDocument Parametri di configurazione\r\n   * @param decode Effettua la decodifica dei dati \r\n   */\r\n  public requestNew(filterDocument: IDDocument, params?:RequestParams) {\r\n\r\n    return new Promise<any[]>((resolve, reject)=>{\r\n      \r\n      \r\n      let myHeaders = this.myConfig.getHttpHeaders();\r\n      let objDescriptor: Descriptor;\r\n      let childLevel = -1;\r\n      let orderBy: string = '';\r\n      let nElem = 0;\r\n      let requestAndDecode = false;\r\n      let foreignFields: RequestForeign[];\r\n      \r\n      if (!filterDocument) {\r\n        reject('Documento filtro non presente');\r\n      }\r\n      else {\r\n        //Recupero il descrittore della classe\r\n        objDescriptor = filterDocument.getDescriptor();\r\n\r\n        if (!objDescriptor) {\r\n          reject('Descrittore Documento filtro non presente');\r\n        }\r\n        else if (objDescriptor.doRemote == false) {\r\n          //Non è gestito esternamente\r\n          reject('Documento non gestito in remoto');\r\n        }\r\n        else {\r\n\r\n          // Controllo i parametri di richiesta\r\n          if (params) {\r\n\r\n            if (params.child_level) {\r\n              childLevel = params.child_level;\r\n            }\r\n\r\n            if (params.top) {\r\n              nElem = params.top;\r\n            }\r\n\r\n            if (params.orderBy) {\r\n              orderBy = params.orderBy;\r\n            }\r\n\r\n            if (params.decode) {\r\n              if (params.decode.active) {\r\n                requestAndDecode = true;\r\n\r\n                if (params.decode.foreignFields) {\r\n                  foreignFields = params.decode.foreignFields;\r\n                }\r\n              }\r\n\r\n            }\r\n\r\n            \r\n\r\n          }\r\n\r\n          // In Testata c'e' sempre l'AppId\r\n          //myHeaders = myHeaders.set('appid',this.myConfig.appId);\r\n\r\n          if (childLevel != -1) {\r\n            myHeaders = myHeaders.append('child-level', childLevel+'');\r\n          }\r\n\r\n          if (orderBy && orderBy.length !== 0) {\r\n            myHeaders = myHeaders.append('order-by', orderBy);\r\n          }\r\n\r\n\r\n          //Preparare i parametri con i filtri arrivati sul documento\r\n          let myParams = this._getHttpParamsFromDoc(filterDocument);\r\n\r\n          if (nElem && nElem > 0){\r\n            myParams=myParams.append('$top',nElem+'');\r\n          }\r\n\r\n\r\n\r\n          let myUrl = this.myConfig.urlBase + '/' + objDescriptor.classWebApiName;\r\n\r\n          if (!myParams) {\r\n            reject('Request Parametri insufficienti');\r\n          }\r\n          else {\r\n\r\n            this.apiService\r\n              .httpGet(myUrl, myHeaders, myParams)\r\n              .pipe(map(fullData => {\r\n                return fullData[objDescriptor.classWebApiName]\r\n              }))\r\n              .subscribe (resultData => {\r\n\r\n                let listElement: IDDocument[] = [];\r\n\r\n                if (resultData){\r\n\r\n                  resultData.forEach(elData => {\r\n                    \r\n                    let newClass: any = new DynamicClass(objDescriptor.className);\r\n                    newClass.setJSONProperty(elData);\r\n                    listElement.push(newClass);\r\n                  });\r\n                  \r\n\r\n                }\r\n\r\n                //Se non devo decodificare posso fare qui il resolve\r\n                if (!requestAndDecode) {\r\n                  resolve(listElement);\r\n                }\r\n                else if (listElement.length !== 0) {\r\n\r\n                  this.decodeCollection(listElement, foreignFields)\r\n                      .then(() => {\r\n                        resolve(listElement);\r\n                      })\r\n                      .catch(errMessage => {\r\n                        reject(errMessage);\r\n                      });\r\n                }\r\n                else {\r\n                  resolve(listElement);\r\n                }\r\n\r\n              }, error => {\r\n                reject(error);\r\n              });\r\n\r\n          }\r\n          \r\n        }\r\n      }\r\n      \r\n    });\r\n\r\n  }\r\n\r\n\r\n  \r\n  public decodeCollection(collection: IDDocument[], foreignFields?:RequestForeign[]) {\r\n    \r\n    //Devo decodificare l'intera collection di dati\r\n    //Versione 1: foreignField non presente\r\n    //        Decodifica di tutte le foreign key presenti con il describeRowField default\r\n    //Versione 2: foreignField presente \r\n    //        Decodifica delle solo foreign key indicate controllando all'interno se ci sono campi di decodifica richiesti\r\n    \r\n\r\n\r\n    return new Promise((resolve, reject)=>{        \r\n\r\n      let executePromise:Promise<any>[] = [];\r\n\r\n      //Dati presenti in collection\r\n      if (collection && collection.length !== 0) {\r\n\r\n        //Versione 2\r\n        if (foreignFields && foreignFields.length !== 0) {\r\n\r\n          for (let index = 0; index < collection.length; index++) {\r\n            const doc = collection[index];\r\n\r\n            //Ciclo i ForeignFields\r\n            for (let iField = 0; iField < foreignFields.length; iField++) {\r\n              const elForeign = foreignFields[iField];\r\n\r\n              let exPromise = this.decode(doc,elForeign.nameField,true,elForeign.describeFields);\r\n              //Aggiunta all'Array\r\n              executePromise.push(exPromise);\r\n            }\r\n\r\n          }\r\n  \r\n        }\r\n        else {\r\n          //Versione 1\r\n          //Decodifica di tutte le foreign key presenti con il describeRowField default\r\n          //Utilizzo il decodeAll\r\n          for (let index = 0; index < collection.length; index++) {\r\n            const doc = collection[index];\r\n\r\n            //Creo la Promise di decodifica\r\n            let exPromise = this.decodeAll(doc);\r\n            \r\n            //Aggiunta all'Array\r\n            executePromise.push(exPromise);\r\n          }\r\n\r\n        }\r\n        \r\n        //Esecuzione di tutte le Promise se presenti\r\n        if (executePromise.length !== 0) {\r\n        //Eseguo tutte le Promise\r\n        Promise.all(executePromise)\r\n                .then(() => {\r\n                  //Ritorno il tutto decodificato\r\n                  resolve(collection);    \r\n                })\r\n                .catch(err => {\r\n                  reject(err);\r\n                });\r\n        }\r\n        else {\r\n          //Non ho nulla da decodificare e va bene cosi\r\n          resolve(collection);          \r\n        }\r\n\r\n      }\r\n      else {\r\n\r\n        //Non ci sono dati ritorno la stessa collection vuota\r\n        resolve(collection);\r\n      }\r\n\r\n    });\r\n\r\n\r\n    \r\n  }\r\n\r\n    \r\n  /**\r\n   * Prepara i parametri per la chiamata controllando i parametri presenti sul documento\r\n   * @param document Documento con i parametri di filtro\r\n   */\r\n  private _getHttpParamsFromDoc(document:IDDocument): HttpParams {\r\n    \r\n    let myParams: HttpParams;\r\n    let arProperty = Object.keys(document); //Prendo tutte le proprietà\r\n    let objDescriptor = document.getDescriptor(); //Descrittore dell'oggetto\r\n\r\n    \r\n    // CIclo le proprieta dell'oggetto filter\r\n    objDescriptor.fields.forEach(element => {\r\n      let nameProperty = element.fieldName;\r\n      let strValue = '';\r\n      let tipo = document.getPropertyType(nameProperty);\r\n      let operatoreSpecial: OperatorCondition; //Condizione speciale sulla proprietà\r\n\r\n      //Se non inizia con _ è una proprieta da includere\r\n      if (!nameProperty.startsWith('_')) {\r\n        let filterCondition: FilterCondition;\r\n        \r\n\r\n        //Recupero della condizione di filtro speciale\r\n        filterCondition = document.getFilterConditionByFieldName(nameProperty);\r\n\r\n        //Recupero la condizione speciale (potrebbe non esserci)\r\n        operatoreSpecial = document.getFilterOperatorByFieldName(nameProperty);\r\n\r\n        //La proprietà non contiene un valore\r\n        if (document[nameProperty] == null || document[nameProperty] == undefined ) {\r\n          //C'e' una condizione di filtro speciale\r\n          if (filterCondition) {\r\n            \r\n            //Gli elementi contenuti vanno in OR e separati dal punto e virgola\r\n            if (filterCondition.listOrValue && filterCondition.listOrValue.length != 0) {\r\n              //Ci sono valori da mettere in OR\r\n\r\n              //Devo inserirli separati da ;\r\n              for (let index = 0; index < filterCondition.listOrValue.length; index++) {\r\n                const valoreProperty = filterCondition.listOrValue[index];\r\n                if (strValue && strValue.length != 0) {\r\n                  strValue += ';';\r\n                }\r\n\r\n                strValue += document.formatValue(tipo,valoreProperty);\r\n              }\r\n\r\n              //Si inseriscono con l'operatore uguaglianza\r\n              operatoreSpecial = OperatorCondition.uguale;\r\n\r\n            }\r\n          }\r\n        }\r\n        else  {\r\n\r\n          //Converto il valore della proprieta\r\n          strValue = document.formatValue(tipo, document[nameProperty]);\r\n\r\n          //Recupero la condizione speciale (potrebbe non esserci)\r\n          operatoreSpecial = document.getFilterOperatorByFieldName(nameProperty);  \r\n          \r\n        }\r\n\r\n        //Posso aggiungerle ai parametri\r\n        if (strValue.length !== 0) {\r\n\r\n          //Tutti i parametri vengono aggiunti per uguaglianza o controllando\r\n          //se presenti con una condizione diversa nel filterCondition\r\n          \r\n          //Viene sempre ritornato l'operatore da impostare\r\n          strValue = operatoreSpecial + strValue;\r\n          \r\n          if (myParams == undefined) {\r\n            myParams = new HttpParams().set(nameProperty, strValue);\r\n          }\r\n          else {\r\n            //Aggiungo il parametro\r\n            myParams = myParams.append(nameProperty, strValue);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return myParams;\r\n  }\r\n\r\n  /**\r\n  * Clona un oggetto \r\n  */\r\n  public cloneObject(document:IDDocument): any {\r\n    let objDescriptor: Descriptor;\r\n    let cloneObj:any;\r\n\r\n    if (document) {\r\n\r\n      objDescriptor = document.getDescriptor();\r\n\r\n      cloneObj = new DynamicClass(objDescriptor.className, true);\r\n\r\n      for (var attribut in document) {\r\n          if (typeof document[attribut] === \"object\") {\r\n              //cloneObj[attribut] = this.cloneObject(document[attribut]);\r\n          } else {\r\n              cloneObj[attribut] = document[attribut];\r\n          }\r\n      }\r\n    }\r\n    \r\n    return cloneObj;\r\n\r\n  }\r\n\r\n  /**\r\n   * Dato un documento di partenza e una sequenza di campi ritorna il documento correlato\r\n   * Esempio Documento Corso contiene IDLOCATION\r\n   * seqField mi da il percorso da seguire per arrivare al documento correlato\r\n   * seqField = ['IDLOCATION'] => Location\r\n   * seqField = ['IDLOCATION', 'IDAREA'] => Area\r\n   * seqField = ['IDLOCATION', 'IDAREA','IDGRUPPO'] => Gruppo\r\n   * @param docStart Documento di partenza\r\n   * @param seqField Percorso da seguire per ottenere il documento correlato\r\n   * @param childLevel Profondita dell'ultima chiamata\r\n   * @param docRepository Aggiunge il documento correlato al documento passato (spesso il docRepository è uguale a docStart)\r\n   */\r\n  public getRelDoc( docStart: IDDocument, \r\n                    seqField: string[], \r\n                    childLevel = 2,\r\n                    docRepository?: IDDocument,\r\n                    indexSeq = -1):Promise<any> {\r\n    return new Promise((resolve, reject)=>{  \r\n\r\n      let nameField = '';\r\n      \r\n      let objFieldType: TypeReflector;\r\n\r\n      if (docStart) {\r\n        if (seqField && seqField.length !== 0) {\r\n\r\n          if (indexSeq == -1) {\r\n            //Inizio il giro impostando posizione 0\r\n            indexSeq = 0;\r\n          }\r\n        }\r\n\r\n        if (seqField && seqField.length !== 0) {\r\n          \r\n          nameField = seqField[indexSeq];\r\n\r\n          //Con il nome del campo, ottengo la definizione del campo\r\n          objFieldType = docStart.getTypeReflectorByFieldName(nameField);\r\n            \r\n          //Il campo esiste e contiene qualcosa\r\n          if (objFieldType && docStart.propertyIsEmpty(nameField)==false) {\r\n\r\n            //E' un campo in foreing Key\r\n            if (objFieldType.isForeignKey) {\r\n              \r\n              //Impostare il documento di filtro\r\n              let filter:any = new DynamicClass(objFieldType.relFieldDoc, true);\r\n              let idDocFilter:IDDocument = filter;\r\n\r\n              idDocFilter.setPrimaryKey(docStart[nameField]);\r\n\r\n              //creo i filtri per il child level\r\n              let params : RequestParams = new RequestParams();\r\n              if (seqField.length == indexSeq + 1) {\r\n                params.child_level = childLevel;\r\n              }\r\n              else {\r\n                params.child_level = 1;\r\n              }\r\n\r\n              this.requestNew(idDocFilter, params)\r\n                  .then(arElement => {\r\n\r\n                    if (arElement && arElement.length !== 0) {\r\n                      let element = arElement[0];\r\n\r\n                      \r\n                      //Ho ancora relazioni da decodificare\r\n                      if (indexSeq + 1 < seqField.length) {\r\n                        //Incremento l'indice sequenza\r\n                        indexSeq++;\r\n                        //Eseguo un nuovo relDoc\r\n                        return this.getRelDoc(element, seqField, childLevel, docRepository, indexSeq);\r\n\r\n                      }\r\n                      else {\r\n\r\n                        //Il giro è finito\r\n\r\n                        //Elemento presente e vuole che venga aggiunto al documento chiamante come relDoc nel Repository\r\n                        if (element && docRepository) {\r\n                          \r\n                          //Aggiungo al repository\r\n                          docRepository.addToRepositoryRelDoc(element, seqField);\r\n                        }\r\n\r\n\r\n                        return resolve(element);\r\n                      }\r\n                    }\r\n                    else {\r\n                      console.log('Document rel not found');\r\n                      return resolve(null);\r\n                    }\r\n\r\n                  })\r\n                  .catch(error => {\r\n                    return reject(error);\r\n                  })\r\n  \r\n            }\r\n            else {\r\n              console.log('Foreign Key not found');\r\n              return resolve(null);\r\n            }\r\n          }\r\n          else {\r\n            console.log('Foreign Key not found');\r\n            return resolve(null);\r\n          }\r\n          \r\n  \r\n        }\r\n        else {\r\n          reject('Sequence Field Link empty');\r\n        }\r\n      }\r\n      else {\r\n        reject('Document null or undefined');\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Richiede per tutti i documenti della collection, un documento relativo \r\n   * basato sulla sequenza seqField\r\n   * Il documento correlato viene aggiunto al repository di ogni documento\r\n   * @param collection Collection di Documenti della stessa tipologia\r\n   * @param seqField Percorso da seguire per ottenere il documento correlato\r\n   */\r\n  public getRelDocCollection( collection: IDDocument[],\r\n                              seqField: string[]\r\n                              ) {\r\n\r\n    return new Promise<void>((resolve, reject)=>{\r\n\r\n      let executePromise:Promise<any>[] = [];\r\n\r\n      if (collection) {\r\n        for (let index = 0; index < collection.length; index++) {\r\n          const elDoc = collection[index];\r\n          let elPromise = this.getRelDoc(elDoc, seqField, 1, elDoc);\r\n          executePromise.push(elPromise);\r\n        }\r\n\r\n        if (executePromise.length != 0) {\r\n          Promise.all(executePromise)\r\n            .then( () => {\r\n              resolve();\r\n            })\r\n            .catch(error => {\r\n              reject(error);\r\n            });\r\n        }\r\n      }\r\n\r\n\r\n    });\r\n            \r\n }\r\n\r\n  // ****************************************************************\r\n  // ***************  REQUEST PER I METODI STATICI    ***************\r\n  // ****************************************************************\r\n\r\n  /**\r\n   * Effettua una chiamata POST al metodo indicato dell'oggetto specificato\r\n   * E' possibile indicare a scelta:\r\n   * 1) un jsonbody stringa o documento (il documento viene convertito in JSON)\r\n   * 2) postParams:unione di chiavi /valore da inviare nei parametri se i valori non sono oggetti, altrimenti essendo oggetti,\r\n   *    viene creato un oggetto e innestato nel body\r\n   * \r\n   * \r\n   * \r\n   * \r\n   * @param documentCall Documento a cui effettuare la chiamata\r\n   * @param method nome del metodo statico da chiamare\r\n   * @param jsonBodyOrDoc body da inviare in formato json o documento\r\n   * @param postParams Array con i parametri da aggiungere nell'url\r\n   */\r\n  public requestForFunction(documentCall: IDDocument, \r\n                     method: string, \r\n                     jsonBodyOrDoc?: string | IDDocument,\r\n                     postParams?: PostParams[] | PostParams\r\n                     ): Promise<any> { \r\n\r\n    return new Promise<any>((resolve,reject) => {\r\n\r\n      let myHeaders = this.myConfig.getHttpHeaders();\r\n      let myParams: HttpParams = new HttpParams();\r\n      let myUrl = '';\r\n      let myJsonBody = '';\r\n      let postBasicType = false;\r\n\r\n      let objDescriptor: Descriptor;\r\n\r\n      if (!this.myConfig) {\r\n        reject('Configuration non presente');\r\n      }\r\n      else if (!documentCall) {\r\n        reject('Documento non presente');\r\n      }\r\n      else if (method.length == 0) {\r\n        reject('Metodo non presente');        \r\n      }\r\n      else {\r\n         //Recupero il descrittore della classe\r\n         objDescriptor = documentCall.getDescriptor();\r\n\r\n\r\n         if (!objDescriptor) {\r\n           reject('Descrittore Documento non presente');\r\n         }\r\n         else if (objDescriptor.doRemote == false) {\r\n           //Non è gestito esternamente\r\n           reject('Documento non gestito in remoto');\r\n         }\r\n         else {\r\n\r\n          //Creo URL di chiamata\r\n          myUrl = this.myConfig.urlBase + '/' + objDescriptor.classWebApiName;\r\n\r\n          //Sistemo l'header\r\n           myHeaders = myHeaders.append('X-HTTP-Method-Override',method);\r\n\r\n           //Controllo dei parametri post\r\n           if (postParams) {\r\n\r\n            //Controllo come sono i parametri di post\r\n            postBasicType = PostParams.getBasicTypeFrom(postParams);\r\n\r\n            if (postBasicType) {\r\n              //Essendo tutti parametri basici li sistemo come parametri\r\n              \r\n              //Se è un Array\r\n              if ( Array.isArray(postParams) ) {\r\n  \r\n                if (postParams.length != 0) {\r\n                  for (let index = 0; index < postParams.length; index++) {\r\n                    const elParam = postParams[index];\r\n                     myParams = myParams.append(elParam.key, elParam.value);\r\n                   }\r\n              }           \r\n             }\r\n             else {\r\n               //Oggetto semplice\r\n               myParams = myParams.append(postParams.key, postParams.value);\r\n             }\r\n\r\n\r\n            }\r\n            else {\r\n              //Costruire un oggetto da sistemare nel body\r\n              jsonBodyOrDoc = PostParams.getJsonFrom(postParams);\r\n\r\n            }\r\n\r\n          } \r\n\r\n          if (jsonBodyOrDoc) {\r\n            if (typeof jsonBodyOrDoc == \"string\") {\r\n              myJsonBody = jsonBodyOrDoc;\r\n            }\r\n            else if (typeof jsonBodyOrDoc == \"object\") {\r\n              //Questi sono i parametri per l'esportazione\r\n              let paramExport = new ParamsExport();\r\n\r\n              paramExport.clearDOProperty = true;\r\n              paramExport.clearPKProperty = false;\r\n              paramExport.clearPrivateProperty = true;\r\n              paramExport.onlyPropertyModified = true;\r\n              paramExport.onlyDocModified = true;\r\n\r\n              paramExport.numLivelli = 999;\r\n              myJsonBody = jsonBodyOrDoc.exportToJSON(paramExport);\r\n            }\r\n          }\r\n\r\n          //Effettuo la chiamata POST\r\n          this.apiService.httpPost(myUrl,myHeaders,myParams, jsonBodyOrDoc)\r\n          .subscribe(response => {\r\n            resolve(response);\r\n          }, error => {\r\n            reject(error);\r\n          });\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n\r\n  }\r\n\r\n  // **********************************************\r\n  // *          REQUEST FOR UPDATE                *\r\n  // **********************************************\r\n\r\n\r\n  /**\r\n   * Richiesta effettuata al server per aggiornare un documento\r\n   * @param document Documento da aggiornare\r\n   * @param onlyPropModified Invia solo le proprietà modificate\r\n   */\r\n  public requestForUpdate(document: IDDocument, onlyPropModified = true, onlyDocModified = false): Promise<any> {\r\n    //Si esegue una PUT con il parametro ID e il body i valori da modificare\r\n    return new Promise<void>((resolve,reject) => {\r\n      let myHeaders = this.myConfig.getHttpHeaders();\r\n      let objDescriptor: Descriptor;\r\n      let fieldNamePK = '';\r\n      let fieldValuePK = '';\r\n      let jsonBody = '';\r\n      let myParams: HttpParams;\r\n      let myUrl = '';\r\n\r\n      if (!document) {\r\n        reject('Document null');\r\n      }\r\n      else {\r\n        //Recupero il descrittore della classe\r\n        objDescriptor = document.getDescriptor();\r\n\r\n        if (!objDescriptor) {\r\n          reject('Descrittore Documento filtro non presente');\r\n        }\r\n        else if (objDescriptor.doRemote == false) {\r\n          //Non è gestito esternamente\r\n          reject('Documento non gestito in remoto');\r\n        }\r\n        else {\r\n          //Recupero nome e valore della primary Key\r\n          fieldNamePK = document.getPrimaryKey('name');\r\n          fieldValuePK = document.getPrimaryKey('value');\r\n\r\n          //Vuole che aggiorni le proprietà modificate ma non ne ho\r\n          //Che facciamo dico che è andata a buon fine\r\n          if (onlyPropModified && document.isModified() == false) {\r\n\r\n          }\r\n          else {\r\n\r\n            //Preparo il body\r\n\r\n            //Questi sono i parametri per l'esportazione\r\n            let paramExport = new ParamsExport();\r\n\r\n            paramExport.clearDOProperty = true;\r\n            paramExport.clearPKProperty = false;\r\n            paramExport.clearPrivateProperty = true;\r\n            paramExport.onlyPropertyModified = onlyPropModified;\r\n            paramExport.onlyDocModified = onlyDocModified;\r\n            \r\n            jsonBody = document.exportToJSON(paramExport);\r\n    \r\n            myUrl = this.myConfig.urlBase + '/' + objDescriptor.classWebApiName;\r\n\r\n            this.apiService\r\n                  .httpPut(myUrl, myHeaders, myParams, jsonBody )\r\n                  .subscribe(() => {\r\n                    resolve();\r\n                  },error => {\r\n                    reject(error);\r\n                  });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LogApp } from '../models/log.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomEncriptionService {\r\n\r\n  private privateKey: string = '5468765198654984964198';\r\n  private table = [];\r\n\r\n\r\n  constructor() {\r\n\r\n    this._initTable();\r\n  }\r\n  \r\n\r\n  private _initTable(){\r\n    this.table = [\r\n      ['D','d','8','Y','R','g','z','9','B','A' ],          \r\n      ['G','p','B','y','f','M','Z','A','Y','a' ],          \r\n      ['b','P','5','0','N','r','8','a','C','G' ],          \r\n      ['a','r','3','F','1','2','n','X','6','R' ],          \r\n      ['C','N','A','l','g','6','B','Y','5','1' ],          \r\n      ['h','A','0','t','2','7','e','1','J','6' ],          \r\n      ['H','O','R','T','3','A','L','6','h','7' ],          \r\n      ['Q','o','l','w','B','c','R','4','q','2' ],          \r\n      ['j','I','J','6','c','1','4','2','D','5' ],          \r\n      ['1','2','I','5','4','B','c','W','w','b' ],          \r\n    ]\r\n  }\r\n\r\n\r\n  private _getUTCTimestamp(){\r\n    let utc: number;\r\n    let now = new Date()\r\n    // utc = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds(), now.getMilliseconds())\r\n\r\n    utc = now.getTime();\r\n    return utc;\r\n  }\r\n\r\n  private _encrypt(str){\r\n    let encryptedStr = '';\r\n    \r\n    let keyPointer = 0;\r\n\r\n\r\n    for(let i = 0; i< str.length; i++){\r\n        //recupero il carattere (numerico) da crittografare\r\n        let initialValue = str[i];\r\n\r\n        //recupero il carattere della chiave da usare per la codifica\r\n        let keyValue = this.privateKey[keyPointer];\r\n\r\n        //recupero dalla matrice il valore codificato\r\n        let finalValue = this.table[keyValue][initialValue];\r\n\r\n        //aggiungo il valore trovato alla stringa finale codificata\r\n        encryptedStr += finalValue\r\n\r\n        //avanzo di una posizione con il puntatore alla chiave\r\n        keyPointer ++;\r\n\r\n        //se il puntatore alla chiave è arrivato alla fine, torno all'inizio\r\n        if(keyPointer == this.privateKey.length){\r\n            keyPointer = 0;\r\n        }\r\n    }\r\n\r\n\r\n    return encryptedStr;\r\n  }\r\n\r\n  private _decrypt(encryptedStr){\r\n\r\n    let decryptedStr = '';\r\n    let keyPointer = 0;\r\n\r\n    for(let i = 0; i< encryptedStr.length; i++){\r\n\r\n        //recupero il carattere giusto della chiave\r\n        let keyValue = this.privateKey[keyPointer];\r\n\r\n        let encryptedChar = encryptedStr[i];\r\n\r\n        //con il carattere della chiave, recupero la riga:\r\n        let myRow = this.table[keyValue];\r\n\r\n        //nella riga, l'indice del carattere crittografato è il carattere non crittografato\r\n        let decryptedChar = myRow.findIndex(value => {\r\n            return value == encryptedChar;\r\n        })\r\n        \r\n        //aggiungo il carattere trovato alla mia stringa finale \r\n        decryptedStr += decryptedChar;\r\n\r\n        //avanzo di una posizione con il puntatore alla chiave\r\n        keyPointer ++;\r\n\r\n        //se il puntatore alla chiave è arrivato alla fine, torno all'inizio\r\n        if(keyPointer == this.privateKey.length){\r\n            keyPointer = 0;\r\n        }\r\n    }\r\n\r\n    return decryptedStr;\r\n\r\n  }\r\n\r\n  private _getSignatureToEncrypt(){\r\n    let str= '';\r\n\r\n    let currentTimestamp = this._getUTCTimestamp();\r\n\r\n    let time1 = currentTimestamp;\r\n    let time2 = currentTimestamp * 2;\r\n    let time3 = currentTimestamp * 3;\r\n\r\n    str = str + time1 + time2 + time3;\r\n\r\n    \r\n    return str;\r\n  }\r\n\r\n  // private _convertToB64(stringToConvert: string){\r\n  //   //@ts-ignore\r\n  //   let buff = Buffer.from(stringToConvert);\r\n\r\n  //   return buff.toString('base64');\r\n  // }\r\n\r\n  // private _convertFromB64(stringToConvert: string){\r\n  //   //@ts-ignore\r\n  //   let buff = Buffer.from(stringToConvert, 'base64');\r\n  //   return buff.toString('ascii');\r\n  // }\r\n\r\n\r\n  /**\r\n   * crittografa una stringa usando la tabella e la chiave\r\n   * @param str stringa da crittografare\r\n   */\r\n  public encrypt(str){\r\n    return this._encrypt(str);\r\n  }\r\n\r\n  /**\r\n   * decrittografa la stringa guardando chiave e tabella\r\n   * @param str stringa da decrittografare\r\n   */\r\n  public decrypt(str){\r\n    \r\n      return this._decrypt(str);\r\n  }\r\n\r\n\r\n  /**\r\n   * restituisce una firma secondo le specifiche. Encodata in B64\r\n   */\r\n  public getB64EncryptedSignature(){\r\n    let signature = this._getSignatureToEncrypt();\r\n    signature = this.encrypt(signature);\r\n    LogApp.consoleLog('Signature: ' + signature);\r\n    //@ts-ignore\r\n    signature = window.btoa(signature);\r\n    LogApp.consoleLog('Signature Base64: ' + signature);\r\n    return signature;\r\n  }\r\n\r\n\r\n\r\n  // public decodeB64Signature(b64EncryptedSignature){\r\n  //   let encryptedSignature = this._convertFromB64(b64EncryptedSignature);\r\n  //   let decryptedSignature = this.decrypt(encryptedSignature);\r\n\r\n  //   let tok1 = decryptedSignature.substring(0, 13);\r\n  //   let tok2 = decryptedSignature.substring(13, 26);\r\n  //   let tok3 = decryptedSignature.substring(26, 39);\r\n\r\n  //   let tok1n = parseInt(tok1, 10);\r\n  //   let tok2n = parseInt(tok2, 10) / 2;\r\n  //   let tok3n = parseInt(tok3, 10) / 3;\r\n\r\n  //   let myDate = new Date(100);\r\n  //   if(tok1n == tok2n && tok1n == tok3n){\r\n\r\n  //     myDate.setTime(tok1n);\r\n      \r\n  //   }\r\n  //   return  myDate;\r\n   \r\n  // }\r\n   \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { CategoriaEta } from '../models/categoriaeta.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { resolve } from 'url';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoriaetaService {\r\n\r\n  private _listCategorieEta = new BehaviorSubject<CategoriaEta[]>([]);\r\n\r\n  get listCategorieEta() {\r\n    return this._listCategorieEta.asObservable();\r\n  }\r\n\r\n    /**\r\n   * Ritorna la lista non in modalità Observable\r\n   */\r\n  get actualListCategorieEta() {\r\n    return this._listCategorieEta.getValue();\r\n  }\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n  /**\r\n   * Richiede al server l'elenco delle Categorie Eta\r\n   * @param config Parametri configurazione chiamata\r\n   */\r\n  request(config: StartConfiguration) {\r\n    return new Promise<void>((resolve,reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n\r\n      const doObject = 'CATEGORIEETA';\r\n  \r\n      \r\n      //Nei Parametri imposto il LivelloAutorizzazione\r\n      //TODO: Fatta cosi non mi piace\r\n      let myParams = new HttpParams().set('LivelloAutorizzazione','0');\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n          return data.CATEGORIEETA\r\n        }))\r\n        .subscribe(resultData => {\r\n  \r\n          if (resultData) {\r\n            \r\n            resultData.forEach(element => {\r\n              let newCategoria = new CategoriaEta();\r\n              newCategoria.setJSONProperty(element);\r\n              this.addCategoriaEta(newCategoria);\r\n              resolve();\r\n            });\r\n          }\r\n          else {\r\n            reject('no data Categoria Eta retrieved');\r\n          }\r\n\r\n           },\r\n           error=>{\r\n             reject(error);\r\n           }\r\n        )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge un oggetto Categorie Eta all'Observable\r\n   * @param objCategoriaEta Oggetto Categoria Eta da aggiungere\r\n   */\r\n  addCategoriaEta(objCategoriaEta: CategoriaEta) {\r\n    this.listCategorieEta\r\n      .pipe(take(1))\r\n      .subscribe( collEta => {\r\n        this._listCategorieEta.next( collEta.concat(objCategoriaEta));\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Cerca e ritorna un record della categoria eta\r\n   * @param idCategoriaEta idCategoria Scelta\r\n   */\r\n  findCategoriaEtaById(idCategoriaEta: string): CategoriaEta {\r\n    let objCategoria: CategoriaEta;\r\n    let listaCat = this._listCategorieEta.getValue();\r\n\r\n    if (idCategoriaEta && listaCat && listaCat.length != 0 ) {\r\n        objCategoria = listaCat.find(elCat => {\r\n          return (elCat.ID == idCategoriaEta);\r\n        })\r\n    }\r\n\r\n    return objCategoria;\r\n  }\r\n\r\n\r\n  /**\r\n   * IDCategoria da controllare se l'età risulta valida\r\n   * @param idCategoria idCategoria scelta\r\n   * @param eta Età\r\n   */\r\n  isValid(idCategoria: string, eta: number): boolean {\r\n    let isValid = false;\r\n    let objCategoria: CategoriaEta;\r\n\r\n    objCategoria = this.findCategoriaEtaById(idCategoria);\r\n\r\n    if (objCategoria) {\r\n        isValid = objCategoria.isValid(eta);\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Data } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { resolve } from 'url';\r\nimport { OperatorCondition } from '../library/models/iddocument.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { Area } from '../models/area.model';\r\nimport { Campo } from '../models/campo.model';\r\nimport { DataChiusura } from '../models/datachiusura.model';\r\nimport { Gruppo } from '../models/gruppo.model';\r\nimport { Location } from '../models/location.model';\r\nimport { AttivitaChiusura, TipoChiusura } from '../models/valuelist.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataChiusuraService {\r\n\r\n  private _listChiusure: DataChiusura[] = [];\r\n\r\n  listChiusure: BehaviorSubject<DataChiusura[]> = new BehaviorSubject<DataChiusura[]>([]);\r\n\r\n  constructor(\r\n    private docStructureService: DocstructureService,\r\n  ) { }\r\n\r\n  /**\r\n   * aggiuge un elemento alla lista\r\n   * @param element l'elemento da aggiungere\r\n   */\r\n  private addElementToList(element: DataChiusura){\r\n    this._listChiusure.push(element);\r\n    this.listChiusure.next(this._listChiusure);\r\n\r\n  }\r\n\r\n  /**\r\n   * Richiede l'elenco completo di tutte le chiusure del gruppo sportivo SOLO PER GLI AFFITTI\r\n   */\r\n  request(){\r\n\r\n    return new Promise ((resolve, reject) => {\r\n\r\n      \r\n      //creo il filtro\r\n      let filterDocument = new DataChiusura(true);\r\n\r\n  \r\n      //aggiungo le due condizioni in or (chiusure per affitti e per affitti/corsi)\r\n      filterDocument.addFilterCondition(OperatorCondition.uguale, 'ATTIVITACHIUSURA', [AttivitaChiusura.affittoStrutture, AttivitaChiusura.tutte]);\r\n  \r\n      //ora faccio la richiesta\r\n      this.docStructureService.requestNew(filterDocument)\r\n      .then(rawListChiusure => {\r\n  \r\n        //salvo la lista ed emetto l'observable\r\n        this._listChiusure = rawListChiusure;\r\n        this.listChiusure.next(this._listChiusure);\r\n  \r\n        //risolvo la lista\r\n        // console.log('LISTA CHIUSURE');\r\n        // console.log(this._listChiusure);\r\n        resolve(this._listChiusure);\r\n      })\r\n    })\r\n\r\n    \r\n    \r\n  }\r\n\r\n  /**\r\n   * Ritorna se la Data passata è una festività di chiusura\r\n   * @param idArea L'area\r\n   * @param idLocation la location\r\n   * @param idCampo il campo\r\n   * @param data la data da controllare\r\n   */\r\n  idFestivita(idArea: string, idLocation: string, idCampo: string, data: Date): boolean{\r\n    let aperto = true;\r\n\r\n    if (this._listChiusure){\r\n      \r\n\r\n      for (let index = 0; index < this._listChiusure.length; index++) {\r\n        const elemChiusura = this._listChiusure[index];\r\n\r\n        if( elemChiusura.IDAREA == idArea && \r\n            (elemChiusura.IDLOCATION == undefined || elemChiusura.IDLOCATION == idLocation) && \r\n            (elemChiusura.IDCAMPO == undefined || elemChiusura.IDCAMPO == idCampo )) {\r\n        \r\n              //REGOLA VALIDA DA CONTROLLARE - IN QUESTO GIORNO SIAMO CHIUSI\r\n              if (elemChiusura.TIPOCHIUSURA == TipoChiusura.rangeDate && elemChiusura.DATADAL <= data && data <= elemChiusura.DATAAL){\r\n        \r\n                //il giorno  ricade in un range di date di chiusura\r\n                aperto = false;\r\n                break;\r\n              }\r\n              else if (elemChiusura.TIPOCHIUSURA == MyDateTime.getFesta(data)){\r\n                    //nel giorno  c'è una festa in cui il centro chiude\r\n                    aperto = false;\r\n                    break;\r\n              }\r\n              \r\n        }\r\n        \r\n      }\r\n                \r\n\r\n    }\r\n        \r\n    return (!aperto);\r\n  }\r\n\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\nimport { Corso } from '../models/corso.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { FilterCorsi } from '../models/filtercorsi.model';\r\nimport { Sport } from '../models/sport.model';\r\nimport { Livello } from '../models/livello.model';\r\nimport { CategoriaEta } from '../models/categoriaeta.model';\r\n\r\nimport { PostParams, RequestDecode, RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { TimeTrainerCourse } from '../models/valuelist.model';\r\nimport { DynamicClass } from '../library/models/structure.model';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CourseService {\r\n\r\n  private _listCorsi = new BehaviorSubject<Corso[]>([]);\r\n  private _filterCorsi: FilterCorsi;\r\n  private _decodeListSport: Sport[];\r\n  private _decodeListLivelli: Livello[];\r\n  private _decodeListEta: CategoriaEta[];\r\n  private _selectedCorso = new BehaviorSubject<Corso>(new Corso());\r\n\r\n  private _listCorsiTrainer = new BehaviorSubject<Corso[]>([]);\r\n\r\n  \r\n  constructor(\r\n    private docStructureService: DocstructureService,\r\n    private apiService: ApicallService\r\n  ){\r\n\r\n  }\r\n\r\n\r\n\r\n  get listCorsi() {\r\n    return this._listCorsi.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Sono i corsi che il trainer richiede nella pagina Trainer\r\n   */\r\n  get listCorsiTrainer() {\r\n    return this._listCorsiTrainer.asObservable();\r\n  }  \r\n\r\n  get selectedCorso() {\r\n    return this._selectedCorso.asObservable();\r\n  }\r\n\r\n  get filterCorsi() {\r\n    return this.filterCorsi;\r\n  }\r\n\r\n  set filterCorsi(value: FilterCorsi) {\r\n    this._filterCorsi = value;\r\n  }\r\n\r\n  set decodeListSport(value: Sport[]) {\r\n    this._decodeListSport = value;\r\n  }\r\n\r\n  set decodeListLivelli(value: Livello[]) {\r\n    this._decodeListLivelli = value;\r\n  }\r\n\r\n  set decodeListEta(value: CategoriaEta[]) {\r\n    this._decodeListEta = value;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Inizializza e ritorna una copia del filtro dei corsi\r\n   * @param idLocation Location da utilizzare\r\n   */\r\n  newFilterCorsi(idLocation: string) {\r\n    this._filterCorsi = new FilterCorsi(idLocation);\r\n\r\n    return this._filterCorsi;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Effettua una chiamata al server per il recupero dei corsi\r\n   * Utilizzare il documento di Filtro per richiedere dati filtrati\r\n   * @param config Parametri di configurazione\r\n   * @param docUser Documento Utente loggato. Se presente i corsi vengono proposti solo quelli validi all'utente\r\n   */\r\n  requestById (config: StartConfiguration, idCorso: string, numLivelli?:string) {\r\n    return new Promise<Corso>((resolve, reject)=>{\r\n\r\n      if (!numLivelli){\r\n        numLivelli='3';\r\n      }\r\n\r\n      let myHeaders = config.getHttpHeaders();\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'CORSO';\r\n      \r\n  \r\n\r\n      myHeaders = myHeaders.set('child-level', numLivelli);\r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      let myParams = new HttpParams().set('ID',idCorso)\r\n      \r\n      //Effettuo la chiamata\r\n      this.apiService\r\n          .httpGet(myUrl, myHeaders, myParams)\r\n          .pipe(map(data => {\r\n            return data.CORSO;\r\n          }))\r\n          .subscribe( resultData => {\r\n\r\n            if (resultData[0] && resultData[0]!={}){\r\n              let objCorso = new Corso();\r\n              objCorso.setJSONProperty(resultData[0]);\r\n              \r\n              //Decodifico i campi chiave\r\n              objCorso.lookup('IDSPORT', this._decodeListSport, 'DENOMINAZIONE');\r\n              \r\n              //Decodifico i campi chiave\r\n              objCorso.lookup('IDCATEGORIEETA', this._decodeListEta, 'DESCTOOLTIP');\r\n              \r\n              //Decodifico i campi chiave\r\n              objCorso.lookup('IDLIVELLOENTRATA', this._decodeListLivelli, 'DENOMINAZIONE');\r\n              \r\n              resolve(objCorso);     \r\n            }\r\n            else\r\n            {\r\n              reject('corso non trovato');\r\n            }\r\n\r\n          }, error=>{\r\n            reject(error);\r\n          })\r\n    })\r\n  }\r\n\r\n  newRequestById(idCorso: string){\r\n    return new Promise<any>((resolve, reject) => {\r\n      //preparo il filtro\r\n      let filtroCorso = new Corso(true);\r\n      filtroCorso.ID=idCorso;\r\n\r\n      //preparo i parametri per decodificare\r\n      let params = new RequestParams();\r\n      params.decode = new RequestDecode();\r\n      params.decode.active = true;\r\n      \r\n\r\n\r\n       //faccio la richiesta\r\n       this.docStructureService.requestNew(filtroCorso, params)\r\n       .then((listCorsi : Corso[]) => {\r\n\r\n          let myCorso: Corso;\r\n          if (listCorsi && listCorsi.length != 0) {\r\n            //Prendo il primo corso (in teoria anche l'unico)\r\n            myCorso = listCorsi[0];\r\n          }\r\n\r\n          if (myCorso) {\r\n            //ora richiedo anche il programma\r\n            this.docStructureService.loadCollection(myCorso, 'CORSOPROGRAMMA')\r\n            .then(() => {\r\n              resolve(myCorso);\r\n\r\n            })\r\n            .catch(error => {\r\n              reject(error);\r\n            });\r\n          }\r\n          else {\r\n            reject('Errore recupero corso');\r\n          }\r\n          \r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      })\r\n  })\r\n}\r\n\r\n/**\r\n * Effettua la chiamata al server per ottenere i corsi riferiti al trainer\r\n * Risultato nell'Observable listCorsiTrainer\r\n * \r\n * @param idTrainer Trainer\r\n * @param timeState Corsi richiesti\r\n */\r\n requestTimeTrainerCourse(idTrainer: string, timeState: TimeTrainerCourse):void {\r\n  let myPostParams : PostParams;\r\n  let arPostParams: PostParams[] = [];\r\n  let method: string = 'getCorsitrainer';\r\n  let docCall: Corso = new Corso();\r\n\r\n  if (idTrainer && idTrainer.length != 0) {\r\n\r\n    if ([-1,0,1].includes(timeState)) {\r\n      \r\n      //Procedo con la chiamata\r\n      myPostParams = new PostParams();\r\n      myPostParams.key = 'idTrainer';\r\n      myPostParams.value = idTrainer;\r\n      arPostParams.push(myPostParams);\r\n\r\n      myPostParams = new PostParams();\r\n      myPostParams.key = 'stateTime';\r\n      myPostParams.value = timeState;\r\n      arPostParams.push(myPostParams);\r\n\r\n      this.docStructureService.requestForFunction(docCall,method,'',arPostParams)\r\n                              .then((collData:Object) => {\r\n\r\n                                let listElement: Corso[] = [];\r\n                                let collDataCorso: any[];\r\n\r\n                                \r\n                                if (collData) {\r\n\r\n                                  if (collData.hasOwnProperty('CORSO')) {\r\n                                    collDataCorso = collData['CORSO'];\r\n\r\n                                    if (collDataCorso.length != 0) {\r\n  \r\n                                      //Creo la lista\r\n                                      collDataCorso.forEach(elData => {\r\n                                        let newElement: Corso = new Corso;\r\n                                        newElement.setJSONProperty(elData);\r\n                                        listElement.push(newElement);\r\n  \r\n                                        //Ogni volta riemetto la lista\r\n                                        this._listCorsiTrainer.next(listElement);\r\n                                      })\r\n  \r\n                                      //Adesso voglio anche decodificare i dati contenuti\r\n                                      this.docStructureService.decodeCollection(listElement)\r\n                                                              .then(() => {\r\n                                                                //Riemetto la lista aggiornata\r\n                                                                this._listCorsiTrainer.next(listElement);\r\n                                                              })\r\n                                                              .catch(error => {\r\n                                                                //Anche in errore riemetto la lista\r\n                                                                this._listCorsiTrainer.next(listElement);\r\n  \r\n                                                              })\r\n  \r\n                                    }\r\n                                    else {\r\n                                      //Nessun dato\r\n                                      this._listCorsiTrainer.next([]);\r\n  \r\n                                    }\r\n                                  }\r\n                                  else {\r\n                                      //Nessun dato\r\n                                      this._listCorsiTrainer.next([]);                                    \r\n                                  }\r\n\r\n                                }\r\n                                else {\r\n                                  //Nessun dato\r\n                                  this._listCorsiTrainer.next([]);\r\n                                }\r\n                              })\r\n\r\n\r\n    }\r\n  }\r\n  \r\n }\r\n\r\n\r\n  /**\r\n   * Ritorna un oggetto HttpParams con i parametri impostati\r\n   * @param filter Oggetto co i filtri da applicare e passare come HttpParams\r\n   */\r\n  getHttpParamsFilter(filter: FilterCorsi): HttpParams {\r\n    let myParams = new HttpParams().set('IDLOCATION', filter.IDLOCATION);\r\n    let arProperty = Object.keys(filter); //Prendo tutte le proprieta\r\n\r\n    // CIclo le proprieta dell'oggetto filter\r\n    arProperty.forEach(element => {\r\n      let nameProperty = element;\r\n\r\n      //Se non inizia con _ è una proprieta da includere\r\n      if (!nameProperty.startsWith('_')) {\r\n        //Se c'è un valore\r\n        if (filter[nameProperty]) {\r\n          let value = filter[nameProperty];\r\n\r\n          /* Per la DATAFINE applico la condizione se è presente*/\r\n          if (value == 'DATAFINE') {\r\n\r\n            if (filter._CONDITIONDATAFINE) {\r\n              value = filter._CONDITIONDATAFINE + value;\r\n            }\r\n            \r\n          }\r\n\r\n          //Aggiungo il parametro\r\n          myParams = myParams.append(nameProperty, value);\r\n        }\r\n      }\r\n      else if (nameProperty = '_CHECKISCRIZIONEAPERTA') {\r\n        if (filter[nameProperty]) {\r\n          //devo includere la ricerca \r\n          //per avere solo i corsi con iscrizione aperta\r\n          \r\n        }\r\n      }\r\n    });\r\n\r\n\r\n    return myParams;\r\n  }\r\n\r\n  /**\r\n   * Aggiunge un corso all'elenco dei corsi\r\n   * @param objCorso Corso da Aggiungere\r\n   */\r\n  addCorso(objCorso: Corso) {\r\n    this.listCorsi\r\n      .pipe(take(1))\r\n      .subscribe( collCorsi => {\r\n        this._listCorsi.next( collCorsi.concat(objCorso));\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Elimina tutti i corsi presenti\r\n   */\r\n  emptyCorsi() {\r\n    this._listCorsi.next([]);\r\n  }\r\n\r\n\r\n}\r\n","import { Descriptor, TypeDefinition } from \"../library/models/descriptor.model\";\r\nimport { IDDocument } from \"../library/models/iddocument.model\";\r\nimport { CorsoValutazioneLivello } from \"./corsovalutazionelivello.model\";\r\n\r\nexport class CorsoValutazione extends IDDocument {\r\n    IDCORSO:                string;\r\n    FLAGBOZZA:              boolean;\r\n    DATAORAVALUTAZIONE:     Date;\r\n    TESTOVALUTAZIONE:       string;\r\n    VOTAZIONEFINALE:        number;\r\n    IDUTENTE:               string;\r\n    NOMINATIVO:             string;\r\n\r\n    CORSOVALUTAZIONELIVELLO: CorsoValutazioneLivello[];\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDCORSO',\r\n            'TESTOVALUTAZIONE',\r\n            'IDUTENTE',\r\n            'NOMINATIVO'\r\n        ];\r\n        let arNumber = ['VOTAZIONEFINALE'];\r\n        let arBoolean = ['FLAGBOZZA'];\r\n        let arDate = ['DATAORAVALUTAZIONE'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'CorsoValutazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CORSOVALUTAZIONE';\r\n        objDescriptor.describeField  = 'NOMINATIVO';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDCORSO', 'Corso');\r\n        objDescriptor.setRelation('IDUTENTE', 'Utente');\r\n       \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n    constructor(onlyInstance?: boolean){\r\n        super(onlyInstance);\r\n\r\n        this.DATAORAVALUTAZIONE = new Date();\r\n        this.TESTOVALUTAZIONE = '';\r\n        this.CORSOVALUTAZIONELIVELLO = [];\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * Imposta le proprietà nell'oggetto\r\n     * @param data JSON Received\r\n     */\r\n     setJSONProperty(data: any) {\r\n        //Chiamo IDDOcument\r\n        super.setJSONProperty(data);\r\n    \r\n        this.setCollection(data);\r\n  \r\n        this.setOriginal();\r\n  \r\n      }\r\n  \r\n      /**\r\n       * Sistema le collection se presenti\r\n       * @param data JSON Ricevuto\r\n       */\r\n      setCollection(data: any) {\r\n\r\n        this.CORSOVALUTAZIONELIVELLO = [];\r\n        \r\n        if (data.CORSOVALUTAZIONELIVELLO) {\r\n\r\n          this.setCollectionCorsoValutazioneLivello(data.CORSOVALUTAZIONELIVELLO);\r\n        }\r\n  \r\n        \r\n      }\r\n  \r\n      /**\r\n       * Imposta la collection CORSOVALUTAZIONELIVELLO coni dati ricevuti\r\n       * @param arValutazioni JSON Ricevuti\r\n       */\r\n       setCollectionCorsoValutazioneLivello(arValutazioni: any[]) {\r\n  \r\n        this.CORSOVALUTAZIONELIVELLO = [];\r\n  \r\n        if (arValutazioni) {\r\n\r\n          arValutazioni.forEach(element => {\r\n            \r\n            // Ricerco se esiste già\r\n            let newValutazione = this.getCorsoValutazioneLivelloByID(element.ID);\r\n  \r\n            //Non esiste lo creo nuovo\r\n            if (!newValutazione) {\r\n  \r\n              newValutazione = new CorsoValutazioneLivello();\r\n              //Imposto i dati\r\n              newValutazione.setJSONProperty(element);\r\n              //Aggiungo alla collection\r\n              this.CORSOVALUTAZIONELIVELLO.push(newValutazione);\r\n  \r\n            }\r\n            else {\r\n              //Reimposto i valori\r\n              newValutazione.setJSONProperty(element);\r\n            }\r\n  \r\n  \r\n          })\r\n        }\r\n      }   \r\n    \r\n/**\r\n * Ritorna l'elemento di Corso Valutazione Livello che corrisponde con ID\r\n */\r\ngetCorsoValutazioneLivelloByID(idCorsoValutazioneLivello): CorsoValutazioneLivello {\r\n\r\n    // Ricerco se esiste già\r\n    let findRecord = this.CORSOVALUTAZIONELIVELLO.find(elvalutazioneLivello => {\r\n            return elvalutazioneLivello.ID == idCorsoValutazioneLivello\r\n    });\r\n\r\n    return findRecord;\r\n}      \r\n}","import * as moment from \"moment\";\r\nimport { TipoChiusura } from 'src/app/models/valuelist.model';\r\nimport { TypeDefinition } from './descriptor.model';\r\n\r\nexport class MyDateTime {\r\n\r\n//Formatta una data passata in ISO (Solo la parte data)\r\nstatic formatDateISO(data: Date): string {\r\n    let intMese = data.getMonth() + 1;\r\n    let intGiorno = data.getDate();\r\n    let mese = (intMese > 9) ? (intMese + '') : ('0' + intMese);\r\n    let giorno = (intGiorno > 9) ? (intGiorno + '') : ('0' + intGiorno);\r\n    let format = [data.getFullYear(), mese, giorno].join('-');\r\n\r\n    return format;\r\n    }\r\n\r\n//Formatta una data passata in ISO (Data e Ora)\r\nstatic formatDateTimeISO(data: Date): string {\r\n    let prefixDate = MyDateTime.formatDateISO(data);\r\n    let ore = (data.getHours() > 9) ? (data.getHours() + '') : ('0' + data.getHours());\r\n    let minuti = (data.getMinutes() > 9) ? (data.getMinutes() + '') : ('0' + data.getMinutes());\r\n    let secondi = (data.getSeconds() > 9) ? (data.getSeconds() + '') : ('0' + data.getSeconds());\r\n    let final = prefixDate + ' ' + ore + ':' + minuti + ':' + secondi;\r\n\r\n    return final;\r\n}\r\n\r\n//Formatta un orario passata  (Data e Ora)\r\nstatic formatTime(data: Date, withSeconds:boolean =false): string {\r\n\r\n    \r\n    let ore = (data.getHours() > 9) ? (data.getHours() + '') : ('0' + data.getHours());\r\n    let minuti = (data.getMinutes() > 9) ? (data.getMinutes() + '') : ('0' + data.getMinutes());\r\n    let secondi = (data.getSeconds() > 9) ? (data.getSeconds() + '') : ('0' + data.getSeconds());\r\n\r\n    let final =  ore + ':' + minuti;\r\n    \r\n    if (withSeconds) {\r\n        final = final + ':' + secondi;\r\n    }\r\n\r\n    return final;\r\n}\r\n\r\n/**\r\n * \r\n * @param data Data\r\n * @param format Formattazione di moment.js da applicare\r\n */\r\nstatic formatDate(data: Date, maskFormat: string): string {\r\n    //https://momentjs.com/docs/#/displaying/\r\n    return moment(data).format(maskFormat);\r\n}\r\n\r\n\r\n/**\r\n* Trasforma la stringa in un oggetto di tipo Data\r\n* @param strInput data / dataOra / Ora in formato stringa\r\n*/\r\nstatic stringToDateObject(strInput: string): Date {\r\n //1 - Devo capire cos'è\r\n let strDate = moment().format('YYYY-MM-DD');\r\n let strTime = '00:00:00'\r\n let timeZone = '+01:00';\r\n let strComplete = '';\r\n let dataReturn: Date;\r\n let arElement: string[];\r\n\r\n arElement = [];\r\n \r\n\r\n if (strInput && strInput.length !== 0) {\r\n\r\n    //Splitto Data, Ora, TimeZone\r\n    arElement = MyDateTime.splitDateTime(strInput);\r\n\r\n    if (arElement[0].length !== 0) {\r\n        strDate = arElement[0];\r\n    }\r\n\r\n    if (arElement[1].length !== 0) {\r\n        strTime = arElement[1];\r\n    }   \r\n    \r\n    if (arElement[2].length !== 0) {\r\n        timeZone = arElement[2];\r\n    }\r\n        \r\n    //Non aggiungere il TimeZone perchè non da errori ma l'uso della proprietà data da problemi\r\n    strComplete = `${strDate}T${strTime}`;\r\n    dataReturn = moment(strComplete).toDate();\r\n\r\n\r\n    return dataReturn;\r\n }\r\n\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param strDateTime Stringa di data e ora\r\n * @param arReturn Separa gli elementi in posizione 0 la data e 1 l'ora\r\n */\r\nstatic splitDateTime(strDateTime:string):string[] {\r\n    let tipo: TypeDefinition;\r\n    let strDate = '';\r\n    let strTime = '';\r\n    let strTimeZone = '';\r\n    let arReturn:string[];\r\n\r\n    arReturn = [];\r\n\r\n    if (strDateTime.length !== 0) {\r\n        if (strDateTime.includes('-') || strDateTime.includes('/')) {\r\n\r\n            if (strDateTime.includes(':')) {\r\n                tipo = TypeDefinition.dateTime;\r\n\r\n                //Cerchiamo il simbolo T oppure uno spazio\r\n                strDateTime = strDateTime.replace(' ','T');\r\n                strDateTime = strDateTime.replace('+','T');\r\n                let el = strDateTime.split('T');\r\n\r\n                for (let index = 0; index < el.length; index++) {\r\n                    const element = el[index];\r\n                    switch (index) {\r\n                        case 0:\r\n                            strDate = element;\r\n                        break;\r\n\r\n                        case 1:\r\n                            strTime = element;\r\n                        break;\r\n\r\n                        case 2:\r\n                            strTimeZone = element;\r\n                        break;                        \r\n                    \r\n                        default:\r\n                            break;\r\n                    }\r\n                    \r\n                }\r\n\r\n            }\r\n            else {\r\n                //Solo una data\r\n                tipo = TypeDefinition.date;\r\n                strDate = strDateTime;\r\n            }\r\n        }\r\n        else if (strDateTime.includes(':')) {\r\n            //Solo un orario\r\n            tipo = TypeDefinition.time;\r\n            strTime = strDateTime;\r\n        }\r\n\r\n    }\r\n\r\n    arReturn.push(strDate);\r\n    arReturn.push(strTime);\r\n    arReturn.push(strTimeZone);\r\n    \r\n    return arReturn;\r\n}\r\n\r\n/**\r\n * Applica una nuova data all'oggetto applyDataOra mantenendo l'orario\r\n * @param nuovaData Nuova Data da applicare\r\n * @param applyDataOra DataOra a cui modificare la data\r\n */\r\nstatic changeDateInTime(nuovaData: Date, applyDataOra: Date) {\r\n    let strDataOra = '';\r\n    let newReturn: Date;\r\n\r\n    if (nuovaData && applyDataOra) {\r\n        strDataOra = MyDateTime.formatDateISO(nuovaData);\r\n\r\n        let ore = (applyDataOra.getHours() > 9) ? (applyDataOra.getHours() + '') : ('0' + applyDataOra.getHours());\r\n        let minuti = (applyDataOra.getMinutes() > 9) ? (applyDataOra.getMinutes() + '') : ('0' + applyDataOra.getMinutes());\r\n        let secondi = (applyDataOra.getSeconds() > 9) ? (applyDataOra.getSeconds() + '') : ('0' + applyDataOra.getSeconds());\r\n\r\n        strDataOra = `${strDataOra}T${ore}:${minuti}:${secondi}`;\r\n\r\n        \r\n        newReturn = moment(strDataOra).toDate();\r\n    }\r\n\r\n    return newReturn;\r\n}\r\n\r\n/**\r\n * Controlla se il Range Check cade dentro a min max DateTime\r\n * Usato per capire le occupazioni\r\n * @param startCheck Range da controllare (Start Date)\r\n * @param endCheck Range da controllare (End Date)\r\n * @param minDateTime \r\n * @param maxDateTime \r\n */\r\nstatic dateTimeInside(startCheck: Date, endCheck: Date, minDateTime:Date, maxDateTime:Date): boolean { \r\n// CONTROLLO EFFETTUATO RITORNO TRUE SE:\r\n// A) FINE IN MEZZO SENZA INIZIO            --> end > min && end <= max\r\n// oppure B) INIZIO IN MEZZO SENZA FINE     --> start >= min && start < max\r\n// oppure C) FUORI                          --> start <= min && end >= max\r\n\r\n    let result = false;\r\n\r\n    //Moment consente di decidere [ uguaglianza o ( esclusione di una data\r\n    if (moment(endCheck).isBetween(minDateTime, maxDateTime,'minute','(]') || \r\n        moment(startCheck).isBetween(minDateTime, maxDateTime,'minute','[)') || \r\n        ( \r\n            moment(startCheck).isSameOrBefore(minDateTime,'minute') && moment(endCheck).isSameOrAfter(maxDateTime,'minute') \r\n        )) {\r\n\r\n            result = true;\r\n        }\r\n\r\n    return result;\r\n\r\n}\r\n\r\n/**\r\n * Calcola il numero di Ore intercorse tra le due date ore\r\n * @param startDate Data Ora Iniziale (Inferiore)\r\n * @param endDate Data Ora Finale (Superiore)\r\n */\r\nstatic durataOre(startDate: Date, endDate: Date): number {\r\n    let ore = 0;\r\n    if (startDate && endDate) {\r\n        let mStart = moment(startDate);\r\n        let mEnd = moment(endDate);\r\n        ore = mEnd.diff(mStart, 'hours', true);\r\n    }\r\n\r\n    return ore;\r\n}\r\n\r\n\r\n/**\r\n * Calcola il numero di Ore intercorse tra le due date ore\r\n * @param inferiorDate Data Ora Iniziale (Inferiore)\r\n * @param superiorDate Data Ora Finale (Superiore)\r\n */\r\nstatic durataAnni(inferiorDate: Date, superiorDate: Date): number {\r\n    let anni = 0;\r\n    if (inferiorDate && superiorDate) {\r\n        let mStart = moment(inferiorDate);\r\n        let mEnd = moment(superiorDate);\r\n        anni = mEnd.diff(mStart, 'years', true);\r\n    }\r\n\r\n    return anni;\r\n}\r\n\r\n/**\r\n * Aggiungo o sottrae da una data il periodo passato nei parametri\r\n * @param dateTime Data Ora di partenza\r\n * @param addOrSub Valore numerico positivo per aggiungere, neghativo per sottrarre\r\n * @param period Periodo da aggiungere o sottrarre\r\n */\r\nstatic calcola(dateTime: Date, addOrSub: number, period:TypePeriod): Date {\r\n    let value: number;\r\n    let dReturn: Date;\r\n\r\n    if (dateTime && period) {\r\n        let mDate = moment(dateTime); //Oggetto di tipo moment\r\n        if (addOrSub < 0) {\r\n            value = addOrSub * -1;\r\n            mDate.subtract(value, period);\r\n        }\r\n        else if (addOrSub > 0) {\r\n            value = addOrSub;\r\n            mDate.add(value, period);\r\n        }\r\n\r\n        dReturn = mDate.toDate();\r\n    }\r\n\r\n    return dReturn;\r\n}\r\n\r\n\r\n/**\r\n * Torna un valore della Value List TipoChiusura per indicare la festività\r\n * @param data Data da controllare\r\n */\r\nstatic getFesta(data: Date): TipoChiusura{\r\n\r\n    let tipoChiusura: TipoChiusura;\r\n\r\n    let meseGiorno: string = moment(data).format('MMDD');\r\n\r\n    let dataAngelo: Date;\r\n    let maskAngelo: string = '';\r\n\r\n    let dataPasqua: Date; \r\n    let maskPasqua: string =  '';\r\n\r\n    dataPasqua = MyDateTime.calcolaPasqua(data.getFullYear());\r\n    maskPasqua = moment(dataPasqua).format('MMDD');\r\n    dataAngelo = MyDateTime.calcola(dataPasqua, 1, TypePeriod.days);\r\n    maskAngelo = moment(dataAngelo).format('MMDD');\r\n\r\n    switch (meseGiorno){\r\n        case '0325':\r\n          tipoChiusura = TipoChiusura.aprile25\r\n          break;\r\n  \r\n        case '1208':\r\n            tipoChiusura = TipoChiusura.dicembre8\r\n            break;\r\n  \r\n        case '0815':\r\n          tipoChiusura = TipoChiusura.ferragosto;\r\n          break;\r\n  \r\n        case '0602':\r\n          tipoChiusura = TipoChiusura.giugno2;\r\n          break;\r\n  \r\n        case '0501':\r\n            tipoChiusura = TipoChiusura.maggio1;\r\n        break;\r\n        \r\n        case '1225':\r\n            tipoChiusura = TipoChiusura.natale;\r\n        break;\r\n            \r\n        case '1226':\r\n            tipoChiusura = TipoChiusura.santoStefano;\r\n        break;\r\n            \r\n        case maskPasqua:\r\n            tipoChiusura = TipoChiusura.pasquaCattolica;\r\n        break;\r\n                  \r\n        case maskAngelo:\r\n            tipoChiusura = TipoChiusura.pasquaCattolica;\r\n        break;\r\n\r\n        default:\r\n            tipoChiusura = 0;\r\n        break;\r\n      }\r\n    return tipoChiusura;\r\n\r\n\r\n}\r\n\r\n/**\r\n * Calcola la data di Pasqua per l'anno\r\n * @param anno Anno\r\n */\r\nstatic calcolaPasqua(anno: number): Date {\r\n\r\n    let a=0, b=0, c=0, d=0, e=0, m=0, n=0, giorno=0, mese=0;\r\n\r\n    \r\n    if(anno <= 2099){\r\n        m = 24;\r\n        n = 5;\r\n    }\r\n    else if(anno <= 2199){\r\n        m = 24;\r\n        n = 6;\r\n    }\r\n    else if(anno <= 2299){\r\n        m = 25;\r\n        n = 0;\r\n    }\r\n    else if(anno <= 2399){\r\n        m = 26;\r\n        n = 1;\r\n    }\r\n    else if(anno <= 2499){\r\n        m = 25;\r\n        n = 1;\r\n    }\r\n\r\n    a = anno% 19;\r\n    b = anno% 4;\r\n    c = anno% 7;\r\n\r\n    d = ((19 * a) + m) % 30;\r\n    e = ((2*b) + (4*c) + (6*d) + n) % 7;\r\n\r\n\r\n\r\n    if ((d + e) < 10){\r\n        giorno = d + e + 22;\r\n        mese = 3;\r\n    }\r\n    else {\r\n        giorno = d + e - 9;\r\n        mese = 4;\r\n    }\r\n\r\n    if (Math.floor(giorno) == 26 && Math.floor(mese) == 4){\r\n        giorno = 19;\r\n        mese = 4;\r\n    }\r\n\r\n    if (Math.floor(giorno) == 25 && Math.floor(mese) == 4 && d == 20 && e == 6 && a > 10){\r\n        giorno = 10;\r\n        mese = 4;\r\n    }\r\n    \r\n    \r\n    let dataReturn = new Date(anno, Math.floor(mese-1), Math.floor(giorno));\r\n    return dataReturn;\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Con la data passata calcola una data di inizio/fine della settimana \r\n * o del mese in cui myDate è contenuta\r\n * @param myDate Data da utilizzare\r\n * @param based Il calcolo è effettuata per la settimana o il mese\r\n * @param where Si vuole la data di inizio o fine\r\n */\r\nstatic getStartEndDate(myDate: Date, based:'week'|'month', where:'start'|'end'): Date {\r\n    let resultDate: Date;\r\n\r\n    if (myDate) {\r\n        if (where == 'start') {\r\n\r\n            resultDate = moment(myDate).startOf(based).toDate();\r\n        }\r\n        else if (where == 'end') {\r\n            resultDate = moment(myDate).endOf(based).toDate();\r\n        }\r\n    }\r\n\r\n    return resultDate;\r\n}\r\n\r\n\r\n/**\r\n * Crea una Data senza l'orario\r\n * @param myDateTime \r\n */\r\nstatic getOnlyDate(myDateTime: Date): Date {\r\n    let dateResult:Date;\r\n\r\n    dateResult = new Date(moment(myDateTime).format('YYYY-MM-DD'));\r\n\r\n    return dateResult;\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nexport enum TypePeriod {\r\n    years           = 'y',\r\n    quarters        = 'Q',\r\n    months          = 'M',\r\n    weeks           = 'w',\r\n    days\t        ='d',\r\n    hours\t        ='h',\r\n    minutes\t        ='m',\r\n    seconds\t        ='s',\r\n    milliseconds\t='ms'\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { Sport } from '../models/sport.model';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SportService {\r\n\r\n  private _listSport = new BehaviorSubject<Sport[]>([]);\r\n  private _loaded: boolean; //Sport sono stati richiesti al server e sono caricati in memoria\r\n  private _listLocationSport = new BehaviorSubject<Sport[]>([]);\r\n\r\n  //Lista di tutti gli sport presenti in Gouego\r\n  get listSport() {\r\n    return this._listSport.asObservable();\r\n  }\r\n\r\n  /**\r\n  * Ritorna la lista non in modalità Observable\r\n  */\r\n  get actualListSport() {\r\n    return this._listSport.getValue();\r\n  }\r\n\r\n  //Lista degli sport presenti in una location\r\n  get listLocationSport() {\r\n    return this._listLocationSport.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private apiService: ApicallService) { \r\n    this._loaded = false;\r\n  }\r\n\r\n  /**\r\n   * Richiede al server l'elenco delle Attività\r\n   * @param config Parametri configurazione chiamata\r\n   */\r\n  request(config: StartConfiguration, withLivelli?:boolean) {\r\n    return new Promise((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n     \r\n      const doObject = 'SPORT';\r\n\r\n      //TODO: Non mi piace molto il modo\r\n      //Nei Parametri imposto il LivelloAutorizzazione\r\n      let myParams = new HttpParams().set('LivelloAutorizzazione','0');\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      if (withLivelli) {\r\n        //Richiedo di caricare anche i livelli\r\n        myHeaders = myHeaders.append('only-level','-1');\r\n      }\r\n  \r\n      /*Non ho ancora caricato dal server*/\r\n      if (!this._loaded) {\r\n        this.apiService\r\n          .httpGet(myUrl, myHeaders, myParams)\r\n          .pipe(map(data => {\r\n            return data.SPORT\r\n          }))\r\n          .subscribe(resultData => {\r\n    \r\n            //Arrivati dal server\r\n            this._loaded = true;\r\n            if (resultData) {\r\n\r\n              for (let index = 0; index < resultData.length; index++) {\r\n                const element = resultData[index];\r\n                let newSport = new Sport();\r\n                newSport.setJSONProperty(element);\r\n                this.add2ListSport(newSport);                \r\n              }\r\n              resolve(this._listSport);\r\n\r\n            }\r\n            else {\r\n              reject('No data Attività retrieved');\r\n            }\r\n            \r\n          }, error=>{\r\n            reject(error);\r\n          });\r\n      }\r\n      else {\r\n        //Già caricati dal server\r\n      }\r\n      \r\n    })\r\n\r\n  }\r\n\r\n\r\n  //Aggiunge una attivita alla lista globale\r\n  add2ListSport(objSport: Sport) {\r\n\r\n    this.listSport\r\n      .pipe(take(1))\r\n      .subscribe( collSport => {\r\n        this._listSport.next( collSport.concat(objSport))\r\n      });\r\n    \r\n  }\r\n\r\n\r\n  /**\r\n   * Richiede le attività praticate in una location\r\n   * Sottoscriversi all'oggetto listLocationSport per ricevere i risultati\r\n   * \r\n   * @param config Dati configurazione\r\n   * @param idLocation Location\r\n   */\r\n  requestLocationSport(config: StartConfiguration, idLocation: string) {\r\n    return new Promise((resolve, reject)=>{\r\n      \r\n        // const myHeaders = new HttpHeaders({'Content-type':'text/plain', \r\n        //                   'X-HTTP-Method-Override':'getSportLocation', \r\n        //                   'appid':config.appId,\r\n        //                   'child-level': '1'\r\n        //                   });\r\n\r\n      let myHeaders = config.getHttpHeaders();\r\n      const myParams = new HttpParams().set('idLocation', idLocation);\r\n      const doObject = 'SPORT';\r\n      myHeaders = myHeaders.append('X-HTTP-Method-Override','getSportLocation');\r\n      myHeaders = myHeaders.append('child-level', '1');\r\n\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n\r\n      //Svuoto gli attuali\r\n      this._listLocationSport.next([]);\r\n\r\n      // Effettuo la chiamata\r\n      return this.apiService\r\n                .httpGet(myUrl, myHeaders, myParams)\r\n                .pipe(map(data => {\r\n                        return data.SPORT\r\n                      }))\r\n                .subscribe(resultData => {\r\n\r\n                      resultData.forEach(element => {\r\n        \r\n                        let newSport = new Sport();\r\n                        newSport.setJSONProperty(element);\r\n                        this.add2ListLocationSport(newSport);\r\n                        \r\n                      });\r\n                      resolve(this._listLocationSport);\r\n                }, error=>{\r\n                  reject(error);\r\n                });\r\n    })\r\n    }\r\n\r\n\r\n    //Aggiunge una attivita alla lista globale\r\n    add2ListLocationSport(objSport: Sport) {\r\n\r\n      this.listLocationSport\r\n            .pipe(take(1))\r\n            .subscribe( collSport => {\r\n                  this._listLocationSport.next( collSport.concat(objSport))\r\n            });\r\n      \r\n    }\r\n\r\n\r\n    /**\r\n   * Dato l'id di uno sport, restituisce la stringa dell'icona associata\r\n   * @param idSport l'id dello sport\r\n   */\r\n  getIconaSport(idSport: string){\r\n    let listSport = this._listSport.getValue();\r\n    let icona='';\r\n    let docSport: Sport;\r\n\r\n    if(listSport){\r\n\r\n      //Cerco lo Sport nella collection\r\n      docSport = listSport.find(el => {\r\n        return el.ID == idSport\r\n      });\r\n\r\n      //Sport trovato applico l'icona\r\n      if (!docSport) {\r\n        //Ne creo uno fasullo\r\n        docSport = new Sport();\r\n      }\r\n\r\n      //Ricavo l'icona\r\n      icona = docSport.htmlIconHex\r\n      \r\n    }\r\n    return icona;\r\n  }\r\n\r\n}\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Mansione } from './valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\n\r\n\r\nexport class Account extends IDDocument {\r\n\r\n    IDREF: string;\r\n    COGNOME: string;\r\n    NOME: string;\r\n    NOMINATIVO: string;\r\n    EMAIL: string;\r\n    WEBLOGIN: string;\r\n    SHAPASSWORD: string;\r\n    INPUTPASSWORD: string;\r\n    MOBILENUMBER: string;\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    RUOLO: number;\r\n    MANSIONE: Mansione;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDREF',\r\n                        'COGNOME',\r\n                        'NOME',\r\n                        'NOMINATIVO',\r\n                        'EMAIL',\r\n                        'WEBLOGIN',\r\n                        'SHAPASSWORD',\r\n                        'INPUTPASSWORD',\r\n                        'MOBILENUMBER',\r\n                        'IDAREAOPERATIVA',\r\n                        'IDLOCATION'\r\n                        ];\r\n        let arNumber = ['RUOLO','MANSIONE'];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'Account';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'ACCOUNT';\r\n        objDescriptor.describeField  = 'NOMINATIVO';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        return objDescriptor;\r\n    }\r\n    \r\n}\r\n","var map = {\n\t\"./pwa-action-sheet.entry.js\": [\n\t\t\"jDxf\",\n\t\t43\n\t],\n\t\"./pwa-camera-modal-instance.entry.js\": [\n\t\t\"37vE\",\n\t\t44\n\t],\n\t\"./pwa-camera-modal.entry.js\": [\n\t\t\"cJxf\",\n\t\t45\n\t],\n\t\"./pwa-camera.entry.js\": [\n\t\t\"eGHz\",\n\t\t46\n\t],\n\t\"./pwa-toast.entry.js\": [\n\t\t\"fHjd\",\n\t\t47\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"KwcL\";\nmodule.exports = webpackAsyncContext;","import { SlotDay } from './slotday.model';\r\nimport { ValueList, Giorni } from '../valuelist.model';\r\n\r\nexport class SlotWeek {\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    SLOTMINUTES: number; //Durata in minuti per lo Slot standard nella location\r\n\r\n    SLOTDAYS: SlotDay[];\r\n\r\n    constructor() {\r\n        this.SLOTDAYS = [];\r\n        this.SLOTMINUTES = 30;\r\n    }\r\n\r\n    /**\r\n     * Creazione dell'array SlotDay con tutte le giornate\r\n     */\r\n    initDays() {\r\n        let arGiorni = ValueList.getArray(Giorni);\r\n\r\n        this.SLOTDAYS = [];\r\n\r\n        arGiorni.forEach(element => {\r\n            let daySlot = new SlotDay();\r\n            //Imposto il giorno della settimana\r\n            daySlot.WEEKDAY = element.value;\r\n            this.SLOTDAYS.push(daySlot)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Ritorna uno slotday presente nell'array\r\n     * @param weekDayRequest WeekDay richiesto\r\n     */\r\n    getSlotDay(weekDayRequest: number) {\r\n        return this.SLOTDAYS.find(element => {\r\n            return element.WEEKDAY == weekDayRequest\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ritorna una copia di uno SlotDay \r\n     * \r\n     * @param dataGiorno Data richiesta\r\n     * @param changeTimeDate Se impostata a TRUE viene cambiata la data presente negli slottime impostando la data Giorno\r\n     */\r\n    getCopySlotDay(dataGiorno: Date, changeTimeDate?: boolean): SlotDay {\r\n\r\n        let weekDay = dataGiorno.getDay();\r\n        let myCopySlot: SlotDay;\r\n        let mySlot: SlotDay;\r\n\r\n        mySlot = this.SLOTDAYS.find(element => {\r\n                        return element.WEEKDAY == weekDay\r\n                        });\r\n        if (mySlot) {\r\n            //Creo un nuovo oggetto e copio tutte le proprietà\r\n            myCopySlot = new SlotDay();\r\n            myCopySlot.copyFrom(mySlot);    \r\n\r\n            /* TUTTI GLI SLOTTIMES DEVONO RICEVERE LA STESSA GIORNATA */\r\n            if (changeTimeDate) {\r\n                myCopySlot.changeDateInSlotTime(dataGiorno);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return myCopySlot;\r\n                \r\n    }\r\n\r\n    /**\r\n     * Crea per ogni giornata, tutti gli slot time\r\n     */\r\n    createSlotTimeDays() {\r\n\r\n        //Ciclo sui giorni presenti\r\n        this.SLOTDAYS.forEach(element => {\r\n            element.createSlotTime(this.SLOTMINUTES);\r\n        });\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, from } from 'rxjs';\r\nimport { OccupazioneCampi } from '../models/occupazionecampi.model';\r\nimport { IDDocument, OperatorCondition } from '../library/models/iddocument.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { SettoreAttivita } from '../models/valuelist.model';\r\n\r\nimport { RequestParams } from '../library/models/requestParams.model';\r\nimport { PrenotazionePianificazione } from '../models/prenotazionepianificazione.model';\r\nimport { Prenotazione } from '../models/prenotazione.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OccupazioniService {\r\n\r\n  private _listOccupazioni = new BehaviorSubject<OccupazioneCampi[]>([]);\r\n  \r\n\r\n  get listOccupazioni() {\r\n    return this._listOccupazioni.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private docStructureService: DocstructureService) { }\r\n\r\n  /**\r\n   * Richiede la lista di occupazione campi\r\n   * Senza filtro precedente, imposto la data Inizio da oggi\r\n   * @param filterDocument \r\n   * @param decodeAll \r\n   */\r\n  request(idArea: string, \r\n          idLocation?: string,\r\n          params?: RequestParams,\r\n          top: number = undefined,\r\n          fromTime: Date = undefined\r\n          ):Promise<OccupazioneCampi[]> {\r\n    let adesso = new Date();\r\n\r\n    return new Promise<OccupazioneCampi[]>((resolve, reject) => {\r\n\r\n      let filterTipo = [];\r\n      //Quando voglio mettere in OR dei valori su un campo, creo un array \r\n      //e lo passo alla funzione addFilterCondition\r\n      filterTipo.push(SettoreAttivita.settoreCorso);\r\n      filterTipo.push(SettoreAttivita.settorePrenotazione);\r\n      \r\n      let filterDocument = new OccupazioneCampi(true);\r\n      filterDocument.DATAINIZIO = adesso;\r\n      // filterDocument.ORAINIZIO = adesso;\r\n\r\n      filterDocument.IDAREA = idArea;\r\n      //Aggiungo la condizione speciale per TIPO con dei valori in OR\r\n      filterDocument.addFilterCondition(OperatorCondition.uguale, 'TIPO', filterTipo);\r\n\r\n      if(idLocation){\r\n        filterDocument.IDLOCATION = idLocation;\r\n      }\r\n\r\n      if(fromTime){\r\n        filterDocument.ORAFINE = fromTime\r\n        filterDocument.addFilterCondition(OperatorCondition.maggiore, 'ORAFINE');\r\n\r\n      }\r\n\r\n     \r\n     \r\n\r\n      if (!params) {\r\n        params = new RequestParams();\r\n        params.decode.active = true;\r\n        params.top = top;\r\n      }\r\n\r\n      this.docStructureService\r\n            .requestNew(filterDocument, params)\r\n            .then(genericListElements => {\r\n\r\n              let listElements: OccupazioneCampi[] = genericListElements;\r\n              listElements.sort((a, b) => {\r\n              if(a.ORAINIZIO > b.ORAINIZIO){\r\n                return 1;\r\n              }\r\n              else if(a.ORAINIZIO < b.ORAINIZIO){\r\n                return -1;\r\n              }\r\n              else{\r\n                return 0;\r\n              }\r\n            })\r\n\r\n              //gli elementi sono ordinati, ma devon controllare che ne siano arrivati davvero il numero giusto (INDE FA CAGARE!!!)\r\n              if(top && listElements.length > top){\r\n                //devo tagliare \r\n                listElements.splice(top)\r\n              }\r\n\r\n              //Riemetto Observable\r\n              this._listOccupazioni.next(listElements);\r\n\r\n              //Chiudo la promise\r\n              resolve(listElements);\r\n\r\n            })\r\n            .catch( error => {\r\n              reject(error);\r\n            })\r\n\r\n    });\r\n      \r\n  }\r\n\r\n  /**\r\n   * Richiede i dati occupazione con filtri\r\n   * @param filter Filtro di caricamento\r\n   * @param params Parametri \r\n   * @returns \r\n   */\r\n  requestByFilter(filter: OccupazioneCampi, params?: RequestParams):Promise<OccupazioneCampi[]>{\r\n    return new Promise((resolve, reject) => {\r\n      let myFilter: IDDocument;\r\n      let myParams: RequestParams;\r\n      if(filter){\r\n        myFilter = filter;\r\n        if(params){\r\n          myParams = params;\r\n        }\r\n        else{\r\n          myParams = new RequestParams();\r\n          myParams.decode.active = true;\r\n        }\r\n\r\n        //abbiamo tutto, possiamo fare la richiesta\r\n        this.docStructureService.requestNew(myFilter, myParams)\r\n        .then((genericListElements: any) => {\r\n          let listElements: OccupazioneCampi[] = genericListElements;\r\n          listElements.sort((a, b) => {\r\n            if(a.ORAINIZIO > b.ORAINIZIO){\r\n              return 1;\r\n            }\r\n            else if(a.ORAINIZIO < b.ORAINIZIO){\r\n              return -1;\r\n            }\r\n            else{\r\n              return 0;\r\n            }\r\n          })\r\n\r\n          let arPromises: Promise<IDDocument>[] = [];\r\n          listElements.forEach(elOccupazione => {\r\n            arPromises.push(this.docStructureService.getRelDoc(elOccupazione, ['IDREF'], 1, elOccupazione));\r\n          })\r\n\r\n          Promise.all(arPromises)\r\n          .then(() => {\r\n            resolve (listElements);\r\n          })\r\n          .catch(error => {\r\n            reject (error);\r\n          })\r\n        })\r\n        .catch(error => {\r\n          reject (error);\r\n        })\r\n      }\r\n      else{\r\n        reject('Documento filtro non definito');\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Richiede una singola occupazione cercando per id, se il secondo parametro è true, richiede anche il docprenotazione collegato e lo inserisce nel repository\r\n   * il docprenotazione viene inoltre decodificato, e contiene l'elenco delle pianificazioni; anch'esse decodificate\r\n   * @param idOccupazione id da cercare\r\n   * @param requestRelatedReservation indica se richiedere anche il documento prenotazione collegato e inserirlo nel docrepository\r\n   */\r\n  requestById(idOccupazione: string, requestRelatedReservation = false): Promise<OccupazioneCampi>{\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n      //filtro e parametri\r\n      let myFilter = new OccupazioneCampi(true);\r\n      let myParams = new RequestParams();\r\n\r\n      //controllo di avere un id\r\n      if(idOccupazione && idOccupazione.length > 0){\r\n        //preparo i parametri\r\n        myFilter.ID = idOccupazione;\r\n        myParams.decode.active = true;\r\n\r\n        //faccio la richiesta\r\n        this.docStructureService.requestNew(myFilter, myParams)\r\n\r\n        .then((resultList: OccupazioneCampi[]) => {\r\n          //se ho ottenuto qualcosa, lo ritorno al prossimo .then\r\n          if (resultList[0]){\r\n            return(resultList[0]);\r\n          }\r\n          //altrimenti rigetto\r\n          else{\r\n            reject('Nessuna occupazione presente con id indicato');\r\n          }\r\n        })\r\n\r\n        .then((elOccupazione: OccupazioneCampi) => {\r\n          //adesso che ho l'elemento, se mi è stato chiesto recupero il docprenotazione\r\n          if(requestRelatedReservation){\r\n            this.docStructureService.getRelDoc(elOccupazione, ['IDREF'], 3, elOccupazione)\r\n            .then(() => {\r\n              //@ts-ignore\r\n              let docPrenotazione: Prenotazione = elOccupazione.getDocInRepository(elOccupazione.IDREF)\r\n              //ora devo decodificare la prenotazione e le pianificazioni\r\n\r\n              let reqForeign = PrenotazionePianificazione.getReqForeignKeys();\r\n\r\n              Promise.all([\r\n                (this.docStructureService.decodeAll(docPrenotazione, true)),\r\n                (this.docStructureService.decodeCollection(docPrenotazione.PRENOTAZIONEPIANIFICAZIONE, reqForeign))\r\n\r\n               ])\r\n\r\n              \r\n              .then(() => {\r\n                resolve(elOccupazione);\r\n              })\r\n            })\r\n            .catch(error => {reject (error);})\r\n          }\r\n          else{\r\n            resolve (elOccupazione);\r\n          }\r\n        })\r\n\r\n        .catch(error => {\r\n          reject(error);\r\n        })\r\n      }\r\n\r\n\r\n      else{\r\n        reject('Id non fornito');\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Lista completa di occupazione\r\n   * @param collOccupazione Lista completa di occupazione\r\n   */\r\n  public createShortList(collOccupazione: OccupazioneCampi[]) {\r\n    let shortList: OccupazioneCampi[];\r\n    if (collOccupazione && collOccupazione.length != 0) {\r\n\r\n      shortList = collOccupazione.filter((element,index) => {\r\n        return (index < 5);\r\n      });\r\n\r\n    }\r\n    else {\r\n      shortList = [];\r\n    }\r\n    \r\n  }\r\n}\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class LocationImage extends IDDocument {\r\n    COVERIMAGE: boolean;\r\n    IMAGEURL: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IMAGEURL'];\r\n    let arNumber = [];\r\n    let arBoolean = ['COVERIMAGE'];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'LocationImage';\r\n    objDescriptor.classWebApiName = 'LOCATIONIMAGE';\r\n    objDescriptor.doRemote = true;\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n    \r\n    \r\n    \r\n    return objDescriptor;\r\n}    \r\n\r\n\r\n  \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { SettoreAttivita, StatoCorso } from './valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { RequestForeign } from '../library/models/requestParams.model';\r\n\r\nexport class Impegno extends IDDocument {\r\n\r\n    IDREFER:        string; //ID Riferimento\r\n    SETTORE:        SettoreAttivita;\r\n    DENOMINAZIONE:  string;\r\n    IDAREAOPERATIVA:string;\r\n    IDLOCATION:     string;\r\n    IDCAMPO:        string;\r\n    IDSPORT:        string; //Sport - Attività di riferimento\r\n    DATAORAINIZIO:  Date;\r\n    DATAORAFINE:    Date;\r\n    IDUTENTE:       string;\r\n    STATO:          StatoCorso;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n      /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDREFER',\r\n                    'DENOMINAZIONE',\r\n                    'IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'IDCAMPO',\r\n                    'IDSPORT',\r\n                    'IDUTENTE'];\r\n    let arNumber = ['SETTORE'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'Impegno';\r\n    objDescriptor.classWebApiName = 'IMPEGNO';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n    objDescriptor.setRelation('IDCAMPO','Campo');\r\n    objDescriptor.setRelation('IDSPORT','Sport');\r\n    objDescriptor.setRelation('IDUTENTE','Utente');\r\n    \r\n    return objDescriptor;\r\n}\r\n\r\nstatic getReqForeignKeys(): RequestForeign[] {\r\n    let arRequest: RequestForeign[] = [];\r\n    let objForeign: RequestForeign;\r\n\r\n    objForeign = new RequestForeign('IDAREAOPERATIVA');\r\n    arRequest.push(objForeign);\r\n\r\n    objForeign = new RequestForeign('IDSPORT');\r\n    arRequest.push(objForeign);\r\n\r\n    objForeign = new RequestForeign('IDCAMPO');\r\n    arRequest.push(objForeign);\r\n\r\n    objForeign = new RequestForeign('IDLOCATION');\r\n    objForeign.addDescribeField('DENOMINAZIONE');\r\n    objForeign.addDescribeField('INDIRIZZO');\r\n    \r\n\r\n    arRequest.push(objForeign);\r\n\r\n    return arRequest;\r\n}\r\n       \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class UtenteLivello extends IDDocument {\r\n    IDSPORT: string;\r\n    IDLIVELLO: string;\r\n    DESCRSPORT: string;\r\n    DESCRLIVELLO: string;\r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDSPORT',\r\n                        'IDLIVELLO',\r\n                        'DESCRSPORT',\r\n                        'DESCRLIVELLO'\r\n                        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        let arCollection = [];\r\n\r\n        objDescriptor.className = 'UtenteLivello';\r\n        objDescriptor.classWebApiName = 'UTENTELIVELLO';\r\n        objDescriptor.doRemote = true;\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n        \r\n        \r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDLIVELLO','Livello');\r\n\r\n        \r\n\r\n        return objDescriptor;\r\n    }    \r\n    /**\r\n     * Imposta le proprietà\r\n     * @param data JSON Ricevere\r\n     */\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n    }\r\n\r\n  \r\n\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { PaymentChannel, PaymentEnvironment, PaymentMode, SettorePagamentiAttivita, ValueList } from './valuelist.model';\r\n\r\n\r\nexport class AreaPaymentSetting extends IDDocument {\r\n    \r\n    IDAREAOPERATIVA: string;\r\n    TIPOPAYMENT: PaymentChannel;\r\n    PPENVIRONMENT: PaymentEnvironment;\r\n    PPACCOUNT: string;\r\n    PPCLIENTIDSANDBOX: string;\r\n    PPCLIENTIDPRODUCTION: string;\r\n    SETTORI: string;\r\n    STPUBLICKEY: string;\r\n    STPUBLICKEYTEST: string;\r\n    STENVIRONMENT: PaymentEnvironment;\r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n      super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n      let objDescriptor = new Descriptor();\r\n      let arString = ['IDAREAOPERATIVA',\r\n                      'PPACCOUNT',\r\n                      'PPCLIENTIDSANDBOX',\r\n                      'PPCLIENTIDPRODUCTION',\r\n                      'PPCLIENTSECRET',\r\n                      'SETTORI',\r\n                      'STPUBLICKEY',\r\n                      'STPUBLICKEYTEST'\r\n                    ];\r\n      let arNumber = ['TIPOPAYMENT','PPENVIRONMENT','STENVIRONMENT'];\r\n      let arBoolean = [];\r\n      let arDate = [];\r\n      let arDateTime =[];\r\n      let arTime = [];\r\n      let arCollection = [];\r\n\r\n      objDescriptor.className = 'AreaPaymentSetting';\r\n      objDescriptor.doRemote = true;\r\n      objDescriptor.classWebApiName = 'AREAPAYMENTSETTING';\r\n      objDescriptor.describeField = 'TIPOPAYMENT';\r\n\r\n      objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n      objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n      objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n      objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n      objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n      objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n      objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n      objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    \r\n\r\n\r\n      return objDescriptor;\r\n  }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Sovrascrive il metodo IDDOcument, lo richiama e sistema le collection\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n      super.setJSONProperty(data);\r\n\r\n      this.setOriginal();\r\n    }\r\n\r\n\r\n    /**\r\n     * Dato un Settore di pagamento, ritorna TRUE se il Setting lo contempla\r\n     * @param settore Settore di pagamento\r\n     */\r\n    isFor(settore:SettorePagamentiAttivita):boolean {\r\n      let arSettori = [];\r\n      let mySettore = settore + '';\r\n      let incluso = false;\r\n      if (this.SETTORI && this.SETTORI.length != 0) {\r\n        arSettori = this.SETTORI.split(';');\r\n        if (arSettori.includes(mySettore)) {\r\n          incluso = true;\r\n        }\r\n      }\r\n\r\n      return incluso;\r\n    }\r\n\r\n\r\n   /**\r\n   * Ritorna una Icon a seconda del channel\r\n   */\r\n   get icon() {\r\n      let icona = '';\r\n      switch (this.TIPOPAYMENT) {\r\n\r\n        case PaymentChannel.applePay:\r\n          icona = 'logo-apple';\r\n          break;\r\n\r\n        case PaymentChannel.bonifico:\r\n          icona = 'document-text-outline';\r\n          break;\r\n\r\n        case PaymentChannel.googlePay:\r\n          icona = 'logo-google';\r\n          break;\r\n\r\n        case PaymentChannel.stripe:\r\n          icona = 'card-outline';\r\n          break;\r\n            \r\n        case PaymentChannel.paypal:\r\n            icona = 'logo-paypal';\r\n            break;\r\n        \r\n        case PaymentChannel.onSite:\r\n            icona = 'cash-outline';\r\n            break;   \r\n          \r\n          default:\r\n              break;\r\n      }\r\n\r\n      return icona;\r\n    }\r\n\r\n   /**\r\n   * Ritorna una Label da mostrare in interfaccia\r\n   */\r\n    get label() {\r\n      let etichetta = '';\r\n\r\n      switch (this.TIPOPAYMENT) {\r\n\r\n        case PaymentChannel.applePay:\r\n          etichetta = 'Apple Pay';\r\n          break;\r\n\r\n        case PaymentChannel.bonifico:\r\n          etichetta = 'Bonifico';\r\n          break;\r\n\r\n        case PaymentChannel.googlePay:\r\n          etichetta = 'GPay';\r\n          break;\r\n\r\n        case PaymentChannel.stripe:\r\n          etichetta = 'Carta di credito';\r\n          break;\r\n            \r\n        case PaymentChannel.paypal:\r\n            etichetta = 'Paypal';\r\n            break;\r\n        \r\n        case PaymentChannel.onSite:\r\n            etichetta = 'Paga in struttura';\r\n            break;   \r\n          \r\n          default:\r\n              break;\r\n      }\r\n\r\n      return etichetta;\r\n    }    \r\n\r\n    //E' possibile pagare con funzionalità dentro all'App\r\n    get paymentInApp():boolean {\r\n      let inApp: boolean = false;\r\n\r\n      switch (this.TIPOPAYMENT) {\r\n\r\n          case PaymentChannel.onSite:\r\n              inApp = false;\r\n              break;\r\n\r\n          case PaymentChannel.paypal:\r\n              inApp = true;\r\n              break;\r\n\r\n          case PaymentChannel.bonifico:\r\n              inApp = false;\r\n              break;\r\n\r\n          case PaymentChannel.applePay:\r\n              inApp = false;\r\n              break;\r\n\r\n          case PaymentChannel.googlePay:\r\n              inApp = false;\r\n              break;\r\n\r\n          case PaymentChannel.stripe:\r\n              inApp = false;\r\n            break;\r\n\r\n          default:\r\n              break;\r\n      }\r\n\r\n      return inApp;\r\n    }    \r\n\r\n\r\n    /**\r\n     * Imposta al massimo 3 valori di ritorno dal enum PaymentMode\r\n     * pagaStruttura se presente una voce onSite\r\n     * pagaBonifico se presente una voce bonifico\r\n     * pagaAdesso se presente un pagamento elettronico\r\n     * \r\n     * @param arPaymentSettings Elenco Configurazione pagamenti \r\n     */\r\n    static prepareArPaymentMode(arPaymentSettings: AreaPaymentSetting[]): ValueList[] {\r\n      let onSite = false;\r\n      let withBonifico = false;\r\n      let electronicPay = false;\r\n      let myElList: ValueList;\r\n\r\n      let arReturn: ValueList[] = [];\r\n\r\n      if (arPaymentSettings) {\r\n\r\n        arPaymentSettings.forEach(element => {\r\n            switch (element.TIPOPAYMENT) {\r\n              case PaymentChannel.onSite:\r\n                if (!onSite) {\r\n                  myElList = new ValueList(PaymentMode.pagaStruttura, 'Paga in struttura');\r\n                  myElList.itemIcon = 'cash-outline';\r\n                  arReturn.push(myElList);\r\n                }\r\n                onSite = true;\r\n              break;\r\n\r\n              case PaymentChannel.bonifico:\r\n                if (!withBonifico) {\r\n                  myElList = new ValueList(PaymentMode.pagaBonifico, 'Effettua un bonifico');\r\n                  myElList.itemIcon = 'document-text-outline';\r\n                  arReturn.push(myElList);\r\n                }\r\n                withBonifico = true;\r\n              break;\r\n            \r\n              case PaymentChannel.applePay:\r\n              case PaymentChannel.googlePay:\r\n              case PaymentChannel.paypal:\r\n              case PaymentChannel.stripe:\r\n                if (!electronicPay) {\r\n                  myElList = new ValueList(PaymentMode.pagaAdesso, 'Paga adesso');\r\n                  myElList.itemIcon = 'card-outline';\r\n                  arReturn.push(myElList);\r\n                }\r\n                electronicPay = true;\r\n\r\n              break;\r\n\r\n              default:\r\n                break;\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n      }\r\n\r\n      return arReturn;\r\n      \r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport * as moment from \"moment\";\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\n\r\nimport { ApicallService } from './apicall.service';\r\n\r\nimport { SlotDay } from '../models/imdb/slotday.model';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { Location } from '../models/location.model';\r\nimport { Campo } from '../models/campo.model';\r\nimport { DateSlotLock } from '../models/dateslotlock.model';\r\nimport { SlotTime } from '../models/imdb/slottime.model';\r\nimport { StatoSlot } from '../models/valuelist.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { LogApp } from '../models/log.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SlotoccupazioneService {\r\n\r\n  gapHour: number; //Se lo slot e l'ora attuale hanno una differenza inferiore al gapHour non è prenotabile\r\n  gapMinutes: number; //Minuti in arrivo dalla location\r\n  _docOccupazione = new BehaviorSubject<SlotDay>(new SlotDay());\r\n\r\n  get docOccupazione() {\r\n    return this._docOccupazione.asObservable();\r\n  }\r\n\r\n  constructor(private apiCall: ApicallService) {\r\n    this.gapHour = 0;\r\n    this.gapMinutes = 0;\r\n   }\r\n\r\n   /**\r\n    * Passando un tempo in minuti imposta il Gap da utilizzare\r\n    * @param minuti Minuti da impostare\r\n    */\r\n   setGapMinutes(minuti: number) {\r\n    if (minuti && minuti !== 0) {\r\n      this.gapMinutes = minuti;\r\n      this.gapHour = (minuti/60);\r\n    }\r\n    else {\r\n      this.gapMinutes = 0;\r\n      this.gapHour = 0;\r\n    }\r\n   }\r\n\r\n  /**\r\n   * Prende in ingresso il template Slot Day, richiede al server i soli dati di occupazione di un determinato campo per un determinato giorno,\r\n   * sistema il template con le occupazioni e lo riporta come risultato Observable\r\n   * \r\n   * \r\n   * @param config Dati configurazione\r\n   * @param docLocation Location richiesta\r\n   * @param docCampo Campo richiesto\r\n   * @param dataGiorno Giorno richiesto\r\n   */\r\n  request(config: StartConfiguration,\r\n          templateSlotDay: SlotDay,\r\n          docLocation: Location, \r\n          docCampo: Campo, \r\n          dataGiorno: Date) {\r\n    return new Promise<void>((resolve, reject)=>{\r\n\r\n      let myHeaders = config.getHttpHeaders();\r\n      const doObject = 'CAMPO';\r\n      const strData = moment(dataGiorno).format('YYYY-MM-DD');\r\n      myHeaders = myHeaders.append('X-HTTP-Method-Override','GETDATESLOTLOCK');\r\n      \r\n      if (docLocation && docCampo)  {\r\n        \r\n        let myParams = new HttpParams().set('guidArea', docLocation.IDAREAOPERATIVA);\r\n        myParams = myParams.append('guidLocation', docLocation.ID);\r\n        myParams = myParams.append('guidCampo', docCampo.ID);\r\n        myParams = myParams.append('dataGiorno',strData);\r\n    \r\n        let myUrl = config.urlBase + '/' + doObject;\r\n    \r\n        this.apiCall\r\n            .httpGet(myUrl,myHeaders,myParams)\r\n            .subscribe(resultData => {\r\n  \r\n              //Reimposto il Gap dei minuti\r\n              this.setGapMinutes(docLocation.MINUTIPREAVVISOPRENOTAZIONE);\r\n              \r\n              //Ora cerco di sincronizzare il template del giorno con le occupazioni arrivate\r\n              this.syncResult(resultData, templateSlotDay);\r\n              resolve();\r\n              \r\n            }, error=>{\r\n              reject(error);\r\n            });\r\n      }\r\n      else {\r\n  \r\n        LogApp.consoleLog('Dati Occupazione: RICHIESTA FAILED');\r\n        LogApp.consoleLog('Manca' + (!docLocation?'Location':'') + ' ' + (!docCampo?'Campo':''));\r\n  \r\n        this._docOccupazione.next(templateSlotDay);\r\n        reject();\r\n        \r\n      }\r\n    })\r\n\r\n  \r\n  } \r\n  \r\n  /**\r\n   * \r\n   * @param resultDataServer Result in arrivo dal server\r\n   * @param templateSlot Template Slot in arrivo dalla videata\r\n   */\r\n  private syncResult(resultDataServer: any, templateSlot: SlotDay) {\r\n    //Converto il risultato in un oggetto reale\r\n    let srvResult = new DateSlotLock();\r\n    let nowMoment: any;\r\n    let isSlotOccupato: boolean;\r\n\r\n    srvResult.setJSONProperty(resultDataServer);\r\n\r\n\r\n    /**Informazioni occupazioni ricevute */\r\n    if (srvResult.RESULT) {\r\n      templateSlot._TEMPLATELOCK = false; //Sblocco il template in quanto son arrivati i risultati\r\n      templateSlot.APERTOCHIUSO = srvResult.APERTOCHIUSO;\r\n\r\n\r\n        /** Ciclo sugli Slot Orari */\r\n        templateSlot.SLOTTIMES.forEach(elSlotTime => {\r\n          //TUTTO CHIUSO\r\n          if (!templateSlot.APERTOCHIUSO) {\r\n            //Giornata Chiusa\r\n            elSlotTime.STATO = StatoSlot.chiuso;\r\n          }\r\n          else {\r\n\r\n            //Giornata Aperta\r\n            //Lo Slot ha già una impostazione da Template\r\n            //Nel caso da template sia CHIUSO non lo cambio\r\n\r\n            if (elSlotTime.STATO !== StatoSlot.chiuso) {\r\n\r\n              //Ora Attuale\r\n              nowMoment = moment();\r\n\r\n              //Lo Slot è nel passato - lo imposto a chiuso\r\n              if (moment(elSlotTime.START).isSameOrBefore(nowMoment)) {\r\n                  \r\n                //Lo Slot non è disponibile\r\n                elSlotTime.STATO = StatoSlot.chiuso;\r\n              }\r\n              else {\r\n                //Slot è nel futuro\r\n                \r\n                //Controllo se lo Slot è occupato\r\n                isSlotOccupato = this.slotInServerSlotLock(elSlotTime, srvResult);\r\n\r\n                if (isSlotOccupato) {\r\n                  //E' tra gli slot occupati\r\n                  elSlotTime.STATO = StatoSlot.occupato;\r\n                }\r\n                else {\r\n                  //Sembra libero lo SLOT ma controlliamo se c'e' un GAP di Preavviso\r\n                  if (this.gapHour != 0) {\r\n\r\n                    let disponibileDa = nowMoment.add(this.gapHour, 'hours');\r\n\r\n                    //Essendo dopo il preavviso lo segno come libero\r\n                    if (moment(elSlotTime.START).isAfter(disponibileDa)) {\r\n                      elSlotTime.STATO = StatoSlot.libero;\r\n                    }\r\n                    else {\r\n                      //Contattare in sede per la disponibilità\r\n                      elSlotTime.STATO = StatoSlot.contattare;\r\n                    }\r\n\r\n                  }\r\n                  else {\r\n                    //Non ci sono Gap di preavviso\r\n                    elSlotTime.STATO = StatoSlot.libero;\r\n                  }\r\n                }\r\n              }\r\n\r\n            }\r\n          }\r\n        });\r\n\r\n      \r\n    }\r\n\r\n    //Emetto l'evento di cambio\r\n    this._docOccupazione.next(templateSlot);\r\n\r\n  }\r\n \r\n    /**\r\n   * \r\n   * @param resultDataServer Result in arrivo dal server\r\n   * @param templateSlot Template Slot in arrivo dalla videata\r\n   */\r\n     private syncResultOriginale(resultDataServer: any, templateSlot: SlotDay) {\r\n      //Converto il risultato in un oggetto reale\r\n      let srvResult = new DateSlotLock();\r\n      srvResult.setJSONProperty(resultDataServer);\r\n  \r\n  \r\n      /**Informazioni occupazioni ricevute */\r\n      if (srvResult.RESULT) {\r\n        templateSlot._TEMPLATELOCK = false; //Sblocco il template in quanto son arrivati i risultati\r\n        templateSlot.APERTOCHIUSO = srvResult.APERTOCHIUSO;\r\n  \r\n  \r\n          /** Ciclo sugli Slot Orari */\r\n          templateSlot.SLOTTIMES.forEach(elSlotTime => {\r\n            //TUTTO CHIUSO\r\n            if (!templateSlot.APERTOCHIUSO) {\r\n              //Giornata Chiusa\r\n              elSlotTime.STATO = StatoSlot.chiuso;\r\n            }\r\n            else {\r\n              //Giornata Aperta\r\n              //Lo Slot ha già una impostazione da Template\r\n              //Nel caso da template sia CHIUSO non lo cambio\r\n  \r\n              if (elSlotTime.STATO !== StatoSlot.chiuso) {\r\n  \r\n                //ad Adesso applico un gap di Ore\r\n                //GAP ORE E' un preavviso\r\n                let adesso = moment().add(this.gapHour, 'hours');\r\n                 \r\n                //Se l'inizio dello Slot è superiore ad adesso\r\n                if (moment(elSlotTime.START).isAfter(adesso))  {\r\n  \r\n                  let inSlot = this.slotInServerSlotLock(elSlotTime, srvResult);\r\n    \r\n                \r\n                  if (inSlot) {\r\n                    //E' tra gli slot occupati\r\n                    elSlotTime.STATO = StatoSlot.occupato;\r\n                  }\r\n                }\r\n                else {\r\n                  //Lo Slot non è disponibile\r\n                  elSlotTime.STATO = StatoSlot.chiuso;\r\n                }\r\n  \r\n              }\r\n            }\r\n          });\r\n  \r\n        \r\n      }\r\n  \r\n      //Emetto l'evento di cambio\r\n      this._docOccupazione.next(templateSlot);\r\n  \r\n    }\r\n\r\n  /**\r\n   * Controlla se lo Slot è dentro a quelli Lock arrivati dal server\r\n   * @param docSlot Slot da controllare \r\n   * @param serverSlotLock Slot Bloccati a livello server\r\n   */\r\n  private slotInServerSlotLock(docSlot: SlotTime, serverSlotLock: DateSlotLock): boolean {\r\n    let findInSlotLock = false;\r\n    let result: boolean;\r\n\r\n    if (serverSlotLock) {\r\n      if (serverSlotLock.TIMELOCK) {\r\n\r\n        //Ciclo sugli orari bloccati\r\n        for (let index = 0; index < serverSlotLock.TIMELOCK.length; index++) {\r\n          const elLock = serverSlotLock.TIMELOCK[index];\r\n\r\n          result = MyDateTime.dateTimeInside(docSlot.START, docSlot.END, elLock.START, elLock.END);\r\n\r\n          \r\n          if (result) {\r\n            //SLOT OCCUPATO\r\n            findInSlotLock = true;\r\n            break;\r\n          }\r\n          \r\n        }\r\n      }\r\n    }\r\n    \r\n    return findInSlotLock;\r\n\r\n  }\r\n  \r\n}\r\n","import { TargetSesso, TipoCorso, Condition } from './valuelist.model';\r\n\r\n\r\n// Proprietà per Filtraggio Corsi\r\nexport class FilterCorsi {\r\n    ID: string;\r\n    IDLOCATION: string;\r\n    DATAFINE: Date;\r\n    _CONDITIONDATAFINE: Condition;\r\n    TARGETSESSO: TargetSesso;\r\n    IDCATEGORIEETA: string;\r\n    _DESCRCATEGORIEETA: string;\r\n    IDSPORT: string;\r\n    _DESCRSPORT: string;\r\n    TIPO: TipoCorso;\r\n    _CHECKISCRIZIONEAPERTA: boolean;\r\n\r\n\r\n    constructor(idLoc: string) {\r\n        this.IDLOCATION = idLoc;\r\n        this._CHECKISCRIZIONEAPERTA = false;\r\n    }\r\n\r\n\r\n\r\n}","import { SlotTime } from './slottime.model';\r\nimport { PrenotazionePianificazione } from '../prenotazionepianificazione.model';\r\nimport { MyDateTime, TypePeriod } from '../../library/models/mydatetime.model';\r\nimport { LogApp } from '../log.model';\r\nimport { StatoSlot } from '../valuelist.model';\r\nimport { SlottimeComponent } from 'src/app/shared/components/slottime/slottime.component';\r\nimport { element } from 'protractor';\r\n\r\nexport class SlotDay {\r\n    WEEKDAY:    number;\r\n    STARTTIME:  Date;\r\n    ENDTIME:    Date;\r\n    SLOTTIMES:  SlotTime[];\r\n    APERTOCHIUSO: boolean;\r\n    _TEMPLATELOCK: boolean; \r\n\r\n    ENDMIDDLE: Date;\r\n    STARTMIDDLE: Date;\r\n    \r\n    \r\n    constructor() {\r\n        this.SLOTTIMES = [];\r\n        this.APERTOCHIUSO = true;\r\n        this._TEMPLATELOCK = true; //Il giorno è ancora bloccato in quanto solo template e non attualizzato (Non posso prenotare nulla ancora)\r\n\r\n        this.setStandardTime();\r\n    }\r\n\r\n\r\n    /**\r\n     * Copia tutte le proprietà dall'oggetto passato\r\n     * @param oldObject Oggetto da cui copiare\r\n     */\r\n    copyFrom(oldObject: SlotDay) {\r\n        this.WEEKDAY = oldObject.WEEKDAY;\r\n        this.STARTTIME = oldObject.STARTTIME;\r\n        this.ENDTIME = oldObject.ENDTIME;\r\n        this.APERTOCHIUSO = oldObject.APERTOCHIUSO;\r\n        this._TEMPLATELOCK = oldObject._TEMPLATELOCK;\r\n        this.SLOTTIMES = [];\r\n\r\n        oldObject.SLOTTIMES.forEach(elSlotTime => {\r\n            let slot = new SlotTime(elSlotTime.START, elSlotTime.END);\r\n            slot.selected = elSlotTime.selected;\r\n            slot.STATO = elSlotTime.STATO;\r\n\r\n            this.SLOTTIMES.push(slot);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * segna come chiusi gli slot che sforano dentro un eventuale periodo intermedio di chiusura\r\n     */\r\n    disableClosedSlots(){\r\n        if (this.STARTMIDDLE && this.ENDMIDDLE){\r\n            this.SLOTTIMES.forEach(element => {\r\n                if (element.END > this.ENDMIDDLE && element.START < this.STARTMIDDLE){\r\n                    element.STATO = StatoSlot.chiuso;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * setta i parametri di un'eventuale chiusura e riapertura intermedia\r\n     * @param chiusura l'orario di chiusura intermedia\r\n     * @param riapertura l'orario di riapertura dopo la chiusura intermedia\r\n     */\r\n    setChiusuraIntermedia(chiusura: Date, riapertura: Date){\r\n        if (chiusura && riapertura){\r\n            this.ENDMIDDLE = chiusura;\r\n            this.STARTMIDDLE = riapertura;\r\n\r\n        }\r\n    }\r\n\r\n    setStandardTime() {\r\n\r\n        let adesso = new Date();\r\n        this.STARTTIME = new Date(adesso.getFullYear(), adesso.getMonth(), adesso.getDate(), 8,0,0);\r\n        this.ENDTIME = new Date(adesso.getFullYear(), adesso.getMonth(), adesso.getDate(), 20,0,0);\r\n    }\r\n\r\n    /**\r\n     * Creazione degli Slot Time\r\n     * @param minutiSlot Minuti di ogni slot\r\n     */\r\n    createSlotTime(minutiSlot: number) {\r\n        let anno = 0;\r\n        let mese = 0;\r\n        let giorno = 0;\r\n        let oreStart = 0;\r\n        let minutiStart = 0;\r\n        let oreEnd = 0;\r\n        let minutiEnd = 0;\r\n\r\n\r\n        \r\n\r\n        if (this.APERTOCHIUSO) {\r\n            anno = this.STARTTIME.getFullYear();\r\n            mese = this.STARTTIME.getMonth();\r\n            giorno = this.STARTTIME.getDate();\r\n            oreStart = this.STARTTIME.getHours();\r\n            oreEnd = this.ENDTIME.getHours();\r\n            minutiStart = this.STARTTIME.getMinutes();\r\n            minutiEnd = this.ENDTIME.getMinutes();\r\n\r\n            let myData = {anno, mese, giorno};\r\n            let myStart = {ore: oreStart, minuti: minutiStart};\r\n            let myEnd = {ore: oreEnd, minuti: minutiEnd }\r\n\r\n\r\n            \r\n            this.SLOTTIMES = SlotTime.getArrayStandardSlot(myData, myStart, myEnd, minutiSlot);\r\n            this.disableClosedSlots();\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Imposta tutti i figli SlotTime applicando a START e END lo stesso orario ma sulla data passata\r\n     * @param nuovaData Nuova Data da applicare\r\n     */\r\n    changeDateInSlotTime(nuovaData: Date) {\r\n        \r\n        if (this.SLOTTIMES) {\r\n            this.SLOTTIMES.forEach(elSlotTime => {\r\n                elSlotTime.changeDateInSlotTime(nuovaData);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Effettua le operazioni per il cambio selezione di uno slot\r\n     * @param idSlotTime SlotTime in cambiamento selection\r\n     */\r\n    changeSelectionSlotTime(actualSlot: SlotTime): PrenotazionePianificazione  {\r\n        \r\n        let newState: boolean;\r\n        let contaSelected: number; \r\n        let findSlot: boolean;\r\n        let findStart: boolean;\r\n        let docPianificazione: PrenotazionePianificazione;\r\n        \r\n        if (actualSlot) {\r\n            newState = !actualSlot.selected; //Il nuovo stato che assumerà lo Slot\r\n\r\n            //Se il nuovo stato è disattivare, posso farlo\r\n            if (newState == false) {\r\n                \r\n                contaSelected = 0; \r\n                findSlot = false;\r\n                \r\n                //Se prima dello Slot da disattivare ci fossero elementi selezionati, \r\n                // allora devo disattivare lo slot richiesto e tutti i seguenti\r\n                this.SLOTTIMES.forEach(element => {\r\n                    if (element.ID == actualSlot.ID) {\r\n                        findSlot = true;\r\n                        element.selected = false;\r\n                    }\r\n                    else if (!findSlot && element.selected) {\r\n                        contaSelected++;\r\n                    }\r\n                    else if (findSlot && contaSelected > 0) {\r\n                        element.selected = false;\r\n                    }\r\n                    \r\n\r\n                })\r\n\r\n            }\r\n            else { \r\n                contaSelected = 0;\r\n                findSlot = false;\r\n                //Se il nuovo Stato è ATTIVARE devo effettuare l'operazione \r\n                //controllando le altre selezioni\r\n                //Le selezioni massime possono essere solo 2\r\n                this.SLOTTIMES.forEach(element => {\r\n\r\n                    //Elemento selezionato\r\n                    if (element.selected) {\r\n                        //Se ne ho già selezionato 1, devo disattivare questo\r\n\r\n                        if ((contaSelected >= 1 && !findSlot) || (findSlot && contaSelected !== 1) ) {\r\n                            element.selected = false;\r\n                        }\r\n                        else {\r\n                            contaSelected++;\r\n                        }\r\n                    }\r\n                    else if (element.ID == actualSlot.ID) {\r\n\r\n\r\n                        element.selected = true;\r\n                        findSlot = true;\r\n\r\n                        contaSelected++;\r\n                    }\r\n                });\r\n\r\n                //Ora se ci sono 2 selezione posso selezionare tutto cio' che sta in mezzo\r\n                if (contaSelected == 2) {\r\n\r\n                    findStart = false;\r\n                    let lastIndex = -1;\r\n\r\n                    for (let index = 0; index < this.SLOTTIMES.length; index++) {\r\n                        const element = this.SLOTTIMES[index];\r\n                        if (element.selected && findStart) {\r\n                            //Ho finito di selezionare - esco\r\n                            lastIndex = index;\r\n                            break;\r\n                        }\r\n                        else if (element.selected && !findStart) {\r\n                            //Inizia adesso la selezione\r\n                            findStart = true;\r\n                        }\r\n                        else if (findStart) {\r\n                            //Ho trovato l'inizio e non ho ancora finito\r\n\r\n                            //Qua in mezzo c'e' qualcosa di chiuso o occupato e quindi mi devo fermare\r\n                            if (element.STATO == StatoSlot.chiuso || element.STATO == StatoSlot.occupato || element.STATO == StatoSlot.contattare) {\r\n                                lastIndex = index;\r\n                                break;\r\n                            }\r\n                            else {\r\n                                element.selected = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                     //Tutto quello che sta dopo il lastIndex deve essere disattivato\r\n                     if (lastIndex != -1 && lastIndex < this.SLOTTIMES.length) {\r\n                        for (let index = lastIndex + 1; index < this.SLOTTIMES.length; index++) {\r\n                            const element = this.SLOTTIMES[index];\r\n                            element.selected = false;\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        //Lo faccio fuori dagli If cosi creo sempre un oggetto\r\n        //Qui cerco di creare un oggetto di PrenotazionePianificazione da restituire\r\n        docPianificazione = this.getPrenotazionePianificazione();\r\n\r\n\r\n        return docPianificazione;\r\n        \r\n    }\r\n\r\n\r\n    getPrenotazionePianificazione(): PrenotazionePianificazione {\r\n        let docPianificazione: PrenotazionePianificazione;\r\n        let findStart = false;\r\n\r\n        docPianificazione = new PrenotazionePianificazione();\r\n\r\n        /**Devo cercare il primo selezionato e l'ultimo */\r\n        if (this.SLOTTIMES) {\r\n\r\n            this.SLOTTIMES.forEach(elSlot => {\r\n                if (elSlot.selected) {\r\n                    if (findStart) {\r\n                        docPianificazione.DATAORAFINE = elSlot.END;\r\n                        //Nel caso lo slot di End sia alle 00:00 allora sono le 00:00 del giorno seguente\r\n                        if (elSlot.END.getHours() == 0 && elSlot.END.getMinutes() == 0) {\r\n                            docPianificazione.DATAORAFINE = MyDateTime.calcola(elSlot.END, 1, TypePeriod.days);\r\n                        }\r\n\r\n                        docPianificazione.DURATAORE = MyDateTime.durataOre(docPianificazione.DATAORAINIZIO, docPianificazione.DATAORAFINE);\r\n                    }\r\n                    else {\r\n                        findStart = true;\r\n                        docPianificazione.DATAORAINIZIO = elSlot.START;\r\n                        docPianificazione.DATAORAFINE = elSlot.END;\r\n                        \r\n                        if (elSlot.END.getHours() == 0 && elSlot.END.getMinutes() == 0) {\r\n                            docPianificazione.DATAORAFINE = MyDateTime.calcola(elSlot.END, 1, TypePeriod.days);\r\n                        }\r\n\r\n                        docPianificazione.DURATAORE = MyDateTime.durataOre(docPianificazione.DATAORAINIZIO, docPianificazione.DATAORAFINE);\r\n                    }\r\n                }\r\n            });\r\n\r\n            \r\n        }\r\n\r\n        return docPianificazione;\r\n    }\r\n\r\n    /**\r\n     * Cerca e ritorna uno SlotTime per id\r\n     * @param idSlotTime id dello slottime da ricercare\r\n     */\r\n    findSlotTimeById(idSlotTime: string) {\r\n        let findSlot: SlotTime;\r\n        if (idSlotTime) {\r\n            findSlot = this.SLOTTIMES.find(element => {\r\n                return element.ID == idSlotTime;\r\n            })\r\n        }\r\n\r\n        return findSlot;\r\n    }\r\n    \r\n}","import { Gruppo } from './gruppo.model';\r\nimport { TipoPrivateImage } from './valuelist.model';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nexport class StartConfiguration {\r\n    private _ready: boolean; //Indica se la connessione con il server è avvenuta\r\n    private _errorMessage: string; //Errore occorso\r\n\r\n    private _appId: string;  //Identificatore connessione\r\n    private _urlDomain: string; //Dominio o IP da contattare\r\n    private _urlProtocol: string; //Protocollo usato http o https\r\n    \r\n    private _urlComponent: string; //Parte dell'URL relativa al componente\r\n    private _urlBase: string; // Url di Base per effettuare la chiamata\r\n\r\n    //Immagini rettangolari utilizzate come Logo\r\n    private _companyUrlLogo: string; // Logo Url company (Impostata in BackEnd)\r\n    private _appUrlLogo: string;  // Logo Url App Gouego (Statica di default)\r\n\r\n    //Immagini utilizzate come Icona quadrata\r\n    private _companyUrlIcon: string; // Icon company (Impostata in BackEnd)\r\n    private _appUrlIcon: string; // Icon App Gouego (Statica di Default)\r\n\r\n    private _companyName: string; //Nome Società\r\n    private _titleApp: string; //Titolo Applicazione\r\n    private _gruppo: Gruppo; //Gruppo Sportivo\r\n\r\n    private _idAreaSelected: string; //IDArea Operativa Selezionata\r\n    private _urlFileServer: string; //URL per il recupero di file dal server Gouego\r\n\r\n    private _authorizationAppCode: string; //Codice di autorizzazione da inviare\r\n    private _authorizationUserCode: string; //Codice di autorizzazione utente quando loggato da inviare\r\n        \r\n    constructor() {\r\n\r\n        this._urlComponent = 'COMPGOUEGO';\r\n        this._ready = false;\r\n        this._titleApp = 'Gouego';\r\n        this._companyName = 'Gouego Sport';\r\n\r\n        //Immagine Rettangolare\r\n\r\n        //Questa è sempre una immagine statica\r\n        this._appUrlLogo = 'assets/img/logoapp.png';\r\n        //Questa è inizialmente come appUrlLogo ma il server puo' mandarcene un'altra\r\n        this._companyUrlLogo = this._appUrlLogo ;\r\n\r\n\r\n        //Immagine Quadrata come ICONA\r\n        //Questa è sempre una immagine statica\r\n        this._appUrlIcon = 'assets/img/iconapp.png';\r\n\r\n        //Questa è inizialmente come appUrlIcon ma il server puo' mandarcene un'altra\r\n        this._companyUrlIcon = this._appUrlIcon;\r\n\r\n        //AppId gestito dagli eventi dello Start Service\r\n        this._appId = '';\r\n        this._idAreaSelected = '';\r\n        \r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param prefixDomain Prefisso del dominio es (openbeach,demo, localhost)\r\n     * @param testingMode \r\n     */\r\n    setUrlLocation(testingMode = false) {\r\n        if (testingMode == true) {\r\n            //Modalità di test\r\n\r\n            //Modalità in locale\r\n            //Protocollo per forza http\r\n            this._urlProtocol = 'http';\r\n            this._urlDomain = 'localhost/gouegoapi';\r\n            \r\n            this._urlFileServer = 'localhost/gouego';\r\n\r\n        }\r\n        else {\r\n            //Non sono in test perchè voglio collegarmi al server, ma da dentro ionic serve\r\n            this._urlProtocol = 'https';\r\n            //Modalità Server\r\n            this._urlDomain = 'api.gouego.com';            \r\n            this._urlFileServer = 'app.gouego.com/admin';\r\n            \r\n\r\n        }\r\n    }\r\n\r\n    // Utilizzato al termine di una chiamata di \r\n    // Autorizzazione\r\n    setGruppoAuthorization(responseData: any) {\r\n        // Inizializzo il Gruppo\r\n        this._gruppo = new Gruppo();\r\n        this._gruppo.setJSONProperty(responseData);\r\n\r\n        //Ciclo sulle immagini ricevute (se presenti)\r\n        this._gruppo.PRIVATEIMAGE.forEach(elImage => {\r\n\r\n            if (elImage.FILENAMEESTENSIONE) {\r\n                switch (elImage.TIPO) {\r\n                    case TipoPrivateImage.icon:\r\n                        this._companyUrlIcon = `${this._urlProtocol}://${this._urlFileServer}/${elImage.FILENAMEESTENSIONE}`;\r\n                        break;\r\n                    case TipoPrivateImage.logo:\r\n                        this._companyUrlLogo = `${this._urlProtocol}://${this._urlFileServer}/${elImage.FILENAMEESTENSIONE}`;\r\n                        break;\r\n                \r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            \r\n        });\r\n\r\n        \r\n        if (this._gruppo.DENOMINAZIONE) {\r\n\r\n            this._companyName = this._gruppo.DENOMINAZIONE;\r\n\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    get gruppo(): Gruppo {\r\n        return this._gruppo;\r\n    }\r\n\r\n    set gruppo(value: Gruppo) {\r\n        this._gruppo = value;\r\n    }\r\n\r\n    get idAreaSelected(): string {\r\n        return this._idAreaSelected;\r\n    }\r\n\r\n    set idAreaSelected(value: string) {\r\n        this._idAreaSelected = value;\r\n    }\r\n\r\n    /**\r\n     * Ritorna il logo standard di Gouego\r\n     */\r\n    get appUrlLogo() {\r\n        return this._appUrlLogo;\r\n    }\r\n\r\n    set appUrlLogo(value: string) {\r\n        this._appUrlLogo = value;\r\n    }\r\n\r\n    /**\r\n     * Ritorna il logo aziendale\r\n     */\r\n    get companyUrlLogo() {\r\n        return this._companyUrlLogo;\r\n    }\r\n\r\n    set companyUrlLogo(value: string) {\r\n        this._companyUrlLogo = value;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Brand Logo Image\r\n    /**\r\n     * Ritorna Icona Rettangolare Standard\r\n     */\r\n    get appUrlIcon() {\r\n        return this._appUrlIcon;\r\n    }\r\n\r\n    set appUrlIcon(value: string) {\r\n        this._appUrlIcon = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna Icona Aziendale\r\n     */\r\n    get companyUrlIcon() {\r\n        return this._companyUrlIcon;\r\n    }\r\n\r\n    set companyUrlIcon(value: string) {\r\n        this._companyUrlIcon = value;\r\n    }    \r\n    //#endregion\r\n\r\n    \r\n\r\n    /**\r\n     * Ritorna Logo rettangolare da utilizzare\r\n     */\r\n    getUrlLogo() {\r\n        return (this._companyUrlLogo ? this._companyUrlLogo : this._appUrlLogo)\r\n    }\r\n\r\n    /**\r\n     * Ritorna una Icona quadrata\r\n     */\r\n    getUrlIcon() {\r\n        return (this._companyUrlIcon ? this._companyUrlIcon : this._appUrlIcon)\r\n    }\r\n\r\n    \r\n    get errorMessage() {\r\n        return this._errorMessage;\r\n    }\r\n\r\n    set errorMessage(value: string) {\r\n        this._errorMessage = value;\r\n    }\r\n\r\n    get companyName() {\r\n        return this._companyName;\r\n    }\r\n\r\n    set companyName(value: string) {\r\n        this._companyName = value;\r\n    }\r\n\r\n    get titleApp() {\r\n        return this._titleApp;\r\n    }\r\n\r\n    set titleApp(value: string) {\r\n        this._titleApp = value;\r\n    }    \r\n\r\n    get ready(): boolean {\r\n        return this._ready;\r\n    }\r\n    \r\n    set ready(value: boolean) {\r\n        this._ready = value;\r\n    }\r\n\r\n\r\n\r\n    // get set appId\r\n    get appId() {\r\n        return this._appId;\r\n    }\r\n\r\n    set appId(value: string) {\r\n        this._appId = value;\r\n    }\r\n\r\n\r\n    get urlDomain():string {\r\n        return this._urlDomain;\r\n    }\r\n\r\n    get urlFileServer(): string {\r\n        let myUrl = `${this._urlProtocol}://${this._urlFileServer}`;\r\n\r\n        return myUrl\r\n    }\r\n\r\n    //Url di Base per effettuare la chiamata\r\n    get urlBase():string {\r\n        let myUrl = `${this._urlProtocol}://${this._urlDomain}`;\r\n\r\n\r\n        myUrl = myUrl + '/' + this._urlComponent;\r\n\r\n        return myUrl;\r\n    }\r\n\r\n    /**\r\n     * Codice autorizzazione Applicazione ottenuto nella fase di \r\n     * shaking iniziale da inviare come authcode ad ogni richiesta\r\n     */\r\n    get authorizationAppCode(): string {\r\n        return this._authorizationAppCode;\r\n    }\r\n\r\n    set authorizationAppCode(value: string) {\r\n        this._authorizationAppCode = value;\r\n    }\r\n\r\n    /**\r\n     * Codice autorizzazione utente ottenuto nella fase di login\r\n     * e da inviare se loggato\r\n     */\r\n    get authorizationUserCode(): string {\r\n        return this._authorizationUserCode;\r\n    }\r\n\r\n    set authorizationUserCode(value: string) {\r\n        this._authorizationUserCode = value;\r\n    }\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * Ritorna l'headerHttp da applicare con l'impostazione \r\n     * @param contentType Eventuale content Type da applicare\r\n     */\r\n    getHttpHeaders(contentType?:string): HttpHeaders {\r\n        let content = 'application/json';\r\n        if (contentType && contentType.length != 0) {\r\n            content = contentType;\r\n        }\r\n\r\n        let myHeaders = new HttpHeaders({'Content-type':content});\r\n        \r\n        //Se ho l'app-id lo imposto, \r\n        //altrimenti \r\n        if (this._appId && this._appId.length != 0) {\r\n\r\n            myHeaders = myHeaders.append('appid',this._appId);\r\n        }\r\n        else {\r\n            myHeaders = myHeaders.append('dashrequest','-1');\r\n        }\r\n\r\n        myHeaders = myHeaders.append('fromrequest','gouegoapp');\r\n\r\n        //Devo inviare il codice di autorizzazione app\r\n        if (this._authorizationAppCode && this._authorizationAppCode.length != 0) {\r\n            myHeaders = myHeaders.append('authcode',this._authorizationAppCode);\r\n            \r\n        }\r\n\r\n        //Devo inviare il codice di autorizazione utente\r\n        if (this._authorizationUserCode && this._authorizationUserCode.length != 0) {\r\n            myHeaders = myHeaders.append('authusercode',this._authorizationUserCode);\r\n        }\r\n\r\n        return myHeaders;\r\n    }\r\n\r\n    \r\n\r\n\r\n}\r\n\r\nexport class StartAuthorization {\r\n\r\n    result: number;\r\n    authcode: string;\r\n    GRUPPOSPORTIVO: Gruppo;\r\n\r\n    constructor() {\r\n    }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoPrivateImage } from './valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class PrivateImage extends IDDocument {\r\n    TIPO: TipoPrivateImage;\r\n    FILENAMEESTENSIONE: string; //Percorso relativo di scaricamento \r\n\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['FILENAMEESTENSIONE'];\r\n    let arNumber = ['TIPO'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'PrivateImage';\r\n    objDescriptor.doRemote = false;\r\n    objDescriptor.classWebApiName = '';\r\n\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    return objDescriptor;\r\n} \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class DateSlotLock extends IDDocument {\r\n    RESULT: boolean;\r\n    MESSAGE: string;\r\n    DATA: Date;\r\n    APERTOCHIUSO: boolean;\r\n    TIMELOCK: TimeLock[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.RESULT = false;\r\n        this.APERTOCHIUSO = false;\r\n        this.TIMELOCK = [];\r\n    }\r\n\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n\r\n        //Imposto che il documento è originale\r\n        this.setOriginal();   \r\n    }\r\n\r\n    /**\r\n     * Imposta le collection\r\n     */\r\n    setCollection(data: any) {\r\n        this.TIMELOCK = [];\r\n\r\n        if (data) {\r\n            if (data.TIMELOCK) {\r\n\r\n                data.TIMELOCK.forEach(element => {\r\n\r\n                    let newTl = new TimeLock();\r\n                    newTl.setJSONProperty(element);\r\n                    this.TIMELOCK.push(newTl);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['MESSAGE'];\r\n        let arNumber = [];\r\n        let arNumberDecimal = [];\r\n        let arBoolean = ['APERTOCHIUSO','RESULT'];\r\n        let arDate = ['DATA'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        let arCollection = ['TIMELOCK'];\r\n\r\n        objDescriptor.className = 'DateSlotLock';\r\n        objDescriptor.classWebApiName = '';\r\n        objDescriptor.doRemote = false;\r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n        \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\nexport class TimeLock extends IDDocument {\r\n    START: Date;\r\n    END: Date;\r\n\r\n    constructor() {\r\n        super();\r\n      }\r\n    \r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [];\r\n        let arNumber = [];\r\n        let arNumberDecimal = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =['START','END'];\r\n        let arTime = [];\r\n        let arCollection = [];\r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { ClasseDocumento, TipoDocumentazione } from './tipodocumentazione.model';\r\n\r\nexport class InvioDocumentazione extends IDDocument{\r\n    TOKENUTENTE: string;\r\n    IDTIPODOCUMENTAZIONE : string;\r\n    FILE : string;\r\n    DESCRIZIONE : string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n    \r\n          /**\r\n        * Ritorna il descrittore della Struttura Campi\r\n        */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDTIPODOCUMENTAZIONE',\r\n                        'FILE',\r\n                        'DESCRIZIONE',\r\n                        'TOKENUTENTE'];\r\n        \r\n    \r\n        objDescriptor.className = 'InvioDocumentazione';\r\n        objDescriptor.doRemote = false;\r\n        objDescriptor.describeField = 'DESCRIZIONE'\r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n            \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\nexport class Documentazione extends IDDocument{\r\n    IDUTENTE : string;\r\n    IDTIPODOCUMENTAZIONE : string;\r\n    CLASSE : ClasseDocumento;\r\n    DESCRIZIONE : string;\r\n    FILENAMEESTENSIONE : string; //percorso relativo\r\n    VALIDOFINO : Date;\r\n    FILETYPE : string;\r\n    CLIENTUPLOAD : boolean;\r\n    DATAORACARICAMENTO: Date;\r\n    DATAORAMODIFICA: Date;\r\n    \r\n\r\n    constructor(onlyInstance = false){\r\n        super(onlyInstance);\r\n    }\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDUTENTE',\r\n                        'IDTIPODOCUMENTAZIONE',\r\n                        'DESCRIZIONE',\r\n                        'FILENAMEESTENSIONE',\r\n                        'FILETYPE'\r\n                        ];\r\n        let arBoolean = ['CLIENTUPLOAD'];\r\n        let arDate = ['VALIDOFINO'];\r\n        let arDateTime = ['DATAORACARICAMENTO','DATAORAMODIFICA'];\r\n        let arNumber = ['CLASSE'];\r\n    \r\n        objDescriptor.className = 'Documentazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'DOCUMENTAZIONE';\r\n        objDescriptor.describeField = 'FILENAMEESTENSIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    \r\n        \r\n        objDescriptor.setRelation('IDUTENTE','Utente');\r\n        objDescriptor.setRelation('IDTIPODOCUMENTAZIONE','TipoDocumentazione');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { isDate } from 'util';\r\nimport { TypeDefinition } from './descriptor.model';\r\nimport { IDLibrary } from './idlibrary.model';\r\n\r\n//Classe con parametri Request POST\r\nexport class PostParams {\r\n  key: string;\r\n  value: any;\r\n  exportOnlyDocModified: boolean; //Se Value è un documento, indica se esportare solo i documenti modificati\r\n  exportOnlyPropertyModified: boolean; //Se Value è un documento, indica se esportare solo le proprietà modificate o tutte\r\n\r\n  constructor() {\r\n    this.exportOnlyPropertyModified = false;\r\n    this.exportOnlyDocModified = false;\r\n  }\r\n\r\n  /**\r\n   * Controlla se il value contenuto è di tipo basico\r\n   */\r\n  isBasicType(): boolean {\r\n    let basic = false;\r\n    let typeVar: TypeDefinition;\r\n    let arBasicType: TypeDefinition[] = [];\r\n\r\n    typeVar = IDLibrary.getValueType(this.value);\r\n    arBasicType.push(TypeDefinition.boolean);\r\n    arBasicType.push(TypeDefinition.char);\r\n    arBasicType.push(TypeDefinition.date);\r\n    arBasicType.push(TypeDefinition.dateTime);\r\n    arBasicType.push(TypeDefinition.number);\r\n    arBasicType.push(TypeDefinition.numberDecimal);\r\n    arBasicType.push(TypeDefinition.time);\r\n    \r\n    if (arBasicType.includes(typeVar)) {\r\n      basic = true;\r\n    }\r\n\r\n    return basic;\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n   * Esporta l'insieme chiave valore come\r\n   * \"chiave\": valore\r\n   * in formato JSON\r\n   */\r\n  exportJSON(): string {\r\n    let jsonReturn = '';\r\n    let jsonValue = IDLibrary.exportJSONValue(this.value, this.exportOnlyPropertyModified, this.exportOnlyDocModified);\r\n\r\n    jsonReturn = `\\\"${this.key}\\\":` + jsonValue;\r\n\r\n    return jsonReturn;\r\n  }\r\n\r\n\r\n  /**\r\n   * Dato un oggetto PostParams o un ArrayPostParams controlla \r\n   * che gli elementi siano di tipo basico\r\n   */\r\n  static getBasicTypeFrom(myParams: PostParams | PostParams[]): boolean {\r\n    let basic = false;\r\n    if (myParams) {\r\n      if (Array.isArray(myParams)) {\r\n        basic = true;\r\n\r\n        for (let index = 0; index < myParams.length; index++) {\r\n          const element = myParams[index];\r\n          if (element.isBasicType() == false) {\r\n            basic = false;\r\n            break;\r\n          }\r\n        }\r\n        \r\n      }\r\n      else {\r\n        basic = myParams.isBasicType();\r\n      }\r\n    }\r\n    \r\n\r\n    return basic;\r\n  }\r\n\r\n\r\n  /**\r\n   * Viene creato un oggetto JSON con gli elementi presenti in myParams\r\n   * @param myParams Singolo oggetto PostParams o Array di PostParams\r\n   */\r\n  static getJsonFrom(myParams: PostParams | PostParams[]): string {\r\n    let jsonReturn = '';\r\n    if (myParams) {\r\n\r\n      if (Array.isArray(myParams)) {\r\n        for (let index = 0; index < myParams.length; index++) {\r\n          const element = myParams[index];\r\n          let jsonSingle = element.exportJSON();\r\n          if (jsonReturn.length !== 0) {\r\n              jsonReturn += ', ';\r\n          }\r\n\r\n          jsonReturn += jsonSingle;\r\n          \r\n        }\r\n      }\r\n      else {\r\n        jsonReturn = myParams.exportJSON();\r\n      }\r\n    }\r\n\r\n    jsonReturn = '{' + jsonReturn + '}';\r\n\r\n    return jsonReturn;\r\n  }\r\n}\r\n\r\n\r\n//Classe con parametri da impostare nelle Request di tipo Get\r\n  export class RequestParams {\r\n\r\n    child_level?: number; //Profondita Richiesta\r\n    top?: number; //Numero massimo di elementi ritornati\r\n    orderBy?: string; //Ordinamento asc || desc\r\n    decode:RequestDecode; //Oggetto per la richiesta di decodifica automatica dei dati ricevuti\r\n\r\n    constructor() {\r\n        this.decode = new RequestDecode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Classe con la definizione dei parametri di decodifica se richiesta\r\n   */\r\n  export class RequestDecode {\r\n    active?: boolean;   //TRUE: si richiede la decodifica alla ricezione degli elementi\r\n    foreignFields?: RequestForeign[]; \r\n    //Se non passato vengono decodificati tutti i campi di foreign key con le describeRowFiels,\r\n    //altrimenti è possibile specificare le foreignKey da decodificare\r\n   \r\n    constructor() {\r\n        this.active = false;\r\n        this.foreignFields = [];\r\n    }\r\n\r\n    /**\r\n     * Aggiunge una ForeignKey tra quelle da decodificare\r\n     * Ritorna l'oggetto RequestForeign\r\n     * @param nameField Nome del campo di Foreign Key\r\n     */\r\n    addForeignField(nameField:string ): RequestForeign {\r\n\r\n        let docForeign: RequestForeign;\r\n        if (nameField && nameField.length !== 0) {\r\n            docForeign = new RequestForeign(nameField);\r\n            this.foreignFields.push(docForeign);\r\n        }\r\n\r\n        return docForeign;\r\n    }\r\n\r\n  }\r\n \r\n  /**\r\n   * Classe con le foreignKey usate per la decodifica, e se presenti i campi di describe da usare\r\n   */\r\n  export class RequestForeign {\r\n    nameField: string;\r\n    describeFields?: string[];\r\n\r\n    constructor(nameField: string) {\r\n\r\n        this.nameField = nameField;\r\n        this.describeFields = [];\r\n    }\r\n\r\n    addDescribeField(nameField: string) {\r\n        if (nameField && nameField.length !== 0) {\r\n            this.describeFields.push(nameField);\r\n        }\r\n    }\r\n  }\r\n\r\n  \r\n\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoCampo, StrutturaCampo } from '../models/valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { CampoSport } from './camposport.model';\r\n\r\n\r\n\r\nexport class Campo extends IDDocument {\r\n    \r\n  IDAREAOPERATIVA: string;\r\n  IDLOCATION: string;\r\n  IDSPORT: string;\r\n  DENOMINAZIONE: string;\r\n  TIPOLOGIA: TipoCampo;\r\n  DIMENSIONI: string;\r\n  STRUTTURA: StrutturaCampo;\r\n  CAMPOSPORT: CampoSport[]; \r\n  UTILIZZABILE: boolean; //Segnato come utilizzabile\r\n  DURATAOREMINIMA: number; //Se presente è la durata minima di prenotazione\r\n\r\n  constructor(onlyInstance?:boolean) {\r\n    super(onlyInstance);\r\n  }\r\n\r\n      /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'IDSPORT',\r\n                    'DENOMINAZIONE',\r\n                    'DIMENSIONI'\r\n                    ];\r\n    let arNumber = ['TIPOLOGIA', 'STRUTTURA'];\r\n    let arNumberDecimal = ['DURATAOREMINIMA'];\r\n    let arBoolean = ['UTILIZZABILE'];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = ['CAMPOSPORT'];\r\n\r\n    objDescriptor.className = 'Campo';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'CAMPO';\r\n    objDescriptor.describeField = 'DENOMINAZIONE'\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n    objDescriptor.setRelation('IDSPORT','Sport');\r\n    \r\n\r\n    return objDescriptor;\r\n}\r\n\r\n// Sovrascrivo il metodo IDDocument\r\nsetJSONProperty(data: any) {\r\n  //Chiamo il metodo IDDocument\r\n  super.setJSONProperty(data);\r\n\r\n  //Chiamo il metodo per le collection\r\n  this.setCollection(data);\r\n\r\n  this.setOriginal();\r\n}\r\n\r\n/**\r\n * Imposta le collection dell'oggetto, con i reali oggetti tipizzati\r\n * @param data JSON Received\r\n */\r\nsetCollection(data: any) {\r\n  \r\n  // Riazzero e ricreo\r\n  this.CAMPOSPORT = [];\r\n\r\n  //Sistemazione Immagini Location\r\n  if (data.CAMPOSPORT) {\r\n    this.setCollectionCampoSport(data);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Inizializza la collection Apertura Location con oggetto tipizzati\r\n * @param data JSON Received\r\n */\r\nprivate setCollectionCampoSport(data: any) {\r\n  if (data.CAMPOSPORT) {\r\n\r\n\r\n    data.CAMPOSPORT.forEach(elCampoSport => {\r\n      let newCampoSport = new CampoSport();\r\n      newCampoSport.setJSONProperty(elCampoSport);\r\n\r\n      this.CAMPOSPORT.push(newCampoSport);\r\n    });\r\n  }\r\n}\r\n\r\n \r\n\r\n//Aggiunge alla collection un campo Sport\r\naddCampoSport(docCampoSport: CampoSport) {\r\n  if (!this.CAMPOSPORT) {\r\n    this.CAMPOSPORT = [];\r\n  }\r\n\r\n  this.CAMPOSPORT.push(docCampoSport);\r\n}\r\n\r\n\r\n}","var map = {\n\t\"./af\": \"K/tc\",\n\t\"./af.js\": \"K/tc\",\n\t\"./ar\": \"jnO4\",\n\t\"./ar-dz\": \"o1bE\",\n\t\"./ar-dz.js\": \"o1bE\",\n\t\"./ar-kw\": \"Qj4J\",\n\t\"./ar-kw.js\": \"Qj4J\",\n\t\"./ar-ly\": \"HP3h\",\n\t\"./ar-ly.js\": \"HP3h\",\n\t\"./ar-ma\": \"CoRJ\",\n\t\"./ar-ma.js\": \"CoRJ\",\n\t\"./ar-sa\": \"gjCT\",\n\t\"./ar-sa.js\": \"gjCT\",\n\t\"./ar-tn\": \"bYM6\",\n\t\"./ar-tn.js\": \"bYM6\",\n\t\"./ar.js\": \"jnO4\",\n\t\"./az\": \"SFxW\",\n\t\"./az.js\": \"SFxW\",\n\t\"./be\": \"H8ED\",\n\t\"./be.js\": \"H8ED\",\n\t\"./bg\": \"hKrs\",\n\t\"./bg.js\": \"hKrs\",\n\t\"./bm\": \"p/rL\",\n\t\"./bm.js\": \"p/rL\",\n\t\"./bn\": \"kEOa\",\n\t\"./bn-bd\": \"loYQ\",\n\t\"./bn-bd.js\": \"loYQ\",\n\t\"./bn.js\": \"kEOa\",\n\t\"./bo\": \"0mo+\",\n\t\"./bo.js\": \"0mo+\",\n\t\"./br\": \"aIdf\",\n\t\"./br.js\": \"aIdf\",\n\t\"./bs\": \"JVSJ\",\n\t\"./bs.js\": \"JVSJ\",\n\t\"./ca\": \"1xZ4\",\n\t\"./ca.js\": \"1xZ4\",\n\t\"./cs\": \"PA2r\",\n\t\"./cs.js\": \"PA2r\",\n\t\"./cv\": \"A+xa\",\n\t\"./cv.js\": \"A+xa\",\n\t\"./cy\": \"l5ep\",\n\t\"./cy.js\": \"l5ep\",\n\t\"./da\": \"DxQv\",\n\t\"./da.js\": \"DxQv\",\n\t\"./de\": \"tGlX\",\n\t\"./de-at\": \"s+uk\",\n\t\"./de-at.js\": \"s+uk\",\n\t\"./de-ch\": \"u3GI\",\n\t\"./de-ch.js\": \"u3GI\",\n\t\"./de.js\": \"tGlX\",\n\t\"./dv\": \"WYrj\",\n\t\"./dv.js\": \"WYrj\",\n\t\"./el\": \"jUeY\",\n\t\"./el.js\": \"jUeY\",\n\t\"./en-au\": \"Dmvi\",\n\t\"./en-au.js\": \"Dmvi\",\n\t\"./en-ca\": \"OIYi\",\n\t\"./en-ca.js\": \"OIYi\",\n\t\"./en-gb\": \"Oaa7\",\n\t\"./en-gb.js\": \"Oaa7\",\n\t\"./en-ie\": \"4dOw\",\n\t\"./en-ie.js\": \"4dOw\",\n\t\"./en-il\": \"czMo\",\n\t\"./en-il.js\": \"czMo\",\n\t\"./en-in\": \"7C5Q\",\n\t\"./en-in.js\": \"7C5Q\",\n\t\"./en-nz\": \"b1Dy\",\n\t\"./en-nz.js\": \"b1Dy\",\n\t\"./en-sg\": \"t+mt\",\n\t\"./en-sg.js\": \"t+mt\",\n\t\"./eo\": \"Zduo\",\n\t\"./eo.js\": \"Zduo\",\n\t\"./es\": \"iYuL\",\n\t\"./es-do\": \"CjzT\",\n\t\"./es-do.js\": \"CjzT\",\n\t\"./es-mx\": \"tbfe\",\n\t\"./es-mx.js\": \"tbfe\",\n\t\"./es-us\": \"Vclq\",\n\t\"./es-us.js\": \"Vclq\",\n\t\"./es.js\": \"iYuL\",\n\t\"./et\": \"7BjC\",\n\t\"./et.js\": \"7BjC\",\n\t\"./eu\": \"D/JM\",\n\t\"./eu.js\": \"D/JM\",\n\t\"./fa\": \"jfSC\",\n\t\"./fa.js\": \"jfSC\",\n\t\"./fi\": \"gekB\",\n\t\"./fi.js\": \"gekB\",\n\t\"./fil\": \"1ppg\",\n\t\"./fil.js\": \"1ppg\",\n\t\"./fo\": \"ByF4\",\n\t\"./fo.js\": \"ByF4\",\n\t\"./fr\": \"nyYc\",\n\t\"./fr-ca\": \"2fjn\",\n\t\"./fr-ca.js\": \"2fjn\",\n\t\"./fr-ch\": \"Dkky\",\n\t\"./fr-ch.js\": \"Dkky\",\n\t\"./fr.js\": \"nyYc\",\n\t\"./fy\": \"cRix\",\n\t\"./fy.js\": \"cRix\",\n\t\"./ga\": \"USCx\",\n\t\"./ga.js\": \"USCx\",\n\t\"./gd\": \"9rRi\",\n\t\"./gd.js\": \"9rRi\",\n\t\"./gl\": \"iEDd\",\n\t\"./gl.js\": \"iEDd\",\n\t\"./gom-deva\": \"qvJo\",\n\t\"./gom-deva.js\": \"qvJo\",\n\t\"./gom-latn\": \"DKr+\",\n\t\"./gom-latn.js\": \"DKr+\",\n\t\"./gu\": \"4MV3\",\n\t\"./gu.js\": \"4MV3\",\n\t\"./he\": \"x6pH\",\n\t\"./he.js\": \"x6pH\",\n\t\"./hi\": \"3E1r\",\n\t\"./hi.js\": \"3E1r\",\n\t\"./hr\": \"S6ln\",\n\t\"./hr.js\": \"S6ln\",\n\t\"./hu\": \"WxRl\",\n\t\"./hu.js\": \"WxRl\",\n\t\"./hy-am\": \"1rYy\",\n\t\"./hy-am.js\": \"1rYy\",\n\t\"./id\": \"UDhR\",\n\t\"./id.js\": \"UDhR\",\n\t\"./is\": \"BVg3\",\n\t\"./is.js\": \"BVg3\",\n\t\"./it\": \"bpih\",\n\t\"./it-ch\": \"bxKX\",\n\t\"./it-ch.js\": \"bxKX\",\n\t\"./it.js\": \"bpih\",\n\t\"./ja\": \"B55N\",\n\t\"./ja.js\": \"B55N\",\n\t\"./jv\": \"tUCv\",\n\t\"./jv.js\": \"tUCv\",\n\t\"./ka\": \"IBtZ\",\n\t\"./ka.js\": \"IBtZ\",\n\t\"./kk\": \"bXm7\",\n\t\"./kk.js\": \"bXm7\",\n\t\"./km\": \"6B0Y\",\n\t\"./km.js\": \"6B0Y\",\n\t\"./kn\": \"PpIw\",\n\t\"./kn.js\": \"PpIw\",\n\t\"./ko\": \"Ivi+\",\n\t\"./ko.js\": \"Ivi+\",\n\t\"./ku\": \"JCF/\",\n\t\"./ku.js\": \"JCF/\",\n\t\"./ky\": \"lgnt\",\n\t\"./ky.js\": \"lgnt\",\n\t\"./lb\": \"RAwQ\",\n\t\"./lb.js\": \"RAwQ\",\n\t\"./lo\": \"sp3z\",\n\t\"./lo.js\": \"sp3z\",\n\t\"./lt\": \"JvlW\",\n\t\"./lt.js\": \"JvlW\",\n\t\"./lv\": \"uXwI\",\n\t\"./lv.js\": \"uXwI\",\n\t\"./me\": \"KTz0\",\n\t\"./me.js\": \"KTz0\",\n\t\"./mi\": \"aIsn\",\n\t\"./mi.js\": \"aIsn\",\n\t\"./mk\": \"aQkU\",\n\t\"./mk.js\": \"aQkU\",\n\t\"./ml\": \"AvvY\",\n\t\"./ml.js\": \"AvvY\",\n\t\"./mn\": \"lYtQ\",\n\t\"./mn.js\": \"lYtQ\",\n\t\"./mr\": \"Ob0Z\",\n\t\"./mr.js\": \"Ob0Z\",\n\t\"./ms\": \"6+QB\",\n\t\"./ms-my\": \"ZAMP\",\n\t\"./ms-my.js\": \"ZAMP\",\n\t\"./ms.js\": \"6+QB\",\n\t\"./mt\": \"G0Uy\",\n\t\"./mt.js\": \"G0Uy\",\n\t\"./my\": \"honF\",\n\t\"./my.js\": \"honF\",\n\t\"./nb\": \"bOMt\",\n\t\"./nb.js\": \"bOMt\",\n\t\"./ne\": \"OjkT\",\n\t\"./ne.js\": \"OjkT\",\n\t\"./nl\": \"+s0g\",\n\t\"./nl-be\": \"2ykv\",\n\t\"./nl-be.js\": \"2ykv\",\n\t\"./nl.js\": \"+s0g\",\n\t\"./nn\": \"uEye\",\n\t\"./nn.js\": \"uEye\",\n\t\"./oc-lnc\": \"Fnuy\",\n\t\"./oc-lnc.js\": \"Fnuy\",\n\t\"./pa-in\": \"8/+R\",\n\t\"./pa-in.js\": \"8/+R\",\n\t\"./pl\": \"jVdC\",\n\t\"./pl.js\": \"jVdC\",\n\t\"./pt\": \"8mBD\",\n\t\"./pt-br\": \"0tRk\",\n\t\"./pt-br.js\": \"0tRk\",\n\t\"./pt.js\": \"8mBD\",\n\t\"./ro\": \"lyxo\",\n\t\"./ro.js\": \"lyxo\",\n\t\"./ru\": \"lXzo\",\n\t\"./ru.js\": \"lXzo\",\n\t\"./sd\": \"Z4QM\",\n\t\"./sd.js\": \"Z4QM\",\n\t\"./se\": \"//9w\",\n\t\"./se.js\": \"//9w\",\n\t\"./si\": \"7aV9\",\n\t\"./si.js\": \"7aV9\",\n\t\"./sk\": \"e+ae\",\n\t\"./sk.js\": \"e+ae\",\n\t\"./sl\": \"gVVK\",\n\t\"./sl.js\": \"gVVK\",\n\t\"./sq\": \"yPMs\",\n\t\"./sq.js\": \"yPMs\",\n\t\"./sr\": \"zx6S\",\n\t\"./sr-cyrl\": \"E+lV\",\n\t\"./sr-cyrl.js\": \"E+lV\",\n\t\"./sr.js\": \"zx6S\",\n\t\"./ss\": \"Ur1D\",\n\t\"./ss.js\": \"Ur1D\",\n\t\"./sv\": \"X709\",\n\t\"./sv.js\": \"X709\",\n\t\"./sw\": \"dNwA\",\n\t\"./sw.js\": \"dNwA\",\n\t\"./ta\": \"PeUW\",\n\t\"./ta.js\": \"PeUW\",\n\t\"./te\": \"XLvN\",\n\t\"./te.js\": \"XLvN\",\n\t\"./tet\": \"V2x9\",\n\t\"./tet.js\": \"V2x9\",\n\t\"./tg\": \"Oxv6\",\n\t\"./tg.js\": \"Oxv6\",\n\t\"./th\": \"EOgW\",\n\t\"./th.js\": \"EOgW\",\n\t\"./tk\": \"Wv91\",\n\t\"./tk.js\": \"Wv91\",\n\t\"./tl-ph\": \"Dzi0\",\n\t\"./tl-ph.js\": \"Dzi0\",\n\t\"./tlh\": \"z3Vd\",\n\t\"./tlh.js\": \"z3Vd\",\n\t\"./tr\": \"DoHr\",\n\t\"./tr.js\": \"DoHr\",\n\t\"./tzl\": \"z1FC\",\n\t\"./tzl.js\": \"z1FC\",\n\t\"./tzm\": \"wQk9\",\n\t\"./tzm-latn\": \"tT3J\",\n\t\"./tzm-latn.js\": \"tT3J\",\n\t\"./tzm.js\": \"wQk9\",\n\t\"./ug-cn\": \"YRex\",\n\t\"./ug-cn.js\": \"YRex\",\n\t\"./uk\": \"raLr\",\n\t\"./uk.js\": \"raLr\",\n\t\"./ur\": \"UpQW\",\n\t\"./ur.js\": \"UpQW\",\n\t\"./uz\": \"Loxo\",\n\t\"./uz-latn\": \"AQ68\",\n\t\"./uz-latn.js\": \"AQ68\",\n\t\"./uz.js\": \"Loxo\",\n\t\"./vi\": \"KSF8\",\n\t\"./vi.js\": \"KSF8\",\n\t\"./x-pseudo\": \"/X5v\",\n\t\"./x-pseudo.js\": \"/X5v\",\n\t\"./yo\": \"fzPg\",\n\t\"./yo.js\": \"fzPg\",\n\t\"./zh-cn\": \"XDpg\",\n\t\"./zh-cn.js\": \"XDpg\",\n\t\"./zh-hk\": \"SatO\",\n\t\"./zh-hk.js\": \"SatO\",\n\t\"./zh-mo\": \"OmwH\",\n\t\"./zh-mo.js\": \"OmwH\",\n\t\"./zh-tw\": \"kOpN\",\n\t\"./zh-tw.js\": \"kOpN\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"RnhZ\";","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport {  StatoPagamento, TipoCorso } from '../models/valuelist.model';\r\n\r\nexport class UtenteIscrizione extends IDDocument {\r\n\r\n        IDCORSO:               string; //\r\n        IDAREAOPERATIVA:       string; //\r\n        TIPOCORSO:             number;\r\n        DENOMINAZIONECORSO:    string;\r\n        DATAINIZIO:            Date;\r\n        ORAINIZIO:             Date;\r\n        DATAFINE:              Date;\r\n        ORELEZIONE:            number;\r\n        GIORNIPREVISTI:        string;\r\n        IDUTENTE:              string; //\r\n        DATAISCRIZIONE:        Date;\r\n        ANNOISCRIZIONE:        number;\r\n        IDSPORT:               string;\r\n        DENOMINAZIONESPORT:    string;\r\n        ICONASPORT:            string;\r\n        IDLOCATION:            string; //\r\n        DENOMINAZIONELOCATION: string;\r\n        INDIRIZZOLOCATION:     string;\r\n        COMUNELOCATION:        string;\r\n        IDCAMPO:               string;\r\n        DENOMINAZIONECAMPO:    string;\r\n        IDTIPOPAGAMENTO:       string;\r\n        DESCRTIPOPAGAMENTO:    string;\r\n        IMPORTO:               number;\r\n        VERSATO:               number;\r\n        RESIDUO:               number;\r\n        CODICEALFA:            string;\r\n        CODICEINT:             number;\r\n        STATOISCRIZIONE:       number;\r\n\r\n        constructor(onlyInstance?:boolean) {\r\n            super(onlyInstance);\r\n        }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDCORSO',\r\n                        'IDAREAOPERATIVA',\r\n                        'DENOMINAZIONECORSO',\r\n                        'IDUTENTE',\r\n                        'IDSPORT',\r\n                        'DENOMINAZIONESPORT',\r\n                        'ICONASPORT',\r\n                        'IDLOCATION',\r\n                        'DENOMINAZIONELOCATION',\r\n                        'INDIRIZZOLOCATION',\r\n                        'COMUNELOCATION',\r\n                        'IDCAMPO',\r\n                        'DENOMINAZIONECAMPO',\r\n                        'IDTIPOPAGAMENTO',\r\n                        'DESCRTIPOPAGAMENTO',\r\n                        'CODICEALFA',\r\n                        'GIORNIPREVISTI'\r\n                        ];\r\n        let arNumber = ['TIPOCORSO','ANNOISCRIZIONE','CODICEINT','STATOISCRIZIONE'];\r\n        let arNumberDecimal = ['IMPORTO','VERSATO','RESIDUO','ORELEZIONE'];\r\n        let arBoolean = [];\r\n        let arDate = ['DATAINIZIO','DATAFINE','DATAISCRIZIONE'];\r\n        let arDateTime =['ORAINIZIO'];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'UtenteIscrizione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'UTENTEISCRIZIONE';\r\n        objDescriptor.describeField = 'DENOMINAZIONECORSO';\r\n\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDCORSO','Corso');\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDUTENTE','Utente');\r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n     /**\r\n     * Ritorna una icona a seconda del tipo Corso\r\n     */\r\n    getIcon() {\r\n        let nameIcon= 'ribbon';\r\n  \r\n        switch (this.TIPOCORSO) {\r\n          case TipoCorso.corso:\r\n            nameIcon = 'ribbon';\r\n            break;\r\n          \r\n          case TipoCorso.prova: \r\n            nameIcon = 'trail-sign';\r\n            break;\r\n        \r\n          default:\r\n            nameIcon = 'ribbon';\r\n            break;\r\n        }\r\n  \r\n        return nameIcon;\r\n        \r\n      }\r\n\r\n     /**\r\n     * Ritorna il valore che è necessario pagare\r\n     */\r\n     get amountPayment(): number {\r\n\r\n        let myAmount: number = 0;\r\n        \r\n        myAmount = this.RESIDUO;\r\n\r\n        return myAmount;\r\n     }\r\n  \r\n  \r\n      /**\r\n       * Stato del pagamento in formato testo\r\n       * @param showForPay: se TRUE verrà restituito un messaggio per effettuare il pagamento\r\n       */\r\n      getCaptionStatePayment(showForPay: boolean = false): string {\r\n        let caption = '';\r\n\r\n        if (this.amountPayment != 0) {\r\n            if (showForPay) {\r\n                caption = 'Paga Ora';\r\n            }\r\n            else {\r\n                caption = 'Corso da pagare';\r\n            }\r\n        }\r\n        else {\r\n\r\n            caption = 'Corso pagato';\r\n        }\r\n        return caption;\r\n      }\r\n\r\n      /**\r\n       * Ritorna lo Stato del pagamento Iscrizione\r\n       */\r\n      getStatoPagamento(): StatoPagamento {\r\n        let myStato = StatoPagamento.daPagare;\r\n\r\n        if (this.RESIDUO == 0 ) {\r\n          myStato = StatoPagamento.pagato;\r\n        }\r\n        else if (this.RESIDUO != 0 && this.RESIDUO != this.IMPORTO) {\r\n          myStato = StatoPagamento.pagatoInParte;\r\n        }\r\n\r\n        return myStato;\r\n      }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { UtenteIscrizione } from '../models/utenteiscrizione.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtenteiscrizioneService {\r\n\r\n  private _listUtenteIscrizione = new BehaviorSubject<UtenteIscrizione[]>([]);\r\n\r\n  get listUtenteIscrizione() {\r\n    return this._listUtenteIscrizione.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n   /**\r\n   * Richiede l'elenco delle Iscrizioni Corsi\r\n   * @param config Dati configurazione\r\n   * @param idUtente Utente che effettua richiesta\r\n   * @param maxRecord Max Record da recuperare\r\n   */\r\n  request(config: StartConfiguration, idUtente: string, maxRecord: number = 0) {\r\n    return new Promise<UtenteIscrizione[]>((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      myHeaders = myHeaders.append('order-by','desc');\r\n\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'UTENTEISCRIZIONE';\r\n      const filterDateTime = this.getFilterDateTime();\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto l'area richiesta\r\n      let myParams = new HttpParams().set('IDUTENTE',idUtente);\r\n      myParams = myParams.append('DATAISCRIZIONE',filterDateTime);\r\n      myParams = myParams.append('$top', (maxRecord + '') );\r\n  \r\n      //Elimino gli attuali\r\n      this._listUtenteIscrizione.next([]);\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n            \r\n              let arReturn = [];\r\n              if (data.UTENTEISCRIZIONE) {\r\n                arReturn = data.UTENTEISCRIZIONE;\r\n              }\r\n  \r\n              return arReturn;\r\n            \r\n        }))\r\n        .subscribe (resultData => {\r\n  \r\n          for (let index = 0; index < resultData.length; index++) {\r\n            const element = resultData[index];\r\n            let newUtenteIscrizione = new UtenteIscrizione();\r\n            newUtenteIscrizione.setJSONProperty(element);\r\n            this.addUtenteIscrizione(newUtenteIscrizione);            \r\n          }\r\n\r\n            resolve(this._listUtenteIscrizione.getValue());\r\n\r\n        }, error=>{\r\n          reject (error);\r\n        })\r\n      \r\n    })\r\n  }\r\n\r\n\r\n     /**\r\n   * \r\n   * @param config Dati configurazione\r\n   * @param idIscrizione ID Iscrizione richiesta\r\n   */\r\n  requestById(config: StartConfiguration, idIscrizione: string) {\r\n    return new Promise<UtenteIscrizione>((resolve, reject)=>{\r\n      //let myHeaders = new HttpHeaders({'Content-type':'text/plain'});\r\n      let myHeaders = config.getHttpHeaders();\r\n      myHeaders = myHeaders.append('order-by','desc');\r\n\r\n      const doObject = 'UTENTEISCRIZIONE';\r\n      const filterDateTime = this.getFilterDateTime();\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto richiesta\r\n      let myParams = new HttpParams().set('ID',idIscrizione);\r\n        \r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n              return data.UTENTEISCRIZIONE      \r\n        }))\r\n        .subscribe (arrData => {\r\n\r\n            let docIscrizione = new UtenteIscrizione();\r\n\r\n            if (arrData) {\r\n              if (arrData[0]){\r\n                docIscrizione.setJSONProperty(arrData[0]);\r\n                resolve(docIscrizione);\r\n              }\r\n              else{\r\n                reject('iscrizione inesistente');\r\n              }\r\n            }\r\n            else {\r\n              reject('iscrizione inesistente');\r\n            }\r\n\r\n            \r\n        }, error => {\r\n          reject (error);\r\n        })\r\n      \r\n    })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge all'elenco una prenotazione dell'utente\r\n   * @param objUtenteIscrizione Prenotazione da aggiungere\r\n   */\r\n  addUtenteIscrizione(objUtenteIscrizione: UtenteIscrizione) {\r\n    this.listUtenteIscrizione\r\n      .pipe(take(1))\r\n      .subscribe (collUtenteIscrizione => {\r\n        let findElement = collUtenteIscrizione.find(element => {\r\n          return element.ID == objUtenteIscrizione.ID\r\n        });\r\n\r\n        if (!findElement) {\r\n          this._listUtenteIscrizione.next( collUtenteIscrizione.concat(objUtenteIscrizione));\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n    /**\r\n   * Crea il Parametro Filtro per il campo\r\n   */\r\n  getFilterDateTime(): string {\r\n    let adesso = new Date();\r\n    let newDoc = new IDDocument();\r\n    let startDate = new Date(adesso.getFullYear(),0,1);\r\n    let strAdesso = '';\r\n    if (adesso.getMonth() < 6) {\r\n      startDate = new Date((adesso.getFullYear()) - 1, 5, 1);\r\n    }\r\n\r\n    strAdesso = newDoc.formatDateTimeISO(startDate);\r\n\r\n    strAdesso = '>' + strAdesso;\r\n\r\n    return strAdesso;\r\n  }\r\n\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\nimport { Platform } from '@ionic/angular';\r\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\r\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\r\n\r\nimport { StartConfiguration } from './models/start-configuration.model';\r\nimport { StartService } from './services/start.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n  styleUrls: ['app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n\r\n  showSplash = true;\r\n  startConfig: StartConfiguration;\r\n  listenStartConfig: Subscription;\r\n  listenAppReady: Subscription;\r\n\r\n  constructor(\r\n    private platform: Platform,\r\n    private splashScreen: SplashScreen,\r\n    private statusBar: StatusBar,\r\n    private startService: StartService\r\n  ) {\r\n    this.initializeApp();\r\n  }\r\n\r\n  initializeApp() {\r\n    // this.splashScreen.hide(); // Nasconde l'immagine statica\r\n    this.platform.ready().then(() => {\r\n      // this.statusBar.styleDefault();\r\n\r\n      this.listenAppReady = this.startService.appReady\r\n                                  .subscribe(valueReady => {\r\n                                    if (valueReady) {\r\n                                      //Ambiente pronto\r\n                                      //Termino lo Splash\r\n                                      this.showSplash = false;\r\n\r\n                                      //Tolgo la sottoscrizione\r\n                                      if (this.listenAppReady) {\r\n                                        this.listenAppReady.unsubscribe();\r\n                                      }\r\n                                    }\r\n                                  });\r\n\r\n      //Mi Sottoscrivo per ricevere la configurazione\r\n       this.listenStartConfig = this.startService.startConfig\r\n                      .subscribe(element => {\r\n                            //Memorizzo per la visualizzazione del Menu\r\n                            this.startConfig = element;\r\n                        });\r\n\r\n      // Richiedo l'autorizzazione\r\n      //this.startService.requestStartAuthorization();\r\n      this.startService.settingStartStepOne();\r\n\r\n    });\r\n  }\r\n}\r\n","<div *ngIf=\"showSplash\" class=\"splash\">\r\n  <div class=\"sk-cube-grid\">\r\n    <div class=\"sk-cube sk-cube1\"></div>\r\n    <div class=\"sk-cube sk-cube2\"></div>\r\n    <div class=\"sk-cube sk-cube3\"></div>\r\n    <div class=\"sk-cube sk-cube4\"></div>\r\n    <div class=\"sk-cube sk-cube5\"></div>\r\n    <div class=\"sk-cube sk-cube6\"></div>\r\n    <div class=\"sk-cube sk-cube7\"></div>\r\n    <div class=\"sk-cube sk-cube8\"></div>\r\n    <div class=\"sk-cube sk-cube9\"></div>\r\n  </div>\r\n</div>\r\n<ion-app *ngIf=\"!showSplash\"> \r\n  <!-- vvv<ion-menu side=\"start\" menuId=\"m1\" contentId=\"m1\">\r\n    <ion-header>\r\n      <ion-toolbar>\r\n        <div class=\"titleicon\">\r\n          <img [src]=\"startConfig.getUrlBrand()\"/>\r\n        </div>\r\n\r\n      </ion-toolbar>\r\n    </ion-header>\r\n\r\n    <ion-content>\r\n      <ion-list>\r\n        <ion-menu-toggle>\r\n          <ion-item lines=\"none\">\r\n            <ion-icon name=\"ribbon\" slot=\"start\" color=\"primary\"></ion-icon>\r\n          <ion-label >{{startConfig?.companyName}}</ion-label>\r\n          </ion-item>\r\n\r\n\r\n          <ion-item lines=\"none\"  button>\r\n            <ion-icon name=\"information-circle-outline\" slot=\"start\" color=\"primary\"></ion-icon>\r\n            <ion-label>About</ion-label>\r\n          </ion-item>\r\n        </ion-menu-toggle>\r\n      </ion-list>\r\n    </ion-content>\r\n\r\n  </ion-menu>\r\n  <ion-router-outlet id=\"m1\"></ion-router-outlet> -->\r\n\r\n  <ion-router-outlet></ion-router-outlet>\r\n</ion-app>\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class Livello extends IDDocument {\r\n    IDSPORT: string;\r\n    DENOMINAZIONE: string;\r\n    PROGRESSIONE: number;\r\n    ETAMINIMA: number;\r\n    ETAMASSIMA: number;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n    }\r\n\r\n\r\n          /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDSPORT',\r\n                    'DENOMINAZIONE'\r\n                    ];\r\n    let arNumber = ['PROGRESSIONE','ETAMINIMA','ETAMASSIMA'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'Livello';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'LIVELLO';\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n\r\n    objDescriptor.setRelation('IDSPORT','Sport');\r\n\r\n    return objDescriptor;\r\n}\r\n\r\n   \r\n}","import { StatoSlot } from '../valuelist.model';\r\nimport * as moment from \"moment\";\r\nimport { MyDateTime } from '../../library/models/mydatetime.model';\r\nimport { IDDocument } from '../../library/models/iddocument.model';\r\n\r\n\r\n/**\r\n * Classe che identifica una linea oraria di una prenotazione (slot)\r\n */\r\nexport class SlotTime extends IDDocument {\r\n    \r\n    START: Date;\r\n    END: Date;\r\n    STATO: StatoSlot;\r\n        \r\n    \r\n    constructor(inizioTime: Date, fineTime: Date) {\r\n\r\n        super();\r\n        this.START = inizioTime;\r\n        this.END = fineTime;\r\n        this.STATO = StatoSlot.libero;\r\n\r\n    }\r\n\r\n\r\n    /** Ritorna un array degli slot da impostare */\r\n    static getArrayStandardSlot( data: {\r\n                                    anno: number, \r\n                                    mese: number, \r\n                                    giorno: number\r\n                                }, \r\n                                start: {ore: number, minuti:number},\r\n                                end: {ore: number, minuti:number},\r\n                                minuteSlot: number\r\n    ): SlotTime[] {\r\n\r\n        let arSlots: SlotTime[] = [];\r\n        let startDate = new Date(data.anno, data.mese, data.giorno, start.ore, start.minuti, 0);\r\n        let endDate = new Date(data.anno, data.mese, data.giorno, end.ore, end.minuti, 0);\r\n        let countWrapper = moment(startDate);\r\n        let endWrapper = moment(endDate);\r\n        \r\n\r\n\r\n        /** Mentre la data è inferiore o uguale */\r\n        //while (countWrapper.isSameOrBefore(endWrapper)) {\r\n        while (countWrapper.isBefore(endWrapper)) {\r\n\r\n            //Al count aggiungo i minuti dello slot\r\n            let endSlotWrapper = moment(countWrapper.toDate());\r\n            endSlotWrapper.add(minuteSlot, 'm');\r\n            \r\n            //Creo lo Slot\r\n            let slotBlock = new SlotTime(countWrapper.toDate(), endSlotWrapper.toDate());\r\n            \r\n            //Aggiungo all'array di ritorno\r\n            arSlots.push(slotBlock);\r\n         \r\n\r\n            //Aumento il Count dei minuti di slot\r\n            countWrapper.add(minuteSlot, 'm');\r\n\r\n        }\r\n\r\n        return arSlots;\r\n    }\r\n\r\n    /**\r\n     * Imposta a START e END l'orario presente ma sulla data passata\r\n     * @param nuovaData Nuova data da applicare\r\n     */\r\n    changeDateInSlotTime(nuovaData: Date) {\r\n        if (nuovaData) {\r\n            if (this.START) {\r\n                //Aggiorno la data \r\n                this.START = MyDateTime.changeDateInTime(nuovaData, this.START);\r\n                \r\n            }\r\n\r\n            if (this.END) {\r\n                //Aggiorno la data \r\n                this.END = MyDateTime.changeDateInTime(nuovaData, this.END);\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\n\r\nexport class UtentePrenotazione extends IDDocument {\r\n    IDPRENOTAZIONE: string;\r\n    IDAREAOPERATIVA: string;\r\n    IDUTENTE: string;\r\n\r\n    IDLOCATION: string;\r\n    INDIRIZZOLOCATION: string;\r\n    COMUNELOCATION: string;\r\n\r\n    IDSPORT: string;\r\n    DENOMINAZIONESPORT: string;\r\n\r\n    IDCAMPO: string;\r\n    DENOMINAZIONECAMPO: string;\r\n\r\n    DATAORAINIZIO: Date;\r\n    DATAORAFINE: Date;\r\n\r\n    \r\n    DURATAORE: number; \r\n    NUMPARTECIPANTI: number;\r\n    \r\n    \r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        \r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n            this.NUMPARTECIPANTI = 1;\r\n        }\r\n    }\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n\r\n        //Imposto che il documento è originale\r\n        this.setOriginal();\r\n    }\r\n\r\n    setCollection(data: any) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDPRENOTAZIONE',\r\n                        'IDAREAOPERATIVA',\r\n                        'IDUTENTE',\r\n                        'IDLOCATION',\r\n                        'INDIRIZZOLOCATION',\r\n                        'COMUNELOCATION',\r\n                        'IDSPORT',\r\n                        'DENOMINAZIONESPORT',\r\n                        'IDCAMPO',\r\n                        'DENOMINAZIONECAMPO'\r\n                        ];\r\n        let arNumber = ['NUMPARTECIPANTI'];\r\n        let arNumberDecimal = ['DURATAORE'];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'UtentePrenotazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'UTENTEPRENOTAZIONE';\r\n        objDescriptor.describeField = 'DATAORAINIZIO';\r\n\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDPRENOTAZIONE','Prenotazione');\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDUTENTE','Utente');\r\n        objDescriptor.setRelation('IDCAMPO','Campo');\r\n        \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { GeolocationPosition, Plugins } from '@capacitor/core';\r\nimport { Area } from '../models/area.model';\r\nconst { Geolocation } = Plugins;\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PosizioneService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * La funzione restituisce una promise con la posizione attuale\r\n   */\r\n  getCurrentPosition(): Promise<GeolocationPosition>{\r\n    return Geolocation.getCurrentPosition();\r\n    \r\n  }\r\n\r\n  /**\r\n * data in input una lista di aree, la funzione restituisce l'oggetto area più vicino alla posizione attuale\r\n * @param listAree la lista delle aree tra cui cercare\r\n */\r\n  getNearestArea(listAree: Area[]){\r\n    return new Promise<Area> ((resolve, reject) => {\r\n      \r\n      let nearestArea: Area;\r\n  \r\n      //Se ci sono delle aree\r\n      if (listAree && listAree.length != 0){\r\n\r\n        //inizio a salvarmi la prima\r\n        nearestArea = listAree[0]\r\n\r\n        //se è solo una ho finito\r\n        if (listAree.length == 1){\r\n          resolve(nearestArea);\r\n        }\r\n\r\n        else{\r\n          //se sono almeno due\r\n          //recupero la posizione attuale\r\n          this.getCurrentPosition()\r\n          .then(currentPosition => {\r\n            \r\n              //se effettivamento ho la posizione, posso ciclare sull'array\r\n              for (let index = 1; index < listAree.length; index++){\r\n                if(listAree[index].distanceFrom(currentPosition)){\r\n                  //se è possibile calcolare la distanza per quest'area (sono presenti lat e long)\r\n                  if(listAree[index].distanceFrom(currentPosition) < nearestArea.distanceFrom(currentPosition)){\r\n                    //se l'area corrente è più vicina di quella memorizzata, la salvo\r\n                    nearestArea = listAree[index];\r\n                  }\r\n                }\r\n              }\r\n\r\n            //ho finito, posso risolvere\r\n            resolve(nearestArea)\r\n          })\r\n          .catch(error => {\r\n            \r\n              //errore, non ho recuperato la posizione\r\n              reject(error);\r\n            })\r\n        }\r\n        \r\n    \r\n      }\r\n\r\n      else{\r\n        //errore, non mi hanno passato le aree\r\n        reject('Errore, lista aree vuota');\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { LocationImage } from './locaton-image.model';\r\nimport { Campo } from './campo.model';\r\nimport { AperturaLocation } from './aperturalocation.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { CampoSport } from './camposport.model';\r\nimport { OccupazioneCampi } from './occupazionecampi.model';\r\nimport { TipoSocieta } from './valuelist.model';\r\n\r\nexport class Location extends IDDocument {\r\n\r\n    IDAREAOPERATIVA: string;\r\n    DENOMINAZIONE: string;\r\n    INDIRIZZO: string;\r\n    CAP: string;\r\n    COMUNE: string;\r\n    PROVINCIA: string;\r\n    ISOSTATO: string;\r\n    IMAGEURL: string;\r\n    FAVORITE: boolean;\r\n    DESCRIZIONEMOB: string;\r\n    TELEFONO: string;\r\n    EMAIL: string;\r\n    ENABLEPRENOTAZIONI: boolean;\r\n    MINUTISLOTPRENOTAZIONE: number;\r\n    MINUTIPREAVVISOPRENOTAZIONE: number;\r\n    ENABLEDELETEPRENOTAZIONI: boolean;\r\n    MINUTIPREAVVISODELETEPRENOTAZIONE: number;    \r\n    APPVISIBILITY: number;\r\n    IDAZIENDACLIENTE: string;\r\n    LOCATIONIMAGE: LocationImage[];\r\n    CAMPO: Campo[];\r\n    APERTURALOCATION: AperturaLocation[];\r\n    _LISTOCCUPAZIONI:OccupazioneCampi[] = [];\r\n    \r\n  \r\n    constructor(onlyInstance?:boolean) {\r\n      \r\n      super(onlyInstance);\r\n      \r\n      this.LOCATIONIMAGE = [];\r\n      this.CAMPO = [];\r\n      this.APERTURALOCATION = [];\r\n      \r\n      if (!onlyInstance) { \r\n\r\n        this.ENABLEPRENOTAZIONI = false;\r\n        this.MINUTISLOTPRENOTAZIONE = 30;\r\n        this.MINUTIPREAVVISOPRENOTAZIONE = 0;\r\n        // Imposto una cover standard\r\n        this.setStandardCover();\r\n\r\n      }\r\n    }\r\n\r\n\r\n            /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDAREAOPERATIVA',\r\n                    'DENOMINAZIONE',\r\n                    'INDIRIZZO',\r\n                    'CAP',\r\n                    'COMUNE',\r\n                    'PROVINCIA',\r\n                    'ISOSTATO',\r\n                    'IMAGEURL',\r\n                    'DESCRIZIONEMOB',\r\n                    'TELEFONO',\r\n                    'EMAIL',\r\n                    'IDAZIENDACLIENTE'\r\n                    ];\r\n    let arNumber = ['MINUTISLOTPRENOTAZIONE','MINUTIPREAVVISOPRENOTAZIONE','APPVISIBILITY','MINUTIPREAVVISODELETEPRENOTAZIONE'];\r\n    let arBoolean = ['FAVORITE','ENABLEPRENOTAZIONI','ENABLEDELETEPRENOTAZIONI'];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = ['LOCATIONIMAGE','CAMPO','APERTURALOCATION'];\r\n\r\n    objDescriptor.className = 'Location';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'LOCATION';\r\n    objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    \r\n    return objDescriptor;\r\n}\r\n\r\n  \r\n\r\n    // Sovrascrivo il metodo IDDocument\r\n    setJSONProperty(data: any) {\r\n      //Chiamo il metodo IDDocument\r\n      super.setJSONProperty(data);\r\n\r\n      //Chiamo il metodo per le collection\r\n      this.setCollection(data);\r\n\r\n      //Imposto che il documento è originale\r\n      this.setOriginal();\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta una coverImage standard, eliminando le presenti\r\n     */\r\n    setStandardCover() {\r\n\r\n      this.LOCATIONIMAGE = [];\r\n      let standardImage = 'assets/img/cardhome_ge.png';\r\n      \r\n      //Immagine Cover nell'oggetto\r\n      this.IMAGEURL = standardImage;\r\n\r\n      //Creo una immagine standard\r\n      let newImage = new LocationImage;\r\n      newImage.COVERIMAGE = true;\r\n      newImage.IMAGEURL = standardImage;\r\n\r\n      //Impostazione nell'Array\r\n      this.LOCATIONIMAGE.push(newImage);\r\n\r\n    }\r\n\r\n    /** Ritorna il percorso da applicare al tag image */\r\n    getUrlImage(tipoSocieta?: TipoSocieta) {\r\n      let returnImage = '';\r\n      if (this.IMAGEURL) {\r\n        returnImage = this.IMAGEURL;\r\n      }\r\n      else {\r\n        if (tipoSocieta) {\r\n          switch (tipoSocieta) {\r\n            case TipoSocieta.sportiva:\r\n              returnImage = 'assets/img/cardhome_ss.png';    \r\n              break;\r\n\r\n            case TipoSocieta.formazione:\r\n              returnImage = 'assets/img/cardhome_fo.png';    \r\n              break;\r\n          \r\n            default:\r\n              break;\r\n          }\r\n        }\r\n        else {\r\n          returnImage = 'assets/img/cardhome_ge.png';\r\n        }\r\n      }\r\n\r\n      return returnImage;\r\n    }\r\n\r\n    /** Ritorna il numero di campi presenti nella Location */\r\n    getNumCampi() {\r\n      let numCampi = 0;\r\n      if (this.CAMPO) {\r\n        numCampi = this.CAMPO.length;\r\n      }\r\n\r\n      return numCampi;\r\n    }\r\n\r\n    /** Ritorna una copia dell'Array senza l'immagine di Cover */\r\n    imageGallery() {\r\n      return [...this.LOCATIONIMAGE.filter(element => {\r\n        return !element.COVERIMAGE;\r\n      })];\r\n    }\r\n\r\n\r\n\r\n\r\n    //#region COLLECTION SETTING\r\n\r\n    /**\r\n     * Imposta le collection dell'oggetto, con i reali oggetti tipizzati\r\n     * @param data JSON Received\r\n     */\r\n    setCollection(data: any) {\r\n      \r\n      // Riazzero e ricreo le aperture\r\n      this.APERTURALOCATION = [];\r\n\r\n      //Sistemazione Immagini Location\r\n      if (data.LOCATIONIMAGE) {\r\n        this.setCollectionLocationImage(data);\r\n      }\r\n\r\n      //Sistemazione Aperture Location\r\n      if (data.APERTURALOCATION) {\r\n        this.setCollectionAperturaLocation(data);\r\n      }\r\n\r\n      //Sistenazione Campo\r\n      if (data.CAMPO) {\r\n        this.setCollectionCampo(data);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Inizializza la collection CAMPO con i dati ricevuti tipizzando gli oggetti\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionCampo(data: any) {\r\n\r\n      if (data.CAMPO) {\r\n\r\n        //Imposto gli elementi CAMPO in stato da eliminare\r\n        //Utilizzando l'oggetto IDCollection\r\n        IDDocument.setAllDeleting(this.CAMPO);\r\n\r\n        // Ciclo sugli elementi arrivati\r\n        data.CAMPO.forEach(elCampo => {\r\n          // Cerco eventualmente il campo\r\n          let docCampo = this.getCampoByID(elCampo.ID);\r\n          \r\n          //Campo non trovato\r\n          if (!docCampo) {\r\n            docCampo = new Campo();\r\n            docCampo.setJSONProperty(elCampo);\r\n            this.CAMPO.push(docCampo);\r\n          }\r\n          else {\r\n            //Campo Trovato\r\n            docCampo.setJSONProperty(elCampo);\r\n            docCampo.do_deleted = false;\r\n          }\r\n        });\r\n\r\n        //Rimozione di tutti gli elementi non cancellati\r\n        this.CAMPO = this.CAMPO.filter(element => {\r\n          return !element.do_deleted\r\n        });\r\n\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Inizializza la collection Apertura Location con oggetto tipizzati\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionAperturaLocation(data: any) {\r\n      if (data.APERTURALOCATION) {\r\n\r\n\r\n        data.APERTURALOCATION.forEach(elApertura => {\r\n          let newDay = new AperturaLocation();\r\n          newDay.setJSONProperty(elApertura);\r\n\r\n          this.APERTURALOCATION.push(newDay);\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Imposta la collection delle LocationImage\r\n     * @param data JSON Received\r\n     */\r\n    private setCollectionLocationImage(data: any) {\r\n      if (data.LOCATIONIMAGE) {\r\n        if (data.LOCATIONIMAGE.length !== 0) {\r\n          \r\n          //Svuoto l'array\r\n          this.LOCATIONIMAGE = [];\r\n\r\n          //Ciclo sulle Location Image arrivate\r\n          data.LOCATIONIMAGE.forEach(elImage => {\r\n            let newImage = new LocationImage();\r\n            newImage.setJSONProperty(elImage);\r\n            this.LOCATIONIMAGE.push(newImage);\r\n\r\n            // Se fosse l'immagine di Cover la imposto nell'oggetto\r\n            if (newImage.COVERIMAGE) {\r\n              this.IMAGEURL = newImage.IMAGEURL;\r\n            }\r\n          });\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    getCampoByID(id: string): Campo {\r\n      return this.CAMPO.find(element => {\r\n        return element.ID == id;\r\n      })\r\n    }\r\n\r\n\r\n    /**\r\n     * Cicla su tutti i CAMPI presenti ed elimina \r\n     * le informazioni CAMPOSPORT\r\n     */\r\n    emptyCampiSport() {\r\n\r\n      this.CAMPO.forEach(elCampo => {\r\n        elCampo.CAMPOSPORT = [];\r\n      })\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param docCampoSport Campo Sport da aggiungere\r\n     * @param idCampo IDCampo da prelevare\r\n     */\r\n    addCampoSport(docCampoSport: CampoSport, idCampo: string) {\r\n      this.CAMPO.forEach(elCampo => {\r\n        if (elCampo.ID == idCampo) {\r\n          elCampo.addCampoSport(docCampoSport);\r\n        }\r\n      })\r\n    }\r\n\r\n    /**\r\n     * Ritorna l'oggetto Campo che nell'array risulta successivo a quello rappresentato da idCampo\r\n     * Undefined se non ci sono elementi o elementi successivi a quello selezionato\r\n     * @param idCampo IDCampo Attuale\r\n     */\r\n    getNextCampo(idCampo: string = '') {\r\n      let myCampo: Campo;\r\n      let isNext = false;\r\n\r\n      if (this.CAMPO) {\r\n        for (let index = 0; index < this.CAMPO.length; index++) {\r\n          const elCampo = this.CAMPO[index];\r\n\r\n          //Senza idCampo il primo che trovo va bene\r\n          if (!idCampo) {\r\n            myCampo = elCampo;\r\n            break;\r\n          }\r\n          else if (isNext) {\r\n            //Questo è quello che mi serve\r\n            myCampo = elCampo;\r\n            break;\r\n          }\r\n          else if (elCampo.ID == idCampo) {\r\n            //Sarà il prossimo che devo usare\r\n            isNext = true;\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n      return myCampo;\r\n    }\r\n\r\n    /**\r\n     * Ritorna un campo partendo dal suo Indice\r\n     * @param indexZeroBase Indice del campo Zero Base\r\n     */\r\n    getCampoByIndex(indexZeroBase: number) {\r\n      let myCampo: Campo;\r\n      if (this.CAMPO)  {\r\n        myCampo = this.CAMPO[indexZeroBase];\r\n      }\r\n\r\n      return myCampo;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna l'indirizzo della Location nel formato\r\n     * Indirizzo - Citta\r\n     * @param shortVersion Versione ridotta con Indirizzo se presente, oppure Citta\r\n     */\r\n    getAddressLocation(shortVersion: boolean) {\r\n      let value = '';\r\n      if (shortVersion) {\r\n        if (this.INDIRIZZO.length !== 0)  {\r\n          value = this.INDIRIZZO;\r\n        }\r\n        else if (this.COMUNE.length !== 0) {\r\n          value = this.COMUNE;\r\n        }\r\n      }\r\n      else {\r\n        if (this.INDIRIZZO.length !== 0)  {\r\n          value = this.INDIRIZZO;\r\n        }\r\n\r\n        if (this.COMUNE.length !== 0) {\r\n          if (value.length !== 0) {\r\n            value += ' - ';\r\n          }\r\n\r\n          value += this.COMUNE;\r\n        }\r\n\r\n      }\r\n\r\n      return value;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Cerca nella collection dei campi, verificando se lo Sport passato come parametro, puo' essere\r\n     * giocato e ritorna un Array dei Campi Consentiti\r\n     * @param isSport \r\n     */\r\n    getAvalaibleFields(idSport: string) {\r\n      let arCampi = [];\r\n      if (idSport) {\r\n        if (this.CAMPO) {\r\n\r\n            arCampi = this.CAMPO.filter( el => {\r\n                let trovato =false;\r\n                if (el.CAMPOSPORT) {\r\n\r\n                  for (const iterator of el.CAMPOSPORT) {\r\n\r\n                    if (iterator.IDSPORT == idSport) {\r\n                      trovato=true;\r\n                      break;\r\n                    }\r\n\r\n                  }\r\n\r\n                }\r\n              return trovato;\r\n            });\r\n\r\n        }\r\n      }\r\n\r\n      return arCampi;\r\n    }\r\n\r\n    \r\n\r\n}","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { ApicallService } from './apicall.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DocumentoService {\r\n\r\n  constructor(\r\n    private apiCallService: ApicallService\r\n  ) { }\r\n\r\n\r\n  request(config: StartConfiguration, fileUrl: string) {\r\n\r\n        let myHeaders;\r\n        //Per ora non dichiaro un tipo (funziona lo stesso)\r\n        //new HttpHeaders({'Content-type':'text/plain'});    \r\n        \r\n    \r\n        let myUrl = config.urlFileServer + '/' + fileUrl;\r\n        \r\n        return this.apiCallService\r\n          .httpGetFile (myUrl, myHeaders)\r\n          .toPromise<Blob>();\r\n\r\n  }\r\n\r\n}\r\n","\r\n\r\nexport enum TipoArea {\r\n    areaGruppo = 10,\r\n    areaIndipendente = 20\r\n}\r\n\r\nexport enum SettoreAttivita {\r\n    settoreCorso = 10,\r\n    settorePrenotazione = 20,\r\n    settoreTorneo = 30\r\n}\r\n\r\nexport enum SettorePagamentiAttivita {\r\n    settorePagamentoCorso = 10,\r\n    settorePagamentoPrenotazione = 20,\r\n    settorePagamentoTorneo = 30,\r\n    settorePagamentoShop = 40\r\n}\r\n\r\nexport enum TipoCampo {\r\n    campo = 10,\r\n    aulaIndividuale = 100,\r\n    aulaMultipla = 110,\r\n    sala = 200,\r\n    salone = 210\r\n} \r\n\r\nexport enum TipoCorso {\r\n    corso = 10,\r\n    prova = 20\r\n}\r\n\r\nexport enum StatoCorso {\r\n    inserito = 10,\r\n    inValutazione = 20,\r\n    confermato = 30,\r\n    iscrizioniAperte = 40,\r\n    inEsecuzione = 50,\r\n    eseguito = 60,\r\n    annullato = 80\r\n  }\r\n\r\n  export enum TipoSocieta {\r\n    sportiva = 10,\r\n    formazione = 20\r\n  }\r\n\r\n  export enum TipoSport {\r\n    gruppo =  10,\r\n    coppia = 20,\r\n    individuale = 30\r\n}\r\n\r\nexport enum Mansione {\r\n    trainer = 10,\r\n    assistenteTrainer = 20,\r\n    segreteria = 200,\r\n    contabile = 210,\r\n    social = 220,\r\n    custode = 230\r\n} \r\n\r\nexport enum Ruolo {\r\n    admin = 1,\r\n    super = 20,\r\n    collaboratore = 30,\r\n    cliente = 50\r\n}\r\n\r\nexport enum TargetSesso {\r\n    maschile = 10,\r\n    femminile = 20,\r\n    maschileFemminile = 30\r\n}\r\n\r\nexport enum Sesso {\r\n    maschio = 10,\r\n    femmina = 20\r\n}\r\n\r\nexport enum Language {\r\n    italiano = 'ITA',\r\n    inglese = 'ENG',\r\n    spagnolo = 'ESP',\r\n    francese = 'FR'\r\n}\r\n\r\nexport enum Giorni {\r\n    domenica = 0,\r\n    lunedi = 1,\r\n    martedi = 2,\r\n    mercoledi = 3,\r\n    giovedi = 4,\r\n    venerdi = 5,\r\n    sabato = 6\r\n}\r\n\r\nexport enum StrutturaCampo {\r\n    coperto = 10,\r\n    scoperto = 20,\r\n    copertoScoperto = 30\r\n}\r\n\r\nexport enum StatoSlot {\r\n    libero = 0,\r\n    occupato = 10,\r\n    chiuso = 20,\r\n    contattare = 21\r\n}\r\n\r\nexport enum TipoPrivateImage {\r\n    logo = 10,\r\n    icon = 20\r\n}\r\n\r\nexport enum StatoPrenotazione {\r\n    confermata = 10,\r\n    daConfermare = 20,\r\n    disdetta = 30\r\n}\r\n\r\nexport enum AmbitoNews {\r\n    corso = 10,\r\n    prenotazione = 20,\r\n    torneo = 30\r\n}\r\n\r\nexport enum PageType {\r\n    home = 10,\r\n    policyPrivacy = 20,\r\n    condizioniVenditaPrenotazioni = 100,\r\n    condizioniVenditaIscrizioni = 110,\r\n    facebook = 200,\r\n    twitter = 210,\r\n    instagram = 220,\r\n    tikTok = 230\r\n}\r\n\r\n//Questa lista non è presente in Inde ma memorizzata sul db nelle opzioni\r\nexport enum TipoVerificaAccount {\r\n    noverifica = 0,\r\n    verificaemail = 10,\r\n    verificasms = 20,\r\n    verificaemailsms = 30\r\n}\r\n\r\nexport enum RequestPincodeUse {\r\n    forRegistration = 10,\r\n    forRecovery = 20,\r\n    forValidation = 30,\r\n}\r\n\r\nexport enum TipoArticolo {\r\n    prodotto = 10,\r\n    servizio = 20\r\n}\r\n\r\nexport enum TipoPrezzo {\r\n    alNettoDiImposta = 10,\r\n    comprensiviDiImposta = 20\r\n}\r\n\r\n\r\nexport enum TipoMasterDocumento{\r\n    preventivo = 10,\r\n    fattura = 500,\r\n    notaDiCredito = 510,\r\n    ricevuta = 530\r\n}\r\n\r\nexport enum TipoChiusura{\r\n    rangeDate = 10,\r\n    natale = 20,\r\n    santoStefano = 30,\r\n    pasquaCattolica = 40,\r\n    lunediDellAngelo = 50,\r\n    ferragosto = 60,\r\n    aprile25 = 70,\r\n    maggio1 = 80,\r\n    dicembre8 = 90, \r\n    giugno2 = 100 \r\n}\r\n\r\nexport enum AttivitaChiusura{\r\n    tutte = -1,\r\n    affittoStrutture = 10,\r\n    svolgimentoCorsi = 20\r\n}\r\n\r\nexport enum StatoPagamento {\r\n    daPagare=0,\r\n    pagatoInParte=10,\r\n    pagato=20\r\n  \r\n}\r\n\r\nexport enum TipoRigoIncasso {\r\n    incassato = 10,\r\n    scadenza = 20,\r\n    abbuono = 30,\r\n    perdita = 40\r\n}\r\n\r\n//Canali dove effettuare il pagamento, compreso onSite in contanti\r\nexport enum PaymentChannel {\r\n    onSite = 10,\r\n    bonifico = 50,\r\n    applePay = 200,\r\n    googlePay = 210,\r\n    paypal = 220,\r\n    stripe = 240\r\n}\r\n\r\nexport enum PaymentEnvironment {\r\n    test = 10,\r\n    production = 20\r\n}\r\n\r\n//Si puo' pagare in struttura, pagare subito, o con un bonifico\r\nexport enum PaymentMode {\r\n    pagaStruttura = 10,\r\n    pagaBonifico = 50,\r\n    pagaAdesso = 200\r\n}\r\n\r\n//Stati possibili a seguito di una richiesta pagamento Paypal\r\n/*\r\nThe possible values are:\r\n\r\nCREATED. The order was created with the specified context.\r\nSAVED. The order was saved and persisted. The order status continues to be in progress until a capture is made with final_capture = true for all purchase units within the order.\r\nAPPROVED. The customer approved the payment through the PayPal wallet or another form of guest or unbranded payment. For example, a card, bank account, or so on.\r\nVOIDED. All purchase units in the order are voided.\r\nCOMPLETED. The payment was authorized or the authorized payment was captured for the order.\r\nPAYER_ACTION_REQUIRED. The order requires an action from the payer (e.g. 3DS authentication). Redirect the payer to the \"rel\":\"payer-action\" HATEOAS link returned as part of the response prior to authorizing or capturing the order.\r\n*/\r\nexport enum PaypalStatus {\r\n    created = 'CREATED',\r\n    saved = 'SAVED',\r\n    approved = 'APPROVED',\r\n    voided = 'VOIDED',\r\n    completed = 'COMPLETED',\r\n    payer_action_required = 'PAYER_ACTION_REQUIRED'\r\n}\r\n\r\n\r\nexport enum FileType{\r\n    immagini = \"file-photo-o\",\r\n    video = \"file-movie-o\",\r\n    audio = \"file-audio-o\",\r\n    zip = \"file-archive-o\",\r\n    text = \"file-text-o\",\r\n    indefinito = \"file-o\",\r\n    word = \"file-word-o\",\r\n    excel = \"file-excel-o\",\r\n    powerpoint = \"file-powerpoint-o\",\r\n    pdf = \"file-pdf-o\",\r\n}\r\n\r\n//Indica chi puo' visualizzare la location nell'app\r\n//Tutti, Nessuno (Location nascosta), Utenti Specifici (quando la location ha un IDAZIENDACLIENTE, solo gli Utenti legati alla azienda)\r\nexport enum LocationAppVisibility {\r\n    tutti = -1,\r\n    nessuno = 0,\r\n    utentiSpecifici = -2\r\n}\r\n\r\nexport enum ModalitaFruizione{\r\n    inPresenza = 10,\r\n    inRemoto = 20\r\n}\r\n\r\n\r\n\r\n\r\nexport class ValueList {\r\n\r\n    value: any;\r\n    description: any;\r\n    selected: boolean;\r\n    itemIcon: string;\r\n\r\n    /**\r\n     * \r\n     * @param valore Valore Elemento\r\n     * @param descrizione Descrizione\r\n     */\r\n    constructor(valore: any, descrizione: any) {\r\n        this.value = valore;\r\n        this.description = descrizione;\r\n        this.selected = false;\r\n    }\r\n\r\n    /**\r\n     * Decodifica un valore da una lista valori\r\n     * @param objEnum Lista Valori da utilizzare\r\n     * @param value Valore da decodificare\r\n     */\r\n    static decode(objEnum: any, value: any): string {\r\n        let label = '';\r\n\r\n        // Proprietà presente\r\n        if (objEnum.hasOwnProperty(value) ) {\r\n            // Ricavo l'identificativo dato all'Enum\r\n            label = objEnum[value];\r\n            // Ora trasformo la label\r\n            label = ValueList.convert(label);\r\n        }\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * Esempio di utilizzo della decode\r\n     */\r\n    private esempioUso() {\r\n        let label = '';\r\n        label = ValueList.decode(SettoreAttivita, SettoreAttivita.settoreCorso);\r\n    }\r\n\r\n    /**\r\n     * Preleva una etichetta senza Spazi ma in Camel Mode ed inserisce \r\n     * uno spazio prima di ogni maiuscola\r\n     * @param label Etichetta da convertira\r\n     */\r\n    static convert(label: string) {\r\n        let retLabel = '';\r\n        let car = '';\r\n\r\n        if (label) {\r\n\r\n            for (let index = 0; index < label.length; index++) {\r\n\r\n                car = label.substring(index, index+1);\r\n                if (car == car.toUpperCase()) {\r\n                    retLabel = retLabel + ' ';\r\n                }\r\n\r\n                if (index === 0) {\r\n                    car = car.toUpperCase();\r\n                }\r\n\r\n                retLabel = retLabel + car;\r\n\r\n            }\r\n        }\r\n\r\n        return retLabel;\r\n    }\r\n\r\n    /**\r\n     * Dato un Enum (Lista Valori) Torna un Array con elementi\r\n     * value - description\r\n     * @param objEnum Nome della Lista Valori desiderata\r\n     */\r\n    static getArray(objEnum: any) : ValueList[] {\r\n        let retElements: ValueList[] = [];\r\n\r\n        Object.keys(objEnum).forEach(key => {\r\n            if (ValueList.isNumber(key) == false) {\r\n                let field = key;\r\n                let value = objEnum[field];\r\n                let decodifica = ValueList.decode(objEnum, value);\r\n                let element = new ValueList(value, decodifica);\r\n\r\n                retElements.push(element);\r\n            }\r\n        });\r\n\r\n        return retElements;\r\n    }\r\n\r\n    /**\r\n     * Ritorna TRUE / FALSE a seconda se un elemento è Numerico o No\r\n     * @param value Valore da controllare\r\n     */\r\n    static isNumber(value: string | number): boolean\r\n    {\r\n      return ((value != null) &&\r\n              (value !== '') &&\r\n              !isNaN(Number(value.toString())));\r\n    }\r\n}\r\n\r\n//#region LISTE VALORI INTERNE\r\n//Liste non presenti in GOUEGO\r\n\r\nexport enum Condition {\r\n    uguale = '=',\r\n    maggiore = '>',\r\n    minore = '<',\r\n    diverso = '#'\r\n}\r\n\r\n\r\nexport enum RequestState {\r\n    noRequest = 0,\r\n    waitingReply = 1,\r\n    executed = 2\r\n}\r\n\r\nexport enum SegmentCorsi {\r\n    tutti = 10,\r\n    mioLivello = 20\r\n}\r\n\r\nexport enum StatoIscrizione{\r\n    confermata = -1,\r\n    inProva = 0\r\n}\r\n\r\nexport enum Mesi {\r\n    gennaio = 1,\r\n    febbraio = 2,\r\n    marzo = 3,\r\n    aprile = 4,\r\n    maggio = 5,\r\n    giugno = 6,\r\n    luglio = 7,\r\n    agosto = 8,\r\n    settembre = 9,\r\n    ottobre = 10,\r\n    novembre = 11,\r\n    dicembre = 12\r\n\r\n}\r\n\r\n//Identifica un corso rispett ad oggi\r\nexport enum TimeTrainerCourse {\r\n    attivi = 0,\r\n    passati = -1,\r\n    futuri = 1\r\n  \r\n  }\r\n\r\nexport enum RangeSearch {\r\n    giorno = 10,\r\n    settimana = 20,\r\n    mese = 30\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n//#endregion","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\nexport class Valuta extends IDDocument{\r\n    DESCR: string;\r\n    SIMBOLO: string;\r\n    NUMDECIMALI: number;\r\n    DATAOBSOLESCENZA: Date;\r\n    CODICEISO: string;\r\n    PREDEFINITA: boolean;\r\n    ICONPREF: string;\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'DESCR',\r\n            'SIMBOLO',\r\n            'CODICEISO',\r\n            'ICONPREF'            \r\n        ];\r\n        let arNumber = ['NUMDECIMALI'];\r\n        let arBoolean = ['PREDEFINITA'];\r\n        let arDate = ['DATAOBSOLESCENZA'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'Valuta';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'VALUTA';\r\n        objDescriptor.describeField = 'DESCR';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject, from } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Utente } from '../models/utente.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { LogApp } from '../models/log.model';\r\nimport { AccountRequestCode, AccountOperationResponse, AccountVerifyCode } from '../models/accountregistration.model';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\nimport { ParamsExport } from '../library/models/iddocument.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { Account } from '../models/account.model';\r\nimport { promise } from 'protractor';\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtenteService {\r\n\r\n  private _utente = new BehaviorSubject<Utente>(new Utente);\r\n  private _utenteLoggato = new BehaviorSubject<boolean>(false);\r\n  private _idAreaFAV = new BehaviorSubject<string>(''); //Avvisa di cambiare l'Area Operativa\r\n  private _userPicture = new BehaviorSubject<string>('');\r\n\r\n  get utente() {\r\n    return this._utente.asObservable();\r\n  }\r\n\r\n  get utenteLoggato() {\r\n    return this._utenteLoggato.asObservable();\r\n  }\r\n\r\n  get actualLoggato(){\r\n    return this._utenteLoggato.getValue();\r\n  }\r\n\r\n  get actualUtente() {\r\n    return this._utente.getValue();\r\n  }\r\n\r\n  get userPicture():Observable<string> {\r\n    return this._userPicture.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Imposta la UserPicture\r\n   * @param value DataUrl image\r\n   */\r\n  setUserPicture(dataUrl: string) {\r\n    this._userPicture.next(dataUrl);\r\n  }\r\n\r\n  /**\r\n   * Area Favorita dall'utente\r\n   */\r\n  get idAreaFAV() {\r\n    return this._idAreaFAV.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private apiService: ApicallService,\r\n              private docService: DocstructureService) { }\r\n\r\n\r\n  /**\r\n   * Effettua la richiesta al Server con i dati dell'Utente\r\n   * @param config Parametri di configurazione\r\n   * @param username Username Utente\r\n   * @param password Password Utente\r\n   * @param forceIdArea Se impostata, l'area favorita dell'utente diventa questa\r\n   */\r\n  login(username: string,\r\n        password: string,\r\n        myStartConfig: BehaviorSubject<StartConfiguration>,\r\n        forceIdArea?:string \r\n        ): Promise<any> {\r\n\r\n    return new Promise<any>((resolve,reject) => {\r\n            let myUtente = new Utente();\r\n            let jsonBody = '';\r\n            let paramExp = new ParamsExport();\r\n            let myAccount = new Account();\r\n            const method = 'authLoginMob';\r\n            let startConf: StartConfiguration;\r\n\r\n            //Compilo un documento con login e password\r\n            myUtente.WEBLOGIN = username;\r\n            myUtente.INPUTPASSWORD = password;\r\n\r\n            //Preparo esportazione\r\n            paramExp.clearDOProperty = true;\r\n            paramExp.clearPKProperty = true;\r\n            paramExp.clearPrivateProperty = true;\r\n            jsonBody = myUtente.exportToJSON(paramExp);\r\n            jsonBody = `{\"docUtente\" : ${jsonBody}}`;\r\n\r\n\r\n            //Disattivo il login utente\r\n            this._utenteLoggato.next(false);\r\n\r\n            this.docService.requestForFunction(myAccount,method,jsonBody)\r\n                          .then((response:PostResponse) => {\r\n                            let myUserAuthCode = '';\r\n\r\n                            //Risposta ricevuta\r\n                            if (response.result) {\r\n\r\n                              if (response.document) {\r\n\r\n                                let docInResponse = response.document\r\n                                \r\n  \r\n                                let docUtente = new Utente();\r\n                                docUtente.setJSONProperty(docInResponse);\r\n                                docUtente.WEBLOGIN = username;\r\n                                docUtente.setOriginal();\r\n                                \r\n  \r\n                                //Imposto come tag authCode il codice di autorizzazione utente ricevuto\r\n                                docUtente.setTagValue('authCode',response.code);\r\n                                myUserAuthCode = response.code;\r\n\r\n                                startConf = myStartConfig.getValue();\r\n                                startConf.authorizationUserCode = response.code;\r\n                                myStartConfig.next(startConf);\r\n  \r\n                                //Emetto Utente\r\n                                this._utente.next(docUtente);\r\n  \r\n                                //Emetto il Boolean TRUE di avvenuto accesso\r\n                                this._utenteLoggato.next(true);\r\n  \r\n                                //Se devo forzare l'area preferita la imposto\r\n                                if (forceIdArea && forceIdArea.length !== 0) {\r\n                                  docUtente.IDAREAOPERATIVA = forceIdArea;\r\n                                }\r\n\r\n                                //Utente ha una area preferita\r\n                                if (docUtente.IDAREAOPERATIVA) {\r\n                                  //Dovrei posizionarlo\r\n                                  this._idAreaFAV.next(docUtente.IDAREAOPERATIVA);\r\n                                }\r\n  \r\n                                //Emetto la risposta del server\r\n                                resolve(response);\r\n                              }\r\n                              else {\r\n                                reject(\"User document not found\");\r\n                              }\r\n                              \r\n                            }\r\n                            else {\r\n                              reject(response.message);\r\n                            }\r\n\r\n                            //Reimposto authorization code\r\n                            startConf = myStartConfig.getValue();\r\n                            startConf.authorizationUserCode = response.code;\r\n                            myStartConfig.next(startConf);\r\n\r\n\r\n\r\n                          })\r\n                          .catch(error => {\r\n\r\n                            //Reimposto authorization code\r\n                            startConf = myStartConfig.getValue();\r\n                            startConf.authorizationUserCode = '';\r\n                            myStartConfig.next(startConf);\r\n\r\n                            reject(error);\r\n                          });\r\n      });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Esecuzione Logoff dell'utente\r\n   */\r\n  logoff() {\r\n\r\n    this._utenteLoggato.next(false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Richiede nuovamente al server i dati dell'utente (esattamente come al login); dopodichè il docutente viene riemesso aggiornato\r\n   * @param authUserCode codice autorizzativo legato all'utente\r\n   */\r\n  updateClientData(): Promise<Utente>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const method = 'GetActiveUtente';  //Da decidere \r\n      const document = new Account();\r\n\r\n      //faccio la richiesta\r\n      this.docService.requestForFunction(document, method)\r\n      .then(result => {\r\n\r\n        if(result){\r\n\r\n          let newUtente: Utente = new Utente();\r\n          newUtente.setJSONProperty(result);\r\n          this._utenteLoggato.next(true);\r\n          this._utente.next(newUtente);\r\n\r\n          resolve(newUtente);\r\n        }\r\n        else{\r\n          throw new Error('Nessuna risposta dal server');\r\n        }\r\n\r\n        //recupero l'utente\r\n        //lo metto nella proprietà\r\n        //riemetto il next della proprietà\r\n        //risolvo\r\n\r\n\r\n      })\r\n      .catch(error => {\r\n        reject(error); \r\n      })\r\n      \r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Richiede al server l'aggiornamento dei dati Utente\r\n   * @param config Dati di configurazione\r\n   * @param docUtenteUpdate Documento Utente con dati modificati\r\n   */\r\n\r\n  requestUpdate(config: StartConfiguration, docUtenteUpdate: Utente):Promise<Utente>{\r\n\r\n    return new Promise((resolve, reject)=>{\r\n\r\n    const doObject = 'UTENTE';\r\n\r\n    const metodo = 'updateUtente';\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n\r\n    const myParams = new HttpParams();\r\n    let body = '';\r\n\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n    //Body da inviare\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramExport = new ParamsExport();\r\n    paramExport.clearDOProperty = true;\r\n    paramExport.clearPKProperty = false;\r\n    paramExport.clearPrivateProperty = true;\r\n    paramExport.onlyPropertyModified = true;\r\n\r\n    body = docUtenteUpdate.exportToJSON(paramExport);\r\n    body = `{\"docUtente\": ${body}}`;\r\n\r\n\r\n    //faccio la richiesta\r\n    this.apiService.httpPost(myUrl, myHeaders, myParams, body)\r\n    .pipe(map(rawResponse => {\r\n\r\n      return rawResponse.update;\r\n\r\n    })).subscribe(response => {\r\n\r\n      let myResponse = new PostResponse();\r\n      myResponse.result = response['result'];\r\n      myResponse.message = response['message'];\r\n      myResponse.document = response['document'];\r\n\r\n      if (myResponse.result){\r\n\r\n        let docUtente = new Utente();\r\n        let objDocument = myResponse.getDocument();\r\n\r\n        if (objDocument) {\r\n            //l'operazione è andata a buon fine, restituisco l'utente\r\n            docUtente.setJSONProperty(objDocument);\r\n            \r\n            this._utente.next(docUtente);\r\n            resolve(docUtente);\r\n        }\r\n        else {\r\n          reject('Errore ricezione dati server');\r\n        }\r\n\r\n      }\r\n      else{\r\n        //il server ha risposto, ma l'operazione non è andata a buon fine, restituisco il messaggio di errore\r\n        reject (response.message);\r\n      }\r\n    }, error => {\r\n\r\n      //il server non ha risposto\r\n      reject(error);\r\n\r\n    })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  requestChangePassword(config: StartConfiguration, oldPsw:string, newPsw:string) {\r\n    let actualUtente = this._utente.getValue();\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override','CHANGEPWDMOB');\r\n\r\n    //  new HttpHeaders({'Content-type':'application/json',\r\n    //                                    'X-HTTP-Method-Override':'CHANGEPWDMOB',\r\n    //                                    'appid':config.appId\r\n    //                                   });\r\n\r\n    const myParams = new HttpParams().set('GUIDUTENTE', actualUtente.ID).append('PWDATTUALE', oldPsw).append('PWDNUOVA',newPsw);\r\n    const doObject = 'ACCOUNT';\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n\r\n    // Ritorno la chiamata\r\n    return this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n\r\n  }\r\n\r\n\r\n  //#region FASI REGISTRAZIONE\r\n\r\n\r\n  /**\r\n   * Invia al server la richiesta per inviare via Mail/SMS i codici per la registrazione account\r\n   * @param config Dati di configurazione\r\n   * @param docRequestCode Documento con le informazioni da inviare al server per effettuare la richiesta\r\n   */\r\n  registrationSendCodici(config: StartConfiguration,\r\n                         docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n          //Viene effettuata una chiamata al server per ottenere\r\n          //l'invio di una mail e/o un SMS contenente codici PIN\r\n          const metodo = 'registrationSendCodici';\r\n          let myHeaders = config.getHttpHeaders();\r\n          myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n\r\n          const myParams = new HttpParams();\r\n          const doObject = 'ACCOUNT';\r\n          let bodyRequest = '';\r\n\r\n          let myUrl = config.urlBase + '/' + doObject;\r\n\r\n          return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n            if (docRequestCode) {\r\n\r\n              //Creo il body da inviare\r\n\r\n              //Questi sono i parametri per l'esportazione\r\n              let paramExport = new ParamsExport();\r\n              paramExport.clearDOProperty = true;\r\n              paramExport.clearPKProperty = true;\r\n              paramExport.clearPrivateProperty = true;\r\n\r\n              bodyRequest = docRequestCode.exportToJSON(paramExport);\r\n\r\n              bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n              \r\n\r\n              //Faccio la chiamata POST\r\n              this.apiService\r\n                  .httpPost(myUrl, myHeaders, myParams, bodyRequest )\r\n                  .pipe(map(received => {\r\n                          return received.activation;\r\n                  }))\r\n                  .subscribe((response:AccountOperationResponse) => {\r\n                      if (response.result) {\r\n                        resolve(response);\r\n                      }\r\n                      else {\r\n                        reject(response.message);\r\n                      }\r\n                  }, error => {\r\n                  reject(error);\r\n                  })\r\n            }\r\n            else {\r\n              reject('Dati mancanti per la richiesta');\r\n            }\r\n\r\n          });\r\n\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Invia al server una richiesta per verificare i pincode inseriti dall'utente\r\n   * @param config Dati di configurazione\r\n   * @param docVerifyCode Dati da verificare\r\n   */\r\n  registrationVerifyCodici(config: StartConfiguration,\r\n    docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n        const metodo = 'registrationVerifyCodici';\r\n        let myHeaders = config.getHttpHeaders();\r\n        myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n\r\n        const myParams = new HttpParams();\r\n        const doObject = 'ACCOUNT';\r\n        let bodyRequest = '';\r\n\r\n        let myUrl = config.urlBase + '/' + doObject;\r\n\r\n        return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n            if (docVerifyCode) {\r\n\r\n                //Creo il body da inviare\r\n\r\n                //Questi sono i parametri per l'esportazione\r\n                let paramExport = new ParamsExport();\r\n                paramExport.clearDOProperty = true;\r\n                paramExport.clearPKProperty = true;\r\n                paramExport.clearPrivateProperty = true;\r\n\r\n\r\n                bodyRequest = docVerifyCode.exportToJSON(paramExport);\r\n\r\n                bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n\r\n                //Faccio la chiamata POST\r\n                this.apiService\r\n                .httpPost(myUrl, myHeaders, myParams, bodyRequest )\r\n                .pipe(map(received => {\r\n                    return received.activation;\r\n                }))\r\n                .subscribe((response:AccountOperationResponse) => {\r\n                if (response.result) {\r\n                  resolve(response);\r\n                }\r\n                else {\r\n                  reject(response.message);\r\n                }\r\n                }, error => {\r\n                  reject(error);\r\n                })\r\n            }\r\n            else {\r\n              reject('Dati mancanti per la richiesta');\r\n            }\r\n\r\n        });\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * Invia al server i dati per completare la registrazione di un account\r\n * @param config Dati configurazione\r\n * @param docUtente Utente da registrare\r\n * @param docRequestCode Documento di Richiesta codici iniziale\r\n */\r\nregistrationFinalize(config: StartConfiguration,\r\n  docUtente: Utente,\r\n  docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\n    //Viene inviato al server il documento per chiedere la registrazione utente\r\n    const metodo = 'registrationFinalize';\r\n\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n\r\n    const myParams = new HttpParams();\r\n    const doObject = 'ACCOUNT';\r\n    let bodyRequest = '';\r\n    let bodyUtente = '';\r\n    let bodyFinal = '';\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\nreturn new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n  if (docRequestCode && docUtente) {\r\n\r\n    //Creo il body da inviare\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramExport = new ParamsExport();\r\n    paramExport.clearDOProperty = true;\r\n    paramExport.clearPKProperty = true;\r\n    paramExport.clearPrivateProperty = true;\r\n\r\n\r\n    bodyRequest = docRequestCode.exportToJSON(paramExport);\r\n    bodyUtente = docUtente.exportToJSON(paramExport);\r\n\r\n    bodyFinal = `{\"docRequest\" : ${bodyRequest}, \"docUtente\": ${bodyUtente}}`;\r\n\r\n    \r\n\r\n    //Faccio la chiamata POST\r\n    this.apiService\r\n      .httpPost(myUrl, myHeaders, myParams, bodyFinal )\r\n      .pipe(map(received => {\r\n        return received.activation;\r\n      }))\r\n      .subscribe((response:AccountOperationResponse) => {\r\n\r\n\r\n        if (response.result) {\r\n            resolve(response);\r\n        }\r\n        else {\r\n            reject(response.message);\r\n        }\r\n        }, error => {\r\n            reject(error);\r\n        });\r\n    }\r\n    else {\r\n      reject('Dati mancanti per la richiesta');\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n\r\n  //#endregion\r\n\r\n\r\n  //#region  FASI RECUPERO PSW\r\n\r\n  /**\r\n   * Invia al server la richiesta per inviare via Mail/SMS i codici per la registrazione account\r\n   * @param config Dati di configurazione\r\n   * @param docRequestCode Documento con le informazioni da inviare al server per effettuare la richiesta\r\n   */\r\n  recoverySendCodici(config: StartConfiguration,\r\n  docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n  //Viene effettuata una chiamata al server per ottenere\r\n  //l'invio di una mail e/o un SMS contenente codici PIN\r\n  const metodo = 'recoverySendCodici';\r\n\r\n  let myHeaders = config.getHttpHeaders();\r\n  myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n  const myParams = new HttpParams();\r\n  const doObject = 'ACCOUNT';\r\n  let bodyRequest = '';\r\n\r\n  let myUrl = config.urlBase + '/' + doObject;\r\n\r\n  return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n  if (docRequestCode) {\r\n\r\n  //Creo il body da inviare\r\n\r\n  //Questi sono i parametri per l'esportazione\r\n  let paramExport = new ParamsExport();\r\n  paramExport.clearDOProperty = true;\r\n  paramExport.clearPKProperty = true;\r\n  paramExport.clearPrivateProperty = true;\r\n\r\n\r\n  bodyRequest = docRequestCode.exportToJSON(paramExport);\r\n\r\n  bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n  \r\n\r\n  //Faccio la chiamata POST\r\n  this.apiService\r\n  .httpPost(myUrl, myHeaders, myParams, bodyRequest )\r\n  .pipe(map(received => {\r\n      return received.recovery;\r\n  }))\r\n  .subscribe((response:AccountOperationResponse) => {\r\n    resolve(response);\r\n  }, error => {\r\n  reject(error);\r\n  })\r\n  }\r\n  else {\r\n  reject('Dati mancanti per la richiesta');\r\n  }\r\n\r\n  });\r\n\r\n\r\n\r\n}\r\n\r\n /**\r\n   * Invia al server una richiesta per verificare i pincode inseriti dall'utente\r\n   * @param config Dati di configurazione\r\n   * @param docVerifyCode Dati da verificare\r\n   */\r\n  recoveryVerifyCodici(config: StartConfiguration,\r\n    docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n        const metodo = 'recoveryVerifyCodici';\r\n\r\n        let myHeaders = config.getHttpHeaders();\r\n        myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n        const myParams = new HttpParams();\r\n        const doObject = 'ACCOUNT';\r\n        let bodyRequest = '';\r\n\r\n        let myUrl = config.urlBase + '/' + doObject;\r\n\r\n        return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n            if (docVerifyCode) {\r\n\r\n                //Creo il body da inviare\r\n\r\n                //Questi sono i parametri per l'esportazione\r\n                let paramExport = new ParamsExport();\r\n                paramExport.clearDOProperty = true;\r\n                paramExport.clearPKProperty = true;\r\n                paramExport.clearPrivateProperty = true;\r\n\r\n                bodyRequest = docVerifyCode.exportToJSON(paramExport);\r\n                bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n\r\n                //Faccio la chiamata POST\r\n                this.apiService\r\n                .httpPost(myUrl, myHeaders, myParams, bodyRequest )\r\n                .pipe(map(received => {\r\n                    return received.recovery;\r\n                }))\r\n                .subscribe((response:AccountOperationResponse) => {\r\n                  resolve(response);\r\n                }, error => {\r\n                  reject(error);\r\n                })\r\n            }\r\n            else {\r\n              reject('Dati mancanti per la richiesta');\r\n            }\r\n\r\n        });\r\n}\r\n\r\n/**\r\n * Invia al server i dati per completare la registrazione di un account\r\n * @param config Dati configurazione\r\n * @param docUtente Utente da registrare\r\n * @param docRequestCode Documento di Richiesta codici iniziale\r\n */\r\nrecoveryFinalize(config: StartConfiguration,\r\n  docUtente: Utente,\r\n  docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n\r\n    //Viene inviato al server il documento per chiedere la registrazione utente\r\n    const metodo = 'recoveryFinalize';\r\n\r\n\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n    const myParams = new HttpParams();\r\n    const doObject = 'ACCOUNT';\r\n    let bodyRequest = '';\r\n    let bodyUtente = '';\r\n    let bodyFinal = '';\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\nreturn new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n  if (docRequestCode && docUtente) {\r\n\r\n    //Creo il body da inviare\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramReqExport = new ParamsExport();\r\n    paramReqExport.clearDOProperty = true;\r\n    paramReqExport.clearPKProperty = true;\r\n    paramReqExport.clearPrivateProperty = true;\r\n\r\n    bodyRequest = docRequestCode.exportToJSON(paramReqExport);\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramUteExport = new ParamsExport();\r\n    paramUteExport.clearDOProperty = true;\r\n    paramUteExport.clearPKProperty = false;\r\n    paramUteExport.clearPrivateProperty = true;\r\n\r\n    bodyUtente = docUtente.exportToJSON(paramUteExport);\r\n\r\n    bodyFinal = `{\"docRequest\" : ${bodyRequest}, \"docUtente\": ${bodyUtente}}`;\r\n\r\n    \r\n\r\n    //Faccio la chiamata POST\r\n    this.apiService\r\n      .httpPost(myUrl, myHeaders, myParams, bodyFinal)\r\n      .pipe(map(received => {\r\n        return received.recovery;\r\n      }))\r\n      .subscribe((response:AccountOperationResponse) => {\r\n\r\n        resolve(response);\r\n        }, error => {\r\n            reject(error);\r\n        });\r\n    }\r\n    else {\r\n      reject('Dati mancanti per la richiesta');\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n  //#endregion\r\n\r\n  //#region VERIFICA CONTATTI\r\n\r\n  /**\r\n   * Invia al server la richiesta per inviare via Mail/SMS i codici per la procedura di verifica dei contatti\r\n   * @param config Dati di configurazione\r\n   * @param docRequestCode Documento con le informazioni da inviare al server per effettuare la richiesta\r\n   */\r\n  validationSendCodici(config: StartConfiguration,\r\n    docUtente:Utente,\r\n    docRequestCode: AccountRequestCode):Promise<AccountOperationResponse> {\r\n    //Viene effettuata una chiamata al server per ottenere\r\n    //l'invio di una mail e/o un SMS contenente codici PIN\r\n    const metodo = 'validationSendCodici';\r\n    // const myHeaders = new HttpHeaders({'Content-type':'application/json',\r\n    //                         'X-HTTP-Method-Override': metodo,\r\n    //                         'appid':config.appId\r\n    //                       });\r\n    let myHeaders = config.getHttpHeaders();\r\n    myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n    const myParams = new HttpParams();\r\n    const doObject = 'ACCOUNT';\r\n    let bodyRequest = '';\r\n    let bodyUtente = '';\r\n    let bodyFinal = '';\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n    return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n    if (docRequestCode) {\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramReqExport = new ParamsExport();\r\n    paramReqExport.clearDOProperty = true;\r\n    paramReqExport.clearPKProperty = true;\r\n    paramReqExport.clearPrivateProperty = true;\r\n\r\n    //Creo il body da inviare\r\n    bodyRequest = docRequestCode.exportToJSON(paramReqExport);\r\n\r\n    //Questi sono i parametri per l'esportazione\r\n    let paramUteExport = new ParamsExport();\r\n    paramUteExport.clearDOProperty = true;\r\n    paramUteExport.clearPKProperty = false;\r\n    paramUteExport.clearPrivateProperty = true;\r\n\r\n    bodyUtente = docUtente.exportToJSON(paramUteExport);\r\n\r\n    bodyFinal = `{\"docRequest\" : ${bodyRequest}, \"docUtente\": ${bodyUtente}}`;\r\n\r\n    //Faccio la chiamata POST\r\n    this.apiService\r\n    .httpPost(myUrl, myHeaders, myParams, bodyFinal )\r\n    .pipe(map(received => {\r\n        return received.validation;\r\n    }))\r\n    .subscribe((response:AccountOperationResponse) => {\r\n      resolve(response);\r\n    }, error => {\r\n      reject(error);\r\n    })\r\n    }\r\n    else {\r\n      reject('Dati mancanti per la richiesta');\r\n    }\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n   /**\r\n   * Invia al server una richiesta per verificare i pincode inseriti dall'utente\r\n   * @param config Dati di configurazione\r\n   * @param docVerifyCode Dati da verificare\r\n   */\r\n  validationVerifyCodici(config: StartConfiguration,\r\n    docVerifyCode: AccountVerifyCode):Promise<AccountOperationResponse> {\r\n        const metodo = 'validationVerifyCodici';\r\n\r\n        let myHeaders = config.getHttpHeaders();\r\n        myHeaders = myHeaders.append('X-HTTP-Method-Override', metodo);\r\n        const myParams = new HttpParams();\r\n        const doObject = 'ACCOUNT';\r\n        let bodyRequest = '';\r\n\r\n        let myUrl = config.urlBase + '/' + doObject;\r\n\r\n        return new Promise<AccountOperationResponse>((resolve, reject)=> {\r\n            if (docVerifyCode) {\r\n\r\n                //Creo il body da inviare\r\n\r\n                //Questi sono i parametri per l'esportazione\r\n                let paramReqExport = new ParamsExport();\r\n                paramReqExport.clearDOProperty = true;\r\n                paramReqExport.clearPKProperty = true;\r\n                paramReqExport.clearPrivateProperty = true;\r\n\r\n                bodyRequest = docVerifyCode.exportToJSON(paramReqExport);\r\n                bodyRequest = `{\"docRequest\" : ${bodyRequest}}`;\r\n\r\n                //Faccio la chiamata POST\r\n                this.apiService\r\n                .httpPost(myUrl, myHeaders, myParams, bodyRequest)\r\n                .pipe(map(received => {\r\n                    return received.validation;\r\n                }))\r\n                .subscribe((response:AccountOperationResponse) => {\r\n                  this.updateClientData()\r\n                  .then(() => {\r\n                    resolve(response);\r\n                  })\r\n                  .catch(error => {\r\n                    reject(error);\r\n                  })\r\n                }, error => {\r\n                    reject(error);\r\n                })\r\n            }\r\n            else {\r\n              reject('Dati mancanti per la richiesta');\r\n            }\r\n\r\n        });\r\n}\r\n\r\n  //#endregion\r\n}\r\n","export enum TypeDefinition {\r\n    undefined = 'undefined',\r\n    char = 'String',\r\n    date = 'Date',\r\n    dateTime = 'DateTime',\r\n    time = 'Time',\r\n    number = 'Number',\r\n    numberDecimal = 'Float',\r\n    boolean = 'boolean',\r\n    collection = 'collection',\r\n    document = 'document'\r\n}\r\n\r\n/**\r\n* Classe di associazione NomeCampo -> Tipologia\r\n*/\r\nexport class TypeReflector {\r\n\r\n    private _fieldName: string;\r\n    private _fieldType: TypeDefinition;\r\n    //Se il campo è in relazione con un altro documento, qui trovo la relazione con il documento e la proprietà del documento in relazione\r\n    private _relFieldDoc: string;\r\n    private _relFieldName: string;\r\n    private _primaryKey: boolean; //Il campo è una chiave primaria\r\n\r\n    get primaryKey(): boolean {\r\n      return this._primaryKey;\r\n    }\r\n  \r\n    set primaryKey(value: boolean) {\r\n      this._primaryKey = value;\r\n    }  \r\n  \r\n    get fieldName(): string {\r\n      return this._fieldName;\r\n    }\r\n  \r\n    set fieldName(value: string) {\r\n\r\n        this._fieldName = value;\r\n        //Se fosse ID lo imposta come chiave primaria\r\n        this._forceIfPrimaryKey();  \r\n    }\r\n  \r\n    get fieldType(): TypeDefinition {\r\n      return this._fieldType;\r\n    }\r\n  \r\n    set fieldType(value: TypeDefinition) {\r\n      this._fieldType = value;\r\n    }\r\n\r\n        /**\r\n     * Forza impostando come primary Key un campo che si chiama ID\r\n     */\r\n    private _forceIfPrimaryKey() {\r\n        if (this._fieldName == 'ID') {\r\n        this._primaryKey = true;\r\n        }\r\n    }\r\n  \r\n    constructor(campoName: string,\r\n                campoType: TypeDefinition,\r\n                relDoc?: string,\r\n                relName?: string) {\r\n  \r\n        this._fieldName = campoName;\r\n        this._fieldType = campoType;\r\n        this._relFieldDoc = relDoc;\r\n        this._relFieldName = relName;\r\n\r\n        //Metto come chiave False, semmai la cambio dopo\r\n        this._primaryKey = false;\r\n        //Se fosse ID lo imposta come chiave primaria\r\n        this._forceIfPrimaryKey();        \r\n  \r\n    }\r\n  \r\n    get relFieldDoc(): string {\r\n        return this._relFieldDoc;\r\n    }\r\n  \r\n    set relFieldDoc(value:string) {\r\n        this._relFieldDoc = value;\r\n    }\r\n  \r\n    get relFieldName(): string {\r\n        let strReturn = '';\r\n        if (this._relFieldDoc && this._relFieldDoc.length !== 0) {\r\n            if (this._relFieldName && this._relFieldName) {\r\n                strReturn = this._relFieldName;\r\n            }\r\n            else {\r\n                strReturn = 'ID';\r\n            }\r\n        }\r\n  \r\n        return strReturn;\r\n    }\r\n  \r\n    set relFieldName(value:string) {\r\n        this._relFieldName = value;\r\n    }\r\n  \r\n    /**\r\n     * Ritorna TRUE se il campo è parte di un servizio Documentale\r\n     * ID, do_deleted etc...\r\n     */\r\n    serviceField(): boolean {\r\n        let value = false;\r\n        let arServizi = ['ID','do_updated','do_loaded','do_inserted','do_deleted'];\r\n        if (arServizi.includes(this._fieldName)) {\r\n            value = true;\r\n        }\r\n        return value;\r\n    }\r\n  \r\n    /**\r\n     * Ritorna TRUE se il campo è un campo presente anche sul server\r\n     */\r\n    nativeField(): boolean {\r\n        let value = true;\r\n        if (this._fieldName.substr(0,1) == '_') {\r\n            // I campi che iniziano con _ sono privati di solito di Lookup\r\n            value = false;\r\n        }\r\n  \r\n        return value;\r\n    }\r\n  \r\n  \r\n    /**\r\n     * Controlla e indica se ha una relazione il campo\r\n     */\r\n    get isForeignKey():boolean {\r\n        let result = false;\r\n  \r\n        if (this._relFieldDoc) {\r\n            result = true;\r\n        }\r\n  \r\n        return result;\r\n    }\r\n  }\r\n\r\n/**\r\n * Classe per Tipizzare intere classi\r\n */\r\nexport class  Descriptor{\r\n    fields: TypeReflector[] = [];\r\n\r\n    //Nome della classe\r\n    private _className: string; \r\n\r\n    //Indica se la classe viene gestita in remoto\r\n    private _doRemote: boolean;\r\n\r\n    //Nome da utilizzare nelle chiamate webapi\r\n    private _classWebApiName: string;\r\n\r\n    //Campo che descrive la riga (usato di default per le decodifiche)\r\n    private _describeField: string;\r\n\r\n    \r\n    get className() {\r\n        return this._className;\r\n    }\r\n\r\n    set className(value:string) {\r\n        this._className = value;\r\n        \r\n        if (!this._classWebApiName || this._classWebApiName.length == 0) {\r\n            this._classWebApiName = value;\r\n        }\r\n    }\r\n\r\n    get classWebApiName() {\r\n        return this._classWebApiName;\r\n    }\r\n\r\n    set classWebApiName(value: string) {\r\n        this._classWebApiName = value;\r\n    }\r\n\r\n    get describeField() {\r\n        return this._describeField;\r\n    }\r\n\r\n    set describeField(value: string) {\r\n        this._describeField = value;\r\n    }    \r\n\r\n    get doRemote() {\r\n        return this._doRemote;\r\n    }\r\n\r\n    set doRemote(value: boolean) {\r\n        this._doRemote = value;\r\n    }\r\n\r\n    /**\r\n     * Ritorna un array con i campi foreignkey\r\n     */\r\n    get foreignKeys():TypeReflector[] {\r\n\r\n        let arForeign: TypeReflector[] = [];\r\n\r\n        if (this.fields) {\r\n            for (let index = 0; index < this.fields.length; index++) {\r\n                const element = this.fields[index];\r\n                const isForeign = element.isForeignKey;\r\n                if (isForeign) {\r\n                    arForeign.push(element);\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        return arForeign;\r\n    }\r\n\r\n  /**\r\n   * Ritorna il nome della chiave primaria se presente\r\n   */\r\n  get primaryKeyFieldName(): string {\r\n    let field: TypeReflector;\r\n    let fieldName: string = '';\r\n    field = this.fields.find(elField => {\r\n      return (elField.primaryKey == true)\r\n    });\r\n\r\n    if (field) {\r\n      fieldName = field.fieldName;\r\n    }\r\n\r\n    return fieldName;\r\n  }    \r\n\r\n    constructor() {\r\n        this._doRemote = false;\r\n\r\n        this.add('ID',TypeDefinition.char);\r\n        this.add('do_updated', TypeDefinition.boolean);\r\n        this.add('do_loaded', TypeDefinition.boolean);\r\n        this.add('do_inserted', TypeDefinition.boolean);\r\n        this.add('do_deleted', TypeDefinition.boolean);\r\n    }\r\n\r\n\r\n  /**\r\n   * Aggiunge un Campo/Tipo all'insieme\r\n   * @param campoName Nome Campo\r\n   * @param campoType Tipo Campo\r\n   */\r\n  add(campoName: string, campoType: TypeDefinition, relDoc?:string, relField?:string) {\r\n    let typeR = new TypeReflector(campoName, campoType, relDoc, relField);\r\n    //Se non esiste lo aggiungo\r\n    if (this.hasFieldName(campoName) == false) {\r\n      this.fields.push(typeR);\r\n    }\r\n}\r\n\r\n\r\n    /**\r\n     * Ricerca tra i campi quello denominato fieldName e ne setta una relazione con\r\n     * relDoc grazie a relFieldName\r\n     * @param fieldName \r\n     * @param relDoc \r\n     * @param relFieldName \r\n     */\r\n    setRelation(fieldName: string, relDoc:string, relFieldName?: string) {\r\n        \r\n        let findField = this.fields.find(el => {\r\n            return el.fieldName == fieldName;\r\n        });\r\n\r\n        if (findField) {\r\n            findField.relFieldName = relFieldName;\r\n            findField.relFieldDoc = relDoc;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Aggiunge un array di NomiCampo alla stessa tipologia\r\n     * @param arrayCampoName Array con tutti nomi dei campi\r\n     * @param campoType Tipologia da associare\r\n     */\r\n    addMultiple(arrayCampoName:string[], campoType: TypeDefinition) {\r\n        if (arrayCampoName) {\r\n            arrayCampoName.forEach(element => {\r\n                this.add(element, campoType);\r\n            });\r\n        }\r\n    }\r\n\r\n  /**\r\n   * Aggiunge una collection alla struttura\r\n   * @param collectionName Nome Collection\r\n   * @param relDoc Riferimento ai documenti contenuti nella collection\r\n   * @param relFieldName Nome campo nel documento di riferimento che crea il legame\r\n   */\r\n  addCollection(collectionName: string, relDoc:string, relFieldName: string) {\r\n    let newField: TypeReflector;\r\n\r\n    if (collectionName) {\r\n      if (this.hasCollection(collectionName) == false) {\r\n\r\n        newField = new TypeReflector(collectionName,TypeDefinition.collection);\r\n        newField.relFieldDoc = relDoc;\r\n        newField.relFieldName = relFieldName;\r\n\r\n        this.fields.push(newField);\r\n      }\r\n    }\r\n  }  \r\n\r\n    /**\r\n     * Con un nome campo torna la tipologia associata\r\n     * @param campoName Nome del Campo\r\n     */\r\n    getType(campoName: string): TypeDefinition {\r\n        let retType = TypeDefinition.undefined;\r\n\r\n        let elType = this.fields.find(element => {\r\n            return element.fieldName == campoName;\r\n        });\r\n\r\n        if (elType) {\r\n            retType = elType.fieldType;\r\n        }\r\n\r\n        return retType;\r\n    }\r\n\r\n    /**\r\n     * Cerca e ritorna il campo per fieldName\r\n     * @param fieldName Nome del campo\r\n     */\r\n    getByFieldName(fieldName: string) : TypeReflector {\r\n        return this.fields.find(el => {\r\n            return el.fieldName == fieldName;\r\n        });\r\n    }\r\n\r\n  /**\r\n   * Ritorna se presente una collection passata come parametro\r\n   * @param collectionName Nome Collection\r\n   */\r\n  getByCollectionName(collectionName: string): TypeReflector {\r\n\r\n    let collFind: TypeReflector;\r\n    collFind = this.fields.find(elField => {\r\n      return (elField.fieldName == collectionName && elField.fieldType== TypeDefinition.collection);\r\n    });\r\n\r\n    return collFind;\r\n  }      \r\n\r\n  \r\n  /**\r\n   * Controlla che la collection passata come parametro esista nel documento\r\n   * @param collectionName Nome Collection\r\n   */\r\n  hasCollection(collectionName: string) {\r\n    let exist = false;\r\n    let collFind: TypeReflector;\r\n    collFind = this.fields.find(elField => {\r\n      return (elField.fieldName == collectionName && elField.fieldType== TypeDefinition.collection);\r\n    });\r\n\r\n    if (collFind) {\r\n      exist = true;\r\n    }\r\n\r\n    return exist;\r\n  }\r\n\r\n    /**\r\n   * Controlla che la collection passata come parametro esista nel documento\r\n   * @param collectionName Nome Collection\r\n   */\r\n  hasFieldName(fieldName: string):boolean {\r\n    let exist = false;\r\n    let fieldFind: TypeReflector;\r\n    fieldFind = this.fields.find(elField => {\r\n      return (elField.fieldName == fieldName);\r\n    });\r\n\r\n    if (fieldFind) {\r\n      exist = true;\r\n    }\r\n\r\n    return exist;\r\n  }\r\n\r\n}","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { TipoMasterDocumento } from './valuelist.model';\r\n\r\n\r\nexport class MasterDocumento extends IDDocument{\r\n    IDANAGRAFICA : string;\r\n    NOTESSTAMPA : string;\r\n    \r\n    DATADOCUMENTO : Date;\r\n    IDVALUTA: string;\r\n    SERIE: string;\r\n    NUMERODOCUMENTO: number;\r\n    NUMEROSTAMPA: string;\r\n    TIPOLOGIA: TipoMasterDocumento;\r\n    TOTDOCUMENTO: number;\r\n    ANNO: number;\r\n\r\n   \r\n\r\n    constructor(onlyInstance = false){\r\n        super(onlyInstance);\r\n    }\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDANAGRAFICA',\r\n                        'NOTESSTAMPA',\r\n                        'IDVALUTA',\r\n                        'SERIE',\r\n                        'NUMEROSTAMPA'\r\n                        ];\r\n        let arBoolean = [];\r\n        let arDate = ['DATADOCUMENTO'];\r\n        let arDateTime = [];\r\n        let arNumber = ['NUMERODOCUMENTO', 'TOTDOCUMENTO', 'TIPOLOGIA','ANNO' ];\r\n    \r\n        objDescriptor.className = 'MasterDocumento';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'MASTERDOCUMENTO';\r\n        objDescriptor.describeField = 'NOTESSTAMPA';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    \r\n        \r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, of, from } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { ApicallService } from './apicall.service';\r\n\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { NewsEvento } from '../models/newsevento.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { promise } from 'protractor';\r\n\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NewseventiService {\r\n\r\n  private _listNews = new BehaviorSubject<NewsEvento[]>([]);\r\n\r\n  get listNews() {\r\n    return this._listNews.asObservable();\r\n  }\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n\r\n\r\n  /**\r\n   * Aggiunge una news\r\n   * @param objNews News da aggiungere\r\n   */\r\n  addNews(objNews: NewsEvento) {\r\n    this.listNews\r\n      .pipe(take(1))\r\n      .subscribe (collNews => {\r\n        let findElement = collNews.find(element => {\r\n          return element.ID == objNews.ID\r\n        });\r\n\r\n        if (!findElement) {\r\n          this._listNews.next( collNews.concat(objNews));\r\n        }\r\n      })\r\n  }\r\n  \r\n\r\n  /**\r\n   * Crea il Parametro Filtro per il campo PUBBLICATADAL\r\n   */\r\n  getFilterDateTime(): string {\r\n    let adesso = new Date();\r\n    let newDoc = new IDDocument();\r\n    let strAdesso = newDoc.formatDateTimeISO(adesso);\r\n\r\n    strAdesso = '<' + strAdesso;\r\n\r\n    return strAdesso;\r\n  }\r\n\r\n  /** Recupera una News e la torna Observable, \r\n   *\r\n   * @param config Configurazione\r\n   * @param idNews News ricercata\r\n   * */\r\n  getNewsById(idNews: string) {\r\n    let news = this._listNews\r\n                      .getValue()\r\n                      .find(element => {\r\n                        return (element.ID == idNews)\r\n                      });\r\n\r\n    return news;\r\n  }\r\n\r\n  /**\r\n   * Richiede al server la news\r\n   * @param config Dati configurazione\r\n   * @param idNews News da richiedere al server\r\n   */\r\n  private _requestServerById(config: StartConfiguration, idNews: string) {\r\n    let myHeaders = config.getHttpHeaders();\r\n    //new HttpHeaders({'Content-type':'text/plain'});\r\n    const doObject = 'NEWSEVENTO';\r\n    \r\n\r\n    let myUrl = config.urlBase + '/' + doObject;  \r\n\r\n    //Nei Parametri imposto l'area richiesta\r\n    let myParams = new HttpParams().set('ID',idNews);\r\n    \r\n\r\n    return this.apiService\r\n      .httpGet(myUrl, myHeaders, myParams)\r\n      .pipe(map(data => {\r\n          \r\n            let arReturn = [];\r\n            if (data.NEWSEVENTO) {\r\n              arReturn = data.NEWSEVENTO;\r\n            }\r\n\r\n            return arReturn;\r\n          \r\n      }))\r\n      .pipe(take(1))\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param config Parametri di configurazione\r\n   * @param guidArea GUID Area di riferimento\r\n   * @param n Numero massimo di elementi\r\n   * @returns Promise<NewsEvento[]>\r\n   */\r\n  request(config: StartConfiguration, guidArea:string, n:number){\r\n    return new Promise<NewsEvento[]>((resolve,reject)=>{\r\n\r\n      let myHeaders = config.getHttpHeaders();\r\n      \r\n      const doObject = 'NEWSEVENTO';\r\n  \r\n      myHeaders = myHeaders.append('X-HTTP-Method-Override','GETNEXTNEWS')\r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto l'area richiesta\r\n      let myParams = new HttpParams().set('guidArea',guidArea);\r\n\r\n      myParams = myParams.append('$top', n+'');\r\n\r\n      this.apiService.httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data=>{\r\n        let arReturn = [];\r\n        if (data.NEWSEVENTO){\r\n          arReturn=data.NEWSEVENTO;\r\n        }\r\n        return arReturn;\r\n      }))\r\n      .subscribe(myListReceived => {\r\n\r\n        let myListNews: NewsEvento[]=[];\r\n\r\n        for (let index = 0; index < myListReceived.length; index++) {\r\n\r\n          const objElement = myListReceived[index];\r\n          //Creo un nuovo oggetto\r\n          let newsEvento= new NewsEvento();\r\n          //Copio le proprietà\r\n          newsEvento.setJSONProperty(objElement);\r\n          //Inserisco nell'array\r\n          myListNews.push(newsEvento);\r\n\r\n        }\r\n        //La Promise ritorna l'elenco news\r\n        resolve(myListNews);\r\n\r\n      }, error=>{\r\n        reject(error);\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n}\r\n","import { NgModule, LOCALE_ID } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouteReuseStrategy, RouterModule } from '@angular/router';\r\nimport { HttpClientModule} from '@angular/common/http';\r\nimport { IonicStorageModule } from '@ionic/storage';\r\n\r\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\r\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\r\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { registerLocaleData } from '@angular/common';\r\n\r\nimport { QRCodeModule } from 'angularx-qrcode';\r\n\r\n\r\nimport localeIt from '@angular/common/locales/it';\r\n\r\n\r\nimport { SocialSharing } from '@ionic-native/social-sharing/ngx';\r\nimport { CryptoService } from './library/services/crypto.service';\r\nimport { FileOpener } from '@ionic-native/file-opener/ngx';\r\nimport { File } from '@ionic-native/file/ngx';\r\n\r\n\r\n\r\nregisterLocaleData(localeIt,'it');\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  entryComponents: [],\r\n  imports: [BrowserModule, \r\n            FormsModule,\r\n            HttpClientModule,\r\n            IonicModule.forRoot(), \r\n            IonicStorageModule.forRoot(),\r\n            AppRoutingModule,\r\n            QRCodeModule,\r\n              \r\n            ],\r\n  providers: [\r\n    StatusBar,\r\n    SplashScreen,\r\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\r\n    { provide: LOCALE_ID, useValue: 'it' },\r\n    SocialSharing,\r\n    CryptoService,\r\n    File,\r\n    FileOpener\r\n    \r\n\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n\r\n","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { RequestForeign } from '../library/models/requestParams.model';\r\nimport { CorsoPresenze } from './corsopresenze.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { TypePeriod } from '../library/models/mydatetime.model';\r\n\r\n\r\nexport class PianificazioneCorso extends IDDocument {\r\n    IDCORSO: string;\r\n    IDAREAOPERATIVA: string;\r\n    IDLOCATION: string;\r\n    IDCAMPO: string;\r\n    DATA: Date;\r\n    VALUEGIORNO: number;\r\n    ORAINIZIO: Date;\r\n    ORELEZIONE: number;\r\n    DATAORAINIZIO: Date;\r\n    DATAORAFINE: Date;\r\n    MULTIPLA: boolean;\r\n    CORSOPRESENZE: CorsoPresenze[];\r\n    NOTEADMIN: string;\r\n    NOTETRAINER: string;\r\n\r\n\r\n    constructor(\r\n      onlyInstance?:boolean\r\n    ){\r\n        super(onlyInstance);\r\n\r\n        this.CORSOPRESENZE = [];\r\n    }\r\n\r\n    /**\r\n     * Imposta le proprietà nell'oggetto\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n\r\n      //Chiamo IDDOcument\r\n      super.setJSONProperty(data);  \r\n      \r\n      //Imposto la collection\r\n      this.setCollection(data);\r\n\r\n      //Imposto che il documento è originale\r\n      this.setOriginal();\r\n\r\n    }\r\n\r\n    /**\r\n     * Sistema le collection se presenti\r\n     * @param data JSON Ricevuto\r\n     */\r\n    setCollection(data: any) {\r\n      this.CORSOPRESENZE = [];\r\n\r\n      if (data.CORSOPRESENZE) {\r\n        this.setCollectionCorsoPresenze(data.CORSOPRESENZE);\r\n      }\r\n      \r\n    }    \r\n\r\n    /**\r\n     * Imposta la collection CorsoPresenze\r\n     * @param arPresenze JSON Ricevuti\r\n     */\r\n    setCollectionCorsoPresenze(arPresenze: any[]) {\r\n\r\n      this.CORSOPRESENZE = [];\r\n\r\n      if (arPresenze) {\r\n\r\n        arPresenze.forEach(element => {\r\n            // Ricerco se esiste già\r\n            let newProgramma = new CorsoPresenze();\r\n            newProgramma.setJSONProperty(element);\r\n            this.CORSOPRESENZE.push(newProgramma);\r\n        });\r\n      }\r\n    }    \r\n\r\n    \r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDCORSO',\r\n                    'IDAREAOPERATIVA',\r\n                    'IDLOCATION',\r\n                    'IDCAMPO',\r\n                    'NOTEADMIN',\r\n                    'NOTETRAINER'\r\n                    ];\r\n    let arNumber = ['VALUEGIORNO','ORELEZIONE'];\r\n    let arBoolean = ['MULTIPLA'];\r\n    let arDate = ['DATA'];\r\n    let arDateTime =['DATAORAINIZIO','DATAORAFINE'];\r\n    let arTime = ['ORAINIZIO'];\r\n    \r\n\r\n    objDescriptor.className = 'PianificazioneCorso';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'PIANIFICAZIONECORSO';\r\n    objDescriptor.describeField = 'DATA';\r\n\r\n    \r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addCollection('CORSOPRESENZE', 'CorsoPresenze', 'IDPIANIFICAZIONECORSO');\r\n    \r\n    objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n    objDescriptor.setRelation('IDLOCATION','Location');\r\n    objDescriptor.setRelation('IDCORSO','Corso');\r\n    objDescriptor.setRelation('IDCAMPO','Campo');\r\n\r\n\r\n    return objDescriptor;\r\n}    \r\n\r\n\r\nstatic getReqForeignKeys(): RequestForeign[] {\r\n  let arRequest: RequestForeign[] = [];\r\n  let objForeign: RequestForeign;\r\n\r\n  objForeign = new RequestForeign('IDAREAOPERATIVA');\r\n  arRequest.push(objForeign);\r\n\r\n  objForeign = new RequestForeign('IDSPORT');\r\n  arRequest.push(objForeign);\r\n\r\n  objForeign = new RequestForeign('IDCAMPO');\r\n  arRequest.push(objForeign);\r\n\r\n  objForeign = new RequestForeign('IDLOCATION');\r\n  objForeign.addDescribeField('DENOMINAZIONE');\r\n  objForeign.addDescribeField('INDIRIZZO');\r\n  objForeign.addDescribeField('COMUNE');\r\n  objForeign.addDescribeField('EMAIL');\r\n\r\n  arRequest.push(objForeign);\r\n\r\n  return arRequest;\r\n}\r\n\r\n   \r\n  \r\n  /**\r\n   * Ritorna TRUE, FALSE a seconda se \r\n   * l'evento è passato o no\r\n   */\r\n  eventoPassato() {\r\n\r\n    return (new Date() > this.DATAORAFINE );\r\n  }\r\n\r\n  /**\r\n   * Ritorna un valore che indica se la pianificazioneCorso è aggiornabile nelle presenze.\r\n   * @param gapOre Numero Positivo che indica quante ore di tempo di hanno dalla fine del corso per aggiornare le presenze \r\n   */\r\n  canUpdatePresenze(gapOre: number): boolean{\r\n    let canUpdate: boolean = true;\r\n    let now = new Date;\r\n\r\n    //Non è ancora iniziato\r\n    if (now < this.DATAORAINIZIO){\r\n      canUpdate = false;\r\n    }\r\n    else {\r\n      if (gapOre !== 0) {\r\n        if (now > MyDateTime.calcola(this.DATAORAFINE, gapOre, TypePeriod.hours)){\r\n          canUpdate = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return canUpdate;\r\n  }\r\n\r\n  /**\r\n   * Messaggio da mostrare all'utente riguardo all'aggiornamento dei dati presenza\r\n   * @param gapOre Numero Positivo che indica quante ore di tempo di hanno dalla fine del corso per aggiornare le presenze \r\n   */\r\n  msgCanUpdatePresenze(gapOre: number): string{\r\n\r\n    let strReturn = '';\r\n    let now = new Date();\r\n\r\n\r\n    //E' troppo presto\r\n    if (now < this.DATAORAINIZIO){\r\n      strReturn = 'Non è ancora possibile modificare le presenze di questa lezione';\r\n      strReturn = 'E\\' possibile modificare le presenze dal ' + MyDateTime.formatDate(this.DATAORAINIZIO, 'DD/MM/YYYY') + ' dalle ' +  MyDateTime.formatTime(this.DATAORAINIZIO, false);\r\n    }\r\n    else {\r\n      //In teoria potrei aggiornare le presenze\r\n      if (gapOre == 0) {\r\n        strReturn = 'Clicca su ogni partecipante per impostare la presenza/assenza';\r\n      }\r\n      else {\r\n        //Possiamo aggiornarle\r\n        if (this.canUpdatePresenze(gapOre)) {\r\n          //recupero la data entro cui è possibile aggiornare\r\n          let scadenza = MyDateTime.calcola(this.DATAORAFINE, gapOre, TypePeriod.hours);\r\n\r\n          //la converto in stringa\r\n          let strScadenza =MyDateTime.formatDate(scadenza, 'DD/MM/YY');\r\n\r\n          strReturn = 'Clicca su ogni partecipante per impostare la presenza/assenza, presenze aggiornabili fino al ' + strScadenza;\r\n\r\n        }\r\n        else {\r\n          strReturn = 'Non è più possibile modificare le presenze di questa lezione';\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return strReturn;\r\n  }\r\n\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\n\r\n\r\nexport class TipoDocumentazione extends IDDocument{\r\n    DENOMINAZIONE : string;\r\n    CLASSE : ClasseDocumento;\r\n    ZORDER : number;\r\n\r\n    constructor(onlyInstance?: boolean){\r\n        super(onlyInstance);\r\n    }\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['DENOMINAZIONE', 'ZORDER'];\r\n        let arNumber = ['CLASSE'];\r\n\r\n    \r\n        objDescriptor.className = 'TipoDocumentazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'TIPODOCUMENTAZIONE';\r\n        objDescriptor.describeField = 'DENOMINAZIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n   \r\n                \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\nexport enum ClasseDocumento {\r\n    certificatoMedico = 10,\r\n    attestato = 20,\r\n    documento = 30,\r\n    certificazioneIsee = 40,\r\n    certificazione = 50,\r\n    curriculum = 60,\r\n    documentazione = 1000\r\n\r\n}\r\n\r\nexport enum SorgenteFile {\r\n    filesystem = 'file',\r\n    photoGallery = 'photo'\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams, JsonpInterceptor } from '@angular/common/http';\r\n\r\nimport { PianificazioneCorso } from '../models/pianificazionecorso.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { LogApp } from '../models/log.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { IDDocument, ParamsExport } from '../library/models/iddocument.model';\r\nimport { MyDateTime } from '../library/models/mydatetime.model';\r\nimport { resolve } from 'url';\r\nimport { promise } from 'protractor';\r\nimport { PostResponse } from '../library/models/postResult.model';\r\nimport { PostParams } from '../library/models/requestParams.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CourseschedulerService {\r\n\r\n  _calendarioCorso = new BehaviorSubject<PianificazioneCorso[]>([]);\r\n  _listImpegniTrainer = new BehaviorSubject<PianificazioneCorso[]>([]);\r\n\r\n  constructor(\r\n    private apiService: ApicallService,\r\n    private docStructureService: DocstructureService\r\n    ) { }\r\n\r\n\r\n\r\n  get calendarioCorso() {\r\n    return this._calendarioCorso.asObservable();\r\n  }\r\n\r\n   /**\r\n   * recupero la lista degli impegni del trainer (observable)\r\n   */\r\n  get listImpegniTrainer(){\r\n    return this._listImpegniTrainer.asObservable();\r\n  }\r\n\r\n\r\n\r\n    /**\r\n   * Effettua una chiamata al server per il recupero dei corsi\r\n   * Utilizzare il documento di Filtro per richiedere dati filtrati\r\n   * @param config Parametri di configurazione\r\n   * @param idCorso Corso Richiesto\r\n   */\r\n  requestCalendario(config: StartConfiguration, idCorso: string) {\r\n    return new Promise<void>((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      \r\n      const doObject = 'PIANIFICAZIONECORSO';\r\n       \r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto il corso richiesto\r\n      let myParams = new HttpParams().set('IDCORSO',idCorso);\r\n  \r\n      //Elimino le schedulazioni presenti\r\n      this.emptyCalendario();\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n          return data.PIANIFICAZIONECORSO\r\n        }))\r\n        .subscribe( resultData => {\r\n  \r\n          \r\n          \r\n          if (resultData) {\r\n            resultData.forEach(element => {\r\n    \r\n              let newCorsoCalendario = new PianificazioneCorso();\r\n              newCorsoCalendario.setJSONProperty(element);\r\n              LogApp.consoleLog(newCorsoCalendario);\r\n              this.addCorsoCalendario(newCorsoCalendario);\r\n              resolve();\r\n            },\r\n            error=>{\r\n              reject(error);\r\n            });\r\n          }\r\n        })\r\n\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge una schedulazione\r\n   * @param objCorsoScheduler Schedulazione Corso\r\n   */\r\n  addCorsoCalendario(objCorsoScheduler: PianificazioneCorso) {\r\n    this.calendarioCorso\r\n      .pipe(take(1))\r\n      .subscribe( collCalendario => {\r\n        this._calendarioCorso.next( collCalendario.concat(objCorsoScheduler));\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge una pianificazione alla lista Trainer\r\n   * @param docPianificazione Documento di Pianificazione\r\n   */\r\n  addImpegnotrainer(docPianificazione: PianificazioneCorso) {\r\n    this.listImpegniTrainer\r\n      .pipe(take(1))\r\n      .subscribe( collListImpegni => {\r\n        this._listImpegniTrainer.next( collListImpegni.concat(docPianificazione));\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Svuota il calendario presente\r\n   */\r\n  emptyCalendario() {\r\n    this._calendarioCorso.next([]);\r\n  }\r\n\r\n  /**\r\n   * Svuotare la lista degli impegni del trainer\r\n   */\r\n  emptyListImpegniTrainer() {\r\n    this._listImpegniTrainer.next([]);\r\n  }\r\n\r\n  /**\r\n   * richiede al server gli impegni del trainer con id specificato. ritorna la lista tramite Promise. sulla lista vengono anche effettuate le decodifiche\r\n   * \r\n   * @param idRef l'id del trainer\r\n   * @param dataInizio data di inizio  \r\n   * @param dataFine data di fine\r\n   */\r\n  requestImpegniTrainer(idRef: string, dataInizio: Date, dataFine?: Date){\r\n    return new Promise<PianificazioneCorso[]> ((resolve, reject) => {\r\n      \r\n      const methodName = 'getPianificazioniTrainer'\r\n      const document = new PianificazioneCorso(true);\r\n\r\n      if (!dataFine && !dataInizio) {\r\n        dataInizio = new Date();\r\n        dataFine = new Date();\r\n      }\r\n      else if (!dataInizio && dataFine) {\r\n        dataInizio = dataFine;\r\n      }\r\n      else if (dataInizio && !dataFine) {\r\n        dataFine = dataInizio;\r\n      }\r\n  \r\n      let params = {\r\n        'idRef': idRef,\r\n        'dataInizio': MyDateTime.formatDateISO(dataInizio),\r\n        'dataFine': MyDateTime.formatDateISO(dataFine)\r\n      }\r\n  \r\n      this.docStructureService.requestForFunction(document, methodName, JSON.stringify(params))\r\n      .then(response => {\r\n\r\n        let requestDecode = false;\r\n\r\n        //Svuotiamo la lista attuale\r\n        this.emptyListImpegniTrainer();\r\n        if (response.PIANIFICAZIONECORSO) {\r\n          if (Array.isArray(response.PIANIFICAZIONECORSO)) {\r\n\r\n            /* Ciclo sull'Array ricevuto */\r\n            for (let index = 0; index < response.PIANIFICAZIONECORSO.length; index++) {\r\n              requestDecode = true;\r\n              const element = response.PIANIFICAZIONECORSO[index];\r\n              let docPianificazioneCorso = new PianificazioneCorso();\r\n              docPianificazioneCorso.setJSONProperty(element);\r\n\r\n              \r\n              //qui reupero anche il documento livello e me lo salvo nel repository\r\n              const addToRepository = false;\r\n\r\n              //Chiedo altri dati\r\n              this.docStructureService.getRelDoc(docPianificazioneCorso, ['IDCORSO', 'IDLIVELLOENTRATA'],1,docPianificazioneCorso);\r\n                            \r\n              this.addImpegnotrainer(docPianificazioneCorso);\r\n              \r\n            }\r\n\r\n            if (requestDecode) {\r\n              //Recupero la lista Impegni\r\n              let listPianificazioni:PianificazioneCorso[] = this._listImpegniTrainer.getValue();\r\n\r\n              //Chiamo la decodifica collection della lista\r\n              this.docStructureService.decodeCollection(listPianificazioni)\r\n                .then(() => {\r\n                  //Riemetto Observable\r\n                  this._listImpegniTrainer.next(listPianificazioni);\r\n                  //Riemetto la resolve\r\n                  resolve(this._listImpegniTrainer.getValue());\r\n                })\r\n                .catch(error => {\r\n                  console.log(error);\r\n                  reject(error);\r\n                });\r\n\r\n            }\r\n            else {\r\n              //Risolvere con la lista attuale (che sarà vuota)\r\n              resolve(this._listImpegniTrainer.getValue());\r\n            }\r\n          }\r\n          else {\r\n              //Risolvere con la lista attuale (che sarà vuota)\r\n              resolve(this._listImpegniTrainer.getValue());\r\n          }\r\n        }\r\n        else {\r\n          //Risolvere con la lista attuale (che sarà vuota)\r\n          resolve(this._listImpegniTrainer.getValue());\r\n        }\r\n\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        reject(error);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Recupera un elemento \"impegno del trainer\" con l'id specificato. ATTENZIONE: devo prima aver eseguito il metodo requestImpegniTrainer\r\n   * @param idPianificazione l'id della pianificazione da recuperare\r\n   */\r\n  getPianificazioneTrainerById(idPianificazione): PianificazioneCorso{\r\n    let elem: PianificazioneCorso = this._listImpegniTrainer\r\n      .getValue()\r\n        .find((elem:PianificazioneCorso) => {\r\n          return elem.ID == idPianificazione;\r\n        })\r\n\r\n    return elem;\r\n  }\r\n\r\n  /**\r\n   * Richiede al server le presenze della pianificazione passata e le inserisce all'interno della stessa\r\n   * @param docPianificazione IL documento in cui inserire le presenze\r\n   */\r\n  insertPresenze(docPianificazione: PianificazioneCorso){\r\n    \r\n    return new Promise<PianificazioneCorso>((resolve, reject) => {\r\n\r\n      const collName = 'CORSOPRESENZE';\r\n\r\n      this.docStructureService.loadCollection(docPianificazione, collName)\r\n      .then(() => {\r\n        resolve(docPianificazione);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      })\r\n    })\r\n  }\r\n\r\n  updatePresenze(docPianificazione: PianificazioneCorso): Promise<PostResponse>{\r\n    return new Promise ((res, rej) => {\r\n\r\n      let myPostParams : PostParams = new PostParams();\r\n\r\n      myPostParams.key = 'docPianificazione';\r\n      myPostParams.value = docPianificazione;\r\n      myPostParams.exportOnlyPropertyModified = true;\r\n      myPostParams.exportOnlyDocModified = true;\r\n      \r\n      \r\n      this.docStructureService.requestForFunction(docPianificazione, 'updatePresenze', null, myPostParams)\r\n      .then((response:PostResponse) => {\r\n        res(response);\r\n      })\r\n      .catch(error => {\r\n        rej(error);\r\n      })\r\n    })\r\n  }\r\n}\r\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { AttivitaChiusura, TipoChiusura } from './valuelist.model';\r\n\r\nexport class DataChiusura extends IDDocument{\r\n\r\n    TIPOCHIUSURA: TipoChiusura;\r\n    ATTIVITACHIUSURA: AttivitaChiusura;\r\n    DATADAL: Date;\r\n    DATAAL: Date;\r\n    IDAREA: string;\r\n    IDLOCATION: string;\r\n    IDCAMPO: string;\r\n    NOTES:  string;\r\n    MOTIVAZIONE: string;\r\n\r\n\r\n\r\n      /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDAREA',\r\n                        'IDLOCATION',\r\n                        'IDCAMPO',\r\n                        'NOTES',\r\n                        'MOTIVAZIONE'\r\n                        ];\r\n        let arNumber = ['TIPOCHIUSURA','ATTIVITACHIUSURA'];\r\n        let arBoolean = [];\r\n        let arDate = ['DATADAL','DATAAL'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n\r\n        objDescriptor.className = 'DataChiusura';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'DATACHIUSURA';\r\n        objDescriptor.describeField = 'MOTIVAZIONE';\r\n\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        objDescriptor.setRelation('IDCAMPO','Campo');\r\n\r\n\r\n        return objDescriptor;\r\n    }    \r\n\r\n    constructor(onlyInstance: boolean = false){\r\n        super(onlyInstance);\r\n    }\r\n\r\n}","import { Descriptor, TypeDefinition } from \"../library/models/descriptor.model\";\r\nimport { IDDocument } from \"../library/models/iddocument.model\";\r\n\r\nexport class CorsoValutazioneLivello extends IDDocument {\r\n    IDCORSOVALUTAZIONE:     string;\r\n    IDCORSO:                string;\r\n    IDUTENTE:               string;\r\n    NOMINATIVO:             string;\r\n    IDSPORT:                string;\r\n    IDLIVELLOENTRATA:       string;\r\n    IDLIVELLOFINALE:        string;\r\n    \r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDCORSO',\r\n            'IDCORSOVALUTAZIONE',\r\n            'IDUTENTE',\r\n            'NOMINATIVO',\r\n            'IDSPORT',\r\n            'IDLIVELLOENTRATA',\r\n            'IDLIVELLOFINALE'\r\n        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'CorsoValutazioneLivello';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CORSOVALUTAZIONELIVELLO';\r\n        \r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDCORSO', 'Corso');\r\n        objDescriptor.setRelation('IDUTENTE', 'Utente');\r\n        objDescriptor.setRelation('IDSPORT', 'Sport');\r\n        objDescriptor.setRelation('IDLIVELLOENTRATA', 'Livello');\r\n        objDescriptor.setRelation('IDLIVELLOFINALE', 'Livello');\r\n       \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n    constructor(onlyInstance?: boolean){\r\n        super(onlyInstance);\r\n    }    \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { PageType } from './valuelist.model';\r\n\r\nexport class AreaLink extends IDDocument {\r\n    IDAREAOPERATIVA: string;\r\n    TIPOURL: PageType;\r\n    REFERURL: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['IDAREAOPERATIVA',\r\n                    'REFERURL'];\r\n    let arNumber = ['TIPOURL'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'AreaLink';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.classWebApiName = 'AREALINK';\r\n    objDescriptor.describeField = 'REFERURL';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n    \r\n    //Aggiungo le relazioni\r\n    objDescriptor.setRelation('IDAREAOPERATIVA', 'Area');\r\n    \r\n    return objDescriptor;\r\n    }\r\n\r\n    /**\r\n     * Sovrascrive il metodo IDDOcument, lo richiama e sistema le collection\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setOriginal();\r\n    }\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { AmbitoNews } from './valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class NewsEvento extends IDDocument {\r\n    AMBITO: AmbitoNews;\r\n    TITLE: string;\r\n    SUBTITLE: string;\r\n    SHORTTEXT: string;\r\n    PUBBLICATADAL: Date;\r\n    LINKNEWS: string;\r\n    LINKIMAGE: string;\r\n    IDLOCATION: string;\r\n    IDAREAOPERATIVA: string;\r\n    _NAMEICON: string;\r\n    _COLOR: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n\r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n\r\n            this._NAMEICON = 'newspaper-outline';\r\n            this._COLOR = 'secondary';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Imposta le proprietà della classe\r\n     * @param data JSON Data\r\n     */\r\n    setJSONProperty(data: any) {        \r\n        super.setJSONProperty(data);\r\n    } \r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['TITLE',\r\n                        'SUBTITLE',\r\n                        'SHORTTEXT',\r\n                        'LINKNEWS',\r\n                        'LINKIMAGE',\r\n                        'IDLOCATION',\r\n                        'IDAREAOPERATIVA'];\r\n        let arNumber = ['AMBITO'];\r\n        let arNumberDecimal = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =['PUBBLICATADAL'];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'NewsEvento';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'NEWSEVENTO';\r\n        objDescriptor.describeField = 'TITLE';\r\n\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDLOCATION','Location');\r\n        \r\n        return objDescriptor;\r\n    } \r\n    \r\n    /**\r\n     * Torna un oggetto News per indicare che non ci sono News\r\n     */\r\n    static getNoNews(): NewsEvento {\r\n        let objNews = new NewsEvento();\r\n\r\n        objNews.TITLE = 'Nessun evento in programma';\r\n        objNews.SUBTITLE = 'Torna a trovarci per scoprire le prossime novità';\r\n        objNews.do_loaded = false;\r\n        objNews.do_deleted = false;\r\n\r\n        return objNews;\r\n    }\r\n}","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\nexport class ArticoloTaglieMisura extends IDDocument{\r\n    IDARTICOLO: string;\r\n    DESCRIZIONE: string;\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDARTICOLO',\r\n            'DESCRIZIONE',\r\n        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'ArticoloTaglieMisura';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'ARTICOLOTAGLIEMISURA';\r\n        objDescriptor.describeField = 'DESCRIZIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n    \r\n        objDescriptor.setRelation('IDARTICOLO','Articolo');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { PrenotazionePianificazione } from './prenotazionepianificazione.model';\r\nimport { PaymentChannel } from './valuelist.model';\r\n\r\nexport class Prenotazione extends IDDocument {\r\n    DATA: Date; \r\n    IDAREAOPERATIVA: string;\r\n    IDUTENTE: string;\r\n    NOMINATIVO: string;\r\n    MOBILENUMBER: string;\r\n    IDTIPOPAGAMENTO: string;\r\n    IMPORTO: number;\r\n    INCASSATO: number;\r\n    RESIDUO: number;\r\n    IMPOSTA: number;\r\n    TOTALE: number;\r\n    MSGINVALID: string;\r\n    PRENOTAZIONEPIANIFICAZIONE: PrenotazionePianificazione[];\r\n    IDTRANSACTION: string;\r\n    IDORDER: string;\r\n    CHANNELPAYMENT: PaymentChannel;\r\n\r\n    ISVALID: boolean; //Parametro indica che tutti i conteggi sono effettuati, \r\n                     //si puo' procedere al pagamento finale\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n\r\n            this.IMPORTO = 0;\r\n            this.INCASSATO = 0;\r\n            this.RESIDUO = 0;\r\n            this.TOTALE = 0;\r\n            this.IMPOSTA = 0;\r\n            this.ISVALID = false;\r\n            this.MSGINVALID = '';\r\n            this.IDTRANSACTION = '';\r\n            this.IDORDER = '';\r\n        }\r\n\r\n\r\n        this.PRENOTAZIONEPIANIFICAZIONE = [];\r\n        \r\n    }\r\n\r\n    //#region INIZIALIZZAZIONE NUOVA PRENOTAZIONE\r\n\r\n    /**\r\n     * Inizializza per una nuova prenotazione\r\n     */\r\n    initNewPrenotazione(idArea: string) {\r\n        \r\n        //Imposta i parametri nell'oggetto\r\n        this.IDAREAOPERATIVA = idArea;\r\n        this.DATA = new Date();\r\n    }\r\n\r\n    /**\r\n     * UTILIZZATA\r\n     * Imposta come oggetto di Pianificazione, quello passato\r\n     * @param docPianificazione Nuovo oggetto di pianificazione\r\n     */\r\n    setPianificazioneSingola(docPianificazione) {\r\n        if (docPianificazione) {\r\n            if (this.PRENOTAZIONEPIANIFICAZIONE.length !== 0) {\r\n                this.PRENOTAZIONEPIANIFICAZIONE[0] = docPianificazione;\r\n            }\r\n            else {\r\n                this.PRENOTAZIONEPIANIFICAZIONE.push(docPianificazione);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Impostazione Area\r\n     * @param idArea Area da applicare\r\n     */\r\n    SetArea(idArea: string) {\r\n        \r\n        this.IDAREAOPERATIVA = idArea;\r\n\r\n        if (this.PRENOTAZIONEPIANIFICAZIONE) {\r\n            this.PRENOTAZIONEPIANIFICAZIONE.forEach(element => {\r\n                element.IDAREAOPERATIVA = idArea;\r\n            }); \r\n        }\r\n        \r\n    }\r\n\r\n\r\n     \r\n    /**\r\n     * Impostazione Utente \r\n     * @param idUtente Utente che prenota\r\n     */\r\n    setUtente(idUtente: string, _nominativo: string) {\r\n        this.IDUTENTE = idUtente;\r\n        if (_nominativo) {\r\n            this.NOMINATIVO = _nominativo;\r\n        }\r\n        else {\r\n            this.NOMINATIVO = '';\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * ritorna il docPianificazione con id specificato; se id non è specificato, ritorna il primo documento di pianificazione presente\r\n     */\r\n    getPianificazione(idPianificazione?: string) {\r\n        let docPianificazione: PrenotazionePianificazione;\r\n        let index: number;\r\n\r\n        if (this.PRENOTAZIONEPIANIFICAZIONE.length !== 0) {\r\n\r\n            if(idPianificazione && idPianificazione.length > 0){\r\n                index = this.getIndexPianificazione(idPianificazione);\r\n            }   \r\n            else{\r\n                index = 0;\r\n            }\r\n            docPianificazione = this.PRENOTAZIONEPIANIFICAZIONE[index];\r\n        }\r\n        return docPianificazione;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setCollection(data);\r\n\r\n        //Imposto che il documento è originale\r\n        this.setOriginal();\r\n    }\r\n\r\n    setCollection(data: any) {\r\n\r\n        this.PRENOTAZIONEPIANIFICAZIONE = [];\r\n\r\n        if (data.PRENOTAZIONEPIANIFICAZIONE) {\r\n            this.setCollectionPianificazioni(data);\r\n        }\r\n    }\r\n\r\n    setCollectionPianificazioni(data: any) {\r\n        data.PRENOTAZIONEPIANIFICAZIONE.forEach(element => {\r\n            let newPianificazione = new PrenotazionePianificazione();\r\n\r\n            newPianificazione.setJSONProperty(element);\r\n            this.PRENOTAZIONEPIANIFICAZIONE.push(newPianificazione);\r\n            \r\n        })\r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Prenotazione\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDAREAOPERATIVA',\r\n                        'IDUTENTE',\r\n                        'NOMINATIVO',\r\n                        'MOBILENUMBER',\r\n                        'IDTIPOPAGAMENTO',\r\n                        'MSGINVALID',\r\n                        'IDTRANSACTION',\r\n                        'IDORDER'];\r\n        let arNumber = ['CHANNELPAYMENT'];\r\n        let arNumberDecimal = ['IMPORTO','INCASSATO','RESIDUO','IMPOSTA','TOTALE'];\r\n        let arBoolean = ['ISVALID'];\r\n        let arDate = ['DATA'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'Prenotazione';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'PRENOTAZIONE';\r\n        objDescriptor.describeField = 'NOMINATIVO';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arNumberDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDAREAOPERATIVA','Area');\r\n        objDescriptor.setRelation('IDUTENTE','Utente');\r\n        \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Converte il JSON ricevuto e ritorna una Prenotazione\r\n     * @param JsonData Dati JSON ricevuti\r\n     */\r\n    static getPrenotazioneFromJson(JsonData: string): Prenotazione {\r\n        let newPrenotazione = new Prenotazione();\r\n        newPrenotazione.setJSONProperty(JsonData);\r\n  \r\n        return newPrenotazione;\r\n      }\r\n\r\n      /**\r\n       * Ritorna l'indice dell'oggetto pianificazione con id specificato\r\n       * @param id l'id dell'oggetto pianificazione\r\n       */\r\n      getIndexPianificazione(id: string):number\r\n      {\r\n        for (let index = 0; index < this.PRENOTAZIONEPIANIFICAZIONE.length; index++) {\r\n            const element = this.PRENOTAZIONEPIANIFICAZIONE[index];\r\n            if (element.ID==id)\r\n            {\r\n                return index;\r\n            }  \r\n        }\r\n      }\r\n\r\n      /**\r\n       * Ritorna il valore che è necessario pagare\r\n       */\r\n      get amountPayment(): number {\r\n        let myAmount: number = 0;\r\n        if(this.INCASSATO < this.IMPORTO) {\r\n            myAmount = this.IMPORTO - this.INCASSATO;\r\n        }\r\n\r\n        return myAmount;\r\n      }\r\n\r\n\r\n      /**\r\n       * Stato del pagamento in formato testo\r\n       * @param showForPay: se TRUE verrà restituito un messaggio per effettuare il pagamento\r\n       */\r\n      getCaptionStatePayment(showForPay: boolean = false): string {\r\n        let caption = '';\r\n\r\n        if (this.amountPayment != 0) {\r\n            if (showForPay) {\r\n                caption = 'Paga Ora';\r\n            }\r\n            else {\r\n                caption = 'Prenotazione da pagare';\r\n            }\r\n        }\r\n        else {\r\n\r\n            caption = 'Prenotazione pagata';\r\n        }\r\n        return caption;\r\n      }\r\n\r\n\r\n      \r\n    \r\n}","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t\"dUtr\",\n\t\t\"common\",\n\t\t0\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t\"Q8AI\",\n\t\t\"common\",\n\t\t1\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t\"hgI1\",\n\t\t\"common\",\n\t\t2\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t\"CfoV\",\n\t\t\"common\",\n\t\t3\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t\"Nt02\",\n\t\t\"common\",\n\t\t4\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t\"Q2Bp\",\n\t\t5\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t\"0Pbj\",\n\t\t\"common\",\n\t\t6\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t\"ydQj\",\n\t\t\"common\",\n\t\t7\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t\"4fMi\",\n\t\t\"common\",\n\t\t8\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t\"czK9\",\n\t\t\"common\",\n\t\t9\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t\"/CAe\",\n\t\t10\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t\"WgF3\",\n\t\t\"common\",\n\t\t11\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t\"uQcF\",\n\t\t\"common\",\n\t\t12\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t\"wHD8\",\n\t\t13\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t\"2lz6\",\n\t\t14\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t\"ercB\",\n\t\t\"common\",\n\t\t15\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t\"MGMP\",\n\t\t\"common\",\n\t\t16\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t\"9bur\",\n\t\t\"common\",\n\t\t17\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t\"cABk\",\n\t\t\"common\",\n\t\t18\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t\"kyFE\",\n\t\t\"common\",\n\t\t19\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t\"TvZU\",\n\t\t\"common\",\n\t\t20\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t\"vnES\",\n\t\t\"common\",\n\t\t21\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t\"qCuA\",\n\t\t\"common\",\n\t\t22\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t\"0tOe\",\n\t\t\"common\",\n\t\t23\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t\"h11V\",\n\t\t\"common\",\n\t\t24\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t\"XGij\",\n\t\t\"common\",\n\t\t25\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t\"nYbb\",\n\t\t\"common\",\n\t\t26\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t\"smMY\",\n\t\t\"common\",\n\t\t27\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t\"STjf\",\n\t\t28\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t\"k5eQ\",\n\t\t\"common\",\n\t\t29\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t\"OR5t\",\n\t\t\"common\",\n\t\t30\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t\"fSgp\",\n\t\t\"common\",\n\t\t31\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t\"lfGF\",\n\t\t\"common\",\n\t\t32\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t\"5xYT\",\n\t\t33\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t\"nI0H\",\n\t\t\"common\",\n\t\t34\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t\"NAQR\",\n\t\t35\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t\"knkW\",\n\t\t\"common\",\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t\"TpdJ\",\n\t\t\"common\",\n\t\t37\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t\"ISmu\",\n\t\t\"common\",\n\t\t38\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t\"U7LX\",\n\t\t\"common\",\n\t\t39\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t\"L3sA\",\n\t\t\"common\",\n\t\t40\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t\"IUOf\",\n\t\t\"common\",\n\t\t41\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t\"8Mb5\",\n\t\t42\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"kLfG\";\nmodule.exports = webpackAsyncContext;","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\nexport class UnitaMisura extends IDDocument{\r\n    CODICE: string;\r\n    DESCR: string;\r\n    PREDEFINITA: boolean;\r\n    ICONPREF: string;\r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['CODICE', 'DESCR', 'PREDEFINITA', 'ICONPREF'];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'UnitaMisura';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'UNITAMISURA';\r\n        objDescriptor.describeField = 'DESCR';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n                            \r\n        return objDescriptor;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, of, from } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { ApicallService } from './apicall.service';\r\n\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { UtentePrenotazione } from '../models/utenteprenotazione.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtenteprenotazioneService {\r\n\r\n  private _listUtentePrenotazione = new BehaviorSubject<UtentePrenotazione[]>([]);\r\n\r\n  //Ritorna la Lista delle prenotazioni di un utente\r\n  get listUtentePrenotazione() {\r\n    return this._listUtentePrenotazione.asObservable();\r\n  }\r\n\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n  /**\r\n   * Effettua la richiesta dell'elenco Prenotazioni di un utente\r\n   * @param config Dati configurazione\r\n   * @param idUtente Utente che effettua richiesta\r\n   * @param maxRecord Max Record da recuperare\r\n   */\r\n  request(config: StartConfiguration, idUtente: string, maxRecord: number = 0) {\r\n    return new Promise((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      myHeaders = myHeaders.append('order-by','desc');\r\n      \r\n\r\n      const doObject = 'UTENTEPRENOTAZIONE';\r\n      const filterDateTime = this.getFilterDateTime();\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;  \r\n  \r\n      //Nei Parametri imposto l'area richiesta\r\n      let myParams = new HttpParams().set('IDUTENTE',idUtente);\r\n      myParams = myParams.append('DATAORAINIZIO',filterDateTime);\r\n      myParams = myParams.append('$top', (maxRecord + '') );\r\n  \r\n      //Elimino gli attuali\r\n      this._listUtentePrenotazione.next([]);\r\n  \r\n      this.apiService\r\n        .httpGet(myUrl, myHeaders, myParams)\r\n        .pipe(map(data => {\r\n            \r\n              let arReturn = [];\r\n              if (data.UTENTEPRENOTAZIONE) {\r\n                arReturn = data.UTENTEPRENOTAZIONE;\r\n              }\r\n  \r\n              return arReturn;\r\n            \r\n        }))\r\n        .subscribe (resultData => {\r\n  \r\n            resultData.forEach(element => {\r\n              let newUtentePrenotazione = new UtentePrenotazione();\r\n              newUtentePrenotazione.setJSONProperty(element);\r\n              this.addUtentePrenotazione(newUtentePrenotazione);\r\n            });\r\n\r\n            //Al termine ritorno la nuova lista\r\n            resolve(this._listUtentePrenotazione);\r\n\r\n        }, error=>{\r\n          reject (error);\r\n        })\r\n      \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Aggiunge all'elenco una prenotazione dell'utente\r\n   * @param objUtentePrenotazione Prenotazione da aggiungere\r\n   */\r\n  addUtentePrenotazione(objUtentePrenotazione: UtentePrenotazione) {\r\n    this.listUtentePrenotazione\r\n      .pipe(take(1))\r\n      .subscribe (collUtentePrenotazione => {\r\n        let findElement = collUtentePrenotazione.find(element => {\r\n          return element.ID == objUtentePrenotazione.ID\r\n        });\r\n\r\n        if (!findElement) {\r\n          this._listUtentePrenotazione.next( collUtentePrenotazione.concat(objUtentePrenotazione));\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n    /**\r\n   * Crea il Parametro Filtro per il campo\r\n   */\r\n  getFilterDateTime(): string {\r\n    let adesso = new Date();\r\n    let newDoc = new IDDocument();\r\n    let startDate = new Date(adesso.getFullYear(),0,1);\r\n    let strAdesso = '';\r\n    if (adesso.getMonth() < 6) {\r\n      startDate = new Date((adesso.getFullYear()) - 1, 5, 1);\r\n    }\r\n\r\n    strAdesso = newDoc.formatDateTimeISO(startDate);\r\n\r\n    strAdesso = '>' + strAdesso;\r\n\r\n    return strAdesso;\r\n  }\r\n}\r\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { FileType } from './valuelist.model';\r\n\r\nexport class CorsoAllegato extends IDDocument{\r\n    IDCORSO: string;\r\n    IDTIPODOCUMENTAZIONE: string;\r\n    DESCRIZIONE: string;\r\n    FILENAMEESTENSIONE: string;\r\n    FILETYPE: FileType;\r\n    \r\n\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDCORSO',\r\n            'IDTIPODOCUMENTAZIONE',\r\n            'DESCRIZIONE',\r\n            'FILENAMEESTENSIONE',\r\n            'FILETYPE',\r\n        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        \r\n    \r\n        objDescriptor.className = 'CorsoAllegato';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CORSOALLEGATO';\r\n        objDescriptor.describeField = 'DESCRIZIONE';\r\n    \r\n    \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        \r\n    \r\n    \r\n        objDescriptor.setRelation('IDTIPODOCUMENTAZIONE','TipoDocumentazione');\r\n        objDescriptor.setRelation('IDCORSO','Corso');\r\n    \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n    get fileTypeIconName(){\r\n        let iconName = '';\r\n\r\n        switch (this.FILETYPE){\r\n            case FileType.audio:\r\n                iconName = 'musical-notes-outline';\r\n            break;\r\n            case FileType.excel:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.immagini:\r\n                iconName = 'image-outline';\r\n            break;\r\n            case FileType.indefinito:\r\n                iconName = 'document-outline';\r\n            break;\r\n            case FileType.pdf:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.powerpoint:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.text:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.video:\r\n                iconName = 'film-outline';\r\n            break;\r\n            case FileType.word:\r\n                iconName = 'document-text-outline';\r\n            break;\r\n            case FileType.zip:\r\n                iconName = 'library-outline';\r\n            break;\r\n\r\n        }\r\n\r\n        return iconName\r\n    }\r\n\r\n\r\n}","import { isDate } from 'moment';\r\nimport { TypeDefinition } from './descriptor.model';\r\nimport { IDDocument, ParamsExport } from './iddocument.model';\r\nimport { MyDateTime } from './mydatetime.model';\r\n\r\nexport class IDLibrary {\r\n\r\n    /**\r\n     * Converte e formatta un valore in stringa\r\n     * Usato per scriverlo nei parametri di chiamata\r\n     * @param tipo Tipo del dato\r\n     * @param value Valore\r\n     * @param onlyPropertyModified In caso di Valore documento, esporta solo i modificati o tutto\r\n     */\r\n    static exportJSONValue(value: any, onlyPropertyModified = false, onlyDocModified= false): string {\r\n        let tipo:TypeDefinition;\r\n        let strValue = '';\r\n\r\n        \r\n\r\n        tipo = this.getValueType(value);\r\n\r\n        switch (tipo) {\r\n          case TypeDefinition.char:\r\n              strValue = `\\\"${value}\\\"`;\r\n          break;\r\n        \r\n          case TypeDefinition.date:\r\n              strValue = MyDateTime.formatDateISO(value);\r\n          break;\r\n  \r\n          case TypeDefinition.dateTime:\r\n              strValue = MyDateTime.formatDateTimeISO(value);\r\n          break;\r\n  \r\n          case TypeDefinition.time:\r\n              strValue = MyDateTime.formatTime(value);\r\n          break;\r\n  \r\n          case TypeDefinition.boolean:\r\n              if (value) {\r\n                strValue = '-1'\r\n              }\r\n              else {\r\n                strValue = '0';\r\n              }\r\n          break;\r\n          \r\n          case TypeDefinition.number:\r\n          case TypeDefinition.numberDecimal:\r\n              strValue = value + '';\r\n            break;\r\n        \r\n          case TypeDefinition.collection:\r\n              let arValues: [];\r\n              arValues = value;\r\n\r\n              strValue = '[';\r\n              for (let index = 0; index < arValues.length; index++) {\r\n                  const element = arValues[index];\r\n                  const elStr = IDLibrary.exportJSONValue(element, onlyPropertyModified, onlyDocModified);\r\n\r\n                  if (elStr && elStr.trim().length !== 0) {\r\n                      //Se la stringa è diversa da 0 aggiungo la virgola\r\n                      if (strValue.length != 0) {\r\n                          strValue += ', ';\r\n                      }\r\n                      strValue += elStr;\r\n                  }\r\n              }\r\n              strValue += ']';\r\n            break;\r\n\r\n          case TypeDefinition.document:\r\n              let paramExport: ParamsExport = new ParamsExport;\r\n              paramExport.clearDOProperty = true;\r\n              paramExport.clearPKProperty = false;\r\n              paramExport.clearPrivateProperty = true;\r\n              paramExport.onlyPropertyModified = onlyPropertyModified;\r\n              paramExport.onlyDocModified = onlyDocModified;\r\n              paramExport.numLivelli = 999;\r\n\r\n              let document:IDDocument = value;\r\n              strValue = document.exportToJSON(paramExport);\r\n              break;\r\n        case TypeDefinition.undefined:\r\n            strValue = 'null';\r\n            break;\r\n\r\n        default:\r\n            strValue = 'null';\r\n            break;\r\n        }\r\n  \r\n        return strValue;\r\n      }\r\n\r\n    /**\r\n     * Ritorna il tipo di un valore passato\r\n     * @param value Valore da controllare\r\n     */\r\n    static getValueType(value: any): TypeDefinition {\r\n        let typeVar: TypeDefinition;\r\n\r\n        switch (typeof value) {\r\n          case \"undefined\":\r\n            typeVar = TypeDefinition.undefined;\r\n            break;\r\n          case \"number\":\r\n            typeVar = TypeDefinition.number;\r\n            break;\r\n\r\n          case \"string\":\r\n            typeVar = TypeDefinition.char;\r\n            break;\r\n\r\n          case \"boolean\":\r\n            typeVar = TypeDefinition.boolean;\r\n            break;\r\n\r\n          case \"bigint\":\r\n            typeVar = TypeDefinition.number;\r\n            break;\r\n\r\n          case \"object\":\r\n            try {\r\n              \r\n              if (isDate(value)) {\r\n                typeVar = TypeDefinition.dateTime\r\n              }\r\n              else if (Array.isArray(value)) {\r\n                typeVar = TypeDefinition.collection;\r\n              }\r\n              else {\r\n                typeVar = TypeDefinition.document;\r\n              }\r\n            } \r\n            catch (error) {\r\n                typeVar = TypeDefinition.undefined;\r\n            }\r\n\r\n            break;\r\n        \r\n          default:\r\n            typeVar = TypeDefinition.undefined;\r\n            break;\r\n        }\r\n    \r\n        return typeVar;\r\n      }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { RequestPincodeUse } from './valuelist.model';\r\n\r\n//Documento inviato in POST nella fase di richiesta Codici\r\nexport class AccountRequestCode extends IDDocument {\r\n    \r\n    USE: RequestPincodeUse;\r\n    IDAREA: string;\r\n    IDREFER: string;\r\n    REQUESTEMAILCODE: boolean;\r\n    EMAIL: string;\r\n    REQUESTSMSCODE: boolean;\r\n    TELEPHONE: string;\r\n    TOKEN: string;\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        this.REQUESTEMAILCODE = false;\r\n        this.REQUESTSMSCODE = false;\r\n        \r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDAREA',\r\n                        'IDREFER',\r\n                        'EMAIL',\r\n                        'TELEPHONE',\r\n                        'TOKEN'\r\n                        ];\r\n        let arNumber = ['USE'];\r\n        let arBoolean = ['REQUESTEMAILCODE', 'REQUESTSMSCODE'];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'AccountRequestCode';\r\n        objDescriptor.doRemote = false;\r\n        objDescriptor.classWebApiName = '';\r\n        objDescriptor.describeField  = '';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        return objDescriptor;\r\n    }\r\n    \r\n}\r\n\r\n//Documento inviato in POST nella fase di Verifica codici\r\nexport class AccountVerifyCode extends IDDocument {\r\n    IDAREA: string;\r\n    IDREFER: string;\r\n    EMAILPINCODE: string;\r\n    SMSPINCODE: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.EMAILPINCODE = '';\r\n        this.SMSPINCODE = '';\r\n    }\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDAREA',\r\n                        'IDREFER',\r\n                        'EMAILPINCODE',\r\n                        'SMSPINCODE'\r\n                        ];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'AccountVerifyCode';\r\n        objDescriptor.doRemote = false;\r\n        objDescriptor.classWebApiName = '';\r\n        objDescriptor.describeField  = '';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n        return objDescriptor;\r\n    }\r\n}\r\n\r\n//Risposta ottenuta dal server \r\nexport class AccountOperationResponse {\r\n    idRefer: string;\r\n    descrRefer:string;\r\n    result: boolean;\r\n    message: string;\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\n\r\nexport class CampoSport extends IDDocument {\r\n    IDCAMPO: string;\r\n    IDSPORT: string;\r\n    _DESCRSPORT: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n\r\n        if (!onlyInstance) {\r\n            this._DESCRSPORT = '';\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDCAMPO',\r\n                        'IDSPORT',\r\n                        '_DESCRSPORT'];\r\n        let arNumber = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        let arCollection = [];\r\n\r\n        objDescriptor.className = 'CampoSport';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CAMPOSPORT';\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n        \r\n        objDescriptor.setRelation('IDSPORT','Sport');\r\n        objDescriptor.setRelation('IDCAMPO','Campo');\r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class CorsoProgramma extends IDDocument {\r\n    IDCORSO: string;\r\n    TESTOHTML: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDCORSO',\r\n                        'TESTOHTML'\r\n                        ];\r\n        let arNumber = [];\r\n        let arDecimal = [];\r\n        let arBoolean = [];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n        let arCollection = [];\r\n\r\n        objDescriptor.className = 'CorsoProgramma';\r\n        objDescriptor.classWebApiName = 'CORSOPROGRAMMA';\r\n        objDescriptor.doRemote = true;\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n        objDescriptor.setRelation('IDCORSO','Corso');\r\n        \r\n        return objDescriptor;\r\n    }\r\n}","export class PostResponse {\r\n    //Risposta ottenuta dal server \r\n    private _document: string;\r\n    result: boolean;\r\n    message: string; \r\n    code: string; //Eventuale codice ritornato dal server\r\n\r\n    public set document(value:string) {\r\n        this._document = value;\r\n    }\r\n\r\n    public get document(): string {\r\n        return this._document;\r\n    }\r\n\r\n\r\n    setFromResponse(response){\r\n        if(response){\r\n            this.result = response['result'];\r\n            this.message = response['message'];\r\n            this.code = response['code'];\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getDocument(): any {\r\n        let doc: any;\r\n\r\n        if (this._document && this._document.length != 0) {\r\n            doc = JSON.parse(this._document);\r\n        }\r\n\r\n        return doc;\r\n    }\r\n    \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Location } from '../models/location.model';\r\nimport { TipoArea, PageType, SettorePagamentiAttivita } from '../models/valuelist.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\nimport { AreaLink } from './arealink.model';\r\nimport { AreaPaymentSetting } from './areapaymentsetting.model';\r\nimport { GeolocationPosition } from '@capacitor/core';\r\n\r\n\r\nexport class Area extends IDDocument {\r\n    IDGRUPPOSPORTIVO: string;\r\n    TIPO: TipoArea;\r\n    DENOMINAZIONE: string;\r\n    INDIRIZZO: string;\r\n    CAP: string;\r\n    COMUNE: string;\r\n    PROVINCIA: string;\r\n    ISOSTATO: string;\r\n    CONDVENDITACORSI: string;\r\n    CONDVENDPRENOTAZIONI: string;\r\n    LOCATIONS: Location[];\r\n    AREALINKS: AreaLink[];\r\n    AREAPAYMENTSETTINGS: AreaPaymentSetting[];\r\n    APPSHOW: boolean;\r\n    APPISCRIZIONI: boolean;\r\n    APPPRENOTAZIONI: boolean;\r\n    APPGAPOREPRESENZE: number; //Indica per quanto tempo (ore) dal termine di una data di corso, il trainer può inserire/aggiornare le presenze\r\n    LATITUDINE: number;\r\n    LONGITUDINE: number;\r\n    constructor(onlyInstance?:boolean) {\r\n      \r\n      super(onlyInstance);\r\n      this.AREALINKS=[];\r\n      this.LOCATIONS = [];\r\n      this.AREAPAYMENTSETTINGS=[];\r\n      \r\n      //0 indica che è sempre possibile aggiornare le presenze (dal server non arriva nulla)\r\n      if (!onlyInstance){\r\n\r\n        this.APPGAPOREPRESENZE = 0;\r\n      }\r\n\r\n    }\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n    getDescriptor(): Descriptor {\r\n      let objDescriptor = new Descriptor();\r\n      let arString = ['IDGRUPPOSPORTIVO',\r\n                      'DENOMINAZIONE',\r\n                      'INDIRIZZO',\r\n                      'CAP',\r\n                      'COMUNE',\r\n                      'PROVINCIA',\r\n                      'ISOSTATO',\r\n                      'CONDVENDITACORSI',\r\n                      'CONDVENDPRENOTAZIONI'];\r\n      let arNumber = ['TIPOAREA','APPGAPOREPRESENZE','LATITUDINE','LONGITUDINE'];\r\n      let arBoolean = ['APPSHOW','APPISCRIZIONI','APPPRENOTAZIONI'];\r\n      let arDate = [];\r\n      let arDateTime =[];\r\n      let arTime = [];\r\n      let arCollection = ['LOCATIONS','AREALINKS','AREAPAYMENTSETTINGS'];\r\n\r\n      objDescriptor.className = 'Area';\r\n      objDescriptor.doRemote = true;\r\n      objDescriptor.classWebApiName = 'AREAOPERATIVA';\r\n      objDescriptor.describeField = 'DENOMINAZIONE';\r\n\r\n      objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n      objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n      objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n      objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n      objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n      objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n      objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n      \r\n\r\n\r\n      return objDescriptor;\r\n  }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Sovrascrive il metodo IDDOcument, lo richiama e sistema le collection\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n      super.setJSONProperty(data);\r\n      this.setCollection(data);\r\n\r\n      this.setOriginal();\r\n    }\r\n\r\n    /**\r\n     * Reimposta l'Array delle location creando veri oggetti di tipo Location\r\n     * @param resultData Json Information\r\n     */\r\n    setCollection(data: any) {\r\n      if (data) {\r\n\r\n        if (data.LOCATION) {\r\n          data.LOCATION.forEach(element => {\r\n            let objLocation = this.findLocationByID(element.ID);\r\n            if (!objLocation) {\r\n              //Nuova Location\r\n              objLocation = new Location();\r\n              //Aggiungo all'Array\r\n              this.LOCATIONS.push(objLocation);\r\n            }\r\n\r\n            objLocation.setJSONProperty(element);\r\n          });\r\n        }\r\n\r\n        if (data.AREALINK) {\r\n          data.AREALINK.forEach(element => {\r\n            let objAreaLink = this.findAreaLinkByID(element.ID);\r\n\r\n            if (!objAreaLink) {\r\n              //Nuova Area Link\r\n              objAreaLink = new AreaLink();\r\n              //Aggiungo all'Array\r\n              this.AREALINKS.push(objAreaLink);\r\n            }\r\n\r\n            objAreaLink.setJSONProperty(element);\r\n          });\r\n        }\r\n        \r\n        //se nell'oggetto any che mi arriva è presente il campo AREAPAYMENTSETTING[]\r\n        if (data.AREAPAYMENTSETTING){\r\n          //ne scorro gli elementi\r\n          data.AREAPAYMENTSETTING.forEach(element => {\r\n            //cerco se tra gli elementi che ho in memoria è già prsente l'elemento che mi è arrivato\r\n            let objPaymentSetting= this.findPaymentSettingById(element.ID)\r\n            //se non è presente\r\n            if (!objPaymentSetting){\r\n              //ne creo uno nuovo\r\n              objPaymentSetting= new AreaPaymentSetting();\r\n              //e lo inserisco nell'array\r\n              this.AREAPAYMENTSETTINGS.push(objPaymentSetting);\r\n            }\r\n            //ora valorizzo il nuovo oggetto (che ci fosse già o no è indifferente) con le proprietà dell'oggetto che mi è arrivato\r\n            objPaymentSetting.setJSONProperty(element);\r\n          });\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Cerca nell'array Location e torna la location se trovata\r\n     * @param idLocation Location cercata\r\n     */\r\n    findLocationByID(idLocation: string) {\r\n      return this.LOCATIONS.find(element => {\r\n        return element.ID == idLocation;\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca nella colletion Area Link e ritorna il Link\r\n     * @param idLink Link desiderato\r\n     */\r\n    findAreaLinkByID(idLink: string) {\r\n      return this.AREALINKS.find(element => {\r\n        return element.ID == idLink;\r\n      });\r\n    }\r\n\r\n     /**\r\n     * Cerca nella colletion areapaymentsettings  e ritorna l'elemeto desiderato\r\n     * @param id id dell'elemento eesiderato\r\n     */\r\n    findPaymentSettingById(id: string) {\r\n      return this.AREAPAYMENTSETTINGS.find(element => {\r\n        return element.ID == id;\r\n      });\r\n    }\r\n\r\n\r\n    /**\r\n     * Cerca e ritorna un link con il tipo pagina passato\r\n     * @param tipo Tipo pagina richiesto\r\n     */\r\n    findAreaLinkByPageType(tipo: PageType) {\r\n      return this.AREALINKS.find(element => {\r\n        return element.TIPOURL == tipo;\r\n      });\r\n    }\r\n\r\n\r\n    distanceFrom(position: GeolocationPosition) {\r\n      if (this.LATITUDINE && this.LONGITUDINE){\r\n        let lat = position.coords.latitude\r\n        let lon = position.coords.longitude\r\n        var radlat1 = Math.PI * this.LATITUDINE/180\r\n        var radlat2 = Math.PI * lat/180\r\n        var theta = this.LONGITUDINE-lon\r\n        var radtheta = Math.PI * theta/180\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n            dist = 1;\r\n        }\r\n        dist = Math.acos(dist)\r\n        dist = dist * 180/Math.PI\r\n        dist = dist * 60 * 1.1515\r\n        dist = dist * 1.609344\r\n        return dist\r\n      }\r\n  }\r\n\r\n\r\n  /**\r\n   * Dato un settore di pagamento, torna i pagamenti che supportano il settore\r\n   * @param Settore Settore dove si richiedono i pagamenti\r\n   */\r\n  getPaymentFor(settore: SettorePagamentiAttivita):AreaPaymentSetting[] {\r\n    let arSetting: AreaPaymentSetting[] = [];\r\n\r\n    \r\n\r\n    if (this.AREAPAYMENTSETTINGS && this.AREAPAYMENTSETTINGS.length != 0) {\r\n\r\n      //Ciclo sui modi di pagamento\r\n      for (let index = 0; index < this.AREAPAYMENTSETTINGS.length; index++) {\r\n\r\n          const elPaymentSetting = this.AREAPAYMENTSETTINGS[index];\r\n\r\n          /* Se il pagamento è adatto al settore */\r\n          if (elPaymentSetting && elPaymentSetting.isFor(settore)) {\r\n            arSetting.push(elPaymentSetting);\r\n          }\r\n          \r\n      }\r\n    }    \r\n    \r\n    return arSetting;\r\n  }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { RequestDecode, RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { CorsoAllegato } from '../models/corsoallegato.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CorsoallegatoService {\r\n\r\n  constructor(\r\n    private docStructureService: DocstructureService\r\n  ) { }\r\n\r\n\r\n  requestByIdCorso(idCorso: string):Promise<CorsoAllegato[]>{\r\n    return new Promise((resolve, reject) => {\r\n\r\n    //filtro per la richiesta\r\n    let myFilter = new CorsoAllegato(true);\r\n    myFilter.IDCORSO = idCorso;\r\n\r\n     //Parametri per la richiesta\r\n     let myParams = new RequestParams();\r\n     myParams.decode = new RequestDecode();\r\n     myParams.decode.active = true;\r\n\r\n     this.docStructureService.requestNew(myFilter, myParams)\r\n     .then((listAllegati: CorsoAllegato[]) => {\r\n       resolve(listAllegati);\r\n     })\r\n\r\n     .catch(error => {\r\n       reject(error);\r\n     })\r\n\r\n\r\n\r\n    })\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  /* ORIGINALI*/\r\n  //{ path: '', redirectTo: 'home', pathMatch: 'full' },\r\n  //{ path: 'home', loadChildren: () => import('./pages/home/home.module').then( m => m.HomePageModule)},\r\n  \r\n  // Ho provato a cambiare e mandare home al path vuoto (che carica la pagina Home)\r\n  { path: 'home', redirectTo: '', pathMatch: 'full' },\r\n  { path: '', loadChildren: () => import('./pages/home/home.module').then( m => m.HomePageModule)},\r\n  {\r\n    path: 'historylist',\r\n    children: [\r\n      {\r\n        path: '',\r\n        loadChildren: () => import('./pages/history/historylist/historylist.module').then( m => m.HistorylistPageModule)\r\n      },\r\n      {\r\n        path: 'booking/:historyId',\r\n        loadChildren: () => import('./pages/history/historybook/historybook.module').then( m => m.HistorybookPageModule)\r\n      },\r\n      {\r\n        path: 'course/:historyId',\r\n        loadChildren: () => import('./pages/history/historycourse/historycourse.module').then( m => m.HistorycoursePageModule)\r\n      }\r\n\r\n    ]\r\n  },\r\n  {\r\n    path: 'account',\r\n    loadChildren: () => import('./pages/account/account.module').then( m => m.AccountPageModule)\r\n  },\r\n  {\r\n    path: 'location/:locationId',\r\n    loadChildren: () => import('./pages/location/location.module').then( m => m.LocationPageModule)\r\n  },\r\n  {\r\n    path: 'location',\r\n    redirectTo: 'home', pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'listcourses/:locationId',\r\n    loadChildren: () => import('./pages/location/course/listcourses/listcourses.module').then( m => m.ListcoursesPageModule)\r\n  },\r\n  {\r\n    path: 'listcourses',\r\n    redirectTo: 'home', pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'detailcourse',\r\n    redirectTo: 'home', pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'detailcourse/:courseId',\r\n    loadChildren: () => import('./pages/location/course/detailcourse/course.module').then( m => m.CoursePageModule)\r\n  },\r\n  {\r\n    path: 'news/:newsId',\r\n    loadChildren: () => import('./pages/newsdetail/newsdetail.module').then( m => m.NewsdetailPageModule)\r\n  },\r\n  {\r\n    path: 'news',\r\n    loadChildren: () => import('./pages/news/news.module').then( m => m.NewsPageModule)\r\n  },  \r\n  {\r\n    path: 'verify',\r\n    loadChildren: () => import('./pages/auth/verify/verify.module').then( m => m.VerifyPageModule)\r\n  },\r\n  {\r\n    path: 'test',\r\n    loadChildren: () => import('./pages/test/test.module').then( m => m.TestPageModule)\r\n  },\r\n  \r\n  {\r\n    path: 'agenda',\r\n    loadChildren: () => import('./pages/agenda/agenda.module').then( m => m.AgendaPageModule)\r\n  },\r\n  {\r\n    path: 'agenda-trainer',\r\n    loadChildren: () => import('./pages/agenda-trainer/agenda-trainer.module').then( m => m.AgendaTrainerPageModule)\r\n  },\r\n  {\r\n    path: 'agenda-custode',\r\n    loadChildren: () => import('./pages/agenda-custode/agenda-custode.module').then( m => m.AgendaCustodePageModule)\r\n  },\r\n\r\n  {\r\n    // ** dovrebbe rappresentare tutti i percorsi che non vengono intercettati dalle rotte precedenti\r\n    path: '**',\r\n    redirectTo: ''\r\n  }\r\n\r\n  \r\n  // {\r\n  //   path: 'agenda-custode/:idImpegno',\r\n  // },  \r\n\r\n  //questo lo lascio commentato, perchè in teoria ci si arriva solo da modale\r\n  // {\r\n  //   path: 'psw-recovery',\r\n  //   loadChildren: () => import('./pages/auth/psw-recovery/psw-recovery.module').then( m => m.PswRecoveryPageModule)\r\n  // }\r\n \r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules, relativeLinkResolution: 'legacy' })\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Descriptor, TypeDefinition } from '../library/models/descriptor.model';\r\nimport { IDDocument } from '../library/models/iddocument.model';\r\nimport { StatoIscrizione } from './valuelist.model';\r\n\r\nexport class CorsoPresenze extends IDDocument {\r\n\r\n    IDPIANIFICAZIONECORSO: string;\r\n    IDUTENTE: string;\r\n    NOMINATIVO: string;\r\n    PRESENTE: boolean;\r\n    NOTES: string;\r\n    IDUSERSETTING: string;\r\n    DATAORASETTING: Date;\r\n    DATACERTIFICATOMEDICO: Date;\r\n    STATOISCRIZIONE: StatoIscrizione;\r\n\r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [\r\n            'IDPIANIFICAZIONECORSO',\r\n            'IDUTENTE',\r\n            'NOMINATIVO',\r\n            'NOTE',\r\n            'IDUSERSETTING'\r\n        ];\r\n        let arNumber = ['STATOISCRIZIONE'];\r\n        let arBoolean = ['PRESENTE'];\r\n        let arDate = ['DATACERTIFICATOMEDICO'];\r\n        let arDateTime =['DATAORASETTING'];\r\n        let arTime = [];\r\n\r\n        objDescriptor.className = 'CorsoPresenze';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'CORSOPRESENZE';\r\n        objDescriptor.describeField  = 'NOMINATIVO';\r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n\r\n        objDescriptor.setRelation('IDPIANIFICAZIONECORSO', 'PianificazioneCorso');\r\n        objDescriptor.setRelation('IDUTENTE', 'Utente');\r\n        objDescriptor.setRelation('IDUSERSETTING', 'Utente');\r\n        \r\n        \r\n        return objDescriptor;\r\n    }\r\n\r\n    constructor(onlyInstance?: boolean){\r\n        super(onlyInstance);\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { CodiceFiscale } from '../models/codicefiscale.model';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { ApicallService } from './apicall.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CodicefiscaleService {\r\n\r\n  //Per ottenere i dati del comune dal codice catastale\r\n  //chiamare https://api.cavallinipietro.com/codicefiscale/api/comuni/codicecatastale/L872\r\n\r\n  constructor(private apiService: ApicallService) { }\r\n\r\n  /**\r\n   * Effettua il controllo di un codice fiscale e torna TRUE se corretto o FALSE se non corretto\r\n   * Nel caso fosse corretto puo' essere richiesta la decodifica del codice in Comune, Provincia, DataNascita etc.\r\n   * @param docCF Documento Codice Fiscale\r\n   * @param decode Decodifica il Codice Fiscale se corretto\r\n   * @param userMsg I testi dei messaggi di errore sono rivolti all'utente finale\r\n   */\r\n  checkCodiceFiscale(codiceFiscale: string, decode?:boolean, userMsg=false): Promise<CodiceFiscale> {\r\n    return new Promise ((resolve, reject)=>{\r\n              let check = false;\r\n              let resDecode = false;\r\n              let docCF: CodiceFiscale;\r\n\r\n              if (codiceFiscale && codiceFiscale.length !== 0) {\r\n                docCF = new CodiceFiscale(codiceFiscale);\r\n                //Valido il codice\r\n                check = docCF.validate();\r\n\r\n              }\r\n              else {\r\n                docCF = new CodiceFiscale('');\r\n                docCF.msgValidate = 'Codice non specificato';\r\n                docCF.checkValidate = false;\r\n                check = false;\r\n              }\r\n\r\n              //Check passato correttamente\r\n              if (check) {\r\n                  if (decode) {\r\n\r\n                    //Effettuo la decodifica base\r\n                    resDecode = docCF.basicDecode();\r\n  \r\n                    //Effettuo la chiamata per ottenere i dati del comune dal codice catastale\r\n                    if (resDecode) {\r\n                      //Con il codice del comune cerco di recuperare tutto\r\n                      let myHeaders = new HttpHeaders({'Content-type':'text/plain'});\r\n                      \r\n\r\n                      //In Testata c'e' sempre l'AppId\r\n                      //myHeaders = myHeaders.set('appid',config.appId);\r\n                      let myUrl = 'https://api.cavallinipietro.com/codicefiscale/api/comuni/codicecatastale' + '/' + docCF.codiceCatastale;  \r\n                  \r\n                      this.apiService\r\n                          .httpGet(myUrl, myHeaders)\r\n                          .subscribe(data => {\r\n\r\n                            //In teoria mi ha risposto correttamente\r\n                            if (data.hasOwnProperty('codiceCatastale')) {\r\n                              //Nome comune\r\n                              if (data.hasOwnProperty('nome')) {\r\n                                docCF.comune = data['nome'];\r\n\r\n                                //se ho il comune, significa che il cf è italiano\r\n                                docCF.stato = 'Italia'\r\n                              }\r\n\r\n                              //Regione\r\n                              if (data.hasOwnProperty('regione')) {\r\n                                docCF.regione = data['regione'];\r\n                              }\r\n                              \r\n                              //Provincia\r\n                              if (data.hasOwnProperty('provincia')) {\r\n                                docCF.provincia = data['provincia'];\r\n                              }\r\n\r\n                              //CAP\r\n                              if (data.hasOwnProperty('cap')) {\r\n                                docCF.cap = data['cap'];\r\n                              }\r\n\r\n                              if(data.hasOwnProperty('stato')){\r\n                                docCF.stato = data['stato']\r\n                              }\r\n\r\n                            }\r\n\r\n\r\n\r\n                            resolve(docCF);\r\n\r\n                          } , error => {\r\n                            docCF.checkValidate = false;\r\n                            docCF.msgValidate = error;\r\n                            resolve(docCF);\r\n                          });\r\n                    }\r\n                    else {\r\n                      \r\n                      resolve(docCF);\r\n                    }\r\n\r\n                  }\r\n                  else {\r\n                    resolve(docCF);\r\n                  }\r\n\r\n              }\r\n              else {\r\n                //Check Codice Fiscale fallito\r\n\r\n                //Se i messaggi sono per l'utente cambio con\r\n                if (userMsg) {\r\n                  docCF.msgValidate = 'Codice fiscale non valido';\r\n                }\r\n\r\n                reject(docCF);\r\n              }\r\n              \r\n            });\r\n\r\n  }\r\n\r\n\r\n  \r\n\r\n\r\n\r\n  \r\n}\r\n","import { Language, Giorni } from './valuelist.model';\r\n\r\nexport class Settimana {\r\n    index: number;\r\n\r\n    label: string;\r\n    smallLabel: string;\r\n    xsLabel: string;\r\n\r\n    selected: boolean;\r\n    color: string;\r\n\r\n    constructor(indexDay: number, language?: Language) {\r\n\r\n        this.index = indexDay;\r\n        this.selected = false;\r\n        this.color = 'primary';\r\n\r\n        this.setAllLabel(language);\r\n    }\r\n\r\n    /**\r\n     * Imposto tutte le etichette\r\n     * @param language Lingua\r\n     */\r\n    private setAllLabel(language?: Language) {\r\n\r\n        //Prima determino la Label principale\r\n        switch (language) {\r\n            case Language.italiano:\r\n                this.setItalianLabel();\r\n                break;\r\n            case Language.inglese:\r\n                this.setEnglishLabel();\r\n                break;\r\n            case Language.spagnolo:\r\n                this.setSpanishLabel();\r\n                break;\r\n            default:\r\n                this.setItalianLabel();\r\n                break;\r\n        }\r\n\r\n        //Ora costruisco le altre label\r\n        this.smallLabel = this.label.substring(0, 3);\r\n        this.xsLabel = this.label.substring(0, 1);\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta le etichette dei giorni in italiano\r\n     */\r\n    private setItalianLabel() {\r\n        \r\n        switch (this.index) {\r\n        case Giorni.domenica:\r\n            this.label = 'domenica';\r\n            break;\r\n        case Giorni.lunedi:\r\n            this.label = 'lunedi\\'';\r\n            break;\r\n        case Giorni.martedi:\r\n            this.label = 'martedi\\'';\r\n            break;\r\n        case Giorni.mercoledi:\r\n            this.label = 'mercoledi\\'';\r\n            break;\r\n        case Giorni.giovedi:\r\n            this.label = 'giovedi\\'';\r\n            break;        \r\n        case Giorni.venerdi:\r\n            this.label = 'venerdi\\'';\r\n            break;        \r\n        case Giorni.sabato:\r\n            this.label = 'sabato';\r\n            break;                \r\n        }\r\n    }\r\n\r\n    /**\r\n    * Imposta le etichette dei giorni in italiano\r\n    */\r\n    private setEnglishLabel() {\r\n        \r\n        switch (this.index) {\r\n        case Giorni.domenica:\r\n            this.label = 'sunday';\r\n            break;\r\n        case Giorni.lunedi:\r\n            this.label = 'monday';\r\n            break;\r\n        case Giorni.martedi:\r\n            this.label = 'tuesday';\r\n            break;\r\n        case Giorni.mercoledi:\r\n            this.label = 'wednesday';\r\n            break;\r\n        case Giorni.giovedi:\r\n            this.label = 'thursday';\r\n            break;        \r\n        case Giorni.venerdi:\r\n            this.label = 'friday';\r\n            break;        \r\n        case Giorni.sabato:\r\n            this.label = 'saturday';\r\n            break;                \r\n        }\r\n    }\r\n\r\n    private setSpanishLabel() {\r\n        \r\n        switch (this.index) {\r\n        case Giorni.domenica:\r\n            this.label = 'domingo';\r\n            break;\r\n        case Giorni.lunedi:\r\n            this.label = 'lunes';\r\n            break;\r\n        case Giorni.martedi:\r\n            this.label = 'martes';\r\n            break;\r\n        case Giorni.mercoledi:\r\n            this.label = 'miercoles';\r\n            break;\r\n        case Giorni.giovedi:\r\n            this.label = 'jueve';\r\n            break;        \r\n        case Giorni.venerdi:\r\n            this.label = 'viernes';\r\n            break;        \r\n        case Giorni.sabato:\r\n            this.label = 'sabado';\r\n            break;                \r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Ritorna un Array di Giornate\r\n     * @param startSunday Calendario Inizia alla Domenica ?\r\n     * @param language    Lingua Opzionale\r\n     */\r\n    static getArray(startSunday?: boolean, language?:Language): Settimana[] {\r\n        let myWeek: Settimana[] = [];\r\n        let startIndex = Giorni.lunedi;\r\n\r\n        if (startSunday) {\r\n            startIndex = Giorni.domenica;\r\n        }\r\n\r\n        // Ciclo dallo Start Index a 7\r\n        for (let indice = startIndex; indice <= Giorni.sabato; indice++) {\r\n            let newDay = new Settimana(indice, language);\r\n            myWeek.push(newDay);\r\n        }\r\n\r\n        //Se ho iniziato al Lunedi, devo aggiungere in fondo la domenica\r\n        if (startIndex == 1) {\r\n            let newDay = new Settimana(Giorni.domenica, language);\r\n            myWeek.push(newDay);\r\n        }\r\n\r\n\r\n        return myWeek;\r\n    }\r\n\r\n\r\n    /**\r\n     * Imposta a selected un determinato giorno della settimana presente nell'array\r\n     * @param indexDay Indice del Giorno da selezionare\r\n     * @param myWeek Array Settimanale\r\n     */\r\n    static selectDayArray(indexDay: number, myWeek: Settimana[]) {\r\n        if (myWeek) {\r\n            myWeek.forEach(element => {\r\n                if (element.index == indexDay) {\r\n                    element.selected = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Ritorna in modalità rapida la label del Giorno\r\n     * @param indexDay Numero del Giorno\r\n     * @param language Lingua Opzionale\r\n     */\r\n    static getLabel(indexDay: number, language?: Language) {\r\n        let newDay = new Settimana(indexDay, language);\r\n\r\n        return newDay.label;\r\n    }\r\n\r\n    /**\r\n     * Ritorna in modalità rapida la smallLabel del Giorno\r\n     * @param indexDay Numero del Giorno\r\n     * @param language Lingua Opzionale\r\n     */\r\n    static getsmallLabel(indexDay: number, language?: Language) {\r\n        let newDay = new Settimana(indexDay, language);\r\n\r\n        return newDay.smallLabel;\r\n    } \r\n\r\n    /**\r\n     * Ritorna in modalità rapida la xsLabel del Giorno\r\n     * @param indexDay Numero del Giorno\r\n     * @param language Lingua Opzionale\r\n     */\r\n    static getXsLabel(indexDay: number, language?: Language) {\r\n        let newDay = new Settimana(indexDay, language);\r\n\r\n        return newDay.xsLabel;\r\n    }     \r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { Language } from './valuelist.model';\r\nimport { Settimana } from './settimana.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class AperturaLocation extends IDDocument {\r\n    GIORNO: number; //Da scemo ho messo da 1 a 7\r\n    APERTOCHIUSO: boolean;\r\n    DALLE1: Date;\r\n    ALLE1: Date;\r\n    DALLE2: Date;\r\n    ALLE2: Date;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Ritorna il descrittore della Struttura Campi\r\n     */\r\n    getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = [];\r\n        let arNumber = ['GIORNO'];\r\n        let arBoolean = ['APERTOCHIUSO'];\r\n        let arDate = [];\r\n        let arDateTime =[];\r\n        let arTime = ['DALLE1','DALLE2','ALLE1','ALLE2'];\r\n\r\n        objDescriptor.className = 'AperturaLocation';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.classWebApiName = 'APERTURALOCATION';\r\n        \r\n\r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n        \r\n\r\n        return objDescriptor;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Sovrascrive metodo di IDDocument e lo amplia\r\n     * @param data JSON Received\r\n     */\r\n    setJSONProperty(data: any) {\r\n        \r\n\r\n        super.setJSONProperty(data);\r\n\r\n        //Il Giorno che arriva base 1 lo sposto a base 0\r\n        this.GIORNO = this.GIORNO - 1;\r\n\r\n        this.setOriginal();\r\n    }\r\n\r\n\r\n\r\n    getDateFromTimeString(timeString: string): Date {\r\n        const splitTime = timeString.split(':');\r\n        let ore = 0;\r\n        let minuti = 0;\r\n        let secondi = 0;\r\n        let returnDate = new Date();\r\n\r\n        for (let index = 0; index < splitTime.length; index++) {\r\n            switch(index) {\r\n                case 0: \r\n                    ore = Number.parseInt(splitTime[index]);\r\n                    \r\n                break;\r\n                case 1: \r\n                    minuti = Number.parseInt(splitTime[index]);\r\n                    \r\n                break;\r\n                case 2: \r\n                    secondi = Number.parseInt(splitTime[index]);\r\n                break;\r\n\r\n            }\r\n                        \r\n        }\r\n\r\n        returnDate.setHours(ore,minuti,secondi);\r\n        \r\n        return returnDate;\r\n    }\r\n\r\n\r\n\r\n    /** Ritorna l'etichetta del giorno */\r\n    getLabel(language?: Language) {\r\n\r\n        let label = Settimana.getLabel(this.GIORNO, language);\r\n\r\n        return label;\r\n    }\r\n\r\n    isOpen() {\r\n        return this.APERTOCHIUSO;\r\n    }\r\n\r\n    get isAlwaysOpen(){\r\n        if (this.isOpen() && !this.DALLE1 && !this.DALLE2){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ritorna l'orario impostato minore o maggiore di apertura o chiusura\r\n     * UNDEFINED se non trovato oppure se la Location è chiusa\r\n     * @param type min || max a seconda se su vuole l'orario inferiore o superiore\r\n     */\r\n    getOrario(type: string) {\r\n        let value: Date;\r\n        if (this.APERTOCHIUSO) {\r\n            if (type == 'min') {\r\n                if (this.DALLE1) {\r\n                    value = this.DALLE1;\r\n                }\r\n                else if (this.DALLE2) {\r\n                    value = this.DALLE2;\r\n                }\r\n            }\r\n            else if (type == 'max') {\r\n                if (this.ALLE2) {\r\n                    value = this.ALLE2;\r\n                }\r\n                else if (this.ALLE1) {\r\n                    value = this.ALLE1;\r\n                }\r\n            }\r\n            else if (type == 'middleMin'){\r\n\r\n                if (this.ALLE1){\r\n                    value = this.ALLE1;\r\n                }\r\n            }\r\n            else if (type == 'middleMax'){\r\n                if (this.DALLE2){\r\n                    value = this. DALLE2;\r\n                }\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}","import { IDDocument } from '../library/models/iddocument.model';\r\nimport { TypeDefinition, Descriptor} from '../library/models/descriptor.model';\r\n\r\nexport class CategoriaEta extends IDDocument {\r\n    CODICE: string;\r\n    ETAMINIMA: number;\r\n    ETAMASSIMA: number;\r\n    DESCTOOLTIP: string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);\r\n    }\r\n\r\n          /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n   getDescriptor(): Descriptor {\r\n    let objDescriptor = new Descriptor();\r\n    let arString = ['CODICE',\r\n                    'DESCTOOLTIP'\r\n                    ];\r\n    let arNumber = ['ETAMINIMA','ETAMASSIMA'];\r\n    let arBoolean = [];\r\n    let arDate = [];\r\n    let arDateTime =[];\r\n    let arTime = [];\r\n    let arCollection = [];\r\n\r\n    objDescriptor.className = 'CategoriaEta';\r\n    objDescriptor.classWebApiName = 'CATEGORIEETA';\r\n    objDescriptor.doRemote = true;\r\n    objDescriptor.describeField = 'DESCTOOLTIP';\r\n\r\n    objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n    objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n    objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n    objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n    objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n    objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    objDescriptor.addMultiple(arCollection, TypeDefinition.collection);\r\n\r\n\r\n    \r\n    return objDescriptor;\r\n}\r\n\r\n    setJSONProperty(data: any) {\r\n        super.setJSONProperty(data);\r\n\r\n        this.setOriginal();\r\n    }\r\n\r\n\r\n    /**\r\n     * Verifica se l'eta rientra nel range\r\n     * @param eta Eta da controllare\r\n     */\r\n    isValid(eta: number):boolean {\r\n\r\n        let isValid = false;\r\n        if (!this.ETAMINIMA && !this.ETAMASSIMA) {\r\n            isValid = true;\r\n        }\r\n        else if (!this.ETAMASSIMA) {\r\n            //Non c'e' eta massima solo la minima\r\n            if (eta >= this.ETAMINIMA) {\r\n                isValid = true;\r\n            }\r\n        }\r\n        else if (!this.ETAMINIMA) {\r\n            //Non c'e' eta minima solo la massima\r\n            if (eta <= this.ETAMASSIMA) {\r\n                isValid = true;\r\n            }\r\n        }\r\n        else {\r\n            //Ci sono entrambi le eta\r\n            if (eta >= this.ETAMINIMA && eta <= this.ETAMASSIMA) {\r\n                isValid = true;\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n   \r\n}","import { Descriptor, TypeDefinition } from \"../library/models/descriptor.model\";\r\nimport { IDDocument } from \"../library/models/iddocument.model\";\r\nimport { PaymentChannel, TipoRigoIncasso } from \"./valuelist.model\";\r\n\r\nexport class IscrizioneIncasso extends IDDocument {\r\n    IDISCRIZIONECORSO:               string;\r\n    DATASCADENZA:                    Date;\r\n    MODALITA:                        PaymentChannel;\r\n    DATAOPERAZIONE:                  Date;\r\n    IMPORTO:                         number;\r\n    NOTES:                           string;\r\n    TIPORIGO:                        TipoRigoIncasso;\r\n    ZORDER:                          number;\r\n    DICITURADOC:                     string;\r\n    IDCONTO:                         string;\r\n    IDTRANSACTION:                   string;\r\n    IDORDER:                         string;\r\n\r\n    constructor(onlyInstance?:boolean) {\r\n        super(onlyInstance);         \r\n    } \r\n\r\n\r\n    /**\r\n    * Ritorna il descrittore della Struttura Campi\r\n    */\r\n     getDescriptor(): Descriptor {\r\n        let objDescriptor = new Descriptor();\r\n        let arString = ['IDISCRIZIONECORSO',\r\n                        'NOTES',\r\n                        'DICITURADOC',\r\n                        'IDCONTO',\r\n                        'IDTRANSACTION',\r\n                        'IDORDER'\r\n                        ];\r\n        let arNumber = ['ZORDER',\r\n                        'MODALITA',\r\n                        'TIPORIGO',\r\n                        'TIPOPREZZO'\r\n                       ];\r\n        let arDecimal = ['IMPORTO'\r\n                        ];\r\n        let arBoolean = [];\r\n        let arDate = ['DATAOPERAZIONE'];\r\n        let arDateTime =[];\r\n        let arTime = [];\r\n    \r\n        objDescriptor.className = 'IscrizioneIncasso';\r\n        objDescriptor.classWebApiName = 'ISCRIZIONEINCASSO';\r\n        objDescriptor.doRemote = true;\r\n        objDescriptor.describeField = 'DENOMINAZIONE';\r\n        \r\n        objDescriptor.addMultiple(arString, TypeDefinition.char);\r\n        objDescriptor.addMultiple(arNumber, TypeDefinition.number);\r\n        objDescriptor.addMultiple(arDecimal, TypeDefinition.numberDecimal);\r\n        objDescriptor.addMultiple(arBoolean, TypeDefinition.boolean);\r\n        objDescriptor.addMultiple(arDate, TypeDefinition.date);\r\n        objDescriptor.addMultiple(arDateTime, TypeDefinition.dateTime);\r\n        objDescriptor.addMultiple(arTime, TypeDefinition.time);\r\n    \r\n        \r\n    \r\n        return objDescriptor;\r\n    }    \r\n    \r\n    \r\n\r\n/**\r\n * Imposta le proprietà nell'oggetto\r\n * @param data JSON Received\r\n */\r\n    setJSONProperty(data: any) {\r\n        //Chiamo IDDOcument\r\n        super.setJSONProperty(data);\r\n\r\n        this.setOriginal();\r\n\r\n    }     \r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, take, max } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { Location } from '../models/location.model';\r\nimport { ApicallService } from './apicall.service';\r\nimport { StartConfiguration } from '../models/start-configuration.model';\r\nimport { Sport } from '../models/sport.model';\r\nimport { CampoSport } from '../models/camposport.model';\r\nimport { SlotWeek } from '../models/imdb/slotweek.model';\r\nimport { LoadingController } from '@ionic/angular';\r\nimport { error } from 'protractor';\r\nimport { LogApp } from '../models/log.model';\r\nimport { RequestDecode, RequestParams } from '../library/models/requestParams.model';\r\nimport { DocstructureService } from '../library/services/docstructure.service';\r\nimport { LocationAppVisibility } from '../models/valuelist.model';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocationService {\r\n\r\n  private _listLocation = new BehaviorSubject<Location[]>([]);\r\n  private _decodeListSport: Sport[]; //Lista di Decodifica degli Sport\r\n  private _activeLocation = new BehaviorSubject<Location>(new Location());\r\n  //VARIABILI PER PRENOTAZIONI\r\n\r\n\r\n  get listLocation() {\r\n    return this._listLocation.asObservable();\r\n  }\r\n\r\n  set decodeListSport(value: Sport[]) {\r\n    this._decodeListSport = value;\r\n  }\r\n\r\n  get activeLocation() {\r\n    return this._activeLocation.asObservable();\r\n  }\r\n\r\n  constructor(\r\n                private apiService:ApicallService,\r\n                private loadingCtrl: LoadingController,\r\n                private docStructureService: DocstructureService\r\n              ) { }\r\n\r\n\r\n\r\n  /**\r\n   * Recupero delle Location di un'area\r\n   * @param config Parametri di configurazione\r\n   * @param idArea Area di riferimento\r\n   */\r\n  requestByIdArea(config: StartConfiguration, idArea: string): Promise<Location[]> {\r\n    return new Promise((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'LOCATION';\r\n      const locVisTutti = LocationAppVisibility.tutti; //Queste sono le location pubbliche\r\n      \r\n\r\n      // Nei parametri imposto l'Area Operativa\r\n      let myParams = new HttpParams().set('IDAREAOPERATIVA', idArea);\r\n  \r\n      //Chiedo solo le location Pubbliche (In teoria qui bisognerà gestire il caso di Location legate a una azienda a cui l'utente è collegato)\r\n      myParams = myParams.append('APPVISIBILITY', (locVisTutti + ''));\r\n\r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n      this.apiService\r\n          .httpGet(myUrl, myHeaders, myParams)\r\n          .pipe(map(fullData => {\r\n            return fullData.LOCATION\r\n          }))\r\n          .subscribe(resultData => {\r\n  \r\n            //Cancello le Location\r\n            this._listLocation.next([]);\r\n  \r\n            //Inserisco le location\r\n            this._addMultipleLocation(resultData);\r\n            resolve(resultData);\r\n  \r\n          },error=>{\r\n            reject(error);\r\n          });\r\n      \r\n    })\r\n  }\r\n\r\n  /**\r\n   * Richiede un elenco di location con idArea passato, e lo risolve direttamente, senza passare da nessun'altra parte (usa il nuovo docstructure per fare la richiesta)\r\n   * @param idArea l'id dell'area\r\n   */\r\n  newRequestByIdArea(idArea: string): Promise<Location[]>{\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let myFilter = new Location(true);\r\n      myFilter.IDAREAOPERATIVA = idArea;\r\n  \r\n      let myParams = new RequestParams();\r\n      myParams.decode = new RequestDecode();\r\n      myParams.decode.active = true;\r\n  \r\n      this.docStructureService.requestNew(myFilter, myParams)\r\n      .then(listLocation => {\r\n        resolve (listLocation);\r\n      })\r\n      .catch(error => {\r\n        reject (error);\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n\r\n    /** Effettua la richiesta al server di una Location precisa\r\n   * @param idLocation Location scelta \r\n   * \r\n   */\r\n  requestLocationByID(config: StartConfiguration, idLocation: string, _numLivelli?:number) {\r\n    return new Promise<Location>((resolve, reject)=>{\r\n      let myHeaders = config.getHttpHeaders();\r\n      //new HttpHeaders({'Content-type':'text/plain'});\r\n      const doObject = 'LOCATION';\r\n  \r\n      if (!_numLivelli) {\r\n        _numLivelli = 3;\r\n      }\r\n  \r\n\r\n      myHeaders = myHeaders.set('child-level',_numLivelli + '');\r\n  \r\n      // Nei parametri imposto l'Area Operativa\r\n      let myParams = new HttpParams().set('ID', idLocation);\r\n  \r\n      let myUrl = config.urlBase + '/' + doObject;\r\n  \r\n        this.apiService\r\n                    .httpGet(myUrl, myHeaders, myParams)\r\n                    .pipe(map(fullData => {                \r\n                      return fullData.LOCATION;\r\n                    }))\r\n                    .subscribe(resultData => {\r\n                      let locReturn: Location;\r\n                      \r\n                      if (resultData && resultData.length !== 0) {\r\n                        \r\n                        locReturn = new Location();\r\n                        locReturn.setJSONProperty(resultData[0]);\r\n                        \r\n                        //Emetto evento di cambio\r\n                        this._activeLocation.next(locReturn);\r\n                        resolve(locReturn);\r\n                      }     \r\n                      else\r\n                      {\r\n                        reject('location non trovata');\r\n                      }             \r\n                    }, error=>{\r\n                      reject (error);\r\n                    });      \r\n    })\r\n  }\r\n\r\n  /**\r\n   * Aggiunge un insieme di elementi all'array delle Location\r\n   * @param dataJSON JSON Received\r\n  */\r\n  private _addMultipleLocation(dataJSON: any) {\r\n    \r\n    if (dataJSON) {\r\n      dataJSON.forEach(element => {\r\n        let newLocation = new Location();\r\n        newLocation.setJSONProperty(element);\r\n\r\n        this.listLocation\r\n          .pipe(take(1))\r\n          .subscribe( collLocation => {\r\n            this._listLocation.next( collLocation.concat(newLocation));\r\n          });\r\n      });\r\n    }\r\n  }\r\n\r\n  //#region SINCRONIZZAZIONE CON CAMPI SPORT\r\n\r\n  /**\r\n   * Richiede al Server le informazioni sulle tipologie dei Campi (e Attività Svolte)\r\n   * @param config Parametri di configurazione\r\n   * @param docLocation Location da Completare con i campi Sport\r\n   */\r\n  syncInfoCampi(config: StartConfiguration, \r\n                docLocation: Location\r\n                ) {\r\n    //Elimino le informazioni precedenti dei Campi Sport\r\n    docLocation.emptyCampiSport();\r\n\r\n    //Creo un Observable\r\n    let myLocation = new BehaviorSubject<Location>(docLocation);\r\n\r\n    docLocation.CAMPO.forEach(elCampo => {\r\n      this.syncInfoCampoSport(config, elCampo.ID)\r\n        .subscribe(resultData => {\r\n\r\n          resultData.forEach(elCampoSport => {\r\n\r\n            let docCampoSport = new CampoSport();\r\n            docCampoSport.setJSONProperty(elCampoSport);\r\n            docCampoSport.lookup('IDSPORT',this._decodeListSport, 'DENOMINAZIONE');\r\n            \r\n            myLocation\r\n            .pipe(take(1))\r\n            .subscribe( docLocation => {\r\n              docLocation.addCampoSport(docCampoSport, elCampo.ID);\r\n\r\n              myLocation.next(docLocation);\r\n            }\r\n\r\n            );\r\n\r\n          });\r\n\r\n        })\r\n    });\r\n\r\n    return myLocation.asObservable();\r\n\r\n  }\r\n\r\n  /**\r\n   * Sincronizzo le informazioni degli sport dei campi\r\n   */\r\n  syncInfoCampoSport(config: StartConfiguration, idCampo: string) {\r\n    let myHeaders = config.getHttpHeaders();\r\n    //new HttpHeaders({'Content-type':'text/plain'});\r\n    const doObject = 'CAMPOSPORT';\r\n\r\n    // Nei parametri imposto il Campo\r\n    let myParams = new HttpParams().set('IDCAMPO', idCampo);\r\n\r\n    let myUrl = config.urlBase + '/' + doObject;\r\n\r\n\r\n    return this.apiService\r\n                .httpGet(myUrl, myHeaders, myParams)\r\n                .pipe(map(fullData => {\r\n                  return fullData.CAMPOSPORT\r\n                }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Ritorna la Location presente in memoria\r\n   * @param idLocation Location cercata\r\n   */\r\n  findLocationByID(idLocation: string) {\r\n    let arLocation = this._listLocation.getValue();\r\n    \r\n    return arLocation.find(element => {\r\n      return element.ID == idLocation\r\n    });\r\n  }\r\n  //#endregion\r\n\r\n\r\n  //#region PRENOTAZIONE\r\n\r\n  /**\r\n   * Data la Location, ritorna il template settimanale con gli slot time da applicare \r\n   * (Default Slot Time)\r\n   * Andranno poi attualizzati ulteriormente\r\n   * @param docLocation Location da utilizzare\r\n   */\r\n  getTemplateSlotWeek(docLocation: Location): SlotWeek {\r\n    let weekTemplate = new SlotWeek();\r\n    \r\n    weekTemplate.IDAREAOPERATIVA = docLocation.IDAREAOPERATIVA;\r\n    weekTemplate.IDLOCATION = docLocation.ID;\r\n\r\n    if (docLocation.MINUTISLOTPRENOTAZIONE) {\r\n      weekTemplate.SLOTMINUTES = docLocation.MINUTISLOTPRENOTAZIONE;\r\n    }\r\n\r\n    //Inizializzo con i giorni\r\n    weekTemplate.initDays();\r\n\r\n    //Ciclo sulle Aperture Location per poter impostare l'orario minimo e massimo per ogni giorno\r\n    docLocation.APERTURALOCATION.forEach(elApertura => {\r\n      \r\n      let daySlot = weekTemplate.getSlotDay(elApertura.GIORNO);\r\n      let minDateTime: Date;\r\n      let maxDateTime: Date;\r\n\r\n      let middleMinTime: Date;\r\n      let middleMaxTime: Date;\r\n\r\n      //APERTO\r\n      if (elApertura.APERTOCHIUSO) {\r\n\r\n        daySlot.APERTOCHIUSO = true;\r\n        \r\n        //Imposto orari standard di apertura\r\n        daySlot.setStandardTime();\r\n\r\n        //Ora devo recuperare ora iniziale e finale definite \r\n        //sulla apertura location\r\n        minDateTime = elApertura.getOrario('min');\r\n        maxDateTime = elApertura.getOrario('max');\r\n\r\n        middleMinTime = elApertura.getOrario('middleMin');\r\n        middleMaxTime = elApertura.getOrario('middleMax');\r\n\r\n        //Imposto gli orari di inizio e fine se ci sono\r\n        if (minDateTime && maxDateTime) {\r\n          daySlot.STARTTIME = minDateTime;\r\n          daySlot.ENDTIME = maxDateTime;\r\n\r\n          //se ci sono gli orari intermedi, li imposto\r\n          if (middleMaxTime && middleMinTime){\r\n           daySlot.setChiusuraIntermedia(middleMinTime, middleMaxTime);\r\n          }\r\n  \r\n\r\n        }\r\n        else {\r\n          //Vuol dire che è aperto tutto il giorno\r\n          let adesso = new Date();\r\n          daySlot.STARTTIME = new Date(adesso.getFullYear(), adesso.getMonth(), adesso.getDate(), 0,0,0);\r\n          daySlot.ENDTIME = new Date(adesso.getFullYear(), adesso.getMonth(), adesso.getDate(), 23,59,59);\r\n          \r\n        }\r\n\r\n      }\r\n      else {\r\n        daySlot.APERTOCHIUSO = false;\r\n      }\r\n      \r\n    });\r\n\r\n    //Ora per tutti i giorni del template devo creare tutti gli slottime\r\n    weekTemplate.createSlotTimeDays();\r\n\r\n    return weekTemplate;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { IDDocument } from './iddocument.model';\r\n\r\nexport class CacheListElement {\r\n    className: string;\r\n    list: IDDocument[];\r\n\r\n    constructor(className: string) {\r\n\r\n        //Nome della classe\r\n        this.className = className;\r\n        //Lista elementi\r\n        this.list = [];\r\n        \r\n    }\r\n\r\n    /**\r\n     * Elemento\r\n     * @param element Elemento da aggiungere\r\n     * @param updateExist Prima di aggiungere controlla se presente e in caso aggiorna\r\n     */\r\n    addElement(element: IDDocument, updateExist=true) {\r\n\r\n        let findEl: IDDocument;\r\n        let actionAdd = false;\r\n\r\n        if (element) {\r\n            //Prima di aggiungerlo controllo se è presente\r\n            if (updateExist) {\r\n                findEl = this.findElementById(element['ID']);\r\n                if (!findEl) {\r\n                    actionAdd = true;\r\n                }\r\n                else {\r\n                    //Aggiornare le proprietà\r\n                    findEl = element;\r\n                }\r\n\r\n            }\r\n            else {\r\n                //Non devo guardare se esiste aggiungi e taci\r\n                actionAdd = true;\r\n            }\r\n\r\n            if (actionAdd) {\r\n                this.list.push(element);\r\n            }\r\n    }\r\n    }\r\n\r\n    /**\r\n     * Ricerca un elemento\r\n     * @param id Chiave primaria\r\n     */\r\n    findElementById(id: string) {\r\n        \r\n        return this.list.find(el => {\r\n            return el.ID == id;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ricerca un elemento nella lista per nome campo <-> valore\r\n     * @param fieldName Nome del campo\r\n     * @param value Valore cercato\r\n     */\r\n    findElementByFieldName(fieldName: string, value: any) {\r\n        return this.list.find(el => {\r\n            return el[fieldName] == value;\r\n        });\r\n    }\r\n\r\n\r\n}","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\r\n\r\n// Call the element loader after the platform has been bootstrapped\r\ndefineCustomElements(window);\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}