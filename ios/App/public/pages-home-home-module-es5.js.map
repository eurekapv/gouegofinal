{"version":3,"sources":["webpack:///src/app/pages/home/home.module.ts","webpack:///src/app/pages/home/home-routing.module.ts","webpack:///src/app/pages/home/home.page.html","webpack:///src/app/pages/home/home.page.ts"],"names":["HomePageModule","routes","path","component","HomePageRoutingModule","forChild","Geolocation","HomePage","startService","actionSheetController","navController","modalController","docStructureService","toastController","listAree","listLocation","myListImpegni","myListImpegniTrainer","listButtonImpegni","listNews","agendaCards","listOccupazioni","showAgenda","sliderOpts","slidesPerView","spaceBetween","initialSlide","breakpoints","noNewsCard","getNoNews","startConfigListen","startConfig","subscribe","element","listAreeListen","aree","filter","objArea","APPSHOW","userLogged","getNearestArea","then","nearestArea","selectAreaByID","ID","selectedAreaListen","areaSelected","areaSel","includes","selectedArea","requestLocation","requestNews","updateAgenda","listLocationListen","locations","length","richiediAgendaOccupazione","userLoggedListen","utenteLogged","updateListImpegni","docUtenteListen","utente","docUtente","createButtonCardImpegni","isAssistenteTrainer","isTrainer","isCustode","params","utenteLoggato","listImpegni","registrazioneInApp","gruppo","APPFLAGREGISTRAZIONE","getButtonHomeImpegni","btn","functionCod","openLogin","redirectFromButtonCard","id","settore","settoreCorso","navigateForward","settorePrenotazione","news","event","create","componentProps","myNews","modal","present","unsubscribe","openHistory","location","ev","isDesktop","presentActionSheet","buttonsArray","iterator","singleButton","text","DENOMINAZIONE","icon","handler","push","header","buttons","actionSheet","retCaption","captionAccedi","NOMINATIVO","retIcon","iconAccedi","reqParam","top","child_level","decode","active","orderBy","foreignFields","getReqForeignKeys","filterImpegno","IDUTENTE","DATAORAINIZIO","Date","addFilterCondition","maggiore","requestNew","error","console","log","richiediOccupazioni","richiediMieiCorsi","RUOLO","admin","richiediAgendaTrainer","idArea","forEach","elLocation","requestOccupazioni","undefined","_LISTOCCUPAZIONI","requestImpegniTrainer","result","pianificazioneElem","getButtonAgendaFromPianificazioneCorso","btnCard","title","nameicon","sloticon","color","disabled","subtitle","componente","areaSelectedValue","elModal","docOccupazione","TIPO","showMessage","messaggio","message","duration","elToast","onClickShowAllNews","onClickfooterButton"],"mappings":"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","file":"pages-home-home-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { FormsModule, ReactiveFormsModule} from '@angular/forms';\r\n\r\nimport { HomePage } from './home.page';\r\n\r\nimport { NewLoginPage } from 'src/app/pages/auth/new-login/new-login.page'\r\nimport { NewsdetailPage } from 'src/app/pages/newsdetail/newsdetail.page'\r\nimport { PswRecoveryPage } from '../auth/psw-recovery/psw-recovery.page'\r\n\r\nimport { NewLoginPageModule } from '../auth/new-login/new-login.module';\r\nimport { NewsdetailPageModule } from '../newsdetail/newsdetail.module'\r\nimport { HomePageRoutingModule } from './home-routing.module'\r\nimport { PswRecoveryPageModule } from '../auth/psw-recovery/psw-recovery.module';\r\nimport { SharedComponentsModule } from '../../shared/components/shared-components.module';\r\nimport { AllegatilistPageModule } from '../history/historycourse/allegatilist/allegatilist.module';\r\nimport { AllegatilistPage } from '../history/historycourse/allegatilist/allegatilist.page';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n\r\n    CommonModule,\r\n    IonicModule,\r\n    HomePageRoutingModule,\r\n    \r\n    NewsdetailPageModule,\r\n    NewLoginPageModule,\r\n    PswRecoveryPageModule,\r\n    SharedComponentsModule,\r\n    AllegatilistPageModule\r\n    \r\n    // RouterModule.forChild([\r\n    //   {\r\n    //     path: '',\r\n    //     component: HomePage\r\n    //   }\r\n    // ]),\r\n\r\n  ],\r\n  declarations: [\r\n    HomePage,   \r\n  ],\r\n  exports: [\r\n  ],\r\n  entryComponents: [\r\n    NewLoginPage,\r\n    PswRecoveryPage,\r\n    NewsdetailPage,\r\n    AllegatilistPage\r\n  ]\r\n})\r\nexport class HomePageModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { HomePage } from './home.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomePage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class HomePageRoutingModule {}\r\n","<ion-header>\r\n  <ion-toolbar color=\"primary\" mode=\"md\">\r\n    <ion-title \r\n      class=\"title-image\">\r\n      <div>\r\n        <img class=\"logo\" [src]=\"this.startConfig.getUrlIcon()\">\r\n        {{startConfig?.companyName | titlecase }}\r\n\r\n      </div>\r\n    </ion-title>\r\n\r\n    <!-- BOTTONE PER EVENTUALE TEST  -->\r\n    <!-- <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"onTest()\">\r\n        <ion-icon name=\"code-working-outline\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons> -->\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n \r\n  <!-- IMPEGNI -->\r\n\r\n\r\n  <ion-grid *ngIf=\"listButtonImpegni.length === 1\" >\r\n\r\n    <ion-slides class=\"ion-no-padding ion-no-margin\">\r\n    <ion-slide \r\n        class=\"ion-no-padding ion-no-margin\"\r\n        *ngFor=\"let btn of listButtonImpegni\"> \r\n        \r\n        <app-button-card \r\n            class=\"small-button-card\" \r\n            (clickElement)=\"onClickButtonCardImpegni($event)\" \r\n            [smallVersion]=\"true\" \r\n            [myButtonCard]=\"btn\">\r\n        </app-button-card>\r\n\r\n    </ion-slide>\r\n  </ion-slides>\r\n</ion-grid>\r\n\r\n<ion-grid *ngIf=\"listButtonImpegni.length > 1\" >\r\n\r\n  <ion-slides class=\"ion-no-padding ion-no-margin\" [options]=\"sliderOpts\">\r\n  <ion-slide \r\n      class=\"ion-no-padding ion-no-margin\"\r\n      *ngFor=\"let btn of listButtonImpegni\"> \r\n      \r\n      <app-button-card \r\n          class=\"small-button-card\" \r\n          (clickElement)=\"onClickButtonCardImpegni($event)\" \r\n          [smallVersion]=\"true\" \r\n          [myButtonCard]=\"btn\">\r\n      </app-button-card>\r\n\r\n  </ion-slide>\r\n</ion-slides>\r\n</ion-grid>\r\n\r\n<!-- NUOVA AGENDA OCCUPAZIONI PER IL CUSTODE -->\r\n<div *ngIf=\"this.showCustode\">\r\n  \r\n  <ion-item \r\n      type=\"header\" \r\n      lines=\"none\" \r\n      color=\"medium\"\r\n      *ngIf=\"this.showCustode\">\r\n\r\n      <ion-icon \r\n          slot=\"start\" \r\n          name=\"calendar-outline\"\r\n          ></ion-icon>\r\n      <ion-label class=\"ion-text-nowrap\" >\r\n          <h2>Occupazioni</h2>\r\n      </ion-label>\r\n      \r\n      <ion-button \r\n          slot=\"end\" \r\n          color=\"light\" \r\n          fill=\"solid\"\r\n          size = \"default\"\r\n          routerLink=\"/agenda-custode\">\r\n          <ion-icon slot=\"start\" color=\"primary\" name=\"layers-outline\"></ion-icon>\r\n        Elenco\r\n      </ion-button>  \r\n  </ion-item>\r\n\r\n\r\n\r\n  <!-- GRIGLIA OCCUPAZIONI -->\r\n  <ion-slides class=\"reservations-grid\" scrollbar>\r\n    <ion-slide *ngFor=\"let location of listLocation\" >\r\n      <ion-grid>\r\n        \r\n        <ion-row>\r\n          <ion-col class=\"ion-no-padding\">\r\n            <ion-text color=\"primary\">\r\n              <h4 class=\"ion-no-margin ion-text-center\">{{location.DENOMINAZIONE | titlecase}}</h4>\r\n            </ion-text>\r\n          </ion-col>\r\n        </ion-row>\r\n        \r\n        <!-- OCCUPAZIONI PRESENTI -->\r\n        <ion-row *ngIf=\"location && location._LISTOCCUPAZIONI && location._LISTOCCUPAZIONI.length > 0\">\r\n         \r\n          <ion-col \r\n            sizeXs=\"6\" \r\n            sizeSm=\"3\" \r\n            *ngFor=\"let occupazione of location._LISTOCCUPAZIONI\"\r\n            >\r\n            <!-- sizeLg=\"2\" \r\n            sizeXl=\"1\"  -->\r\n            <ion-card button (click)=\"goToPianificazioneDetail(occupazione)\">\r\n              <!-- <ion-card-content> -->\r\n                <ion-icon [name]=\"occupazione.iconName\"></ion-icon>\r\n                <p>{{occupazione['_DENOMINAZIONE_Campo']}}</p>\r\n                <p>{{occupazione.DATAORAINIZIO | date: 'HH:mm'}} - {{occupazione.DATAORAFINE | date: 'HH:mm'}}</p>\r\n              <!-- </ion-card-content> -->\r\n            </ion-card>\r\n          </ion-col>\r\n        </ion-row>\r\n        \r\n        <!-- NESSUNA OCCUPAZIONE PER OGGI -->\r\n        <ion-row *ngIf=\"!location || !location._LISTOCCUPAZIONI || location._LISTOCCUPAZIONI.length <= 0\">\r\n          <ion-col>\r\n            <app-button-card \r\n            class=\"\" \r\n            [smallVersion]=\"true\" \r\n            [homeCustodeVersion]=\"true\"\r\n            [myButtonCard]=\"getButtonEmptyOccupazione()\"\r\n        >\r\n        </app-button-card>\r\n          </ion-col>\r\n        </ion-row>\r\n        \r\n\r\n      </ion-grid>\r\n    </ion-slide>\r\n  </ion-slides>\r\n\r\n</div>\r\n\r\n\r\n<!-- PARTE TRAINER -->\r\n<div class=\"ion-no-padding\" *ngIf=\"this.showTrainer\"> \r\n  \r\n  <ion-item \r\n    type=\"header\" \r\n    lines=\"none\" \r\n    class = \"title-agenda-impegni\">\r\n  \r\n    <ion-icon \r\n        slot=\"start\" \r\n        name=\"school-outline\">\r\n    </ion-icon>\r\n\r\n    <ion-label class=\"ion-text-nowrap\">\r\n      <h2>Agenda Impegni</h2>\r\n    </ion-label>\r\n  \r\n    <ion-button \r\n        slot=\"end\" \r\n        color=\"light\" \r\n        fill=\"solid\"\r\n        size = \"default\"\r\n        routerLink=\"/agenda-trainer\">\r\n    <ion-icon slot=\"start\" color=\"primary\" name=\"layers-outline\"></ion-icon>\r\n      Elenco\r\n    </ion-button>  \r\n  </ion-item>\r\n  \r\n  <!-- IMPEGNI TRAINER NON PRESENTI -->\r\n  \r\n  <ion-slides *ngIf=\"!myListImpegniTrainer || myListImpegniTrainer.length == 0\" class=\"ion-no-padding ion-no-margin\">\r\n    <ion-slide \r\n        class=\"ion-no-padding ion-no-margin\"   \r\n    >   \r\n        <app-button-card \r\n            class=\"small-button-card card-corsi-vuoti\" \r\n            [smallVersion]=\"true\" \r\n            [myButtonCard]=\"getButtonCardTrainer()\"\r\n        >\r\n        </app-button-card>\r\n  \r\n      </ion-slide>\r\n  </ion-slides>\r\n  \r\n  <!-- IMPEGNI TRAINER PRESENTI -->\r\n  <ion-slides *ngIf=\"myListImpegniTrainer && myListImpegniTrainer.length > 0\" class=\"ion-no-padding ion-no-margin\">\r\n    <ion-slide \r\n        class=\"ion-no-padding ion-no-margin\"\r\n        *ngFor=\"let impegno  of myListImpegniTrainer\"> \r\n        \r\n        <app-button-card \r\n            class=\"small-button-card\" \r\n            [smallVersion]=\"true\" \r\n            [myButtonCard]=\"getButtonCardTrainer(impegno)\"\r\n            (click)=\"onClickImpegnoTrainer(impegno)\">\r\n        </app-button-card>\r\n  \r\n      </ion-slide>\r\n  </ion-slides>\r\n</div>\r\n\r\n  <!-- AREA OPERATIVA -->\r\n  <!-- TITOLO AREA -->\r\n  <ion-item \r\n      type=\"header\" \r\n      lines=\"none\" \r\n      color=\"tertiary\">\r\n\r\n    <ion-icon \r\n        slot=\"start\" \r\n        name=\"location-outline\"></ion-icon>\r\n    <ion-label class=\"ion-text-nowrap\">\r\n      <h2>{{ selectedArea.DENOMINAZIONE | titlecase }}</h2>\r\n    </ion-label>\r\n\r\n    <ion-button \r\n        slot=\"end\" \r\n        color=\"light\" \r\n        fill=\"solid\" \r\n        *ngIf=\"listAree.length>1\" \r\n        size = \"default\"\r\n        (click)='showSceltaCentro($event)'>\r\n        <ion-icon slot=\"start\" color=\"primary\" name=\"trail-sign-outline\"></ion-icon>\r\n      Cambia\r\n    </ion-button>  \r\n  </ion-item>\r\n\r\n  <!-- LOCATION -->\r\n  <div id=\"div-content\">\r\n\r\n    <ion-grid *ngIf=\"listLocation.length===1\" >\r\n      <ion-row>\r\n        <ion-col sizeXs=\"12\" sizeSm=\"6\"  offsetSm=\"3\" sizeLg=\"4\" offsetLg=\"4\">\r\n\r\n          <app-centri \r\n              (clickPrenota)=\"onClickPrenota($event)\"\r\n              (clickLocation)=\"onClickLocation($event)\"\r\n              [location]=\"listLocation[0]\"\r\n              [myStartConfig]=\"startConfig\">\r\n              \r\n          </app-centri>\r\n\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  \r\n    <div scrollX=\"true\" *ngIf=\"listLocation.length>1\">\r\n        <app-centri \r\n          *ngFor=\"let locationItem of listLocation\"\r\n          (clickPrenota)=\"onClickPrenota($event)\"\r\n          (clickLocation)=\"onClickLocation($event)\"\r\n          [location]=\"locationItem\"\r\n          [myStartConfig]=\"startConfig\">\r\n          \r\n        </app-centri>    \r\n    </div>\r\n\r\n  </div>\r\n\r\n  <!-- AGENDA OCCUPAZIONE -->\r\n  <!-- TITOLO -->\r\n  <!-- <ion-item \r\n      type=\"header\" \r\n      lines=\"none\" \r\n      color=\"primary\"\r\n      *ngIf=\"showAgenda\">\r\n\r\n      <ion-icon \r\n          slot=\"start\" \r\n          name=\"golf-outline\"></ion-icon>\r\n      <ion-label class=\"ion-text-nowrap\">\r\n        <h2>Agenda Struttura</h2>\r\n      </ion-label>\r\n      \r\n      <ion-button \r\n          slot=\"end\" \r\n          color=\"light\" \r\n          fill=\"solid\"\r\n          size = \"default\"\r\n          (click)=\"onClickShowAgenda()\">\r\n          <ion-icon slot=\"start\" color=\"primary\" name=\"layers-outline\"></ion-icon>\r\n        Elenco\r\n      </ion-button>  \r\n  </ion-item> -->\r\n  <!-- FINE TITOLO -->\r\n\r\n  <!-- AGENDA CARD -->\r\n  <!-- <ion-grid *ngIf=\"agendaCards.length === 1 && showAgenda\" class=\"grid-agenda\">\r\n\r\n    <ion-slides class=\"ion-no-padding ion-no-margin\">\r\n    <ion-slide \r\n        class=\"ion-no-padding ion-no-margin\"\r\n        *ngFor=\"let btn of agendaCards\"> \r\n        \r\n        <app-button-card \r\n            class=\"small-button-card\" \r\n            [smallVersion]=\"false\" \r\n            [myButtonCard]=\"btn\">\r\n        </app-button-card>\r\n\r\n      </ion-slide>\r\n    </ion-slides>\r\n  </ion-grid> -->\r\n\r\n<!-- <ion-grid *ngIf=\"agendaCards.length > 1 && showAgenda\" class=\"grid-agenda\">\r\n\r\n  <ion-slides class=\"ion-no-padding ion-no-margin\" [options]=\"sliderOpts\">\r\n  <ion-slide \r\n      class=\"ion-no-padding ion-no-margin\"\r\n      *ngFor=\"let btn of agendaCards\"> \r\n      \r\n      <app-button-card \r\n          class=\"small-button-card\" \r\n          [smallVersion]=\"false\" \r\n          [myButtonCard]=\"btn\">\r\n      </app-button-card>\r\n\r\n  </ion-slide>\r\n</ion-slides>\r\n</ion-grid> -->\r\n<!-- FINE AGENDA -->  \r\n\r\n<!-- <div *ngIf=\"showAgenda\">\r\n  <div *ngFor=\"let loc of listLocation\">\r\n    <ion-list>\r\n      <ion-list-header>\r\n        {{loc.DENOMINAZIONE}}\r\n      </ion-list-header>\r\n\r\n      \r\n    </ion-list>\r\n\r\n\r\n  </div>\r\n</div> -->\r\n\r\n\r\n\r\n\r\n<!-- <div class=\"ion-no-padding\"> -->\r\n\r\n<!-- TITOLO -->\r\n<!-- <ion-item \r\n    type=\"header\" \r\n    lines=\"none\" \r\n    color=\"primary\"\r\n    *ngIf=\"showAgenda\">\r\n\r\n    <ion-icon \r\n        slot=\"start\" \r\n        name=\"golf-outline\"></ion-icon>\r\n    <ion-label class=\"ion-text-nowrap\">\r\n      <h2>Agenda Struttura</h2>\r\n    </ion-label>\r\n    \r\n    <ion-button \r\n        slot=\"end\" \r\n        color=\"light\" \r\n        fill=\"solid\"\r\n        size = \"default\"\r\n        (click)=\"onClickShowAgenda()\">\r\n        <ion-icon slot=\"start\" color=\"primary\" name=\"layers-outline\"></ion-icon>\r\n      Elenco\r\n    </ion-button>  \r\n</ion-item> -->\r\n\r\n<!-- SLIDES -->\r\n<!-- <ion-grid *ngIf=\"agendaCards.length > 1 && showAgenda\" class=\"grid-agenda\">\r\n\r\n  <ion-slides class=\"ion-no-padding ion-no-margin\" [options]=\"sliderOpts\">\r\n  <ion-slide \r\n      class=\"ion-no-padding ion-no-margin\"\r\n      *ngFor=\"let btn of agendaCards\"> \r\n      \r\n      <app-button-card \r\n          class=\"small-button-card\" \r\n          [smallVersion]=\"false\" \r\n          [myButtonCard]=\"btn\">\r\n      </app-button-card>\r\n\r\n  </ion-slide>\r\n</ion-slides>\r\n</ion-grid>\r\n</div> -->\r\n\r\n<!-- NEWS ED EVENTI PROSSIMI-->\r\n<!-- TITOLO -->\r\n\r\n  <ion-item \r\n      type=\"header\" \r\n      lines=\"none\" \r\n      color=\"medium\">\r\n\r\n      <ion-icon \r\n          slot=\"start\" \r\n          name=\"newspaper-outline\"></ion-icon>\r\n      <ion-label class=\"ion-text-nowrap\">\r\n        <h2>News</h2>\r\n      </ion-label>\r\n      \r\n      <ion-button \r\n          slot=\"end\" \r\n          color=\"light\" \r\n          fill=\"solid\"\r\n          size = \"default\"\r\n          (click)=\"onClickShowAllNews()\">\r\n          <ion-icon slot=\"start\" color=\"primary\" name=\"layers-outline\"></ion-icon>\r\n        Elenco\r\n      </ion-button>  \r\n  </ion-item>\r\n  <!-- NEWS PRESENTI -->\r\n  <ion-grid class=\"ion-no-padding\" *ngIf=\"listNews.length !== 0\">\r\n    <ion-row>\r\n      <ion-col *ngFor=\"let news of listNews\" size =\"12\" >\r\n        <app-news-eventi [myNews]=\"news\" (clickNews)=\"onClickNews(news,$event)\"></app-news-eventi>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n\r\n  <ion-grid class=\"ion-no-padding\" *ngIf=\"listNews.length === 0\">\r\n    <ion-row>\r\n      <ion-col>\r\n        <app-news-eventi [myNews]=\"noNewsCard\" size=\"12\"></app-news-eventi>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n\r\n  <!-- FINE NEWS -->\r\n\r\n\r\n\r\n  <!-- SE VOLESSI IL LOGIN CIRCULAR DEVO METTERLO QUA -->\r\n  <!-- <app-circular></app-circular> -->\r\n\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-button \r\n    color=\"tertiary\"\r\n    expand=\"block\" \r\n    size=\"large\"\r\n    (click)=\"onClickfooterButton()\">\r\n      <ion-icon \r\n        slot=\"start\" \r\n        [name]=\"btnFooterIcon()\"\r\n        color=\"primary\"></ion-icon>\r\n      {{btnFooterCaption()}}\r\n    </ion-button>\r\n    \r\n</ion-footer>\r\n","import { Component, OnDestroy, OnInit, ɵConsole } from '@angular/core';\r\nimport { StartService } from 'src/app/services/start.service';\r\nimport { StartConfiguration } from 'src/app/models/start-configuration.model';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Area } from 'src/app/models/area.model';\r\nimport { Location } from 'src/app/models/location.model';\r\n\r\nimport { ActionSheetController, NavController, ModalController, ToastController } from '@ionic/angular';\r\nimport { Impegno } from 'src/app/models/impegno.model';\r\nimport { SettoreAttivita, Ruolo, Mansione } from '../../models/valuelist.model';\r\n\r\nimport { Utente } from 'src/app/models/utente.model';\r\nimport { ButtonCard, ButtonHomeParams } from 'src/app/models/buttoncard.model';\r\nimport { NewsEvento } from 'src/app/models/newsevento.model';\r\nimport { NewLoginPage } from 'src/app/pages/auth/new-login/new-login.page';\r\nimport { NewsdetailPage } from 'src/app/pages/newsdetail/newsdetail.page';\r\nimport { DocstructureService } from 'src/app/library/services/docstructure.service';\r\n\r\nimport { RequestDecode, RequestParams } from 'src/app/library/models/requestParams.model';\r\n\r\nimport { OperatorCondition } from 'src/app/library/models/iddocument.model';\r\n\r\nimport { Plugins } from '@capacitor/core';\r\nimport { PianificazioneCorso } from 'src/app/models/pianificazionecorso.model';\r\nimport { LogApp } from 'src/app/models/log.model';\r\nimport { AllegatilistPage } from '../history/historycourse/allegatilist/allegatilist.page';\r\nimport { OccupazioneCampi } from 'src/app/models/occupazionecampi.model';\r\nimport { Button } from 'protractor';\r\n\r\nconst { Geolocation } = Plugins;\r\n\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: 'home.page.html',\r\n  styleUrls: ['home.page.scss'],\r\n})\r\nexport class HomePage implements OnInit, OnDestroy {\r\n\r\n  // Parametri Iniziali di Configurazione\r\n  startConfig: StartConfiguration;\r\n  startConfigListen: Subscription;\r\n\r\n  //Identificativo Utente Loggato\r\n  userLogged: boolean;\r\n  userLoggedListen: Subscription;\r\n\r\n  //Utente Loggato\r\n  docUtente: Utente;\r\n  docUtenteListen: Subscription;\r\n\r\n  // Elenco delle Aree\r\n  listAree: Area[] = [];\r\n  listAreeListen: Subscription;\r\n\r\n  // Elenco delle Location da mostrare\r\n  listLocation: Location[] = [];\r\n\r\n  listLocationListen: Subscription;\r\n\r\n  //Elenco delle prossime attività\r\n  myListImpegni: Impegno[] = [];\r\n\r\n  myListImpegniTrainer: PianificazioneCorso[] = [];\r\n\r\n  // L'area viene recuperata dal subscribe\r\n  selectedArea: Area;\r\n  selectedAreaListen: Subscription;\r\n\r\n  idAreaFav: string;\r\n  listenIdAreaFav: Subscription;\r\n\r\n  listButtonImpegni: ButtonCard[] = []; //Bottoni da mostrare nell'area impegni\r\n\r\n  //Oggetti per le News\r\n  noNewsCard: NewsEvento;\r\n  listNews: NewsEvento[] = [];\r\n\r\n  //Bottoni da mostrare nella porzione Agenda\r\n  agendaCards: ButtonCard[] = [];\r\n\r\n  listOccupazioni: any[]= []; //array di array di occupazioni, divise per locations\r\n\r\n\r\n  //Mostra o nasconde Area Agenda\r\n  showAgenda = false;\r\n\r\n  get showTrainer(): boolean {\r\n    return (this.userLogged && (this.docUtente.isAssistenteTrainer || this.docUtente.isTrainer))\r\n  }\r\n\r\n  get showCustode(): boolean {\r\n    return (this.userLogged && this.docUtente.isCustode)\r\n  }\r\n\r\n\r\n  //Guarda qui\r\n  //https://swiperjs.com/demos/#responsive_breakpoints\r\n  sliderOpts = {\r\n    slidesPerView: 1.2,\r\n    spaceBetween: 0,\r\n    initialSlide: 0,\r\n    // Dovrei farla variabile\r\n    // Responsive breakpoints   \r\n    breakpoints: {\r\n\r\n      // when window width is <= 320px     \r\n      320: {\r\n        slidesPerView: 1.2,\r\n        spaceBetween: 0\r\n      },\r\n      // when window width is <= 480px     \r\n      480: {\r\n        slidesPerView: 1.2,\r\n        spaceBetween: 0\r\n      },\r\n\r\n      // when window width is <= 640px     \r\n      640: {\r\n        slidesPerView: 1.2,\r\n        spaceBetween: 0\r\n      },\r\n\r\n      1024: {\r\n        slidesPerView: 2.5,\r\n        spaceBetween: 1\r\n      },\r\n\r\n      1440: {\r\n        slidesPerView: 4,\r\n        spaceBetween: 1\r\n      },\r\n\r\n      1920: {\r\n        slidesPerView: 6,\r\n        spaceBetween: 1\r\n      }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  constructor(private startService: StartService,\r\n    private actionSheetController: ActionSheetController,\r\n    private navController: NavController,\r\n    private modalController: ModalController,\r\n    private docStructureService: DocstructureService,\r\n    private toastController: ToastController\r\n  ) {\r\n\r\n    //Recupero la card che dice che non ci sono news\r\n    this.noNewsCard = NewsEvento.getNoNews();\r\n\r\n    // Parametri di Configurazione Iniziale Applicazione\r\n    this.startConfigListen = this.startService.startConfig\r\n      .subscribe(element => {\r\n        this.startConfig = element;\r\n      });\r\n\r\n    // Sottoscrivo alla ricezione delle Aree\r\n    this.listAreeListen = this.startService.listAree\r\n      .subscribe(aree => {\r\n        this.listAree = aree.filter(objArea => {\r\n          return objArea.APPSHOW;\r\n        });\r\n\r\n        //quando le aree sono arrivate, se non sono loggato seleziono la più vicina\r\n        if (!this.userLogged) {\r\n          this.startService.getNearestArea(this.listAree)\r\n            .then(nearestArea => {\r\n\r\n              //trovata l'area, posso passarne l'id al metodo selectarea\r\n              this.startService.selectAreaByID(nearestArea.ID);\r\n            })\r\n        }\r\n      });\r\n\r\n\r\n    //QUESTO E' IMPORTANTE, QUI POSSO AGGANCIARE EVENTI A SEGUITO DEL CAMBIO DI AREA\r\n    //Mi sottoscrivo alla ricezione della Area Selezionata\r\n    this.selectedAreaListen = this.startService.areaSelected\r\n      .subscribe(areaSel => {\r\n        //controllo se nell'array di aree è presente quella selezionata\r\n        if (this.listAree.includes(areaSel)) {\r\n          //Cambio Area Selezionata\r\n          this.selectedArea = areaSel;\r\n        }\r\n        //altrimenti setto come area selezionata la prima disponibile\r\n        else {\r\n          this.selectedArea = this.listAree[0];\r\n        }\r\n        //richiedo le location sulla base della nuova area selezionata\r\n        startService.requestLocation(this.selectedArea.ID)\r\n       \r\n\r\n        //Richiesta nuove News\r\n        this.requestNews();\r\n\r\n        //Aggiorno l'agenda\r\n        this.updateAgenda();\r\n\r\n        // this.richiediAgendaOccupazione();\r\n\r\n\r\n      });\r\n\r\n    \r\n    // QUI POSSO AGGANCIARE EVENTI ALL'ARRIVO DELLE LOCATIONS\r\n    // Sottoscrivo alla ricezione delle Locations\r\n    this.listLocationListen = this.startService.listLocation\r\n      .subscribe(locations => {\r\n        this.listLocation = locations;\r\n        if(this.listLocation && this.listLocation.length > 0){\r\n          \r\n          this.richiediAgendaOccupazione()\r\n\r\n        }\r\n      })\r\n\r\n    //Sottoscrivo all'ascolto di un utente loggato\r\n    this.userLoggedListen = this.startService.utenteLogged.subscribe(element => {\r\n\r\n      //Recupero l'utente\r\n      this.userLogged = element;\r\n\r\n      //Aggiorno lista impegni e cerco di visualizzare le card superiori\r\n      this.updateListImpegni();\r\n\r\n      //Aggiorno l'agenda\r\n      // this.updateAgenda();\r\n      // this.richiediAgendaOccupazione();\r\n\r\n\r\n    });\r\n\r\n\r\n    //Sottoscrivo all'ascolto dell'Account\r\n    this.docUtenteListen = this.startService.utente.subscribe(element => {\r\n\r\n      this.docUtente = element;\r\n\r\n      //Aggiorno lista impegni e cerco di visualizzare le card superiori\r\n      this.updateListImpegni();\r\n\r\n      //Aggiorno l'agenda\r\n      // this.updateAgenda(); \r\n      // this.richiediAgendaOccupazione();\r\n    });\r\n\r\n\r\n    //Impostazione Iniziale dei Bottoni relativi gli impegni\r\n    this.createButtonCardImpegni();\r\n  }\r\n\r\n\r\n  /**\r\n   * Effettua la richiesta delle News\r\n   */\r\n  requestNews() {\r\n\r\n    if (this.selectedArea) {\r\n\r\n      //Chiedo al servizio le News\r\n      this.startService.requestNews(this.selectedArea.ID, 3).then(listNews => {\r\n        this.listNews = listNews;\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  ionViewDidEnter() {\r\n\r\n    //Aggiorniamo gli impegni\r\n    this.updateListImpegni();\r\n    this.requestNews();\r\n\r\n  }\r\n\r\n  //#region IMPEGNI\r\n\r\n  /**\r\n   * Crea l'array dei BottoniCard degli impegni, a seconda dell'utente loggato e la lista impegni\r\n   */\r\n  createButtonCardImpegni() {\r\n    let params: ButtonHomeParams = new ButtonHomeParams();\r\n\r\n    //Preparo i parametri\r\n    params.utenteLoggato = this.userLogged;\r\n    params.listImpegni = this.myListImpegni;\r\n    params.registrazioneInApp = false;\r\n    if (this.startConfig && this.startConfig.gruppo) {\r\n      params.registrazioneInApp = this.startConfig.gruppo.APPFLAGREGISTRAZIONE;\r\n    }\r\n\r\n\r\n    //Recupero i bottoni da mostrare, a seconda sia loggato o no\r\n    this.listButtonImpegni = ButtonCard.getButtonHomeImpegni(params);\r\n  }\r\n\r\n  /**\r\n   * Evento click su bottone della card\r\n   * @param btn Bottone cliccato\r\n   */\r\n  onClickButtonCardImpegni(btn: ButtonCard) {\r\n\r\n\r\n    if (btn) {\r\n      switch (btn.functionCod) {\r\n        case 'register':\r\n          // Apro il Login\r\n          this.openLogin();\r\n          break;\r\n\r\n        case 'login':\r\n          // Apro il Login\r\n          this.openLogin();\r\n          break;\r\n\r\n        case 'show':\r\n          this.redirectFromButtonCard(btn);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apre la pagina relativa dal Bottone passato\r\n   * @param btn Bottone\r\n   */\r\n  redirectFromButtonCard(btn: ButtonCard) {\r\n    if (btn.id && btn.id.length !== 0) {\r\n      switch (btn.settore) {\r\n        case SettoreAttivita.settoreCorso:\r\n          this.navController.navigateForward(['/', 'historylist', 'course', btn.id]);\r\n          break;\r\n\r\n        case SettoreAttivita.settorePrenotazione:\r\n          this.navController.navigateForward(['/', 'historylist', 'booking', btn.id]);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region NEWS ED EVENTI AZIENDA\r\n\r\n  onClickShowAllNews() {\r\n    this.navController.navigateForward(['/', 'news']);\r\n  }\r\n\r\n  /**\r\n   * Apre in modalità modale la news\r\n   * @param news News da leggere\r\n   */\r\n  onClickNews(news: NewsEvento, event: any) {\r\n\r\n    this.modalController.create({\r\n      component: NewsdetailPage,\r\n      componentProps: { myNews: news }\r\n    }).then(modal => {\r\n      modal.present();\r\n    })\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region TRAINER\r\n  // updateTrainer(){\r\n  //   if (this.docUtente.isTrainer){\r\n  //     this.showTrainer = true;\r\n\r\n  //     //creo il filtro e recupero tutti i corsi dell'istruttore loggato\r\n  //     let filterCorso : Corso = new Corso;\r\n\r\n\r\n  //   }\r\n  //   else{\r\n  //     this.showTrainer = false;\r\n  //   }\r\n  // }\r\n\r\n  //#endregion\r\n\r\n  ngOnInit() {\r\n    //prova localizzazione\r\n    // Geolocation.getCurrentPosition().then(posizione => {\r\n    //   console.log (posizione);\r\n    // })\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.startConfigListen) {\r\n      this.startConfigListen.unsubscribe();\r\n    }\r\n\r\n    if (this.listAreeListen) {\r\n      this.listAreeListen.unsubscribe();\r\n    }\r\n\r\n    if (this.listLocation) {\r\n      this.listLocationListen.unsubscribe();\r\n    }\r\n\r\n    if (this.selectedAreaListen) {\r\n      this.selectedAreaListen.unsubscribe();\r\n    }\r\n\r\n    if (this.userLoggedListen) {\r\n      this.userLoggedListen.unsubscribe();\r\n    }\r\n\r\n    if (this.docUtenteListen) {\r\n      this.docUtenteListen.unsubscribe();\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  /** Gestisce il Click del pulsante di footer */\r\n  onClickfooterButton() {\r\n    if (this.userLogged) {\r\n      // Apro lo Storico\r\n      this.openHistory();\r\n    }\r\n    else {\r\n      // Apro il Login\r\n      this.openLogin();\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prenotazione\r\n   * @param location Location Selezionata\r\n   */\r\n  onClickPrenota(location: Location) {\r\n    this.navController.navigateForward(['/', 'location', location.ID, 'booking']);\r\n  }\r\n\r\n  /**\r\n   * Scheda Location\r\n   * @param location Location selezionata\r\n   */\r\n  onClickLocation(location: Location) {\r\n    this.navController.navigateForward(['/', 'location', location.ID]);\r\n  }\r\n\r\n\r\n\r\n  /** Apertura Videata Login */\r\n  async openLogin() {\r\n\r\n    //**Apro in versione moale la NewLogin\r\n    const modal = await this.modalController.create({\r\n      component: NewLoginPage\r\n    });\r\n\r\n    modal.present();\r\n  }\r\n\r\n  /**\r\n   * Apre la pagina di History\r\n   */\r\n  openHistory() {\r\n    this.navController.navigateForward(['/', 'historylist']);\r\n  }\r\n\r\n  /**\r\n   * Visualizza le form per la scelta del centro\r\n   */\r\n  showSceltaCentro(ev: any) {\r\n    //Per ora faccio uguale, vediamo poi se vale la pena \r\n    //cambiare per il desktop\r\n    if (this.startService.isDesktop) {\r\n      this.presentActionSheet();\r\n    }\r\n    else {\r\n      this.presentActionSheet();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /** funzione per mostrare il popup di scelta campo */\r\n  async presentActionSheet() {\r\n    let buttonsArray: any[] = [];\r\n    let singleButton: any;\r\n    //popolo l'array di bottoni con i nomi delle aree operative\r\n    for (const iterator of this.listAree) {\r\n      singleButton = {\r\n        text: iterator.DENOMINAZIONE,\r\n        icon: 'location-outline',\r\n        handler: () => {\r\n          //Chiedo al servizio di cambiare l'Area Selezionata\r\n          this.startService.selectAreaByID(iterator.ID);\r\n        }\r\n      }\r\n\r\n      buttonsArray.push(singleButton);\r\n    }\r\n    const actionSheet = await this.actionSheetController.create\r\n      ({\r\n        header: 'Scegli la Sede',\r\n        buttons: buttonsArray\r\n      });\r\n    await actionSheet.present();\r\n  }\r\n\r\n\r\n  //#region GESTIONE INTERFACCIA\r\n  /** Ritorna il color a seconda dello stato di Login */\r\n  // btnFooterColor() {\r\n\r\n  //   let color = 'primary';\r\n\r\n  //   if (this.userLogged) {\r\n  //     color = 'warning'\r\n  //   }\r\n  //   else {\r\n  //     color = 'primary'\r\n  //   }\r\n\r\n  //   return color;\r\n  // }\r\n\r\n  btnFooterCaption() {\r\n    let retCaption = '';\r\n    const captionAccedi = 'Accedi';\r\n\r\n    retCaption = captionAccedi;\r\n    //Utente Loggato\r\n    if (this.userLogged) {\r\n      // Account Presente\r\n      if (this.docUtente) {\r\n        retCaption = this.docUtente.NOMINATIVO ? this.docUtente.NOMINATIVO : captionAccedi\r\n      }\r\n    }\r\n\r\n    return retCaption;\r\n  }\r\n\r\n  btnFooterIcon() {\r\n    let retIcon = '';\r\n    const iconAccedi = 'log-in-outline';\r\n\r\n    retIcon = iconAccedi;\r\n    //Utente Loggato\r\n    if (this.userLogged) {\r\n      // Account Presente\r\n      if (this.docUtente) {\r\n        retIcon = this.docUtente.NOMINATIVO ? 'person-circle-outline' : iconAccedi\r\n      }\r\n    }\r\n\r\n    return retIcon;\r\n  }\r\n  //#endregion\r\n\r\n  /**\r\n   * Richiede gli impegni dell'utente\r\n   * e successivamente prepara la listButtonImpegni\r\n   */\r\n  updateListImpegni() {\r\n    let reqParam = new RequestParams();\r\n\r\n    reqParam.top = 10;\r\n    reqParam.child_level = 1;\r\n    reqParam.decode.active = true;\r\n    reqParam.orderBy = 'asc';\r\n\r\n    reqParam.decode.foreignFields = Impegno.getReqForeignKeys();\r\n\r\n\r\n    if (this.userLogged) {\r\n\r\n      if (this.docUtente) {\r\n        //Devo richiedere gli impegni\r\n\r\n        //Imposto nel filtro l'Utente\r\n        let filterImpegno = new Impegno(true);\r\n        filterImpegno.IDUTENTE = this.docUtente.ID;\r\n\r\n        filterImpegno.DATAORAINIZIO = new Date();\r\n        //Applico una condizione per la dataorainizio\r\n        filterImpegno.addFilterCondition(OperatorCondition.maggiore, 'DATAORAINIZIO');\r\n\r\n\r\n        this.docStructureService.requestNew(filterImpegno, reqParam)\r\n          .then(listImpegni => {\r\n\r\n            this.myListImpegni = listImpegni;\r\n\r\n            //Reimposto l'area impegni\r\n            this.createButtonCardImpegni();\r\n\r\n          })\r\n          .catch(error => {\r\n            this.myListImpegni = [];\r\n            console.log(error);\r\n          });\r\n      }\r\n      else {\r\n        this.myListImpegni = [];\r\n        //Reimposto l'area impegni\r\n        this.createButtonCardImpegni();\r\n      }\r\n    }\r\n    else {\r\n      this.myListImpegni = [];\r\n      //Reimposto l'area impegni\r\n      this.createButtonCardImpegni();\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  //#region AGENDA\r\n\r\n  /**\r\n   * Passa alla pagina dell'agenda\r\n   */\r\n  onClickShowAgenda() {\r\n    this.navController.navigateForward('/agenda');\r\n  }\r\n\r\n  /**\r\n   * Aggiornamento dell'agenda\r\n   * Utente non loggato, utente Cliente -> NESSUNA AGENDA VISUALIZZATA\r\n   */\r\n  updateAgenda() {\r\n\r\n    let richiediOccupazioni = false;\r\n    let richiediMieiCorsi = false;\r\n\r\n    if (this.selectedArea && this.selectedArea.ID) {\r\n      //Utente Loggato\r\n      if (this.userLogged) {\r\n        // Account Presente\r\n        if (this.docUtente) {\r\n\r\n          if (this.docUtente.RUOLO == Ruolo.admin || this.docUtente.RUOLO == Ruolo.super) {\r\n            richiediOccupazioni = true;\r\n          }\r\n          if (this.docUtente.isTrainer || this.docUtente.isAssistenteTrainer) {\r\n            richiediMieiCorsi = true;\r\n          }\r\n          // else if (this.docUtente.RUOLO == Ruolo.collaboratore ) {\r\n          //   switch(this.docUtente.MANSIONE) {\r\n          //     case Mansione.assistenteTrainer:\r\n          //       richiediMieiCorsi = true;\r\n          //       break;\r\n          //     case Mansione.trainer:\r\n          //       richiediMieiCorsi = true;\r\n          //       break;\r\n          //     case Mansione.custode:\r\n          //       richiediOccupazioni = true;\r\n          //       break;\r\n          //   }\r\n          // }\r\n        }\r\n      }\r\n\r\n      if (richiediMieiCorsi) {\r\n        this.richiediAgendaTrainer();\r\n      }\r\n      else if (richiediOccupazioni) {\r\n        // this.richiediAgendaOccupazione();\r\n      }\r\n      else {\r\n\r\n        //Nascono l'agenda che non serve\r\n        this.showAgenda = false;\r\n\r\n        //Elimino l'agenda\r\n        this.agendaCards = [];\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Richiesta Agenda Occupazioni\r\n   */\r\n  private richiediAgendaOccupazione() {\r\n\r\n    if(this.listLocation && this.listLocation.length > 0){\r\n      let idArea = this.selectedArea.ID;\r\n      // this.showAgenda = true;\r\n\r\n      this.listLocation.forEach(elLocation => {\r\n\r\n        this.startService.requestOccupazioni(idArea, elLocation.ID, 4, undefined, new Date())\r\n          .then(listOccupazioni => {\r\n            elLocation._LISTOCCUPAZIONI = listOccupazioni;\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n    \r\n          });\r\n      })\r\n\r\n    }\r\n\r\n  }\r\n\r\n  private richiediAgendaTrainer() {\r\n    //qui stò richiedendo gli impegni che riguardano l'utente in quanto \"collaboratore\"\r\n    this.startService.requestImpegniTrainer(this.docUtente.ID, new Date())\r\n      .then(result => {\r\n\r\n        this.myListImpegniTrainer = result;\r\n\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  //#endregion\r\n  getButtonCardTrainer(pianificazioneElem?: PianificazioneCorso) {\r\n    if (pianificazioneElem) {\r\n      return ButtonCard.getButtonAgendaFromPianificazioneCorso(pianificazioneElem);\r\n    }\r\n    else {\r\n      let btnCard = new ButtonCard();\r\n\r\n      btnCard.title = 'Nessun corso previsto per oggi';\r\n      btnCard.nameicon = 'school-outline';\r\n      btnCard.sloticon = \"start\";\r\n      btnCard.color = \"primary\";\r\n      btnCard.disabled = true;\r\n\r\n\r\n      return btnCard\r\n    }\r\n  }\r\n\r\n  getButtonEmptyOccupazione(){\r\n    let btnCard = new ButtonCard();\r\n    btnCard.title = 'Nessun evento presente oggi nella struttura';\r\n    btnCard.subtitle = 'controlla domani';\r\n    btnCard.nameicon ='calendar-outline';\r\n    btnCard.sloticon = 'start';\r\n    btnCard.color = 'primary';\r\n    btnCard.disabled = true;\r\n  \r\n\r\n    return btnCard;\r\n  }\r\n\r\n  onClickImpegnoTrainer(pianificazioneElem: PianificazioneCorso) {\r\n    this.navController.navigateForward('/agenda-trainer/' + pianificazioneElem.ID);\r\n  }\r\n\r\n\r\n  /**\r\n   * se viene dato un valore a \"componente\", apre in modale quel componente, altrimenti apre la pagina di test\r\n   */\r\n  onTest() {\r\n\r\n    const componente = undefined;\r\n    const componentProps = undefined;\r\n\r\n    let idArea = this.startService.areaSelectedValue.ID;\r\n\r\n    const path:string = '/agenda-custode/' + idArea;\r\n\r\n\r\n    if (componente) {\r\n      this.modalController.create({\r\n        component: componente,\r\n        componentProps: componentProps\r\n      })\r\n        .then(elModal => {\r\n          elModal.present();\r\n        })\r\n\r\n    }\r\n\r\n    else if (path){\r\n      this.navController.navigateForward(path)\r\n    }\r\n\r\n    else {\r\n      this.navController.navigateForward('/test');\r\n    }\r\n\r\n\r\n  }\r\n\r\n  goToPianificazioneDetail(docOccupazione: OccupazioneCampi){\r\n    if(docOccupazione && docOccupazione.TIPO == SettoreAttivita.settorePrenotazione){\r\n      this.navController.navigateForward(`/agenda-custode/${docOccupazione.ID}`)\r\n    }\r\n    else{\r\n      this.showMessage('Puoi visualizzare solo il dettaglio delle prenotazioni');\r\n    }\r\n  }\r\n\r\n    /**\r\n   * Visualizza un messaggio\r\n   */\r\n  showMessage(messaggio: string){\r\n    this.toastController.create({\r\n      message: messaggio,\r\n      duration: 3000\r\n    })\r\n    .then(elToast => {\r\n      elToast.present();\r\n    })\r\n  }\r\n\r\n\r\n}\r\n"]}