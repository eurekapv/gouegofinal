import { Injectable } from '@angular/core';
import { PaymentConfiguration, PaymentResult, PaymentChannel, EnvironmentPaypal} from '../models/payment.model';
import { PayPal, PayPalPayment, PayPalConfiguration } from '@ionic-native/paypal/ngx';
import { BehaviorSubject } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class PaymentService {

  paymentConfig: PaymentConfiguration = new PaymentConfiguration();
  paymentAmount: string = '0.00';
  currency: string = 'EUR';
  description = 'Acquisto';

  private _paymentResult = new BehaviorSubject<PaymentResult>(new PaymentResult);
  
  get paymentResult() {
    return this._paymentResult.asObservable();
  }

  constructor(private payPal: PayPal) { }


  /**
   * Esegue il pagamento richiesto
   */
  execPayment(paymentMode: PaymentConfiguration, 
              importo: number,
              valuta?: string,
              descrizione?: string) {

  let myPaymentResult = new PaymentResult();
  this.description = (descrizione ? descrizione:'Acquisto');
  this.currency = (valuta ? valuta:'EUR');
  this.paymentAmount = importo.toLocaleString('en-us', {minimumFractionDigits: 2});
  
  //Azzero il result del pagamento
  this._paymentResult.next(new PaymentResult);

  
  switch (paymentMode.channel) {
    case PaymentChannel.paypal:
      this.payWithPaypal();
      break;
  
    default:
      //Segnalo un errore
      myPaymentResult.paymentExecuted = true;
      myPaymentResult.result = false;
      myPaymentResult.message = 'Metodo di pagamento non supportato';
      myPaymentResult.responseJson = '';
      this._paymentResult.next(myPaymentResult);
      break;
  }


  }

  /**
   * Pagamento tramite paypal
   */
  private payWithPaypal() {
    console.log('Errore qui');
    let paypalConfig = this.paymentConfig.configPayPal;
    let myPaymentResult = new PaymentResult();

    this.payPal.init({
      PayPalEnvironmentProduction: paypalConfig.clientIDProduction,
      PayPalEnvironmentSandbox: paypalConfig.clientIDSandbox
    }).then(() => {
      let ambienteToRender = '';

      switch (paypalConfig.enviroment) {
        case EnvironmentPaypal.sandbox:
          ambienteToRender = 'PayPalEnvironmentSandbox';
          break;

        case EnvironmentPaypal.sandbox:
          ambienteToRender = 'PayPalEnvironmentProduction';
          break;
      
        default:
          ambienteToRender = 'PayPalEnvironmentSandbox';
          break;
      }

      // Environments: PayPalEnvironmentNoNetwork, PayPalEnvironmentSandbox, PayPalEnvironmentProduction
      this.payPal.prepareToRender(ambienteToRender, new PayPalConfiguration({
        // Only needed if you get an "Internal Service Error" after PayPal login!
        //payPalShippingAddressOption: 2 // PayPalShippingAddressOptionPayPal
      })).then(() => {
        let payment = new PayPalPayment(this.paymentAmount, this.currency, this.description, 'sale');
        this.payPal.renderSinglePaymentUI(payment)

        .then((res) => {
          myPaymentResult.paymentExecuted = true;
          myPaymentResult.result = true;
          myPaymentResult.message = '';
          myPaymentResult.responseJson = res;
          this._paymentResult.next(myPaymentResult);
          
          // Successfully paid

          // Example sandbox response
          //
          // {
          //   "client": {
          //     "environment": "sandbox",
          //     "product_name": "PayPal iOS SDK",
          //     "paypal_sdk_version": "2.16.0",
          //     "platform": "iOS"
          //   },
          //   "response_type": "payment",
          //   "response": {
          //     "id": "PAY-1AB23456CD789012EF34GHIJ",
          //     "state": "approved",
          //     "create_time": "2016-10-03T13:33:33Z",
          //     "intent": "sale"
          //   }
          // }
                   

        }, () => {
          // Error or render dialog closed without being successful
          myPaymentResult.paymentExecuted = true;
          myPaymentResult.result = false;
          myPaymentResult.message = 'Che peccato! Chiusura inaspettata';
          myPaymentResult.responseJson = '';
          this._paymentResult.next(myPaymentResult);

        });
      }, () => {
          myPaymentResult.paymentExecuted = true;
          myPaymentResult.result = false;
          myPaymentResult.message = 'Che peccato! Configurazione errata';
          myPaymentResult.responseJson = '';
          this._paymentResult.next(myPaymentResult);
      });
    }, () => {
          // Error in initialization, maybe PayPal isn't supported or something else
          myPaymentResult.paymentExecuted = true;
          myPaymentResult.result = false;
          myPaymentResult.message =  'Che peccato! Non funziona';
          myPaymentResult.responseJson = '';
          this._paymentResult.next(myPaymentResult);          
    });
  }
}


